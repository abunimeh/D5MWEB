
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>// UVM_SEQUENCE : RGB_SEQUENCER [RGB]</q-m>
<a name="2"><q-n>     2  </q-n></a><q-w>class</q-w> rgb_sequencer#(<q-w>parameter</q-w> set_config cfg = par_1) <q-w>extends</q-w> uvm_sequencer#(rgb_transaction#(cfg));
<a name="3"><q-n>     3  </q-n></a>    `uvm_component_param_utils(rgb_sequencer#(cfg))
<a name="4"><q-n>     4  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name, uvm_component parent);
<a name="5"><q-n>     5  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="6"><q-n>     6  </q-n></a>    <q-w>endfunction</q-w>
<a name="7"><q-n>     7  </q-n></a><q-w>endclass</q-w>: rgb_sequencer
<a name="8"><q-n>     8  </q-n></a>
<a name="9"><q-n>     9  </q-n></a><q-m>// UVM_SEQUENCE : RGB_RANDOM_SEQUENCE [RGB]</q-m>
<a name="10"><q-n>     10  </q-n></a><q-w>class</q-w> rgb_random_sequence#(<q-w>parameter</q-w> set_config cfg = par_1) <q-w>extends</q-w> uvm_sequence#(rgb_transaction#(cfg));
<a name="11"><q-n>     11  </q-n></a>    `uvm_object_param_utils(rgb_random_sequence#(cfg));
<a name="12"><q-n>     12  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"rgb_random_sequence"</q-l>);
<a name="13"><q-n>     13  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="14"><q-n>     14  </q-n></a>    <q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="15"><q-n>     15  </q-n></a>    <q-w>task</q-w> body();
<a name="16"><q-n>     16  </q-n></a>    rgb_transaction#(cfg) frame_tx = rgb_transaction#(cfg)::type_id::create(<q-l>"frame_tx"</q-l>);
<a name="17"><q-n>     17  </q-n></a>        <q-w>repeat</q-w> (1000) <q-w>begin</q-w> : random_loop
<a name="18"><q-n>     18  </q-n></a>            start_item(frame_tx);
<a name="19"><q-n>     19  </q-n></a>            <q-w>assert</q-w>(frame_tx.randomize());
<a name="20"><q-n>     20  </q-n></a>            finish_item(frame_tx);
<a name="21"><q-n>     21  </q-n></a>        <q-w>end</q-w> : random_loop
<a name="22"><q-n>     22  </q-n></a>    <q-w>endtask</q-w> : body
<a name="23"><q-n>     23  </q-n></a><q-w>endclass</q-w>: rgb_random_sequence
<a name="24"><q-n>     24  </q-n></a>
<a name="25"><q-n>     25  </q-n></a><q-m>// UVM_SEQUENCE : RANDOM_SEQUENCE_R1 [RGB]</q-m>
<a name="26"><q-n>     26  </q-n></a><q-w>class</q-w> random_sequence_r1#(<q-w>parameter</q-w> set_config cfg = par_1) <q-w>extends</q-w> uvm_sequence#(rgb_transaction#(cfg));
<a name="27"><q-n>     27  </q-n></a>    `uvm_object_param_utils(random_sequence_r1#(cfg));
<a name="28"><q-n>     28  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"random_sequence_r1"</q-l>);
<a name="29"><q-n>     29  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="30"><q-n>     30  </q-n></a>    <q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="31"><q-n>     31  </q-n></a>    <q-w>task</q-w> body();
<a name="32"><q-n>     32  </q-n></a>    rgb_transaction#(cfg) frame_tx = rgb_transaction#(cfg)::type_id::create(<q-l>"frame_tx"</q-l>);
<a name="33"><q-n>     33  </q-n></a>    `uvm_info(<q-l>"random_sequence_r1"</q-l>, <q-l>"executing..."</q-l>, UVM_LOW)
<a name="34"><q-n>     34  </q-n></a>        <q-w>repeat</q-w> (10000) <q-w>begin</q-w> : random_loop
<a name="35"><q-n>     35  </q-n></a>            start_item(frame_tx);
<a name="36"><q-n>     36  </q-n></a>            <q-w>assert</q-w>(frame_tx.randomize());
<a name="37"><q-n>     37  </q-n></a>            finish_item(frame_tx);
<a name="38"><q-n>     38  </q-n></a>        <q-w>end</q-w> : random_loop
<a name="39"><q-n>     39  </q-n></a>    <q-w>endtask</q-w> : body
<a name="40"><q-n>     40  </q-n></a><q-w>endclass</q-w>: random_sequence_r1
<a name="41"><q-n>     41  </q-n></a>
<a name="42"><q-n>     42  </q-n></a><q-m>// UVM_SEQUENCE : RANDOM_SEQUENCE_R2 [RGB]</q-m>
<a name="43"><q-n>     43  </q-n></a><q-w>class</q-w> random_sequence_r2 <q-w>extends</q-w> random_sequence_r1;
<a name="44"><q-n>     44  </q-n></a>    `uvm_object_utils(random_sequence_r2);
<a name="45"><q-n>     45  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"random_sequence_r2"</q-l>);
<a name="46"><q-n>     46  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="47"><q-n>     47  </q-n></a>    <q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="48"><q-n>     48  </q-n></a>    <q-w>task</q-w> body();
<a name="49"><q-n>     49  </q-n></a>    rgb_transaction#(cfg) frame_tx = rgb_transaction#(cfg)::type_id::create(<q-l>"frame_tx"</q-l>);
<a name="50"><q-n>     50  </q-n></a>    `uvm_info(<q-l>"random_sequence_r2"</q-l>, <q-l>"executing..."</q-l>, UVM_LOW)
<a name="51"><q-n>     51  </q-n></a>        <q-w>repeat</q-w> (1) <q-w>begin</q-w> : random_loop
<a name="52"><q-n>     52  </q-n></a>            start_item(frame_tx);
<a name="53"><q-n>     53  </q-n></a>            <q-w>assert</q-w>(frame_tx.randomize());
<a name="54"><q-n>     54  </q-n></a>            finish_item(frame_tx);
<a name="55"><q-n>     55  </q-n></a>        <q-w>end</q-w> : random_loop
<a name="56"><q-n>     56  </q-n></a>    <q-w>endtask</q-w> : body
<a name="57"><q-n>     57  </q-n></a><q-w>endclass</q-w>: random_sequence_r2
<a name="58"><q-n>     58  </q-n></a>
<a name="59"><q-n>     59  </q-n></a><q-m>// UVM_SEQUENCE : TOP_SEQUENCE [RGB]</q-m>
<a name="60"><q-n>     60  </q-n></a><q-w>class</q-w> top_sequence <q-w>extends</q-w> uvm_sequence #(rgb_transaction);
<a name="61"><q-n>     61  </q-n></a>    `uvm_object_utils(top_sequence)
<a name="62"><q-n>     62  </q-n></a>    `uvm_declare_p_sequencer(rgb_sequencer)
<a name="63"><q-n>     63  </q-n></a>
<a name="64"><q-n>     64  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="65"><q-n>     65  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="66"><q-n>     66  </q-n></a>    <q-w>endfunction</q-w>
<a name="67"><q-n>     67  </q-n></a>
<a name="68"><q-n>     68  </q-n></a>    <q-w>task</q-w> body;
<a name="69"><q-n>     69  </q-n></a>
<a name="70"><q-n>     70  </q-n></a>        rgb_configuration cfg;
<a name="71"><q-n>     71  </q-n></a>        <q-w>int</q-w> count;
<a name="72"><q-n>     72  </q-n></a>
<a name="73"><q-n>     73  </q-n></a>        <q-w>if</q-w> ( uvm_config_db #(rgb_configuration)::get(p_sequencer, <q-l>""</q-l>, <q-l>"config"</q-l>, cfg) ) <q-w>begin</q-w>
<a name="74"><q-n>     74  </q-n></a>            count    = cfg.count;
<a name="75"><q-n>     75  </q-n></a>        <q-w>end</q-w> <q-w>else</q-w> <q-w>begin</q-w>
<a name="76"><q-n>     76  </q-n></a>            count    = 1;
<a name="77"><q-n>     77  </q-n></a>        <q-w>end</q-w>
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a>        <q-w>if</q-w> (starting_phase != <q-w>null</q-w>)
<a name="80"><q-n>     80  </q-n></a>            starting_phase.raise_objection(<q-w>this</q-w>);
<a name="81"><q-n>     81  </q-n></a>
<a name="82"><q-n>     82  </q-n></a>        <q-w>repeat</q-w>(count) <q-w>begin</q-w>
<a name="83"><q-n>     83  </q-n></a>            random_sequence_r1#(par_1) seq;
<a name="84"><q-n>     84  </q-n></a>            seq = random_sequence_r1#(par_1)::type_id::create(<q-l>"seq"</q-l>);
<a name="85"><q-n>     85  </q-n></a>            seq.start(p_sequencer, <q-w>this</q-w>);
<a name="86"><q-n>     86  </q-n></a>        <q-w>end</q-w>
<a name="87"><q-n>     87  </q-n></a>
<a name="88"><q-n>     88  </q-n></a>        <q-w>if</q-w> (starting_phase != <q-w>null</q-w>)
<a name="89"><q-n>     89  </q-n></a>            starting_phase.drop_objection(<q-w>this</q-w>);
<a name="90"><q-n>     90  </q-n></a>
<a name="91"><q-n>     91  </q-n></a>
<a name="92"><q-n>     92  </q-n></a>    <q-w>endtask</q-w>: body
<a name="93"><q-n>     93  </q-n></a><q-w>endclass</q-w>: top_sequence</pre>
</tt>

  
</body>
</html>
