
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>-------------------------------------------------------------------------------</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>-- RGB to YCbCr Conversion</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>--</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>-- FILE: rgb_ycbcr.vhd</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>-- AUTHOR: Wade Fife</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>-- DATE: June 9, 2006</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>-- MODIFIED: June 23, 2006</q-m>
<a name="8"><q-n>     8  </q-n></a><q-m>--</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m>--</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m>-- DESCRIPTION</q-m>
<a name="11"><q-n>     11  </q-n></a><q-m>--</q-m>
<a name="12"><q-n>     12  </q-n></a><q-m>-- Converts RGB pixels to YCbCr. Data is written to the core by asserting iRed, iGreen,</q-m>
<a name="13"><q-n>     13  </q-n></a><q-m>-- and iRgb.blue with the RGB pixel data and holding iRgb.valid high for one clock</q-m>
<a name="14"><q-n>     14  </q-n></a><q-m>-- cycle. After conversion, the YCbCr data is asserted on the y, cb, and cr</q-m>
<a name="15"><q-n>     15  </q-n></a><q-m>-- outputs and oValid is held high for one clock cycle. No flow control is</q-m>
<a name="16"><q-n>     16  </q-n></a><q-m>-- supported. You can adjust the pixel input/output width by changing the</q-m>
<a name="17"><q-n>     17  </q-n></a><q-m>-- i_data_width generic. The precision of the fixed point computation can be</q-m>
<a name="18"><q-n>     18  </q-n></a><q-m>-- adjusted by changing the i_precision generic. Up to 32-bit precision is</q-m>
<a name="19"><q-n>     19  </q-n></a><q-m>-- supported, but high precision comes at a great cost.</q-m>
<a name="20"><q-n>     20  </q-n></a><q-m>--</q-m>
<a name="21"><q-n>     21  </q-n></a><q-m>-- The arithmetic for the conversion is taken from Keith Jack's book, Video</q-m>
<a name="22"><q-n>     22  </q-n></a><q-m>-- Demystified, 4th Edition. The equations (assuming gamma corrected, 8-bit,</q-m>
<a name="23"><q-n>     23  </q-n></a><q-m>-- RGB values) are as follows. For inputs in the range 0-255:</q-m>
<a name="24"><q-n>     24  </q-n></a><q-m>--</q-m>
<a name="25"><q-n>     25  </q-n></a><q-m>--     Y =  0.257R + 0.504G + 0.098B + 16</q-m>
<a name="26"><q-n>     26  </q-n></a><q-m>--    Cb = -0.148R - 0.291G + 0.439B + 128</q-m>
<a name="27"><q-n>     27  </q-n></a><q-m>--    Cr =  0.439R - 0.368G - 0.071B + 128</q-m>
<a name="28"><q-n>     28  </q-n></a><q-m>--</q-m>
<a name="29"><q-n>     29  </q-n></a><q-m>-- For inputs in the range 16-235:</q-m>
<a name="30"><q-n>     30  </q-n></a><q-m>--</q-m>
<a name="31"><q-n>     31  </q-n></a><q-m>--     Y  =  0.299R + 0.587G + 0.114B</q-m>
<a name="32"><q-n>     32  </q-n></a><q-m>--     Cb = -0.172R - 0.339G + 0.511B + 128</q-m>
<a name="33"><q-n>     33  </q-n></a><q-m>--     Cr =  0.511R - 0.428G - 0.083B + 128</q-m>
<a name="34"><q-n>     34  </q-n></a><q-m>--</q-m>
<a name="35"><q-n>     35  </q-n></a><q-m>-- These equations need to be slightly modified for a general, n-bit pixel</q-m>
<a name="36"><q-n>     36  </q-n></a><q-m>-- components. In the general case 128 should be replaced with 2^(n-1) and 16</q-m>
<a name="37"><q-n>     37  </q-n></a><q-m>-- with 2^(n-4).  The coefficients above are rounded to the nearest 3</q-m>
<a name="38"><q-n>     38  </q-n></a><q-m>-- significant digits, but the actual constants used in the VHDL below may be</q-m>
<a name="39"><q-n>     39  </q-n></a><q-m>-- more precise.</q-m>
<a name="40"><q-n>     40  </q-n></a><q-m>--</q-m>
<a name="41"><q-n>     41  </q-n></a><q-m>-- In general, the code refers the the constant coefficients as follows:</q-m>
<a name="42"><q-n>     42  </q-n></a><q-m>--</q-m>
<a name="43"><q-n>     43  </q-n></a><q-m>--     Y  =  C_Y_R*R +  C_Y_G*G +  C_Y_B*B + C_I_16</q-m>
<a name="44"><q-n>     44  </q-n></a><q-m>--     Cb = C_CB_R*R + C_CB_G*G + C_CB_B*B + C_I_128</q-m>
<a name="45"><q-n>     45  </q-n></a><q-m>--     Cr = C_CR_R*R + C_CR_G*G + C_CR_G*B + C_I_128</q-m>
<a name="46"><q-n>     46  </q-n></a><q-m>--</q-m>
<a name="47"><q-n>     47  </q-n></a><q-m>-- After the multiplication, the equations are referred to as follows:</q-m>
<a name="48"><q-n>     48  </q-n></a><q-m>--</q-m>
<a name="49"><q-n>     49  </q-n></a><q-m>--     Y  =  y_r  + y_g  + y_b  + C_I_16</q-m>
<a name="50"><q-n>     50  </q-n></a><q-m>--     Cb = -cb_r - cb_g + cb_b + C_I_128</q-m>
<a name="51"><q-n>     51  </q-n></a><q-m>--     Cr =  cr_r - cr_g - cr_b + C_I_128</q-m>
<a name="52"><q-n>     52  </q-n></a><q-m>--</q-m>
<a name="53"><q-n>     53  </q-n></a><q-m>-- The constant C_I_16 will be 0 when the core is configured for the input</q-m>
<a name="54"><q-n>     54  </q-n></a><q-m>-- range 16-235.</q-m>
<a name="55"><q-n>     55  </q-n></a><q-m>--</q-m>
<a name="56"><q-n>     56  </q-n></a><q-m>--</q-m>
<a name="57"><q-n>     57  </q-n></a><q-m>-- INPUT RANGE</q-m>
<a name="58"><q-n>     58  </q-n></a><q-m>--</q-m>
<a name="59"><q-n>     59  </q-n></a><q-m>-- In video systems, the full range 0-255 is often not used for pixel values,</q-m>
<a name="60"><q-n>     60  </q-n></a><q-m>-- and instead the range 16-235 is used. If the RGB input pixel values have</q-m>
<a name="61"><q-n>     61  </q-n></a><q-m>-- range 0-255 then i_full_range should be set to TRUE. If they have range</q-m>
<a name="62"><q-n>     62  </q-n></a><q-m>-- 16-235 then i_full_range should be FALSE.</q-m>
<a name="63"><q-n>     63  </q-n></a><q-m>--</q-m>
<a name="64"><q-n>     64  </q-n></a><q-m>--</q-m>
<a name="65"><q-n>     65  </q-n></a><q-m>-- PRECISION</q-m>
<a name="66"><q-n>     66  </q-n></a><q-m>--</q-m>
<a name="67"><q-n>     67  </q-n></a><q-m>-- You can set i_data_width to indicate the input pixel width (e.iGreen., 8 for 8</q-m>
<a name="68"><q-n>     68  </q-n></a><q-m>-- bits per pixel) and i_precision to indicate the precision to be used in the</q-m>
<a name="69"><q-n>     69  </q-n></a><q-m>-- arithmetic computation. For simplicity, rounding is only performed at the</q-m>
<a name="70"><q-n>     70  </q-n></a><q-m>-- end of computation, which generally provides very good results.</q-m>
<a name="71"><q-n>     71  </q-n></a><q-m>--</q-m>
<a name="72"><q-n>     72  </q-n></a><q-m>-- In a bit-accurate software version I found that rounding intermediate</q-m>
<a name="73"><q-n>     73  </q-n></a><q-m>-- results (e.iGreen., after the multiplication) had only a very small effect on the</q-m>
<a name="74"><q-n>     74  </q-n></a><q-m>-- final result. Assuming a i_data_width of 8, I found that a i_precision of 12</q-m>
<a name="75"><q-n>     75  </q-n></a><q-m>-- will cause the resulting output values to be inexact about 6% of the time. A</q-m>
<a name="76"><q-n>     76  </q-n></a><q-m>-- i_precision of 14 gives inexact results about 1.5% of the time. A</q-m>
<a name="77"><q-n>     77  </q-n></a><q-m>-- i_precision of 16 gives inexact results about 0.4% of the time. Resulting</q-m>
<a name="78"><q-n>     78  </q-n></a><q-m>-- pixel values are never off by more than 1 in any of these examples.</q-m>
<a name="79"><q-n>     79  </q-n></a><q-m>-------------------------------------------------------------------------------</q-m>
<a name="80"><q-n>     80  </q-n></a><q-m>--02092019 [02-09-2019]</q-m>
<a name="81"><q-n>     81  </q-n></a><q-w>library</q-w> ieee;
<a name="82"><q-n>     82  </q-n></a><q-w>use</q-w> ieee.std_logic_1164.<q-w>all</q-w>;
<a name="83"><q-n>     83  </q-n></a><q-w>use</q-w> ieee.numeric_std.<q-w>all</q-w>;
<a name="84"><q-n>     84  </q-n></a><q-w>use</q-w> work.constantspackage.<q-w>all</q-w>;
<a name="85"><q-n>     85  </q-n></a><q-w>use</q-w> work.vpfRecords.<q-w>all</q-w>;
<a name="86"><q-n>     86  </q-n></a><q-w>use</q-w> work.portspackage.<q-w>all</q-w>;
<a name="87"><q-n>     87  </q-n></a><q-w>entity</q-w> rgb_ycbcr <q-w>is</q-w>
<a name="88"><q-n>     88  </q-n></a>  <q-w>generic</q-w> (
<a name="89"><q-n>     89  </q-n></a>    i_data_width    : <q-t>integer</q-w> := 8;      <q-m>-- Should be &lt; 18 for best results</q-m>
<a name="90"><q-n>     90  </q-n></a>    i_precision     : <q-t>integer</q-w> := 12;     <q-m>-- Should be &lt; 18 for best results</q-m>
<a name="91"><q-n>     91  </q-n></a>    i_full_range    : <q-t>boolean</q-w> := FALSE);  <q-m>-- RGB input from 0-255 (true)</q-m>
<a name="92"><q-n>     92  </q-n></a>  <q-w>port</q-w> (
<a name="93"><q-n>     93  </q-n></a>    clk       : <q-a>in</q-w>  <q-t>std_logic</q-w>;
<a name="94"><q-n>     94  </q-n></a>    rst_l     : <q-a>in</q-w>  <q-t>std_logic</q-w>;
<a name="95"><q-n>     95  </q-n></a>    iRgb      : <q-a>in</q-w> channel;
<a name="96"><q-n>     96  </q-n></a>    y         : <q-a>out</q-w> <q-t>std_logic_vector</q-w>(i_data_width-1 <q-w>downto</q-w> 0);
<a name="97"><q-n>     97  </q-n></a>    cb        : <q-a>out</q-w> <q-t>std_logic_vector</q-w>(i_data_width-1 <q-w>downto</q-w> 0);
<a name="98"><q-n>     98  </q-n></a>    cr        : <q-a>out</q-w> <q-t>std_logic_vector</q-w>(i_data_width-1 <q-w>downto</q-w> 0);
<a name="99"><q-n>     99  </q-n></a>    oValid    : <q-a>out</q-w> <q-t>std_logic</q-w>);
<a name="100"><q-n>     100  </q-n></a><q-w>end</q-w> rgb_ycbcr;
<a name="101"><q-n>     101  </q-n></a><q-w>architecture</q-w> imp <q-w>of</q-w> rgb_ycbcr <q-w>is</q-w>
<a name="102"><q-n>     102  </q-n></a>  <q-w>constant</q-w> C_1_PRE : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0) := to_unsigned(1, i_precision);
<a name="103"><q-n>     103  </q-n></a>  <q-m>-- Coefficients as 0.32 format 32-bit fixeds point numbers</q-m>
<a name="104"><q-n>     104  </q-n></a>  <q-m>-- Each is computed as C*(2^32)+0.5, then rounded down.</q-m>
<a name="105"><q-n>     105  </q-n></a>  <q-w>signal</q-w> C_I32_Y_R : <q-t>unsigned</q-w>(31 <q-w>downto</q-w> 0);
<a name="106"><q-n>     106  </q-n></a>  <q-w>signal</q-w> C_I32_Y_G : <q-t>unsigned</q-w>(31 <q-w>downto</q-w> 0);
<a name="107"><q-n>     107  </q-n></a>  <q-w>signal</q-w> C_I32_Y_B : <q-t>unsigned</q-w>(31 <q-w>downto</q-w> 0);
<a name="108"><q-n>     108  </q-n></a>  <q-w>signal</q-w> C_I32_CB_R : <q-t>unsigned</q-w>(31 <q-w>downto</q-w> 0);
<a name="109"><q-n>     109  </q-n></a>  <q-w>signal</q-w> C_I32_CB_G : <q-t>unsigned</q-w>(31 <q-w>downto</q-w> 0);
<a name="110"><q-n>     110  </q-n></a>  <q-w>signal</q-w> C_I32_CB_B : <q-t>unsigned</q-w>(31 <q-w>downto</q-w> 0);
<a name="111"><q-n>     111  </q-n></a>  <q-w>signal</q-w> C_I32_CR_R : <q-t>unsigned</q-w>(31 <q-w>downto</q-w> 0);
<a name="112"><q-n>     112  </q-n></a>  <q-w>signal</q-w> C_I32_CR_G : <q-t>unsigned</q-w>(31 <q-w>downto</q-w> 0);
<a name="113"><q-n>     113  </q-n></a>  <q-w>signal</q-w> C_I32_CR_B : <q-t>unsigned</q-w>(31 <q-w>downto</q-w> 0);
<a name="114"><q-n>     114  </q-n></a>  <q-m>-- Coefficients in desired precision</q-m>
<a name="115"><q-n>     115  </q-n></a>  <q-w>signal</q-w> C_I_Y_R : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="116"><q-n>     116  </q-n></a>  <q-w>signal</q-w> C_I_Y_G : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="117"><q-n>     117  </q-n></a>  <q-w>signal</q-w> C_I_Y_B : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="118"><q-n>     118  </q-n></a>  <q-w>signal</q-w> C_I_CB_R : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="119"><q-n>     119  </q-n></a>  <q-w>signal</q-w> C_I_CB_G : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="120"><q-n>     120  </q-n></a>  <q-w>signal</q-w> C_I_CB_B : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="121"><q-n>     121  </q-n></a>  <q-w>signal</q-w> C_I_CR_R : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="122"><q-n>     122  </q-n></a>  <q-w>signal</q-w> C_I_CR_G : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="123"><q-n>     123  </q-n></a>  <q-w>signal</q-w> C_I_CR_B : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="124"><q-n>     124  </q-n></a>  <q-w>signal</q-w> C_I_128 : <q-t>unsigned</q-w>(i_data_width-1 <q-w>downto</q-w> 0);
<a name="125"><q-n>     125  </q-n></a>  <q-w>signal</q-w> C_I_16  : <q-t>unsigned</q-w>(i_data_width-1 <q-w>downto</q-w> 0);
<a name="126"><q-n>     126  </q-n></a>  <q-m>-- Stage 0 signals</q-m>
<a name="127"><q-n>     127  </q-n></a>  <q-w>signal</q-w> r_0 : <q-t>unsigned</q-w>(i_data_width-1 <q-w>downto</q-w> 0);
<a name="128"><q-n>     128  </q-n></a>  <q-w>signal</q-w> g_0 : <q-t>unsigned</q-w>(i_data_width-1 <q-w>downto</q-w> 0);
<a name="129"><q-n>     129  </q-n></a>  <q-w>signal</q-w> b_0 : <q-t>unsigned</q-w>(i_data_width-1 <q-w>downto</q-w> 0);
<a name="130"><q-n>     130  </q-n></a>  <q-w>signal</q-w> en_0 : <q-t>std_logic</q-w>;
<a name="131"><q-n>     131  </q-n></a>  <q-m>-- Stage 1 signals</q-m>
<a name="132"><q-n>     132  </q-n></a>  <q-w>signal</q-w> y_r, y_g, y_b    : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="133"><q-n>     133  </q-n></a>  <q-w>signal</q-w> cb_r, cb_g, cb_b : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="134"><q-n>     134  </q-n></a>  <q-w>signal</q-w> cr_r, cr_g, cr_b : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="135"><q-n>     135  </q-n></a>  <q-w>signal</q-w> en_1 : <q-t>std_logic</q-w>;
<a name="136"><q-n>     136  </q-n></a>  <q-m>-- Stage 2 signals</q-m>
<a name="137"><q-n>     137  </q-n></a>  <q-w>signal</q-w> y_2, cb_2, cr_2 : <q-t>unsigned</q-w>(i_data_width <q-w>downto</q-w> 0);
<a name="138"><q-n>     138  </q-n></a>  <q-w>signal</q-w> en_2 : <q-t>std_logic</q-w>;
<a name="139"><q-n>     139  </q-n></a>  <q-m>-- Stage 3 signals</q-m>
<a name="140"><q-n>     140  </q-n></a>  <q-w>signal</q-w> y_3, cb_3, cr_3 : <q-t>unsigned</q-w>(i_data_width-1 <q-w>downto</q-w> 0);
<a name="141"><q-n>     141  </q-n></a>  <q-w>signal</q-w> en_3 : <q-t>std_logic</q-w>;
<a name="142"><q-n>     142  </q-n></a><q-w>begin</q-w>
<a name="143"><q-n>     143  </q-n></a>  <q-m>-- Assign constants based on current mode (full range or not)</q-m>
<a name="144"><q-n>     144  </q-n></a>  GEN_FULL_RANGE_CONSTANTS_T: <q-w>if</q-w> i_full_range <q-w>generate</q-w>
<a name="145"><q-n>     145  </q-n></a>    C_I32_Y_R  &lt;= x<q-l>"41bcec85"</q-l>;
<a name="146"><q-n>     146  </q-n></a>    C_I32_Y_G  &lt;= x<q-l>"810e9920"</q-l>;
<a name="147"><q-n>     147  </q-n></a>    C_I32_Y_B  &lt;= x<q-l>"19105e1c"</q-l>;
<a name="148"><q-n>     148  </q-n></a>    C_I32_CB_R &lt;= x<q-l>"25f1f14a"</q-l>;
<a name="149"><q-n>     149  </q-n></a>    C_I32_CB_G &lt;= x<q-l>"4a7e73a3"</q-l>;
<a name="150"><q-n>     150  </q-n></a>    C_I32_CB_B &lt;= x<q-l>"707064ed"</q-l>;
<a name="151"><q-n>     151  </q-n></a>    C_I32_CR_R &lt;= x<q-l>"707064ed"</q-l>;
<a name="152"><q-n>     152  </q-n></a>    C_I32_CR_G &lt;= x<q-l>"5e276b7f"</q-l>;
<a name="153"><q-n>     153  </q-n></a>    C_I32_CR_B &lt;= x<q-l>"1248f96e"</q-l>;
<a name="154"><q-n>     154  </q-n></a>    C_I_16 &lt;= shift_left(to_unsigned(1,i_data_width), i_data_width-4);
<a name="155"><q-n>     155  </q-n></a>  <q-w>end</q-w> <q-w>generate</q-w>;
<a name="156"><q-n>     156  </q-n></a>  GEN_FULL_RANGE_CONSTANTS_F: <q-w>if</q-w> <q-w>not</q-w> i_full_range <q-w>generate</q-w>
<a name="157"><q-n>     157  </q-n></a>    C_I32_Y_R  &lt;= x<q-l>"4c8b4396"</q-l>;
<a name="158"><q-n>     158  </q-n></a>    C_I32_Y_G  &lt;= x<q-l>"9645a1cb"</q-l>;
<a name="159"><q-n>     159  </q-n></a>    C_I32_Y_B  &lt;= x<q-l>"1d2f1aa0"</q-l>;
<a name="160"><q-n>     160  </q-n></a>    C_I32_CB_R &lt;= x<q-l>"2c2e989a"</q-l>;
<a name="161"><q-n>     161  </q-n></a>    C_I32_CB_G &lt;= x<q-l>"56bd6e8b"</q-l>; 
<a name="162"><q-n>     162  </q-n></a>    C_I32_CB_B &lt;= x<q-l>"82ec0725"</q-l>;
<a name="163"><q-n>     163  </q-n></a>    C_I32_CR_R &lt;= x<q-l>"82ec0725"</q-l>;
<a name="164"><q-n>     164  </q-n></a>    C_I32_CR_G &lt;= x<q-l>"6da187a5"</q-l>;
<a name="165"><q-n>     165  </q-n></a>    C_I32_CR_B &lt;= x<q-l>"154a7f80"</q-l>;
<a name="166"><q-n>     166  </q-n></a>    C_I_16 &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="167"><q-n>     167  </q-n></a>  <q-w>end</q-w> <q-w>generate</q-w>;
<a name="168"><q-n>     168  </q-n></a>  <q-m>-- Compute coefficients constants in desired precsion, with a bit of rounding</q-m>
<a name="169"><q-n>     169  </q-n></a>  C_I_Y_R &lt;= C_I32_Y_R(31 <q-w>downto</q-w> 31-i_precision+1)
<a name="170"><q-n>     170  </q-n></a>             <q-w>when</q-w> C_I32_Y_R(31-i_precision) = '0'
<a name="171"><q-n>     171  </q-n></a>             <q-w>else</q-w> C_I32_Y_R(31 <q-w>downto</q-w> 31-i_precision+1) + C_1_PRE;
<a name="172"><q-n>     172  </q-n></a>  C_I_Y_G &lt;= C_I32_Y_G(31 <q-w>downto</q-w> 31-i_precision+1)
<a name="173"><q-n>     173  </q-n></a>             <q-w>when</q-w> C_I32_Y_G(31-i_precision) = '0'
<a name="174"><q-n>     174  </q-n></a>             <q-w>else</q-w> C_I32_Y_G(31 <q-w>downto</q-w> 31-i_precision+1) + C_1_PRE;
<a name="175"><q-n>     175  </q-n></a>  C_I_Y_B &lt;= C_I32_Y_B(31 <q-w>downto</q-w> 31-i_precision+1)
<a name="176"><q-n>     176  </q-n></a>             <q-w>when</q-w> C_I32_Y_B(31-i_precision) = '0'
<a name="177"><q-n>     177  </q-n></a>             <q-w>else</q-w> C_I32_Y_B(31 <q-w>downto</q-w> 31-i_precision+1) + C_1_PRE;
<a name="178"><q-n>     178  </q-n></a>  C_I_CB_R &lt;= C_I32_CB_R(31 <q-w>downto</q-w> 31-i_precision+1)
<a name="179"><q-n>     179  </q-n></a>             <q-w>when</q-w> C_I32_CB_R(31-i_precision) = '0'
<a name="180"><q-n>     180  </q-n></a>             <q-w>else</q-w> C_I32_CB_R(31 <q-w>downto</q-w> 31-i_precision+1) + C_1_PRE;
<a name="181"><q-n>     181  </q-n></a>  C_I_CB_G &lt;= C_I32_CB_G(31 <q-w>downto</q-w> 31-i_precision+1)
<a name="182"><q-n>     182  </q-n></a>             <q-w>when</q-w> C_I32_CB_G(31-i_precision) = '0'
<a name="183"><q-n>     183  </q-n></a>             <q-w>else</q-w> C_I32_CB_G(31 <q-w>downto</q-w> 31-i_precision+1) + C_1_PRE;
<a name="184"><q-n>     184  </q-n></a>  C_I_CB_B &lt;= C_I32_CB_B(31 <q-w>downto</q-w> 31-i_precision+1)
<a name="185"><q-n>     185  </q-n></a>             <q-w>when</q-w> C_I32_CB_B(31-i_precision) = '0'
<a name="186"><q-n>     186  </q-n></a>             <q-w>else</q-w> C_I32_CB_B(31 <q-w>downto</q-w> 31-i_precision+1) + C_1_PRE;
<a name="187"><q-n>     187  </q-n></a>  C_I_CR_R &lt;= C_I32_CR_R(31 <q-w>downto</q-w> 31-i_precision+1)
<a name="188"><q-n>     188  </q-n></a>             <q-w>when</q-w> C_I32_CR_R(31-i_precision) = '0'
<a name="189"><q-n>     189  </q-n></a>             <q-w>else</q-w> C_I32_CR_R(31 <q-w>downto</q-w> 31-i_precision+1) + C_1_PRE;
<a name="190"><q-n>     190  </q-n></a>  C_I_CR_G &lt;= C_I32_CR_G(31 <q-w>downto</q-w> 31-i_precision+1)
<a name="191"><q-n>     191  </q-n></a>             <q-w>when</q-w> C_I32_CR_G(31-i_precision) = '0'
<a name="192"><q-n>     192  </q-n></a>             <q-w>else</q-w> C_I32_CR_G(31 <q-w>downto</q-w> 31-i_precision+1) + C_1_PRE;
<a name="193"><q-n>     193  </q-n></a>  C_I_CR_B &lt;= C_I32_CR_B(31 <q-w>downto</q-w> 31-i_precision+1)
<a name="194"><q-n>     194  </q-n></a>             <q-w>when</q-w> C_I32_CR_B(31-i_precision) = '0'
<a name="195"><q-n>     195  </q-n></a>             <q-w>else</q-w> C_I32_CR_B(31 <q-w>downto</q-w> 31-i_precision+1) + C_1_PRE;
<a name="196"><q-n>     196  </q-n></a>  C_I_128 &lt;= shift_left(to_unsigned(1,i_data_width), i_data_width-1);
<a name="197"><q-n>     197  </q-n></a>  <q-m>-----------------------------------------------------------------------------</q-m>
<a name="198"><q-n>     198  </q-n></a>  <q-m>-- STAGE 0: Input registers</q-m>
<a name="199"><q-n>     199  </q-n></a>  <q-m>-----------------------------------------------------------------------------</q-m>
<a name="200"><q-n>     200  </q-n></a>  STAGE_0_PROC: <q-w>process</q-w> (clk, rst_l, iRgb.red, iRgb.green, iRgb.blue, iRgb.valid)
<a name="201"><q-n>     201  </q-n></a>  <q-w>begin</q-w>
<a name="202"><q-n>     202  </q-n></a>    <q-w>if</q-w> rst_l = '0' <q-w>then</q-w>
<a name="203"><q-n>     203  </q-n></a>      en_0 &lt;= '0';
<a name="204"><q-n>     204  </q-n></a>      r_0  &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="205"><q-n>     205  </q-n></a>      g_0  &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="206"><q-n>     206  </q-n></a>      b_0  &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="207"><q-n>     207  </q-n></a>    <q-w>elsif</q-w> clk'<q-a>event</q-w> <q-w>and</q-w> clk = '1' <q-w>then</q-w>
<a name="208"><q-n>     208  </q-n></a>      r_0  &lt;= <q-t>unsigned</q-w>(iRgb.red);
<a name="209"><q-n>     209  </q-n></a>      g_0  &lt;= <q-t>unsigned</q-w>(iRgb.green);
<a name="210"><q-n>     210  </q-n></a>      b_0  &lt;= <q-t>unsigned</q-w>(iRgb.blue);
<a name="211"><q-n>     211  </q-n></a>      en_0 &lt;= iRgb.valid;
<a name="212"><q-n>     212  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="213"><q-n>     213  </q-n></a>  <q-w>end</q-w> <q-w>process</q-w>;
<a name="214"><q-n>     214  </q-n></a>  <q-m>-----------------------------------------------------------------------------</q-m>
<a name="215"><q-n>     215  </q-n></a>  <q-m>-- STAGE 1: Multiplication</q-m>
<a name="216"><q-n>     216  </q-n></a>  <q-m>-----------------------------------------------------------------------------</q-m>
<a name="217"><q-n>     217  </q-n></a>  STAGE_1_PROC: <q-w>process</q-w> (clk, rst_l, en_0, r_0, g_0, b_0)
<a name="218"><q-n>     218  </q-n></a>    <q-w>variable</q-w> temp : <q-t>unsigned</q-w>(i_data_width+i_precision-1 <q-w>downto</q-w> 0);
<a name="219"><q-n>     219  </q-n></a>  <q-w>begin</q-w>
<a name="220"><q-n>     220  </q-n></a>    <q-w>if</q-w> rst_l = '0' <q-w>then</q-w>
<a name="221"><q-n>     221  </q-n></a>      en_1 &lt;= '0';
<a name="222"><q-n>     222  </q-n></a>      y_r &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="223"><q-n>     223  </q-n></a>      y_g &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="224"><q-n>     224  </q-n></a>      y_b &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="225"><q-n>     225  </q-n></a>      cb_r &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="226"><q-n>     226  </q-n></a>      cb_g &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="227"><q-n>     227  </q-n></a>      cb_b &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="228"><q-n>     228  </q-n></a>      cr_r &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="229"><q-n>     229  </q-n></a>      cr_g &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="230"><q-n>     230  </q-n></a>      cr_b &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="231"><q-n>     231  </q-n></a>    <q-w>elsif</q-w> clk'<q-a>event</q-w> <q-w>and</q-w> clk = '1' <q-w>then</q-w>
<a name="232"><q-n>     232  </q-n></a>      en_1 &lt;= en_0;
<a name="233"><q-n>     233  </q-n></a>      <q-m>-- Perform multiplication at full precision. i_precision-bit *</q-m>
<a name="234"><q-n>     234  </q-n></a>      <q-m>-- i_data_width-bit to produce (i_precision+i_data_width)-bit result.</q-m>
<a name="235"><q-n>     235  </q-n></a>      temp := C_I_Y_R * r_0;
<a name="236"><q-n>     236  </q-n></a>      y_r &lt;= temp(temp'<q-a>left</q-w> <q-w>downto</q-w> temp'<q-a>left</q-w>-i_precision+1);
<a name="237"><q-n>     237  </q-n></a>      temp := C_I_Y_G * g_0;
<a name="238"><q-n>     238  </q-n></a>      y_g &lt;= temp(temp'<q-a>left</q-w> <q-w>downto</q-w> temp'<q-a>left</q-w>-i_precision+1);
<a name="239"><q-n>     239  </q-n></a>      temp := C_I_Y_B * b_0;
<a name="240"><q-n>     240  </q-n></a>      y_b &lt;= temp(temp'<q-a>left</q-w> <q-w>downto</q-w> temp'<q-a>left</q-w>-i_precision+1);
<a name="241"><q-n>     241  </q-n></a>      temp := C_I_CB_R * r_0;
<a name="242"><q-n>     242  </q-n></a>      cb_r &lt;= temp(temp'<q-a>left</q-w> <q-w>downto</q-w> temp'<q-a>left</q-w>-i_precision+1);
<a name="243"><q-n>     243  </q-n></a>      temp := C_I_CB_G * g_0;
<a name="244"><q-n>     244  </q-n></a>      cb_g &lt;= temp(temp'<q-a>left</q-w> <q-w>downto</q-w> temp'<q-a>left</q-w>-i_precision+1);
<a name="245"><q-n>     245  </q-n></a>      temp := C_I_CB_B * b_0;
<a name="246"><q-n>     246  </q-n></a>      cb_b &lt;= temp(temp'<q-a>left</q-w> <q-w>downto</q-w> temp'<q-a>left</q-w>-i_precision+1);
<a name="247"><q-n>     247  </q-n></a>      temp := C_I_CR_R * r_0;
<a name="248"><q-n>     248  </q-n></a>      cr_r &lt;= temp(temp'<q-a>left</q-w> <q-w>downto</q-w> temp'<q-a>left</q-w>-i_precision+1);
<a name="249"><q-n>     249  </q-n></a>      temp := C_I_CR_G * g_0;
<a name="250"><q-n>     250  </q-n></a>      cr_g &lt;= temp(temp'<q-a>left</q-w> <q-w>downto</q-w> temp'<q-a>left</q-w>-i_precision+1);
<a name="251"><q-n>     251  </q-n></a>      temp := C_I_CR_B * b_0;
<a name="252"><q-n>     252  </q-n></a>      cr_b &lt;= temp(temp'<q-a>left</q-w> <q-w>downto</q-w> temp'<q-a>left</q-w>-i_precision+1);
<a name="253"><q-n>     253  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="254"><q-n>     254  </q-n></a>  <q-w>end</q-w> <q-w>process</q-w>;
<a name="255"><q-n>     255  </q-n></a>  <q-m>-----------------------------------------------------------------------------</q-m>
<a name="256"><q-n>     256  </q-n></a>  <q-m>-- STAGE 2: Addition</q-m>
<a name="257"><q-n>     257  </q-n></a>  <q-m>-----------------------------------------------------------------------------</q-m>
<a name="258"><q-n>     258  </q-n></a>  STAGE_2_PROC: <q-w>process</q-w> (clk, rst_l, en_1,y_r, y_g, y_b,cb_r, cb_g, cb_b,cr_r, cr_g, cr_b)
<a name="259"><q-n>     259  </q-n></a>    <q-w>variable</q-w> temp_y   : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="260"><q-n>     260  </q-n></a>    <q-w>variable</q-w> temp_cb  : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="261"><q-n>     261  </q-n></a>    <q-w>variable</q-w> temp_cr  : <q-t>unsigned</q-w>(i_precision-1 <q-w>downto</q-w> 0);
<a name="262"><q-n>     262  </q-n></a>  <q-w>begin</q-w>
<a name="263"><q-n>     263  </q-n></a>    <q-w>if</q-w> rst_l = '0' <q-w>then</q-w>
<a name="264"><q-n>     264  </q-n></a>      en_2 &lt;= '0';
<a name="265"><q-n>     265  </q-n></a>      y_2 &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="266"><q-n>     266  </q-n></a>      cb_2 &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="267"><q-n>     267  </q-n></a>      cr_2 &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="268"><q-n>     268  </q-n></a>    <q-w>elsif</q-w> clk'<q-a>event</q-w> <q-w>and</q-w> clk = '1' <q-w>then</q-w>
<a name="269"><q-n>     269  </q-n></a>      en_2 &lt;= en_1;
<a name="270"><q-n>     270  </q-n></a>      <q-m>-- Do addition</q-m>
<a name="271"><q-n>     271  </q-n></a>      temp_y  := y_r + y_g + y_b;
<a name="272"><q-n>     272  </q-n></a>      temp_cb := cb_b - cb_g - cb_r;
<a name="273"><q-n>     273  </q-n></a>      temp_cr := cr_r - cr_g - cr_b;
<a name="274"><q-n>     274  </q-n></a>      <q-m>-- Truncate result to i_data_width+1 bits (1 bit for rounding later)</q-m>
<a name="275"><q-n>     275  </q-n></a>      y_2  &lt;= temp_y(temp_y'<q-a>left</q-w> <q-w>downto</q-w> temp_y'<q-a>left</q-w>-i_data_width);
<a name="276"><q-n>     276  </q-n></a>      cb_2 &lt;= temp_cb(temp_cb'<q-a>left</q-w> <q-w>downto</q-w> temp_cb'<q-a>left</q-w>-i_data_width);
<a name="277"><q-n>     277  </q-n></a>      cr_2 &lt;= temp_cr(temp_cr'<q-a>left</q-w> <q-w>downto</q-w> temp_cr'<q-a>left</q-w>-i_data_width);
<a name="278"><q-n>     278  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="279"><q-n>     279  </q-n></a>  <q-w>end</q-w> <q-w>process</q-w>;
<a name="280"><q-n>     280  </q-n></a>  <q-m>-----------------------------------------------------------------------------</q-m>
<a name="281"><q-n>     281  </q-n></a>  <q-m>-- STAGE 3: Final Addition and Rounding</q-m>
<a name="282"><q-n>     282  </q-n></a>  <q-m>-----------------------------------------------------------------------------</q-m>
<a name="283"><q-n>     283  </q-n></a>  STAGE_3_PROC: <q-w>process</q-w> (clk, rst_l, en_2,y_r, y_g, y_b,cb_r, cb_g, cb_b,cr_r, cr_g, cr_b)
<a name="284"><q-n>     284  </q-n></a>    <q-w>variable</q-w> y_round  : <q-t>unsigned</q-w>(i_data_width-1 <q-w>downto</q-w> 0);
<a name="285"><q-n>     285  </q-n></a>    <q-w>variable</q-w> cb_round : <q-t>unsigned</q-w>(i_data_width-1 <q-w>downto</q-w> 0);
<a name="286"><q-n>     286  </q-n></a>    <q-w>variable</q-w> cr_round : <q-t>unsigned</q-w>(i_data_width-1 <q-w>downto</q-w> 0);
<a name="287"><q-n>     287  </q-n></a>  <q-w>begin</q-w>
<a name="288"><q-n>     288  </q-n></a>    <q-w>if</q-w> rst_l = '0' <q-w>then</q-w>
<a name="289"><q-n>     289  </q-n></a>      en_3 &lt;= '0';
<a name="290"><q-n>     290  </q-n></a>      y_3 &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="291"><q-n>     291  </q-n></a>      cb_3 &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="292"><q-n>     292  </q-n></a>      cr_3 &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="293"><q-n>     293  </q-n></a>    <q-w>elsif</q-w> clk'<q-a>event</q-w> <q-w>and</q-w> clk = '1' <q-w>then</q-w>
<a name="294"><q-n>     294  </q-n></a>      en_3 &lt;= en_2;
<a name="295"><q-n>     295  </q-n></a>      <q-m>-- Determine rounding, combine with the 128 constant</q-m>
<a name="296"><q-n>     296  </q-n></a>      <q-w>if</q-w> y_2(0) = '1' <q-w>then</q-w>
<a name="297"><q-n>     297  </q-n></a>        <q-w>if</q-w> i_full_range <q-w>then</q-w>
<a name="298"><q-n>     298  </q-n></a>          y_round := C_I_16+1;
<a name="299"><q-n>     299  </q-n></a>        <q-w>else</q-w>
<a name="300"><q-n>     300  </q-n></a>          y_round := to_unsigned(1, i_data_width);
<a name="301"><q-n>     301  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="302"><q-n>     302  </q-n></a>      <q-w>else</q-w>
<a name="303"><q-n>     303  </q-n></a>        <q-w>if</q-w> i_full_range <q-w>then</q-w>
<a name="304"><q-n>     304  </q-n></a>          y_round := C_I_16;
<a name="305"><q-n>     305  </q-n></a>        <q-w>else</q-w>
<a name="306"><q-n>     306  </q-n></a>          y_round := (<q-w>others</q-w> =&gt; '0');
<a name="307"><q-n>     307  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="308"><q-n>     308  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="309"><q-n>     309  </q-n></a>      <q-w>if</q-w> cb_2(0) = '1' <q-w>then</q-w>
<a name="310"><q-n>     310  </q-n></a>        cb_round := resize(C_I_128+1, i_data_width);
<a name="311"><q-n>     311  </q-n></a>      <q-w>else</q-w>
<a name="312"><q-n>     312  </q-n></a>        cb_round := C_I_128;
<a name="313"><q-n>     313  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="314"><q-n>     314  </q-n></a>      <q-w>if</q-w> cr_2(0) = '1' <q-w>then</q-w>
<a name="315"><q-n>     315  </q-n></a>        cr_round := resize(C_I_128+1, i_data_width);
<a name="316"><q-n>     316  </q-n></a>      <q-w>else</q-w>
<a name="317"><q-n>     317  </q-n></a>        cr_round := C_I_128;
<a name="318"><q-n>     318  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="319"><q-n>     319  </q-n></a>      y_3  &lt;= y_2(y_2'<q-a>left</q-w> <q-w>downto</q-w> 1) + y_round;
<a name="320"><q-n>     320  </q-n></a>      cb_3 &lt;= cb_2(cb_2'<q-a>left</q-w> <q-w>downto</q-w> 1) + cb_round;
<a name="321"><q-n>     321  </q-n></a>      cr_3 &lt;= cr_2(cr_2'<q-a>left</q-w> <q-w>downto</q-w> 1) + cr_round;
<a name="322"><q-n>     322  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="323"><q-n>     323  </q-n></a>  <q-w>end</q-w> <q-w>process</q-w>;
<a name="324"><q-n>     324  </q-n></a>  y     &lt;= <q-t>std_logic_vector</q-w>(y_3);
<a name="325"><q-n>     325  </q-n></a>  cb    &lt;= <q-t>std_logic_vector</q-w>(cb_3);
<a name="326"><q-n>     326  </q-n></a>  cr    &lt;= <q-t>std_logic_vector</q-w>(cr_3);
<a name="327"><q-n>     327  </q-n></a>  oValid &lt;= en_3;
<a name="328"><q-n>     328  </q-n></a><q-w>end</q-w> imp;</pre>
</tt>

  
</body>
</html>
