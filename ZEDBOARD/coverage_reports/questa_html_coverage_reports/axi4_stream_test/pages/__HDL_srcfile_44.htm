
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>-- --------------------------------------------------------------------</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>-- "fixed_pkg_c.vhdl" package contains functions for fixed point math.</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>-- Please see the documentation for the fixed point package.</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>-- This package should be compiled into "ieee_proposed" and used as follows:</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>-- use ieee.std_logic_1164.all;</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>-- use ieee.numeric_std.all;</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>-- use ieee_proposed.fixed_float_types.all;</q-m>
<a name="8"><q-n>     8  </q-n></a><q-m>-- use ieee_proposed.fixed_pkg.all;</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m>--</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m>--  This verison is designed to work with the VHDL-93 compilers </q-m>
<a name="11"><q-n>     11  </q-n></a><q-m>--  synthesis tools.  Please note the "%%%" comments.  These are where we</q-m>
<a name="12"><q-n>     12  </q-n></a><q-m>--  diverge from the VHDL-200X LRM.</q-m>
<a name="13"><q-n>     13  </q-n></a><q-m>-- --------------------------------------------------------------------</q-m>
<a name="14"><q-n>     14  </q-n></a><q-m>-- Version    : $Revision: 1.1 $</q-m>
<a name="15"><q-n>     15  </q-n></a><q-m>-- Date       : $Date: 2012/03/09 20:36:50 $</q-m>
<a name="16"><q-n>     16  </q-n></a><q-m>-- --------------------------------------------------------------------</q-m>
<a name="17"><q-n>     17  </q-n></a>
<a name="18"><q-n>     18  </q-n></a><q-w>use</q-w> STD.TEXTIO.<q-w>all</q-w>;
<a name="19"><q-n>     19  </q-n></a><q-w>library</q-w> IEEE;
<a name="20"><q-n>     20  </q-n></a><q-w>use</q-w> IEEE.STD_LOGIC_1164.<q-w>all</q-w>;
<a name="21"><q-n>     21  </q-n></a><q-w>use</q-w> IEEE.NUMERIC_STD.<q-w>all</q-w>;
<a name="22"><q-n>     22  </q-n></a><q-w>use</q-w> work.fixed_float_types.<q-w>all</q-w>;
<a name="23"><q-n>     23  </q-n></a>
<a name="24"><q-n>     24  </q-n></a><q-w>package</q-w> fixed_pkg <q-w>is</q-w>
<a name="25"><q-n>     25  </q-n></a><q-m>-- generic (</q-m>
<a name="26"><q-n>     26  </q-n></a>  <q-m>-- Rounding routine to use in fixed point, fixed_round or fixed_truncate</q-m>
<a name="27"><q-n>     27  </q-n></a>  <q-w>constant</q-w> fixed_round_style    : fixed_round_style_type    := fixed_round;
<a name="28"><q-n>     28  </q-n></a>  <q-m>-- Overflow routine to use in fixed point, fixed_saturate or fixed_wrap</q-m>
<a name="29"><q-n>     29  </q-n></a>  <q-w>constant</q-w> fixed_overflow_style : fixed_overflow_style_type := fixed_saturate;
<a name="30"><q-n>     30  </q-n></a>  <q-m>-- Extra bits used in divide routines</q-m>
<a name="31"><q-n>     31  </q-n></a>  <q-w>constant</q-w> fixed_guard_bits     : <q-t>NATURAL</q-w>                   := 3;
<a name="32"><q-n>     32  </q-n></a>  <q-m>-- If TRUE, then turn off warnings on "X" propagation</q-m>
<a name="33"><q-n>     33  </q-n></a>  <q-w>constant</q-w> no_warning           : <q-t>BOOLEAN</q-w>                   := (false
<a name="34"><q-n>     34  </q-n></a>                                                                );
<a name="35"><q-n>     35  </q-n></a>
<a name="36"><q-n>     36  </q-n></a>  <q-m>-- Author David Bishop (dbishop@vhdl.org)</q-m>
<a name="37"><q-n>     37  </q-n></a>
<a name="38"><q-n>     38  </q-n></a>  <q-m>-- base Unsigned fixed point type, downto direction assumed</q-m>
<a name="39"><q-n>     39  </q-n></a>  <q-w>type</q-w> UNRESOLVED_ufixed <q-w>is</q-w> <q-w>array</q-w> (<q-t>INTEGER</q-w> <q-w>range</q-w> &lt;&gt;) <q-w>of</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="40"><q-n>     40  </q-n></a>  <q-m>-- base Signed fixed point type, downto direction assumed</q-m>
<a name="41"><q-n>     41  </q-n></a>  <q-w>type</q-w> UNRESOLVED_sfixed <q-w>is</q-w> <q-w>array</q-w> (<q-t>INTEGER</q-w> <q-w>range</q-w> &lt;&gt;) <q-w>of</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="42"><q-n>     42  </q-n></a>
<a name="43"><q-n>     43  </q-n></a>  <q-w>subtype</q-w> U_ufixed <q-w>is</q-w> UNRESOLVED_ufixed;
<a name="44"><q-n>     44  </q-n></a>  <q-w>subtype</q-w> U_sfixed <q-w>is</q-w> UNRESOLVED_sfixed;
<a name="45"><q-n>     45  </q-n></a>
<a name="46"><q-n>     46  </q-n></a>  <q-w>subtype</q-w> ufixed <q-w>is</q-w> UNRESOLVED_ufixed;
<a name="47"><q-n>     47  </q-n></a>  <q-w>subtype</q-w> sfixed <q-w>is</q-w> UNRESOLVED_sfixed;
<a name="48"><q-n>     48  </q-n></a>
<a name="49"><q-n>     49  </q-n></a>  <q-m>--===========================================================================</q-m>
<a name="50"><q-n>     50  </q-n></a>  <q-m>-- Arithmetic Operators:</q-m>
<a name="51"><q-n>     51  </q-n></a>  <q-m>--===========================================================================</q-m>
<a name="52"><q-n>     52  </q-n></a>
<a name="53"><q-n>     53  </q-n></a>  <q-m>-- Absolute value, 2's complement</q-m>
<a name="54"><q-n>     54  </q-n></a>  <q-m>-- abs sfixed(a downto b) = sfixed(a+1 downto b)</q-m>
<a name="55"><q-n>     55  </q-n></a>  <q-w>function</q-w> <q-l>"abs"</q-l> (arg : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="56"><q-n>     56  </q-n></a>
<a name="57"><q-n>     57  </q-n></a>  <q-m>-- Negation, 2's complement</q-m>
<a name="58"><q-n>     58  </q-n></a>  <q-m>-- - sfixed(a downto b) = sfixed(a+1 downto b)</q-m>
<a name="59"><q-n>     59  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (arg : UNRESOLVED_sfixed)<q-w>return</q-w> UNRESOLVED_sfixed;
<a name="60"><q-n>     60  </q-n></a>
<a name="61"><q-n>     61  </q-n></a>  <q-m>-- Addition</q-m>
<a name="62"><q-n>     62  </q-n></a>  <q-m>-- ufixed(a downto b) + ufixed(c downto d)</q-m>
<a name="63"><q-n>     63  </q-n></a>  <q-m>--   = ufixed(maximum(a,c)+1 downto minimum(b,d))</q-m>
<a name="64"><q-n>     64  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="65"><q-n>     65  </q-n></a>
<a name="66"><q-n>     66  </q-n></a>  <q-m>-- sfixed(a downto b) + sfixed(c downto d)</q-m>
<a name="67"><q-n>     67  </q-n></a>  <q-m>--   = sfixed(maximum(a,c)+1 downto minimum(b,d))</q-m>
<a name="68"><q-n>     68  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="69"><q-n>     69  </q-n></a>
<a name="70"><q-n>     70  </q-n></a>  <q-m>-- Subtraction</q-m>
<a name="71"><q-n>     71  </q-n></a>  <q-m>-- ufixed(a downto b) - ufixed(c downto d)</q-m>
<a name="72"><q-n>     72  </q-n></a>  <q-m>--   = ufixed(maximum(a,c)+1 downto minimum(b,d))</q-m>
<a name="73"><q-n>     73  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="74"><q-n>     74  </q-n></a>
<a name="75"><q-n>     75  </q-n></a>  <q-m>-- sfixed(a downto b) - sfixed(c downto d)</q-m>
<a name="76"><q-n>     76  </q-n></a>  <q-m>--   = sfixed(maximum(a,c)+1 downto minimum(b,d))</q-m>
<a name="77"><q-n>     77  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a>  <q-m>-- Multiplication</q-m>
<a name="80"><q-n>     80  </q-n></a>  <q-m>-- ufixed(a downto b) * ufixed(c downto d) = ufixed(a+c+1 downto b+d)</q-m>
<a name="81"><q-n>     81  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="82"><q-n>     82  </q-n></a>
<a name="83"><q-n>     83  </q-n></a>  <q-m>-- sfixed(a downto b) * sfixed(c downto d) = sfixed(a+c+1 downto b+d)</q-m>
<a name="84"><q-n>     84  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="85"><q-n>     85  </q-n></a>
<a name="86"><q-n>     86  </q-n></a>  <q-m>-- Division</q-m>
<a name="87"><q-n>     87  </q-n></a>  <q-m>-- ufixed(a downto b) / ufixed(c downto d) = ufixed(a-d downto b-c-1)</q-m>
<a name="88"><q-n>     88  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="89"><q-n>     89  </q-n></a>
<a name="90"><q-n>     90  </q-n></a>  <q-m>-- sfixed(a downto b) / sfixed(c downto d) = sfixed(a-d+1 downto b-c)</q-m>
<a name="91"><q-n>     91  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="92"><q-n>     92  </q-n></a>
<a name="93"><q-n>     93  </q-n></a>  <q-m>-- Remainder</q-m>
<a name="94"><q-n>     94  </q-n></a>  <q-m>-- ufixed (a downto b) rem ufixed (c downto d)</q-m>
<a name="95"><q-n>     95  </q-n></a>  <q-m>--   = ufixed (minimum(a,c) downto minimum(b,d))</q-m>
<a name="96"><q-n>     96  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="97"><q-n>     97  </q-n></a>
<a name="98"><q-n>     98  </q-n></a>  <q-m>-- sfixed (a downto b) rem sfixed (c downto d)</q-m>
<a name="99"><q-n>     99  </q-n></a>  <q-m>--   = sfixed (minimum(a,c) downto minimum(b,d))</q-m>
<a name="100"><q-n>     100  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="101"><q-n>     101  </q-n></a>
<a name="102"><q-n>     102  </q-n></a>  <q-m>-- Modulo</q-m>
<a name="103"><q-n>     103  </q-n></a>  <q-m>-- ufixed (a downto b) mod ufixed (c downto d)</q-m>
<a name="104"><q-n>     104  </q-n></a>  <q-m>--        = ufixed (minimum(a,c) downto minimum(b, d))</q-m>
<a name="105"><q-n>     105  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="106"><q-n>     106  </q-n></a>
<a name="107"><q-n>     107  </q-n></a>  <q-m>-- sfixed (a downto b) mod sfixed (c downto d)</q-m>
<a name="108"><q-n>     108  </q-n></a>  <q-m>--        = sfixed (c downto minimum(b, d))</q-m>
<a name="109"><q-n>     109  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="110"><q-n>     110  </q-n></a>
<a name="111"><q-n>     111  </q-n></a>  <q-m>----------------------------------------------------------------------------</q-m>
<a name="112"><q-n>     112  </q-n></a>  <q-m>-- In these routines the "real" or "natural" (integer)</q-m>
<a name="113"><q-n>     113  </q-n></a>  <q-m>-- are converted into a fixed point number and then the operation is</q-m>
<a name="114"><q-n>     114  </q-n></a>  <q-m>-- performed.  It is assumed that the array will be large enough.</q-m>
<a name="115"><q-n>     115  </q-n></a>  <q-m>-- If the input is "real" then the real number is converted into a fixed of</q-m>
<a name="116"><q-n>     116  </q-n></a>  <q-m>-- the same size as the fixed point input.  If the number is an "integer"</q-m>
<a name="117"><q-n>     117  </q-n></a>  <q-m>-- then it is converted into fixed with the range (l'high downto 0).</q-m>
<a name="118"><q-n>     118  </q-n></a>  <q-m>----------------------------------------------------------------------------</q-m>
<a name="119"><q-n>     119  </q-n></a>
<a name="120"><q-n>     120  </q-n></a>  <q-m>-- ufixed(a downto b) + ufixed(a downto b) = ufixed(a+1 downto b)</q-m>
<a name="121"><q-n>     121  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="122"><q-n>     122  </q-n></a>
<a name="123"><q-n>     123  </q-n></a>  <q-m>-- ufixed(c downto d) + ufixed(c downto d) = ufixed(c+1 downto d)</q-m>
<a name="124"><q-n>     124  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="125"><q-n>     125  </q-n></a>
<a name="126"><q-n>     126  </q-n></a>  <q-m>-- ufixed(a downto b) + ufixed(a downto 0) = ufixed(a+1 downto minimum(0,b))</q-m>
<a name="127"><q-n>     127  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="128"><q-n>     128  </q-n></a>
<a name="129"><q-n>     129  </q-n></a>  <q-m>-- ufixed(a downto 0) + ufixed(c downto d) = ufixed(c+1 downto minimum(0,d))</q-m>
<a name="130"><q-n>     130  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="131"><q-n>     131  </q-n></a>
<a name="132"><q-n>     132  </q-n></a>  <q-m>-- ufixed(a downto b) - ufixed(a downto b) = ufixed(a+1 downto b)</q-m>
<a name="133"><q-n>     133  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="134"><q-n>     134  </q-n></a>
<a name="135"><q-n>     135  </q-n></a>  <q-m>-- ufixed(c downto d) - ufixed(c downto d) = ufixed(c+1 downto d)</q-m>
<a name="136"><q-n>     136  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="137"><q-n>     137  </q-n></a>
<a name="138"><q-n>     138  </q-n></a>  <q-m>-- ufixed(a downto b) - ufixed(a downto 0) = ufixed(a+1 downto minimum(0,b))</q-m>
<a name="139"><q-n>     139  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="140"><q-n>     140  </q-n></a>
<a name="141"><q-n>     141  </q-n></a>  <q-m>-- ufixed(a downto 0) + ufixed(c downto d) = ufixed(c+1 downto minimum(0,d))</q-m>
<a name="142"><q-n>     142  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="143"><q-n>     143  </q-n></a>
<a name="144"><q-n>     144  </q-n></a>  <q-m>-- ufixed(a downto b) * ufixed(a downto b) = ufixed(2a+1 downto 2b)</q-m>
<a name="145"><q-n>     145  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="146"><q-n>     146  </q-n></a>
<a name="147"><q-n>     147  </q-n></a>  <q-m>-- ufixed(c downto d) * ufixed(c downto d) = ufixed(2c+1 downto 2d)</q-m>
<a name="148"><q-n>     148  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="149"><q-n>     149  </q-n></a>
<a name="150"><q-n>     150  </q-n></a>  <q-m>-- ufixed (a downto b) * ufixed (a downto 0) = ufixed (2a+1 downto b)</q-m>
<a name="151"><q-n>     151  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="152"><q-n>     152  </q-n></a>
<a name="153"><q-n>     153  </q-n></a>  <q-m>-- ufixed (a downto b) * ufixed (a downto 0) = ufixed (2a+1 downto b)</q-m>
<a name="154"><q-n>     154  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="155"><q-n>     155  </q-n></a>
<a name="156"><q-n>     156  </q-n></a>  <q-m>-- ufixed(a downto b) / ufixed(a downto b) = ufixed(a-b downto b-a-1)</q-m>
<a name="157"><q-n>     157  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="158"><q-n>     158  </q-n></a>
<a name="159"><q-n>     159  </q-n></a>  <q-m>-- ufixed(a downto b) / ufixed(a downto b) = ufixed(a-b downto b-a-1)</q-m>
<a name="160"><q-n>     160  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="161"><q-n>     161  </q-n></a>
<a name="162"><q-n>     162  </q-n></a>  <q-m>-- ufixed(a downto b) / ufixed(a downto 0) = ufixed(a downto b-a-1)</q-m>
<a name="163"><q-n>     163  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="164"><q-n>     164  </q-n></a>
<a name="165"><q-n>     165  </q-n></a>  <q-m>-- ufixed(c downto 0) / ufixed(c downto d) = ufixed(c-d downto -c-1)</q-m>
<a name="166"><q-n>     166  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="167"><q-n>     167  </q-n></a>
<a name="168"><q-n>     168  </q-n></a>  <q-m>-- ufixed (a downto b) rem ufixed (a downto b) = ufixed (a downto b)</q-m>
<a name="169"><q-n>     169  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="170"><q-n>     170  </q-n></a>
<a name="171"><q-n>     171  </q-n></a>  <q-m>-- ufixed (c downto d) rem ufixed (c downto d) = ufixed (c downto d)</q-m>
<a name="172"><q-n>     172  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="173"><q-n>     173  </q-n></a>
<a name="174"><q-n>     174  </q-n></a>  <q-m>-- ufixed (a downto b) rem ufixed (a downto 0) = ufixed (a downto minimum(b,0))</q-m>
<a name="175"><q-n>     175  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="176"><q-n>     176  </q-n></a>
<a name="177"><q-n>     177  </q-n></a>  <q-m>-- ufixed (c downto 0) rem ufixed (c downto d) = ufixed (c downto minimum(d,0))</q-m>
<a name="178"><q-n>     178  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="179"><q-n>     179  </q-n></a>
<a name="180"><q-n>     180  </q-n></a>  <q-m>-- ufixed (a downto b) mod ufixed (a downto b) = ufixed (a downto b)</q-m>
<a name="181"><q-n>     181  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="182"><q-n>     182  </q-n></a>
<a name="183"><q-n>     183  </q-n></a>  <q-m>-- ufixed (c downto d) mod ufixed (c downto d) = ufixed (c downto d)</q-m>
<a name="184"><q-n>     184  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="185"><q-n>     185  </q-n></a>
<a name="186"><q-n>     186  </q-n></a>  <q-m>-- ufixed (a downto b) mod ufixed (a downto 0) = ufixed (a downto minimum(b,0))</q-m>
<a name="187"><q-n>     187  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="188"><q-n>     188  </q-n></a>
<a name="189"><q-n>     189  </q-n></a>  <q-m>-- ufixed (c downto 0) mod ufixed (c downto d) = ufixed (c downto minimum(d,0))</q-m>
<a name="190"><q-n>     190  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="191"><q-n>     191  </q-n></a>
<a name="192"><q-n>     192  </q-n></a>  <q-m>-- sfixed(a downto b) + sfixed(a downto b) = sfixed(a+1 downto b)</q-m>
<a name="193"><q-n>     193  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="194"><q-n>     194  </q-n></a>
<a name="195"><q-n>     195  </q-n></a>  <q-m>-- sfixed(c downto d) + sfixed(c downto d) = sfixed(c+1 downto d)</q-m>
<a name="196"><q-n>     196  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="197"><q-n>     197  </q-n></a>
<a name="198"><q-n>     198  </q-n></a>  <q-m>-- sfixed(a downto b) + sfixed(a downto 0) = sfixed(a+1 downto minimum(0,b))</q-m>
<a name="199"><q-n>     199  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="200"><q-n>     200  </q-n></a>
<a name="201"><q-n>     201  </q-n></a>  <q-m>-- sfixed(c downto 0) + sfixed(c downto d) = sfixed(c+1 downto minimum(0,d))</q-m>
<a name="202"><q-n>     202  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="203"><q-n>     203  </q-n></a>
<a name="204"><q-n>     204  </q-n></a>  <q-m>-- sfixed(a downto b) - sfixed(a downto b) = sfixed(a+1 downto b)</q-m>
<a name="205"><q-n>     205  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="206"><q-n>     206  </q-n></a>
<a name="207"><q-n>     207  </q-n></a>  <q-m>-- sfixed(c downto d) - sfixed(c downto d) = sfixed(c+1 downto d)</q-m>
<a name="208"><q-n>     208  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="209"><q-n>     209  </q-n></a>
<a name="210"><q-n>     210  </q-n></a>  <q-m>-- sfixed(a downto b) - sfixed(a downto 0) = sfixed(a+1 downto minimum(0,b))</q-m>
<a name="211"><q-n>     211  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="212"><q-n>     212  </q-n></a>
<a name="213"><q-n>     213  </q-n></a>  <q-m>-- sfixed(c downto 0) - sfixed(c downto d) = sfixed(c+1 downto minimum(0,d))</q-m>
<a name="214"><q-n>     214  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="215"><q-n>     215  </q-n></a>
<a name="216"><q-n>     216  </q-n></a>  <q-m>-- sfixed(a downto b) * sfixed(a downto b) = sfixed(2a+1 downto 2b)</q-m>
<a name="217"><q-n>     217  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="218"><q-n>     218  </q-n></a>
<a name="219"><q-n>     219  </q-n></a>  <q-m>-- sfixed(c downto d) * sfixed(c downto d) = sfixed(2c+1 downto 2d)</q-m>
<a name="220"><q-n>     220  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="221"><q-n>     221  </q-n></a>
<a name="222"><q-n>     222  </q-n></a>  <q-m>-- sfixed(a downto b) * sfixed(a downto 0) = sfixed(2a+1 downto b)</q-m>
<a name="223"><q-n>     223  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="224"><q-n>     224  </q-n></a>
<a name="225"><q-n>     225  </q-n></a>  <q-m>-- sfixed(c downto 0) * sfixed(c downto d) = sfixed(2c+1 downto d)</q-m>
<a name="226"><q-n>     226  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="227"><q-n>     227  </q-n></a>
<a name="228"><q-n>     228  </q-n></a>  <q-m>-- sfixed(a downto b) / sfixed(a downto b) = sfixed(a-b+1 downto b-a)</q-m>
<a name="229"><q-n>     229  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="230"><q-n>     230  </q-n></a>
<a name="231"><q-n>     231  </q-n></a>  <q-m>-- sfixed(c downto d) / sfixed(c downto d) = sfixed(c-d+1 downto d-c)</q-m>
<a name="232"><q-n>     232  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="233"><q-n>     233  </q-n></a>
<a name="234"><q-n>     234  </q-n></a>  <q-m>-- sfixed(a downto b) / sfixed(a downto 0) = sfixed(a+1 downto b-a)</q-m>
<a name="235"><q-n>     235  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="236"><q-n>     236  </q-n></a>
<a name="237"><q-n>     237  </q-n></a>  <q-m>-- sfixed(c downto 0) / sfixed(c downto d) = sfixed(c-d+1 downto -c)</q-m>
<a name="238"><q-n>     238  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="239"><q-n>     239  </q-n></a>
<a name="240"><q-n>     240  </q-n></a>  <q-m>-- sfixed (a downto b) rem sfixed (a downto b) = sfixed (a downto b)</q-m>
<a name="241"><q-n>     241  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="242"><q-n>     242  </q-n></a>
<a name="243"><q-n>     243  </q-n></a>  <q-m>-- sfixed (c downto d) rem sfixed (c downto d) = sfixed (c downto d)</q-m>
<a name="244"><q-n>     244  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="245"><q-n>     245  </q-n></a>
<a name="246"><q-n>     246  </q-n></a>  <q-m>-- sfixed (a downto b) rem sfixed (a downto 0) = sfixed (a downto minimum(b,0))</q-m>
<a name="247"><q-n>     247  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="248"><q-n>     248  </q-n></a>
<a name="249"><q-n>     249  </q-n></a>  <q-m>-- sfixed (c downto 0) rem sfixed (c downto d) = sfixed (c downto minimum(d,0))</q-m>
<a name="250"><q-n>     250  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="251"><q-n>     251  </q-n></a>
<a name="252"><q-n>     252  </q-n></a>  <q-m>-- sfixed (a downto b) mod sfixed (a downto b) = sfixed (a downto b)</q-m>
<a name="253"><q-n>     253  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="254"><q-n>     254  </q-n></a>
<a name="255"><q-n>     255  </q-n></a>  <q-m>-- sfixed (c downto d) mod sfixed (c downto d) = sfixed (c downto d)</q-m>
<a name="256"><q-n>     256  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="257"><q-n>     257  </q-n></a>
<a name="258"><q-n>     258  </q-n></a>  <q-m>-- sfixed (a downto b) mod sfixed (a downto 0) = sfixed (a downto minimum(b,0))</q-m>
<a name="259"><q-n>     259  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="260"><q-n>     260  </q-n></a>
<a name="261"><q-n>     261  </q-n></a>  <q-m>-- sfixed (c downto 0) mod sfixed (c downto d) = sfixed (c downto minimum(d,0))</q-m>
<a name="262"><q-n>     262  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="263"><q-n>     263  </q-n></a>
<a name="264"><q-n>     264  </q-n></a>  <q-m>-- This version of divide gives the user more control</q-m>
<a name="265"><q-n>     265  </q-n></a>  <q-m>-- ufixed(a downto b) / ufixed(c downto d) = ufixed(a-d downto b-c-1)</q-m>
<a name="266"><q-n>     266  </q-n></a>  <q-w>function</q-w> divide (
<a name="267"><q-n>     267  </q-n></a>    l, r                 : UNRESOLVED_ufixed;
<a name="268"><q-n>     268  </q-n></a>    <q-w>constant</q-w> round_style : fixed_round_style_type := fixed_round_style;
<a name="269"><q-n>     269  </q-n></a>    <q-w>constant</q-w> guard_bits  : <q-t>NATURAL</q-w>                := fixed_guard_bits)
<a name="270"><q-n>     270  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="271"><q-n>     271  </q-n></a>
<a name="272"><q-n>     272  </q-n></a>  <q-m>-- This version of divide gives the user more control</q-m>
<a name="273"><q-n>     273  </q-n></a>  <q-m>-- sfixed(a downto b) / sfixed(c downto d) = sfixed(a-d+1 downto b-c)</q-m>
<a name="274"><q-n>     274  </q-n></a>  <q-w>function</q-w> divide (
<a name="275"><q-n>     275  </q-n></a>    l, r                 : UNRESOLVED_sfixed;
<a name="276"><q-n>     276  </q-n></a>    <q-w>constant</q-w> round_style : fixed_round_style_type := fixed_round_style;
<a name="277"><q-n>     277  </q-n></a>    <q-w>constant</q-w> guard_bits  : <q-t>NATURAL</q-w>                := fixed_guard_bits)
<a name="278"><q-n>     278  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="279"><q-n>     279  </q-n></a>
<a name="280"><q-n>     280  </q-n></a>  <q-m>-- These functions return 1/X</q-m>
<a name="281"><q-n>     281  </q-n></a>  <q-m>-- 1 / ufixed(a downto b) = ufixed(-b downto -a-1)</q-m>
<a name="282"><q-n>     282  </q-n></a>  <q-w>function</q-w> reciprocal (
<a name="283"><q-n>     283  </q-n></a>    arg                  : UNRESOLVED_ufixed;  <q-m>-- fixed point input</q-m>
<a name="284"><q-n>     284  </q-n></a>    <q-w>constant</q-w> round_style : fixed_round_style_type := fixed_round_style;
<a name="285"><q-n>     285  </q-n></a>    <q-w>constant</q-w> guard_bits  : <q-t>NATURAL</q-w>                := fixed_guard_bits)
<a name="286"><q-n>     286  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="287"><q-n>     287  </q-n></a>
<a name="288"><q-n>     288  </q-n></a>  <q-m>-- 1 / sfixed(a downto b) = sfixed(-b+1 downto -a)</q-m>
<a name="289"><q-n>     289  </q-n></a>  <q-w>function</q-w> reciprocal (
<a name="290"><q-n>     290  </q-n></a>    arg                  : UNRESOLVED_sfixed;  <q-m>-- fixed point input</q-m>
<a name="291"><q-n>     291  </q-n></a>    <q-w>constant</q-w> round_style : fixed_round_style_type := fixed_round_style;
<a name="292"><q-n>     292  </q-n></a>    <q-w>constant</q-w> guard_bits  : <q-t>NATURAL</q-w>                := fixed_guard_bits)
<a name="293"><q-n>     293  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="294"><q-n>     294  </q-n></a>
<a name="295"><q-n>     295  </q-n></a>  <q-m>-- REM function</q-m>
<a name="296"><q-n>     296  </q-n></a>  <q-m>-- ufixed (a downto b) rem ufixed (c downto d)</q-m>
<a name="297"><q-n>     297  </q-n></a>  <q-m>--   = ufixed (minimum(a,c) downto minimum(b,d))</q-m>
<a name="298"><q-n>     298  </q-n></a>  <q-w>function</q-w> remainder (
<a name="299"><q-n>     299  </q-n></a>    l, r                 : UNRESOLVED_ufixed;
<a name="300"><q-n>     300  </q-n></a>    <q-w>constant</q-w> round_style : fixed_round_style_type := fixed_round_style;
<a name="301"><q-n>     301  </q-n></a>    <q-w>constant</q-w> guard_bits  : <q-t>NATURAL</q-w>                := fixed_guard_bits)
<a name="302"><q-n>     302  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="303"><q-n>     303  </q-n></a>
<a name="304"><q-n>     304  </q-n></a>  <q-m>-- sfixed (a downto b) rem sfixed (c downto d)</q-m>
<a name="305"><q-n>     305  </q-n></a>  <q-m>--   = sfixed (minimum(a,c) downto minimum(b,d))</q-m>
<a name="306"><q-n>     306  </q-n></a>  <q-w>function</q-w> remainder (
<a name="307"><q-n>     307  </q-n></a>    l, r                 : UNRESOLVED_sfixed;
<a name="308"><q-n>     308  </q-n></a>    <q-w>constant</q-w> round_style : fixed_round_style_type := fixed_round_style;
<a name="309"><q-n>     309  </q-n></a>    <q-w>constant</q-w> guard_bits  : <q-t>NATURAL</q-w>                := fixed_guard_bits)
<a name="310"><q-n>     310  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="311"><q-n>     311  </q-n></a>
<a name="312"><q-n>     312  </q-n></a>  <q-m>-- mod function</q-m>
<a name="313"><q-n>     313  </q-n></a>  <q-m>-- ufixed (a downto b) mod ufixed (c downto d)</q-m>
<a name="314"><q-n>     314  </q-n></a>  <q-m>--        = ufixed (minimum(a,c) downto minimum(b, d))</q-m>
<a name="315"><q-n>     315  </q-n></a>  <q-w>function</q-w> modulo (
<a name="316"><q-n>     316  </q-n></a>    l, r                 : UNRESOLVED_ufixed;
<a name="317"><q-n>     317  </q-n></a>    <q-w>constant</q-w> round_style : fixed_round_style_type := fixed_round_style;
<a name="318"><q-n>     318  </q-n></a>    <q-w>constant</q-w> guard_bits  : <q-t>NATURAL</q-w>                := fixed_guard_bits)
<a name="319"><q-n>     319  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="320"><q-n>     320  </q-n></a>
<a name="321"><q-n>     321  </q-n></a>  <q-m>-- sfixed (a downto b) mod sfixed (c downto d)</q-m>
<a name="322"><q-n>     322  </q-n></a>  <q-m>--        = sfixed (c downto minimum(b, d))</q-m>
<a name="323"><q-n>     323  </q-n></a>  <q-w>function</q-w> modulo (
<a name="324"><q-n>     324  </q-n></a>    l, r                    : UNRESOLVED_sfixed;
<a name="325"><q-n>     325  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="326"><q-n>     326  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style;
<a name="327"><q-n>     327  </q-n></a>    <q-w>constant</q-w> guard_bits     : <q-t>NATURAL</q-w>                   := fixed_guard_bits)
<a name="328"><q-n>     328  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="329"><q-n>     329  </q-n></a>
<a name="330"><q-n>     330  </q-n></a>  <q-m>-- Procedure for those who need an "accumulator" function.</q-m>
<a name="331"><q-n>     331  </q-n></a>  <q-m>-- add_carry (ufixed(a downto b), ufixed (c downto d))</q-m>
<a name="332"><q-n>     332  </q-n></a>  <q-m>--         = ufixed (maximum(a,c) downto minimum(b,d))</q-m>
<a name="333"><q-n>     333  </q-n></a>  <q-w>procedure</q-w> add_carry (
<a name="334"><q-n>     334  </q-n></a>    L, R   : <q-a>in</q-w>  UNRESOLVED_ufixed;
<a name="335"><q-n>     335  </q-n></a>    c_in   : <q-a>in</q-w>  <q-t>STD_ULOGIC</q-w>;
<a name="336"><q-n>     336  </q-n></a>    result : <q-a>out</q-w> UNRESOLVED_ufixed;
<a name="337"><q-n>     337  </q-n></a>    c_out  : <q-a>out</q-w> <q-t>STD_ULOGIC</q-w>);
<a name="338"><q-n>     338  </q-n></a>
<a name="339"><q-n>     339  </q-n></a>  <q-m>-- add_carry (sfixed(a downto b), sfixed (c downto d))</q-m>
<a name="340"><q-n>     340  </q-n></a>  <q-m>--         = sfixed (maximum(a,c) downto minimum(b,d))</q-m>
<a name="341"><q-n>     341  </q-n></a>  <q-w>procedure</q-w> add_carry (
<a name="342"><q-n>     342  </q-n></a>    L, R   : <q-a>in</q-w>  UNRESOLVED_sfixed;
<a name="343"><q-n>     343  </q-n></a>    c_in   : <q-a>in</q-w>  <q-t>STD_ULOGIC</q-w>;
<a name="344"><q-n>     344  </q-n></a>    result : <q-a>out</q-w> UNRESOLVED_sfixed;
<a name="345"><q-n>     345  </q-n></a>    c_out  : <q-a>out</q-w> <q-t>STD_ULOGIC</q-w>);
<a name="346"><q-n>     346  </q-n></a>
<a name="347"><q-n>     347  </q-n></a>  <q-m>-- Scales the result by a power of 2.  Width of input = width of output with</q-m>
<a name="348"><q-n>     348  </q-n></a>  <q-m>-- the binary point moved.</q-m>
<a name="349"><q-n>     349  </q-n></a>  <q-w>function</q-w> scalb (y : UNRESOLVED_ufixed; N : <q-t>INTEGER</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="350"><q-n>     350  </q-n></a>  <q-w>function</q-w> scalb (y : UNRESOLVED_ufixed; N : <q-t>SIGNED</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="351"><q-n>     351  </q-n></a>  <q-w>function</q-w> scalb (y : UNRESOLVED_sfixed; N : <q-t>INTEGER</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="352"><q-n>     352  </q-n></a>  <q-w>function</q-w> scalb (y : UNRESOLVED_sfixed; N : <q-t>SIGNED</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="353"><q-n>     353  </q-n></a>
<a name="354"><q-n>     354  </q-n></a>  <q-w>function</q-w> Is_Negative (arg : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="355"><q-n>     355  </q-n></a>
<a name="356"><q-n>     356  </q-n></a>  <q-m>--===========================================================================</q-m>
<a name="357"><q-n>     357  </q-n></a>  <q-m>-- Comparison Operators</q-m>
<a name="358"><q-n>     358  </q-n></a>  <q-m>--===========================================================================</q-m>
<a name="359"><q-n>     359  </q-n></a>
<a name="360"><q-n>     360  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l>  (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="361"><q-n>     361  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l>  (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="362"><q-n>     362  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l>  (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="363"><q-n>     363  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l>  (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="364"><q-n>     364  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="365"><q-n>     365  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="366"><q-n>     366  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="367"><q-n>     367  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="368"><q-n>     368  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l>  (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="369"><q-n>     369  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l>  (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="370"><q-n>     370  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="371"><q-n>     371  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="372"><q-n>     372  </q-n></a>
<a name="373"><q-n>     373  </q-n></a>  <q-w>function</q-w> \?=\  (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="374"><q-n>     374  </q-n></a>  <q-w>function</q-w> \?/=\ (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="375"><q-n>     375  </q-n></a>  <q-w>function</q-w> \?&gt;\  (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="376"><q-n>     376  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="377"><q-n>     377  </q-n></a>  <q-w>function</q-w> \?&lt;\  (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="378"><q-n>     378  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="379"><q-n>     379  </q-n></a>  <q-w>function</q-w> \?=\  (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="380"><q-n>     380  </q-n></a>  <q-w>function</q-w> \?/=\ (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="381"><q-n>     381  </q-n></a>  <q-w>function</q-w> \?&gt;\  (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="382"><q-n>     382  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="383"><q-n>     383  </q-n></a>  <q-w>function</q-w> \?&lt;\  (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="384"><q-n>     384  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="385"><q-n>     385  </q-n></a>
<a name="386"><q-n>     386  </q-n></a>  <q-w>function</q-w> std_match (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="387"><q-n>     387  </q-n></a>  <q-w>function</q-w> std_match (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="388"><q-n>     388  </q-n></a>
<a name="389"><q-n>     389  </q-n></a>  <q-m>-- Overloads the default "maximum" and "minimum" function</q-m>
<a name="390"><q-n>     390  </q-n></a>
<a name="391"><q-n>     391  </q-n></a>  <q-w>function</q-w> maximum (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="392"><q-n>     392  </q-n></a>  <q-w>function</q-w> minimum (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="393"><q-n>     393  </q-n></a>  <q-w>function</q-w> maximum (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="394"><q-n>     394  </q-n></a>  <q-w>function</q-w> minimum (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="395"><q-n>     395  </q-n></a>
<a name="396"><q-n>     396  </q-n></a>  <q-m>----------------------------------------------------------------------------</q-m>
<a name="397"><q-n>     397  </q-n></a>  <q-m>-- In these compare functions a natural is converted into a</q-m>
<a name="398"><q-n>     398  </q-n></a>  <q-m>-- fixed point number of the bounds "maximum(l'high,0) downto 0"</q-m>
<a name="399"><q-n>     399  </q-n></a>  <q-m>----------------------------------------------------------------------------</q-m>
<a name="400"><q-n>     400  </q-n></a>
<a name="401"><q-n>     401  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l>  (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="402"><q-n>     402  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="403"><q-n>     403  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="404"><q-n>     404  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="405"><q-n>     405  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l>  (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="406"><q-n>     406  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l>  (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="407"><q-n>     407  </q-n></a>
<a name="408"><q-n>     408  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l>  (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="409"><q-n>     409  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="410"><q-n>     410  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="411"><q-n>     411  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="412"><q-n>     412  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l>  (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="413"><q-n>     413  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l>  (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="414"><q-n>     414  </q-n></a>  
<a name="415"><q-n>     415  </q-n></a>  <q-w>function</q-w> \?=\  (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="416"><q-n>     416  </q-n></a>  <q-w>function</q-w> \?/=\ (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="417"><q-n>     417  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="418"><q-n>     418  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="419"><q-n>     419  </q-n></a>  <q-w>function</q-w> \?&gt;\  (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="420"><q-n>     420  </q-n></a>  <q-w>function</q-w> \?&lt;\  (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="421"><q-n>     421  </q-n></a>
<a name="422"><q-n>     422  </q-n></a>  <q-w>function</q-w> \?=\  (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="423"><q-n>     423  </q-n></a>  <q-w>function</q-w> \?/=\ (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="424"><q-n>     424  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="425"><q-n>     425  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="426"><q-n>     426  </q-n></a>  <q-w>function</q-w> \?&gt;\  (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="427"><q-n>     427  </q-n></a>  <q-w>function</q-w> \?&lt;\  (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="428"><q-n>     428  </q-n></a>
<a name="429"><q-n>     429  </q-n></a>  <q-w>function</q-w> maximum (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>)
<a name="430"><q-n>     430  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="431"><q-n>     431  </q-n></a>  <q-w>function</q-w> minimum (l : UNRESOLVED_ufixed; r : <q-t>NATURAL</q-w>)
<a name="432"><q-n>     432  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="433"><q-n>     433  </q-n></a>  <q-w>function</q-w> maximum (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed)
<a name="434"><q-n>     434  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="435"><q-n>     435  </q-n></a>  <q-w>function</q-w> minimum (l : <q-t>NATURAL</q-w>; r : UNRESOLVED_ufixed)
<a name="436"><q-n>     436  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="437"><q-n>     437  </q-n></a>  <q-m>----------------------------------------------------------------------------</q-m>
<a name="438"><q-n>     438  </q-n></a>  <q-m>-- In these compare functions a real is converted into a</q-m>
<a name="439"><q-n>     439  </q-n></a>  <q-m>-- fixed point number of the bounds "l'high+1 downto l'low"</q-m>
<a name="440"><q-n>     440  </q-n></a>  <q-m>----------------------------------------------------------------------------</q-m>
<a name="441"><q-n>     441  </q-n></a>
<a name="442"><q-n>     442  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l>  (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="443"><q-n>     443  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="444"><q-n>     444  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="445"><q-n>     445  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="446"><q-n>     446  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l>  (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="447"><q-n>     447  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l>  (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="448"><q-n>     448  </q-n></a>
<a name="449"><q-n>     449  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l>  (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="450"><q-n>     450  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="451"><q-n>     451  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="452"><q-n>     452  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="453"><q-n>     453  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l>  (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="454"><q-n>     454  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l>  (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="455"><q-n>     455  </q-n></a>
<a name="456"><q-n>     456  </q-n></a>  <q-w>function</q-w> \?=\  (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="457"><q-n>     457  </q-n></a>  <q-w>function</q-w> \?/=\ (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="458"><q-n>     458  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="459"><q-n>     459  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="460"><q-n>     460  </q-n></a>  <q-w>function</q-w> \?&gt;\  (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="461"><q-n>     461  </q-n></a>  <q-w>function</q-w> \?&lt;\  (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="462"><q-n>     462  </q-n></a>
<a name="463"><q-n>     463  </q-n></a>  <q-w>function</q-w> \?=\  (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="464"><q-n>     464  </q-n></a>  <q-w>function</q-w> \?/=\ (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="465"><q-n>     465  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="466"><q-n>     466  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="467"><q-n>     467  </q-n></a>  <q-w>function</q-w> \?&gt;\  (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="468"><q-n>     468  </q-n></a>  <q-w>function</q-w> \?&lt;\  (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="469"><q-n>     469  </q-n></a>
<a name="470"><q-n>     470  </q-n></a>  <q-w>function</q-w> maximum (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="471"><q-n>     471  </q-n></a>  <q-w>function</q-w> maximum (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="472"><q-n>     472  </q-n></a>  <q-w>function</q-w> minimum (l : UNRESOLVED_ufixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="473"><q-n>     473  </q-n></a>  <q-w>function</q-w> minimum (l : <q-t>REAL</q-w>; r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="474"><q-n>     474  </q-n></a>  <q-m>----------------------------------------------------------------------------</q-m>
<a name="475"><q-n>     475  </q-n></a>  <q-m>-- In these compare functions an integer is converted into a</q-m>
<a name="476"><q-n>     476  </q-n></a>  <q-m>-- fixed point number of the bounds "maximum(l'high,1) downto 0"</q-m>
<a name="477"><q-n>     477  </q-n></a>  <q-m>----------------------------------------------------------------------------</q-m>
<a name="478"><q-n>     478  </q-n></a>
<a name="479"><q-n>     479  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l>  (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="480"><q-n>     480  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="481"><q-n>     481  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="482"><q-n>     482  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="483"><q-n>     483  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l>  (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="484"><q-n>     484  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l>  (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="485"><q-n>     485  </q-n></a>
<a name="486"><q-n>     486  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l>  (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="487"><q-n>     487  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="488"><q-n>     488  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="489"><q-n>     489  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="490"><q-n>     490  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l>  (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="491"><q-n>     491  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l>  (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="492"><q-n>     492  </q-n></a>
<a name="493"><q-n>     493  </q-n></a>  <q-w>function</q-w> \?=\  (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="494"><q-n>     494  </q-n></a>  <q-w>function</q-w> \?/=\ (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="495"><q-n>     495  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="496"><q-n>     496  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="497"><q-n>     497  </q-n></a>  <q-w>function</q-w> \?&gt;\  (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="498"><q-n>     498  </q-n></a>  <q-w>function</q-w> \?&lt;\  (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="499"><q-n>     499  </q-n></a>
<a name="500"><q-n>     500  </q-n></a>  <q-w>function</q-w> \?=\  (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="501"><q-n>     501  </q-n></a>  <q-w>function</q-w> \?/=\ (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="502"><q-n>     502  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="503"><q-n>     503  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="504"><q-n>     504  </q-n></a>  <q-w>function</q-w> \?&gt;\  (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="505"><q-n>     505  </q-n></a>  <q-w>function</q-w> \?&lt;\  (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="506"><q-n>     506  </q-n></a>
<a name="507"><q-n>     507  </q-n></a>  <q-w>function</q-w> maximum (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>)
<a name="508"><q-n>     508  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="509"><q-n>     509  </q-n></a>  <q-w>function</q-w> maximum (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed)
<a name="510"><q-n>     510  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="511"><q-n>     511  </q-n></a>  <q-w>function</q-w> minimum (l : UNRESOLVED_sfixed; r : <q-t>INTEGER</q-w>)
<a name="512"><q-n>     512  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="513"><q-n>     513  </q-n></a>  <q-w>function</q-w> minimum (l : <q-t>INTEGER</q-w>; r : UNRESOLVED_sfixed)
<a name="514"><q-n>     514  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="515"><q-n>     515  </q-n></a>  <q-m>----------------------------------------------------------------------------</q-m>
<a name="516"><q-n>     516  </q-n></a>  <q-m>-- In these compare functions a real is converted into a</q-m>
<a name="517"><q-n>     517  </q-n></a>  <q-m>-- fixed point number of the bounds "l'high+1 downto l'low"</q-m>
<a name="518"><q-n>     518  </q-n></a>  <q-m>----------------------------------------------------------------------------</q-m>
<a name="519"><q-n>     519  </q-n></a>
<a name="520"><q-n>     520  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l>  (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="521"><q-n>     521  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="522"><q-n>     522  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="523"><q-n>     523  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="524"><q-n>     524  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l>  (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="525"><q-n>     525  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l>  (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="526"><q-n>     526  </q-n></a>
<a name="527"><q-n>     527  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l>  (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="528"><q-n>     528  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="529"><q-n>     529  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="530"><q-n>     530  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="531"><q-n>     531  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l>  (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="532"><q-n>     532  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l>  (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="533"><q-n>     533  </q-n></a>
<a name="534"><q-n>     534  </q-n></a>  <q-w>function</q-w> \?=\  (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="535"><q-n>     535  </q-n></a>  <q-w>function</q-w> \?/=\ (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="536"><q-n>     536  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="537"><q-n>     537  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="538"><q-n>     538  </q-n></a>  <q-w>function</q-w> \?&gt;\  (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="539"><q-n>     539  </q-n></a>  <q-w>function</q-w> \?&lt;\  (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="540"><q-n>     540  </q-n></a>
<a name="541"><q-n>     541  </q-n></a>  <q-w>function</q-w> \?=\  (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="542"><q-n>     542  </q-n></a>  <q-w>function</q-w> \?/=\ (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="543"><q-n>     543  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="544"><q-n>     544  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="545"><q-n>     545  </q-n></a>  <q-w>function</q-w> \?&gt;\  (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="546"><q-n>     546  </q-n></a>  <q-w>function</q-w> \?&lt;\  (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="547"><q-n>     547  </q-n></a>
<a name="548"><q-n>     548  </q-n></a>  <q-w>function</q-w> maximum (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="549"><q-n>     549  </q-n></a>  <q-w>function</q-w> maximum (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="550"><q-n>     550  </q-n></a>  <q-w>function</q-w> minimum (l : UNRESOLVED_sfixed; r : <q-t>REAL</q-w>) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="551"><q-n>     551  </q-n></a>  <q-w>function</q-w> minimum (l : <q-t>REAL</q-w>; r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="552"><q-n>     552  </q-n></a>  <q-m>--===========================================================================</q-m>
<a name="553"><q-n>     553  </q-n></a>  <q-m>-- Shift and Rotate Functions.</q-m>
<a name="554"><q-n>     554  </q-n></a>  <q-m>-- Note that sra and sla are not the same as the BIT_VECTOR version</q-m>
<a name="555"><q-n>     555  </q-n></a>  <q-m>--===========================================================================</q-m>
<a name="556"><q-n>     556  </q-n></a>
<a name="557"><q-n>     557  </q-n></a>  <q-w>function</q-w> <q-l>"sll"</q-l> (ARG : UNRESOLVED_ufixed; COUNT : <q-t>INTEGER</q-w>)
<a name="558"><q-n>     558  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="559"><q-n>     559  </q-n></a>  <q-w>function</q-w> <q-l>"srl"</q-l> (ARG : UNRESOLVED_ufixed; COUNT : <q-t>INTEGER</q-w>)
<a name="560"><q-n>     560  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="561"><q-n>     561  </q-n></a>  <q-w>function</q-w> <q-l>"rol"</q-l> (ARG : UNRESOLVED_ufixed; COUNT : <q-t>INTEGER</q-w>)
<a name="562"><q-n>     562  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="563"><q-n>     563  </q-n></a>  <q-w>function</q-w> <q-l>"ror"</q-l> (ARG : UNRESOLVED_ufixed; COUNT : <q-t>INTEGER</q-w>)
<a name="564"><q-n>     564  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="565"><q-n>     565  </q-n></a>  <q-w>function</q-w> <q-l>"sla"</q-l> (ARG : UNRESOLVED_ufixed; COUNT : <q-t>INTEGER</q-w>)
<a name="566"><q-n>     566  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="567"><q-n>     567  </q-n></a>  <q-w>function</q-w> <q-l>"sra"</q-l> (ARG : UNRESOLVED_ufixed; COUNT : <q-t>INTEGER</q-w>)
<a name="568"><q-n>     568  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="569"><q-n>     569  </q-n></a>  <q-w>function</q-w> <q-l>"sll"</q-l> (ARG : UNRESOLVED_sfixed; COUNT : <q-t>INTEGER</q-w>)
<a name="570"><q-n>     570  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="571"><q-n>     571  </q-n></a>  <q-w>function</q-w> <q-l>"srl"</q-l> (ARG : UNRESOLVED_sfixed; COUNT : <q-t>INTEGER</q-w>)
<a name="572"><q-n>     572  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="573"><q-n>     573  </q-n></a>  <q-w>function</q-w> <q-l>"rol"</q-l> (ARG : UNRESOLVED_sfixed; COUNT : <q-t>INTEGER</q-w>)
<a name="574"><q-n>     574  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="575"><q-n>     575  </q-n></a>  <q-w>function</q-w> <q-l>"ror"</q-l> (ARG : UNRESOLVED_sfixed; COUNT : <q-t>INTEGER</q-w>)
<a name="576"><q-n>     576  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="577"><q-n>     577  </q-n></a>  <q-w>function</q-w> <q-l>"sla"</q-l> (ARG : UNRESOLVED_sfixed; COUNT : <q-t>INTEGER</q-w>)
<a name="578"><q-n>     578  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="579"><q-n>     579  </q-n></a>  <q-w>function</q-w> <q-l>"sra"</q-l> (ARG : UNRESOLVED_sfixed; COUNT : <q-t>INTEGER</q-w>)
<a name="580"><q-n>     580  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="581"><q-n>     581  </q-n></a>  <q-w>function</q-w> SHIFT_LEFT  (ARG : UNRESOLVED_ufixed; COUNT : <q-t>NATURAL</q-w>)
<a name="582"><q-n>     582  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="583"><q-n>     583  </q-n></a>  <q-w>function</q-w> SHIFT_RIGHT (ARG : UNRESOLVED_ufixed; COUNT : <q-t>NATURAL</q-w>)
<a name="584"><q-n>     584  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="585"><q-n>     585  </q-n></a>  <q-w>function</q-w> SHIFT_LEFT  (ARG : UNRESOLVED_sfixed; COUNT : <q-t>NATURAL</q-w>)
<a name="586"><q-n>     586  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="587"><q-n>     587  </q-n></a>  <q-w>function</q-w> SHIFT_RIGHT (ARG : UNRESOLVED_sfixed; COUNT : <q-t>NATURAL</q-w>)
<a name="588"><q-n>     588  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="589"><q-n>     589  </q-n></a>
<a name="590"><q-n>     590  </q-n></a>  <q-m>----------------------------------------------------------------------------</q-m>
<a name="591"><q-n>     591  </q-n></a>  <q-m>-- logical functions</q-m>
<a name="592"><q-n>     592  </q-n></a>  <q-m>----------------------------------------------------------------------------</q-m>
<a name="593"><q-n>     593  </q-n></a>
<a name="594"><q-n>     594  </q-n></a>  <q-w>function</q-w> <q-l>"not"</q-l>  (l    : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="595"><q-n>     595  </q-n></a>  <q-w>function</q-w> <q-l>"and"</q-l>  (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="596"><q-n>     596  </q-n></a>  <q-w>function</q-w> <q-l>"or"</q-l>   (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="597"><q-n>     597  </q-n></a>  <q-w>function</q-w> <q-l>"nand"</q-l> (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="598"><q-n>     598  </q-n></a>  <q-w>function</q-w> <q-l>"nor"</q-l>  (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="599"><q-n>     599  </q-n></a>  <q-w>function</q-w> <q-l>"xor"</q-l>  (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="600"><q-n>     600  </q-n></a>  <q-w>function</q-w> <q-l>"xnor"</q-l> (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="601"><q-n>     601  </q-n></a>  <q-w>function</q-w> <q-l>"not"</q-l>  (l    : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="602"><q-n>     602  </q-n></a>  <q-w>function</q-w> <q-l>"and"</q-l>  (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="603"><q-n>     603  </q-n></a>  <q-w>function</q-w> <q-l>"or"</q-l>   (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="604"><q-n>     604  </q-n></a>  <q-w>function</q-w> <q-l>"nand"</q-l> (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="605"><q-n>     605  </q-n></a>  <q-w>function</q-w> <q-l>"nor"</q-l>  (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="606"><q-n>     606  </q-n></a>  <q-w>function</q-w> <q-l>"xor"</q-l>  (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="607"><q-n>     607  </q-n></a>  <q-w>function</q-w> <q-l>"xnor"</q-l> (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="608"><q-n>     608  </q-n></a>
<a name="609"><q-n>     609  </q-n></a>  <q-m>-- Vector and std_ulogic functions, same as functions in numeric_std</q-m>
<a name="610"><q-n>     610  </q-n></a>  <q-w>function</q-w> <q-l>"and"</q-l>  (l : <q-t>STD_ULOGIC</q-w>; r : UNRESOLVED_ufixed)
<a name="611"><q-n>     611  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="612"><q-n>     612  </q-n></a>  <q-w>function</q-w> <q-l>"and"</q-l>  (l : UNRESOLVED_ufixed; r : <q-t>STD_ULOGIC</q-w>)
<a name="613"><q-n>     613  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="614"><q-n>     614  </q-n></a>  <q-w>function</q-w> <q-l>"or"</q-l>   (l : <q-t>STD_ULOGIC</q-w>; r : UNRESOLVED_ufixed)
<a name="615"><q-n>     615  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="616"><q-n>     616  </q-n></a>  <q-w>function</q-w> <q-l>"or"</q-l>   (l : UNRESOLVED_ufixed; r : <q-t>STD_ULOGIC</q-w>)
<a name="617"><q-n>     617  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="618"><q-n>     618  </q-n></a>  <q-w>function</q-w> <q-l>"nand"</q-l> (l : <q-t>STD_ULOGIC</q-w>; r : UNRESOLVED_ufixed)
<a name="619"><q-n>     619  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="620"><q-n>     620  </q-n></a>  <q-w>function</q-w> <q-l>"nand"</q-l> (l : UNRESOLVED_ufixed; r : <q-t>STD_ULOGIC</q-w>)
<a name="621"><q-n>     621  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="622"><q-n>     622  </q-n></a>  <q-w>function</q-w> <q-l>"nor"</q-l>  (l : <q-t>STD_ULOGIC</q-w>; r : UNRESOLVED_ufixed)
<a name="623"><q-n>     623  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="624"><q-n>     624  </q-n></a>  <q-w>function</q-w> <q-l>"nor"</q-l>  (l : UNRESOLVED_ufixed; r : <q-t>STD_ULOGIC</q-w>)
<a name="625"><q-n>     625  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="626"><q-n>     626  </q-n></a>  <q-w>function</q-w> <q-l>"xor"</q-l>  (l : <q-t>STD_ULOGIC</q-w>; r : UNRESOLVED_ufixed)
<a name="627"><q-n>     627  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="628"><q-n>     628  </q-n></a>  <q-w>function</q-w> <q-l>"xor"</q-l>  (l : UNRESOLVED_ufixed; r : <q-t>STD_ULOGIC</q-w>)
<a name="629"><q-n>     629  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="630"><q-n>     630  </q-n></a>  <q-w>function</q-w> <q-l>"xnor"</q-l> (l : <q-t>STD_ULOGIC</q-w>; r : UNRESOLVED_ufixed)
<a name="631"><q-n>     631  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="632"><q-n>     632  </q-n></a>  <q-w>function</q-w> <q-l>"xnor"</q-l> (l : UNRESOLVED_ufixed; r : <q-t>STD_ULOGIC</q-w>)
<a name="633"><q-n>     633  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="634"><q-n>     634  </q-n></a>  <q-w>function</q-w> <q-l>"and"</q-l>  (l : <q-t>STD_ULOGIC</q-w>; r : UNRESOLVED_sfixed)
<a name="635"><q-n>     635  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="636"><q-n>     636  </q-n></a>  <q-w>function</q-w> <q-l>"and"</q-l>  (l : UNRESOLVED_sfixed; r : <q-t>STD_ULOGIC</q-w>)
<a name="637"><q-n>     637  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="638"><q-n>     638  </q-n></a>  <q-w>function</q-w> <q-l>"or"</q-l>   (l : <q-t>STD_ULOGIC</q-w>; r : UNRESOLVED_sfixed)
<a name="639"><q-n>     639  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="640"><q-n>     640  </q-n></a>  <q-w>function</q-w> <q-l>"or"</q-l>   (l : UNRESOLVED_sfixed; r : <q-t>STD_ULOGIC</q-w>)
<a name="641"><q-n>     641  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="642"><q-n>     642  </q-n></a>  <q-w>function</q-w> <q-l>"nand"</q-l> (l : <q-t>STD_ULOGIC</q-w>; r : UNRESOLVED_sfixed)
<a name="643"><q-n>     643  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="644"><q-n>     644  </q-n></a>  <q-w>function</q-w> <q-l>"nand"</q-l> (l : UNRESOLVED_sfixed; r : <q-t>STD_ULOGIC</q-w>)
<a name="645"><q-n>     645  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="646"><q-n>     646  </q-n></a>  <q-w>function</q-w> <q-l>"nor"</q-l>  (l : <q-t>STD_ULOGIC</q-w>; r : UNRESOLVED_sfixed)
<a name="647"><q-n>     647  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="648"><q-n>     648  </q-n></a>  <q-w>function</q-w> <q-l>"nor"</q-l>  (l : UNRESOLVED_sfixed; r : <q-t>STD_ULOGIC</q-w>)
<a name="649"><q-n>     649  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="650"><q-n>     650  </q-n></a>  <q-w>function</q-w> <q-l>"xor"</q-l>  (l : <q-t>STD_ULOGIC</q-w>; r : UNRESOLVED_sfixed)
<a name="651"><q-n>     651  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="652"><q-n>     652  </q-n></a>  <q-w>function</q-w> <q-l>"xor"</q-l>  (l : UNRESOLVED_sfixed; r : <q-t>STD_ULOGIC</q-w>)
<a name="653"><q-n>     653  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="654"><q-n>     654  </q-n></a>  <q-w>function</q-w> <q-l>"xnor"</q-l> (l : <q-t>STD_ULOGIC</q-w>; r : UNRESOLVED_sfixed)
<a name="655"><q-n>     655  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="656"><q-n>     656  </q-n></a>  <q-w>function</q-w> <q-l>"xnor"</q-l> (l : UNRESOLVED_sfixed; r : <q-t>STD_ULOGIC</q-w>)
<a name="657"><q-n>     657  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="658"><q-n>     658  </q-n></a>
<a name="659"><q-n>     659  </q-n></a>  <q-m>-- Reduction operators, same as numeric_std functions</q-m>
<a name="660"><q-n>     660  </q-n></a>  <q-w>function</q-w> and_reduce (l : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="661"><q-n>     661  </q-n></a>  <q-w>function</q-w> nand_reduce (l : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="662"><q-n>     662  </q-n></a>  <q-w>function</q-w> or_reduce (l : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="663"><q-n>     663  </q-n></a>  <q-w>function</q-w> nor_reduce (l : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="664"><q-n>     664  </q-n></a>  <q-w>function</q-w> xor_reduce (l : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="665"><q-n>     665  </q-n></a>  <q-w>function</q-w> xnor_reduce (l : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="666"><q-n>     666  </q-n></a>  <q-w>function</q-w> and_reduce (l : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="667"><q-n>     667  </q-n></a>  <q-w>function</q-w> nand_reduce (l : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="668"><q-n>     668  </q-n></a>  <q-w>function</q-w> or_reduce (l : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="669"><q-n>     669  </q-n></a>  <q-w>function</q-w> nor_reduce (l : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="670"><q-n>     670  </q-n></a>  <q-w>function</q-w> xor_reduce (l : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="671"><q-n>     671  </q-n></a>  <q-w>function</q-w> xnor_reduce (l : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="672"><q-n>     672  </q-n></a>
<a name="673"><q-n>     673  </q-n></a>  <q-m>-- returns arg'low-1 if not found</q-m>
<a name="674"><q-n>     674  </q-n></a>  <q-w>function</q-w> find_leftmost (arg : UNRESOLVED_ufixed; y : <q-t>STD_ULOGIC</q-w>)
<a name="675"><q-n>     675  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="676"><q-n>     676  </q-n></a>  <q-w>function</q-w> find_leftmost (arg : UNRESOLVED_sfixed; y : <q-t>STD_ULOGIC</q-w>)
<a name="677"><q-n>     677  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="678"><q-n>     678  </q-n></a>
<a name="679"><q-n>     679  </q-n></a>  <q-m>-- returns arg'high+1 if not found</q-m>
<a name="680"><q-n>     680  </q-n></a>  <q-w>function</q-w> find_rightmost (arg : UNRESOLVED_ufixed; y : <q-t>STD_ULOGIC</q-w>)
<a name="681"><q-n>     681  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="682"><q-n>     682  </q-n></a>  <q-w>function</q-w> find_rightmost (arg : UNRESOLVED_sfixed; y : <q-t>STD_ULOGIC</q-w>)
<a name="683"><q-n>     683  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="684"><q-n>     684  </q-n></a>
<a name="685"><q-n>     685  </q-n></a>  <q-m>--===========================================================================</q-m>
<a name="686"><q-n>     686  </q-n></a>  <q-m>--   RESIZE Functions</q-m>
<a name="687"><q-n>     687  </q-n></a>  <q-m>--===========================================================================</q-m>
<a name="688"><q-n>     688  </q-n></a>  <q-m>-- resizes the number (larger or smaller)</q-m>
<a name="689"><q-n>     689  </q-n></a>  <q-m>-- The returned result will be ufixed (left_index downto right_index)</q-m>
<a name="690"><q-n>     690  </q-n></a>  <q-m>-- If "round_style" is fixed_round, then the result will be rounded.</q-m>
<a name="691"><q-n>     691  </q-n></a>  <q-m>-- If the MSB of the remainder is a "1" AND the LSB of the unrounded result</q-m>
<a name="692"><q-n>     692  </q-n></a>  <q-m>-- is a '1' or the lower bits of the remainder include a '1' then the result</q-m>
<a name="693"><q-n>     693  </q-n></a>  <q-m>-- will be increased by the smallest representable number for that type.</q-m>
<a name="694"><q-n>     694  </q-n></a>  <q-m>-- "overflow_style" can be fixed_saturate or fixed_wrap.</q-m>
<a name="695"><q-n>     695  </q-n></a>  <q-m>-- In saturate mode, if the number overflows then the largest possible</q-m>
<a name="696"><q-n>     696  </q-n></a>  <q-m>-- representable number is returned.  If wrap mode, then the upper bits</q-m>
<a name="697"><q-n>     697  </q-n></a>  <q-m>-- of the number are truncated.</q-m>
<a name="698"><q-n>     698  </q-n></a>  
<a name="699"><q-n>     699  </q-n></a>  <q-w>function</q-w> resize (
<a name="700"><q-n>     700  </q-n></a>    arg                     : UNRESOLVED_ufixed;  <q-m>-- input</q-m>
<a name="701"><q-n>     701  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- integer portion</q-m>
<a name="702"><q-n>     702  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>;  <q-m>-- size of fraction</q-m>
<a name="703"><q-n>     703  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="704"><q-n>     704  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="705"><q-n>     705  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="706"><q-n>     706  </q-n></a>
<a name="707"><q-n>     707  </q-n></a>  <q-m>-- "size_res" functions create the size of the output from the indices</q-m>
<a name="708"><q-n>     708  </q-n></a>  <q-m>-- of the "size_res" input.  The actual value of "size_res" is not used.</q-m>
<a name="709"><q-n>     709  </q-n></a>  <q-w>function</q-w> resize (
<a name="710"><q-n>     710  </q-n></a>    arg                     : UNRESOLVED_ufixed;  <q-m>-- input</q-m>
<a name="711"><q-n>     711  </q-n></a>    size_res                : UNRESOLVED_ufixed;  <q-m>-- for size only</q-m>
<a name="712"><q-n>     712  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="713"><q-n>     713  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="714"><q-n>     714  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="715"><q-n>     715  </q-n></a>
<a name="716"><q-n>     716  </q-n></a>  <q-m>-- Note that in "wrap" mode the sign bit is not replicated.  Thus the</q-m>
<a name="717"><q-n>     717  </q-n></a>  <q-m>-- resize of a negative number can have a positive result in wrap mode.</q-m>
<a name="718"><q-n>     718  </q-n></a>  <q-w>function</q-w> resize (
<a name="719"><q-n>     719  </q-n></a>    arg                     : UNRESOLVED_sfixed;  <q-m>-- input</q-m>
<a name="720"><q-n>     720  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;            <q-m>-- integer portion</q-m>
<a name="721"><q-n>     721  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>;            <q-m>-- size of fraction</q-m>
<a name="722"><q-n>     722  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="723"><q-n>     723  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="724"><q-n>     724  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="725"><q-n>     725  </q-n></a>
<a name="726"><q-n>     726  </q-n></a>  <q-w>function</q-w> resize (
<a name="727"><q-n>     727  </q-n></a>    arg                     : UNRESOLVED_sfixed;  <q-m>-- input</q-m>
<a name="728"><q-n>     728  </q-n></a>    size_res                : UNRESOLVED_sfixed;  <q-m>-- for size only</q-m>
<a name="729"><q-n>     729  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="730"><q-n>     730  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="731"><q-n>     731  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="732"><q-n>     732  </q-n></a>
<a name="733"><q-n>     733  </q-n></a>  <q-m>--===========================================================================</q-m>
<a name="734"><q-n>     734  </q-n></a>  <q-m>-- Conversion Functions</q-m>
<a name="735"><q-n>     735  </q-n></a>  <q-m>--===========================================================================</q-m>
<a name="736"><q-n>     736  </q-n></a>
<a name="737"><q-n>     737  </q-n></a>  <q-m>-- integer (natural) to unsigned fixed point.</q-m>
<a name="738"><q-n>     738  </q-n></a>  <q-m>-- arguments are the upper and lower bounds of the number, thus</q-m>
<a name="739"><q-n>     739  </q-n></a>  <q-m>-- ufixed (7 downto -3) &lt;= to_ufixed (int, 7, -3);</q-m>
<a name="740"><q-n>     740  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="741"><q-n>     741  </q-n></a>    arg                     : <q-t>NATURAL</q-w>;  <q-m>-- integer</q-m>
<a name="742"><q-n>     742  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- left index (high index)</q-m>
<a name="743"><q-n>     743  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>                   := 0;  <q-m>-- right index</q-m>
<a name="744"><q-n>     744  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="745"><q-n>     745  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="746"><q-n>     746  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="747"><q-n>     747  </q-n></a>
<a name="748"><q-n>     748  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="749"><q-n>     749  </q-n></a>    arg                     : <q-t>NATURAL</q-w>;            <q-m>-- integer</q-m>
<a name="750"><q-n>     750  </q-n></a>    size_res                : UNRESOLVED_ufixed;  <q-m>-- for size only</q-m>
<a name="751"><q-n>     751  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="752"><q-n>     752  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="753"><q-n>     753  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="754"><q-n>     754  </q-n></a>
<a name="755"><q-n>     755  </q-n></a>  <q-m>-- real to unsigned fixed point</q-m>
<a name="756"><q-n>     756  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="757"><q-n>     757  </q-n></a>    arg                     : <q-t>REAL</q-w>;     <q-m>-- real</q-m>
<a name="758"><q-n>     758  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- left index (high index)</q-m>
<a name="759"><q-n>     759  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>;  <q-m>-- right index</q-m>
<a name="760"><q-n>     760  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="761"><q-n>     761  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style;
<a name="762"><q-n>     762  </q-n></a>    <q-w>constant</q-w> guard_bits     : <q-t>NATURAL</q-w>                   := fixed_guard_bits)
<a name="763"><q-n>     763  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="764"><q-n>     764  </q-n></a>
<a name="765"><q-n>     765  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="766"><q-n>     766  </q-n></a>    arg                     : <q-t>REAL</q-w>;     <q-m>-- real</q-m>
<a name="767"><q-n>     767  </q-n></a>    size_res                : UNRESOLVED_ufixed;  <q-m>-- for size only</q-m>
<a name="768"><q-n>     768  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="769"><q-n>     769  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style;
<a name="770"><q-n>     770  </q-n></a>    <q-w>constant</q-w> guard_bits     : <q-t>NATURAL</q-w>                   := fixed_guard_bits)
<a name="771"><q-n>     771  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="772"><q-n>     772  </q-n></a>
<a name="773"><q-n>     773  </q-n></a>  <q-m>-- unsigned to unsigned fixed point</q-m>
<a name="774"><q-n>     774  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="775"><q-n>     775  </q-n></a>    arg                     : <q-t>UNSIGNED</q-w>;                        <q-m>-- unsigned</q-m>
<a name="776"><q-n>     776  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- left index (high index)</q-m>
<a name="777"><q-n>     777  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>                   := 0;  <q-m>-- right index</q-m>
<a name="778"><q-n>     778  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="779"><q-n>     779  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="780"><q-n>     780  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="781"><q-n>     781  </q-n></a>
<a name="782"><q-n>     782  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="783"><q-n>     783  </q-n></a>    arg                     : <q-t>UNSIGNED</q-w>;           <q-m>-- unsigned</q-m>
<a name="784"><q-n>     784  </q-n></a>    size_res                : UNRESOLVED_ufixed;  <q-m>-- for size only</q-m>
<a name="785"><q-n>     785  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="786"><q-n>     786  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="787"><q-n>     787  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="788"><q-n>     788  </q-n></a>
<a name="789"><q-n>     789  </q-n></a>  <q-m>-- Performs a conversion.  ufixed (arg'range) is returned</q-m>
<a name="790"><q-n>     790  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="791"><q-n>     791  </q-n></a>    arg : <q-t>UNSIGNED</q-w>)          <q-m>-- unsigned</q-m>
<a name="792"><q-n>     792  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="793"><q-n>     793  </q-n></a>
<a name="794"><q-n>     794  </q-n></a>  <q-m>-- unsigned fixed point to unsigned</q-m>
<a name="795"><q-n>     795  </q-n></a>  <q-w>function</q-w> to_unsigned (
<a name="796"><q-n>     796  </q-n></a>    arg                     : UNRESOLVED_ufixed;  <q-m>-- fixed point input</q-m>
<a name="797"><q-n>     797  </q-n></a>    <q-w>constant</q-w> size           : <q-t>NATURAL</q-w>;            <q-m>-- length of output</q-m>
<a name="798"><q-n>     798  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="799"><q-n>     799  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="800"><q-n>     800  </q-n></a>    <q-w>return</q-w> <q-t>UNSIGNED</q-w>;
<a name="801"><q-n>     801  </q-n></a>
<a name="802"><q-n>     802  </q-n></a>  <q-m>-- unsigned fixed point to unsigned</q-m>
<a name="803"><q-n>     803  </q-n></a>  <q-w>function</q-w> to_unsigned (
<a name="804"><q-n>     804  </q-n></a>    arg                     : UNRESOLVED_ufixed;    <q-m>-- fixed point input</q-m>
<a name="805"><q-n>     805  </q-n></a>    size_res                : <q-t>UNSIGNED</q-w>;  <q-m>-- used for length of output</q-m>
<a name="806"><q-n>     806  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="807"><q-n>     807  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="808"><q-n>     808  </q-n></a>    <q-w>return</q-w> <q-t>UNSIGNED</q-w>;
<a name="809"><q-n>     809  </q-n></a>
<a name="810"><q-n>     810  </q-n></a>  <q-m>-- unsigned fixed point to real</q-m>
<a name="811"><q-n>     811  </q-n></a>  <q-w>function</q-w> to_real (
<a name="812"><q-n>     812  </q-n></a>    arg : UNRESOLVED_ufixed)            <q-m>-- fixed point input</q-m>
<a name="813"><q-n>     813  </q-n></a>    <q-w>return</q-w> <q-t>REAL</q-w>;
<a name="814"><q-n>     814  </q-n></a>
<a name="815"><q-n>     815  </q-n></a>  <q-m>-- unsigned fixed point to integer</q-m>
<a name="816"><q-n>     816  </q-n></a>  <q-w>function</q-w> to_integer (
<a name="817"><q-n>     817  </q-n></a>    arg                     : UNRESOLVED_ufixed;  <q-m>-- fixed point input</q-m>
<a name="818"><q-n>     818  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="819"><q-n>     819  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="820"><q-n>     820  </q-n></a>    <q-w>return</q-w> <q-t>NATURAL</q-w>;
<a name="821"><q-n>     821  </q-n></a>
<a name="822"><q-n>     822  </q-n></a>  <q-m>-- Integer to UNRESOLVED_sfixed</q-m>
<a name="823"><q-n>     823  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="824"><q-n>     824  </q-n></a>    arg                     : <q-t>INTEGER</q-w>;  <q-m>-- integer</q-m>
<a name="825"><q-n>     825  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- left index (high index)</q-m>
<a name="826"><q-n>     826  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>                   := 0;  <q-m>-- right index</q-m>
<a name="827"><q-n>     827  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="828"><q-n>     828  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="829"><q-n>     829  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="830"><q-n>     830  </q-n></a>
<a name="831"><q-n>     831  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="832"><q-n>     832  </q-n></a>    arg                     : <q-t>INTEGER</q-w>;            <q-m>-- integer</q-m>
<a name="833"><q-n>     833  </q-n></a>    size_res                : UNRESOLVED_sfixed;  <q-m>-- for size only</q-m>
<a name="834"><q-n>     834  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="835"><q-n>     835  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="836"><q-n>     836  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="837"><q-n>     837  </q-n></a>
<a name="838"><q-n>     838  </q-n></a>  <q-m>-- Real to sfixed</q-m>
<a name="839"><q-n>     839  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="840"><q-n>     840  </q-n></a>    arg                     : <q-t>REAL</q-w>;     <q-m>-- real</q-m>
<a name="841"><q-n>     841  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- left index (high index)</q-m>
<a name="842"><q-n>     842  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>;  <q-m>-- right index</q-m>
<a name="843"><q-n>     843  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="844"><q-n>     844  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style;
<a name="845"><q-n>     845  </q-n></a>    <q-w>constant</q-w> guard_bits     : <q-t>NATURAL</q-w>                   := fixed_guard_bits)
<a name="846"><q-n>     846  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="847"><q-n>     847  </q-n></a>
<a name="848"><q-n>     848  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="849"><q-n>     849  </q-n></a>    arg                     : <q-t>REAL</q-w>;     <q-m>-- real</q-m>
<a name="850"><q-n>     850  </q-n></a>    size_res                : UNRESOLVED_sfixed;  <q-m>-- for size only</q-m>
<a name="851"><q-n>     851  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="852"><q-n>     852  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style;
<a name="853"><q-n>     853  </q-n></a>    <q-w>constant</q-w> guard_bits     : <q-t>NATURAL</q-w>                   := fixed_guard_bits)
<a name="854"><q-n>     854  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="855"><q-n>     855  </q-n></a>
<a name="856"><q-n>     856  </q-n></a>  <q-m>-- signed to sfixed</q-m>
<a name="857"><q-n>     857  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="858"><q-n>     858  </q-n></a>    arg                     : <q-t>SIGNED</q-w>;               <q-m>-- signed</q-m>
<a name="859"><q-n>     859  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- left index (high index)</q-m>
<a name="860"><q-n>     860  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>                   := 0;  <q-m>-- right index</q-m>
<a name="861"><q-n>     861  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="862"><q-n>     862  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="863"><q-n>     863  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="864"><q-n>     864  </q-n></a>
<a name="865"><q-n>     865  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="866"><q-n>     866  </q-n></a>    arg                     : <q-t>SIGNED</q-w>;  <q-m>-- signed</q-m>
<a name="867"><q-n>     867  </q-n></a>    size_res                : UNRESOLVED_sfixed;  <q-m>-- for size only</q-m>
<a name="868"><q-n>     868  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="869"><q-n>     869  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="870"><q-n>     870  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="871"><q-n>     871  </q-n></a>
<a name="872"><q-n>     872  </q-n></a>  <q-m>-- signed to sfixed (output assumed to be size of signed input)</q-m>
<a name="873"><q-n>     873  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="874"><q-n>     874  </q-n></a>    arg : <q-t>SIGNED</q-w>)            <q-m>-- signed</q-m>
<a name="875"><q-n>     875  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="876"><q-n>     876  </q-n></a>
<a name="877"><q-n>     877  </q-n></a>  <q-m>-- Conversion from ufixed to sfixed</q-m>
<a name="878"><q-n>     878  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="879"><q-n>     879  </q-n></a>    arg : UNRESOLVED_ufixed)
<a name="880"><q-n>     880  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="881"><q-n>     881  </q-n></a>
<a name="882"><q-n>     882  </q-n></a>  <q-m>-- signed fixed point to signed</q-m>
<a name="883"><q-n>     883  </q-n></a>  <q-w>function</q-w> to_signed (
<a name="884"><q-n>     884  </q-n></a>    arg                     : UNRESOLVED_sfixed;  <q-m>-- fixed point input</q-m>
<a name="885"><q-n>     885  </q-n></a>    <q-w>constant</q-w> size           : <q-t>NATURAL</q-w>;            <q-m>-- length of output</q-m>
<a name="886"><q-n>     886  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="887"><q-n>     887  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="888"><q-n>     888  </q-n></a>    <q-w>return</q-w> <q-t>SIGNED</q-w>;
<a name="889"><q-n>     889  </q-n></a>
<a name="890"><q-n>     890  </q-n></a>  <q-m>-- signed fixed point to signed</q-m>
<a name="891"><q-n>     891  </q-n></a>  <q-w>function</q-w> to_signed (
<a name="892"><q-n>     892  </q-n></a>    arg                     : UNRESOLVED_sfixed;  <q-m>-- fixed point input</q-m>
<a name="893"><q-n>     893  </q-n></a>    size_res                : <q-t>SIGNED</q-w>;  <q-m>-- used for length of output</q-m>
<a name="894"><q-n>     894  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="895"><q-n>     895  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="896"><q-n>     896  </q-n></a>    <q-w>return</q-w> <q-t>SIGNED</q-w>;
<a name="897"><q-n>     897  </q-n></a>
<a name="898"><q-n>     898  </q-n></a>  <q-m>-- signed fixed point to real</q-m>
<a name="899"><q-n>     899  </q-n></a>  <q-w>function</q-w> to_real (
<a name="900"><q-n>     900  </q-n></a>    arg : UNRESOLVED_sfixed)            <q-m>-- fixed point input</q-m>
<a name="901"><q-n>     901  </q-n></a>    <q-w>return</q-w> <q-t>REAL</q-w>;
<a name="902"><q-n>     902  </q-n></a>
<a name="903"><q-n>     903  </q-n></a>  <q-m>-- signed fixed point to integer</q-m>
<a name="904"><q-n>     904  </q-n></a>  <q-w>function</q-w> to_integer (
<a name="905"><q-n>     905  </q-n></a>    arg                     : UNRESOLVED_sfixed;  <q-m>-- fixed point input</q-m>
<a name="906"><q-n>     906  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="907"><q-n>     907  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="908"><q-n>     908  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="909"><q-n>     909  </q-n></a>
<a name="910"><q-n>     910  </q-n></a>  <q-m>-- Because of the fairly complicated sizing rules in the fixed point</q-m>
<a name="911"><q-n>     911  </q-n></a>  <q-m>-- packages these functions are provided to compute the result ranges</q-m>
<a name="912"><q-n>     912  </q-n></a>  <q-m>-- Example:</q-m>
<a name="913"><q-n>     913  </q-n></a>  <q-m>-- signal uf1 : ufixed (3 downto -3);</q-m>
<a name="914"><q-n>     914  </q-n></a>  <q-m>-- signal uf2 : ufixed (4 downto -2);</q-m>
<a name="915"><q-n>     915  </q-n></a>  <q-m>-- signal uf1multuf2 : ufixed (ufixed_high (3, -3, '*', 4, -2) downto</q-m>
<a name="916"><q-n>     916  </q-n></a>  <q-m>--                             ufixed_low (3, -3, '*', 4, -2));</q-m>
<a name="917"><q-n>     917  </q-n></a>  <q-m>-- uf1multuf2 &lt;= uf1 * uf2;</q-m>
<a name="918"><q-n>     918  </q-n></a>  <q-m>-- Valid characters: '+', '-', '*', '/', 'r' or 'R' (rem), 'm' or 'M' (mod),</q-m>
<a name="919"><q-n>     919  </q-n></a>  <q-m>--                   '1' (reciprocal), 'a' or 'A' (abs), 'n' or 'N' (unary -)</q-m>
<a name="920"><q-n>     920  </q-n></a>  <q-w>function</q-w> ufixed_high (left_index, right_index   : <q-t>INTEGER</q-w>;
<a name="921"><q-n>     921  </q-n></a>                        operation                 : <q-t>CHARACTER</q-w> := 'X';
<a name="922"><q-n>     922  </q-n></a>                        left_index2, right_index2 : <q-t>INTEGER</q-w>   := 0)
<a name="923"><q-n>     923  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="924"><q-n>     924  </q-n></a>  
<a name="925"><q-n>     925  </q-n></a>  <q-w>function</q-w> ufixed_low (left_index, right_index   : <q-t>INTEGER</q-w>;
<a name="926"><q-n>     926  </q-n></a>                       operation                 : <q-t>CHARACTER</q-w> := 'X';
<a name="927"><q-n>     927  </q-n></a>                       left_index2, right_index2 : <q-t>INTEGER</q-w>   := 0)
<a name="928"><q-n>     928  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="929"><q-n>     929  </q-n></a>  
<a name="930"><q-n>     930  </q-n></a>  <q-w>function</q-w> sfixed_high (left_index, right_index   : <q-t>INTEGER</q-w>;
<a name="931"><q-n>     931  </q-n></a>                        operation                 : <q-t>CHARACTER</q-w> := 'X';
<a name="932"><q-n>     932  </q-n></a>                        left_index2, right_index2 : <q-t>INTEGER</q-w>   := 0)
<a name="933"><q-n>     933  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="934"><q-n>     934  </q-n></a>  
<a name="935"><q-n>     935  </q-n></a>  <q-w>function</q-w> sfixed_low (left_index, right_index   : <q-t>INTEGER</q-w>;
<a name="936"><q-n>     936  </q-n></a>                       operation                 : <q-t>CHARACTER</q-w> := 'X';
<a name="937"><q-n>     937  </q-n></a>                       left_index2, right_index2 : <q-t>INTEGER</q-w>   := 0)
<a name="938"><q-n>     938  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="939"><q-n>     939  </q-n></a>
<a name="940"><q-n>     940  </q-n></a>  <q-m>-- Same as above, but using the "size_res" input only for their ranges:</q-m>
<a name="941"><q-n>     941  </q-n></a>  <q-m>-- signal uf1multuf2 : ufixed (ufixed_high (uf1, '*', uf2) downto</q-m>
<a name="942"><q-n>     942  </q-n></a>  <q-m>--                             ufixed_low (uf1, '*', uf2));</q-m>
<a name="943"><q-n>     943  </q-n></a>  <q-m>-- uf1multuf2 &lt;= uf1 * uf2;</q-m>
<a name="944"><q-n>     944  </q-n></a>  <q-m>-- </q-m>
<a name="945"><q-n>     945  </q-n></a>  <q-w>function</q-w> ufixed_high (size_res  : UNRESOLVED_ufixed;
<a name="946"><q-n>     946  </q-n></a>                        operation : <q-t>CHARACTER</q-w> := 'X';
<a name="947"><q-n>     947  </q-n></a>                        size_res2 : UNRESOLVED_ufixed)
<a name="948"><q-n>     948  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="949"><q-n>     949  </q-n></a>  
<a name="950"><q-n>     950  </q-n></a>  <q-w>function</q-w> ufixed_low (size_res  : UNRESOLVED_ufixed;
<a name="951"><q-n>     951  </q-n></a>                       operation : <q-t>CHARACTER</q-w> := 'X';
<a name="952"><q-n>     952  </q-n></a>                       size_res2 : UNRESOLVED_ufixed)
<a name="953"><q-n>     953  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="954"><q-n>     954  </q-n></a>  
<a name="955"><q-n>     955  </q-n></a>  <q-w>function</q-w> sfixed_high (size_res  : UNRESOLVED_sfixed;
<a name="956"><q-n>     956  </q-n></a>                        operation : <q-t>CHARACTER</q-w> := 'X';
<a name="957"><q-n>     957  </q-n></a>                        size_res2 : UNRESOLVED_sfixed)
<a name="958"><q-n>     958  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="959"><q-n>     959  </q-n></a>  
<a name="960"><q-n>     960  </q-n></a>  <q-w>function</q-w> sfixed_low (size_res  : UNRESOLVED_sfixed;
<a name="961"><q-n>     961  </q-n></a>                       operation : <q-t>CHARACTER</q-w> := 'X';
<a name="962"><q-n>     962  </q-n></a>                       size_res2 : UNRESOLVED_sfixed)
<a name="963"><q-n>     963  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="964"><q-n>     964  </q-n></a>
<a name="965"><q-n>     965  </q-n></a>  <q-m>-- purpose: returns a saturated number</q-m>
<a name="966"><q-n>     966  </q-n></a>  <q-w>function</q-w> saturate (
<a name="967"><q-n>     967  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="968"><q-n>     968  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="969"><q-n>     969  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="970"><q-n>     970  </q-n></a>
<a name="971"><q-n>     971  </q-n></a>  <q-m>-- purpose: returns a saturated number</q-m>
<a name="972"><q-n>     972  </q-n></a>  <q-w>function</q-w> saturate (
<a name="973"><q-n>     973  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="974"><q-n>     974  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="975"><q-n>     975  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="976"><q-n>     976  </q-n></a>
<a name="977"><q-n>     977  </q-n></a>  <q-w>function</q-w> saturate (
<a name="978"><q-n>     978  </q-n></a>    size_res : UNRESOLVED_ufixed)       <q-m>-- only the size of this is used</q-m>
<a name="979"><q-n>     979  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="980"><q-n>     980  </q-n></a>
<a name="981"><q-n>     981  </q-n></a>  <q-w>function</q-w> saturate (
<a name="982"><q-n>     982  </q-n></a>    size_res : UNRESOLVED_sfixed)       <q-m>-- only the size of this is used</q-m>
<a name="983"><q-n>     983  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="984"><q-n>     984  </q-n></a>
<a name="985"><q-n>     985  </q-n></a>  <q-m>--===========================================================================</q-m>
<a name="986"><q-n>     986  </q-n></a>  <q-m>-- Translation Functions</q-m>
<a name="987"><q-n>     987  </q-n></a>  <q-m>--===========================================================================</q-m>
<a name="988"><q-n>     988  </q-n></a>
<a name="989"><q-n>     989  </q-n></a>  <q-m>-- maps meta-logical values</q-m>
<a name="990"><q-n>     990  </q-n></a>  <q-w>function</q-w> to_01 (
<a name="991"><q-n>     991  </q-n></a>    s             : UNRESOLVED_ufixed;  <q-m>-- fixed point input</q-m>
<a name="992"><q-n>     992  </q-n></a>    <q-w>constant</q-w> XMAP : <q-t>STD_ULOGIC</q-w> := '0')  <q-m>-- Map x to</q-m>
<a name="993"><q-n>     993  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="994"><q-n>     994  </q-n></a>
<a name="995"><q-n>     995  </q-n></a>  <q-m>-- maps meta-logical values</q-m>
<a name="996"><q-n>     996  </q-n></a>  <q-w>function</q-w> to_01 (
<a name="997"><q-n>     997  </q-n></a>    s             : UNRESOLVED_sfixed;  <q-m>-- fixed point input</q-m>
<a name="998"><q-n>     998  </q-n></a>    <q-w>constant</q-w> XMAP : <q-t>STD_ULOGIC</q-w> := '0')  <q-m>-- Map x to</q-m>
<a name="999"><q-n>     999  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1000"><q-n>     1000  </q-n></a>
<a name="1001"><q-n>     1001  </q-n></a>  <q-w>function</q-w> Is_X    (arg : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="1002"><q-n>     1002  </q-n></a>  <q-w>function</q-w> Is_X    (arg : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w>;
<a name="1003"><q-n>     1003  </q-n></a>  <q-w>function</q-w> to_X01  (arg : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1004"><q-n>     1004  </q-n></a>  <q-w>function</q-w> to_X01  (arg : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1005"><q-n>     1005  </q-n></a>  <q-w>function</q-w> to_X01Z (arg : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1006"><q-n>     1006  </q-n></a>  <q-w>function</q-w> to_X01Z (arg : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1007"><q-n>     1007  </q-n></a>  <q-w>function</q-w> to_UX01 (arg : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1008"><q-n>     1008  </q-n></a>  <q-w>function</q-w> to_UX01 (arg : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1009"><q-n>     1009  </q-n></a>
<a name="1010"><q-n>     1010  </q-n></a>  <q-m>-- straight vector conversion routines, needed for synthesis.</q-m>
<a name="1011"><q-n>     1011  </q-n></a>  <q-m>-- These functions are here so that a std_logic_vector can be</q-m>
<a name="1012"><q-n>     1012  </q-n></a>  <q-m>-- converted to and from sfixed and ufixed.  Note that you can</q-m>
<a name="1013"><q-n>     1013  </q-n></a>  <q-m>-- not convert these vectors because of their negative index.</q-m>
<a name="1014"><q-n>     1014  </q-n></a>  
<a name="1015"><q-n>     1015  </q-n></a>  <q-w>function</q-w> to_slv (
<a name="1016"><q-n>     1016  </q-n></a>    arg : UNRESOLVED_ufixed)            <q-m>-- fixed point vector</q-m>
<a name="1017"><q-n>     1017  </q-n></a>    <q-w>return</q-w> <q-t>STD_LOGIC_VECTOR</q-w>;
<a name="1018"><q-n>     1018  </q-n></a>  <q-w>alias</q-w> to_StdLogicVector <q-w>is</q-w> to_slv [UNRESOLVED_ufixed
<a name="1019"><q-n>     1019  </q-n></a>                                     <q-w>return</q-w> <q-t>STD_LOGIC_VECTOR</q-w>];
<a name="1020"><q-n>     1020  </q-n></a>  <q-w>alias</q-w> to_Std_Logic_Vector <q-w>is</q-w> to_slv [UNRESOLVED_ufixed
<a name="1021"><q-n>     1021  </q-n></a>                                       <q-w>return</q-w> <q-t>STD_LOGIC_VECTOR</q-w>];
<a name="1022"><q-n>     1022  </q-n></a>
<a name="1023"><q-n>     1023  </q-n></a>  <q-w>function</q-w> to_slv (
<a name="1024"><q-n>     1024  </q-n></a>    arg : UNRESOLVED_sfixed)            <q-m>-- fixed point vector</q-m>
<a name="1025"><q-n>     1025  </q-n></a>    <q-w>return</q-w> <q-t>STD_LOGIC_VECTOR</q-w>;
<a name="1026"><q-n>     1026  </q-n></a>  <q-w>alias</q-w> to_StdLogicVector <q-w>is</q-w> to_slv [UNRESOLVED_sfixed
<a name="1027"><q-n>     1027  </q-n></a>                                     <q-w>return</q-w> <q-t>STD_LOGIC_VECTOR</q-w>];
<a name="1028"><q-n>     1028  </q-n></a>  <q-w>alias</q-w> to_Std_Logic_Vector <q-w>is</q-w> to_slv [UNRESOLVED_sfixed
<a name="1029"><q-n>     1029  </q-n></a>                                       <q-w>return</q-w> <q-t>STD_LOGIC_VECTOR</q-w>];
<a name="1030"><q-n>     1030  </q-n></a>
<a name="1031"><q-n>     1031  </q-n></a>  <q-w>function</q-w> to_sulv (
<a name="1032"><q-n>     1032  </q-n></a>    arg : UNRESOLVED_ufixed)            <q-m>-- fixed point vector</q-m>
<a name="1033"><q-n>     1033  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC_VECTOR</q-w>;
<a name="1034"><q-n>     1034  </q-n></a>  <q-w>alias</q-w> to_StdULogicVector <q-w>is</q-w> to_sulv [UNRESOLVED_ufixed
<a name="1035"><q-n>     1035  </q-n></a>                                      <q-w>return</q-w> <q-t>STD_ULOGIC_VECTOR</q-w>];
<a name="1036"><q-n>     1036  </q-n></a>  <q-w>alias</q-w> to_Std_ULogic_Vector <q-w>is</q-w> to_sulv [UNRESOLVED_ufixed
<a name="1037"><q-n>     1037  </q-n></a>                                        <q-w>return</q-w> <q-t>STD_ULOGIC_VECTOR</q-w>];
<a name="1038"><q-n>     1038  </q-n></a>
<a name="1039"><q-n>     1039  </q-n></a>  <q-w>function</q-w> to_sulv (
<a name="1040"><q-n>     1040  </q-n></a>    arg : UNRESOLVED_sfixed)            <q-m>-- fixed point vector</q-m>
<a name="1041"><q-n>     1041  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC_VECTOR</q-w>;
<a name="1042"><q-n>     1042  </q-n></a>  <q-w>alias</q-w> to_StdULogicVector <q-w>is</q-w> to_sulv [UNRESOLVED_sfixed
<a name="1043"><q-n>     1043  </q-n></a>                                      <q-w>return</q-w> <q-t>STD_ULOGIC_VECTOR</q-w>];
<a name="1044"><q-n>     1044  </q-n></a>  <q-w>alias</q-w> to_Std_ULogic_Vector <q-w>is</q-w> to_sulv [UNRESOLVED_sfixed
<a name="1045"><q-n>     1045  </q-n></a>                                        <q-w>return</q-w> <q-t>STD_ULOGIC_VECTOR</q-w>];
<a name="1046"><q-n>     1046  </q-n></a>
<a name="1047"><q-n>     1047  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="1048"><q-n>     1048  </q-n></a>    arg                  : <q-t>STD_ULOGIC_VECTOR</q-w>;  <q-m>-- shifted vector</q-m>
<a name="1049"><q-n>     1049  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="1050"><q-n>     1050  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="1051"><q-n>     1051  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1052"><q-n>     1052  </q-n></a>
<a name="1053"><q-n>     1053  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="1054"><q-n>     1054  </q-n></a>    arg      : <q-t>STD_ULOGIC_VECTOR</q-w>;       <q-m>-- shifted vector</q-m>
<a name="1055"><q-n>     1055  </q-n></a>    size_res : UNRESOLVED_ufixed)       <q-m>-- for size only</q-m>
<a name="1056"><q-n>     1056  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1057"><q-n>     1057  </q-n></a>
<a name="1058"><q-n>     1058  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="1059"><q-n>     1059  </q-n></a>    arg                  : <q-t>STD_ULOGIC_VECTOR</q-w>;  <q-m>-- shifted vector</q-m>
<a name="1060"><q-n>     1060  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="1061"><q-n>     1061  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="1062"><q-n>     1062  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1063"><q-n>     1063  </q-n></a>
<a name="1064"><q-n>     1064  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="1065"><q-n>     1065  </q-n></a>    arg      : <q-t>STD_ULOGIC_VECTOR</q-w>;       <q-m>-- shifted vector</q-m>
<a name="1066"><q-n>     1066  </q-n></a>    size_res : UNRESOLVED_sfixed)       <q-m>-- for size only</q-m>
<a name="1067"><q-n>     1067  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1068"><q-n>     1068  </q-n></a>
<a name="1069"><q-n>     1069  </q-n></a>  <q-m>-- As a concession to those who use a graphical DSP environment,</q-m>
<a name="1070"><q-n>     1070  </q-n></a>  <q-m>-- these functions take parameters in those tools format and create</q-m>
<a name="1071"><q-n>     1071  </q-n></a>  <q-m>-- fixed point numbers.  These functions are designed to convert from</q-m>
<a name="1072"><q-n>     1072  </q-n></a>  <q-m>-- a std_logic_vector to the VHDL fixed point format using the conventions</q-m>
<a name="1073"><q-n>     1073  </q-n></a>  <q-m>-- of these packages.  In a pure VHDL environment you should use the</q-m>
<a name="1074"><q-n>     1074  </q-n></a>  <q-m>-- "to_ufixed" and "to_sfixed" routines.</q-m>
<a name="1075"><q-n>     1075  </q-n></a>
<a name="1076"><q-n>     1076  </q-n></a>  <q-m>-- unsigned fixed point</q-m>
<a name="1077"><q-n>     1077  </q-n></a>  <q-w>function</q-w> to_UFix (
<a name="1078"><q-n>     1078  </q-n></a>    arg      : <q-t>STD_ULOGIC_VECTOR</q-w>;
<a name="1079"><q-n>     1079  </q-n></a>    width    : <q-t>NATURAL</q-w>;                 <q-m>-- width of vector</q-m>
<a name="1080"><q-n>     1080  </q-n></a>    fraction : <q-t>NATURAL</q-w>)                 <q-m>-- width of fraction</q-m>
<a name="1081"><q-n>     1081  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1082"><q-n>     1082  </q-n></a>
<a name="1083"><q-n>     1083  </q-n></a>  <q-m>-- signed fixed point</q-m>
<a name="1084"><q-n>     1084  </q-n></a>  <q-w>function</q-w> to_SFix (
<a name="1085"><q-n>     1085  </q-n></a>    arg      : <q-t>STD_ULOGIC_VECTOR</q-w>;
<a name="1086"><q-n>     1086  </q-n></a>    width    : <q-t>NATURAL</q-w>;                 <q-m>-- width of vector</q-m>
<a name="1087"><q-n>     1087  </q-n></a>    fraction : <q-t>NATURAL</q-w>)                 <q-m>-- width of fraction</q-m>
<a name="1088"><q-n>     1088  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1089"><q-n>     1089  </q-n></a>
<a name="1090"><q-n>     1090  </q-n></a>  <q-m>-- finding the bounds of a number.  These functions can be used like this:</q-m>
<a name="1091"><q-n>     1091  </q-n></a>  <q-m>-- signal xxx : ufixed (7 downto -3);</q-m>
<a name="1092"><q-n>     1092  </q-n></a>  <q-m>-- -- Which is the same as "ufixed (UFix_high (11,3) downto UFix_low(11,3))"</q-m>
<a name="1093"><q-n>     1093  </q-n></a>  <q-m>-- signal yyy : ufixed (UFix_high (11, 3, "+", 11, 3)</q-m>
<a name="1094"><q-n>     1094  </q-n></a>  <q-m>--               downto UFix_low(11, 3, "+", 11, 3));</q-m>
<a name="1095"><q-n>     1095  </q-n></a>  <q-m>-- Where "11" is the width of xxx (xxx'length),</q-m>
<a name="1096"><q-n>     1096  </q-n></a>  <q-m>-- and 3 is the lower bound (abs (xxx'low))</q-m>
<a name="1097"><q-n>     1097  </q-n></a>  <q-m>-- In a pure VHDL environment use "ufixed_high" and "ufixed_low"</q-m>
<a name="1098"><q-n>     1098  </q-n></a>  
<a name="1099"><q-n>     1099  </q-n></a>  <q-w>function</q-w> UFix_high (width, fraction   : <q-t>NATURAL</q-w>;
<a name="1100"><q-n>     1100  </q-n></a>                      operation         : <q-t>CHARACTER</q-w> := 'X';
<a name="1101"><q-n>     1101  </q-n></a>                      width2, fraction2 : <q-t>NATURAL</q-w>   := 0)
<a name="1102"><q-n>     1102  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="1103"><q-n>     1103  </q-n></a>  
<a name="1104"><q-n>     1104  </q-n></a>  <q-w>function</q-w> UFix_low (width, fraction   : <q-t>NATURAL</q-w>;
<a name="1105"><q-n>     1105  </q-n></a>                     operation         : <q-t>CHARACTER</q-w> := 'X';
<a name="1106"><q-n>     1106  </q-n></a>                     width2, fraction2 : <q-t>NATURAL</q-w>   := 0)
<a name="1107"><q-n>     1107  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="1108"><q-n>     1108  </q-n></a>
<a name="1109"><q-n>     1109  </q-n></a>  <q-m>-- Same as above but for signed fixed point.  Note that the width</q-m>
<a name="1110"><q-n>     1110  </q-n></a>  <q-m>-- of a signed fixed point number ignores the sign bit, thus</q-m>
<a name="1111"><q-n>     1111  </q-n></a>  <q-m>-- width = sxxx'length-1</q-m>
<a name="1112"><q-n>     1112  </q-n></a>  
<a name="1113"><q-n>     1113  </q-n></a>  <q-w>function</q-w> SFix_high (width, fraction   : <q-t>NATURAL</q-w>;
<a name="1114"><q-n>     1114  </q-n></a>                      operation         : <q-t>CHARACTER</q-w> := 'X';
<a name="1115"><q-n>     1115  </q-n></a>                      width2, fraction2 : <q-t>NATURAL</q-w>   := 0)
<a name="1116"><q-n>     1116  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="1117"><q-n>     1117  </q-n></a>  
<a name="1118"><q-n>     1118  </q-n></a>  <q-w>function</q-w> SFix_low (width, fraction   : <q-t>NATURAL</q-w>;
<a name="1119"><q-n>     1119  </q-n></a>                     operation         : <q-t>CHARACTER</q-w> := 'X';
<a name="1120"><q-n>     1120  </q-n></a>                     width2, fraction2 : <q-t>NATURAL</q-w>   := 0)
<a name="1121"><q-n>     1121  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w>;
<a name="1122"><q-n>     1122  </q-n></a><q-m>-- rtl_synthesis off</q-m>
<a name="1123"><q-n>     1123  </q-n></a><q-m>-- pragma synthesis_off</q-m>
<a name="1124"><q-n>     1124  </q-n></a>  <q-m>--===========================================================================</q-m>
<a name="1125"><q-n>     1125  </q-n></a>  <q-m>-- string and textio Functions</q-m>
<a name="1126"><q-n>     1126  </q-n></a>  <q-m>--===========================================================================</q-m>
<a name="1127"><q-n>     1127  </q-n></a>
<a name="1128"><q-n>     1128  </q-n></a>  <q-m>-- purpose: writes fixed point into a line</q-m>
<a name="1129"><q-n>     1129  </q-n></a>  <q-w>procedure</q-w> WRITE (
<a name="1130"><q-n>     1130  </q-n></a>    L         : <q-a>inout</q-w> <q-t>LINE</q-w>;               <q-m>-- input line</q-m>
<a name="1131"><q-n>     1131  </q-n></a>    <q-a>VALUE</q-w>     : <q-a>in</q-w>    UNRESOLVED_ufixed;  <q-m>-- fixed point input</q-m>
<a name="1132"><q-n>     1132  </q-n></a>    JUSTIFIED : <q-a>in</q-w>    SIDE  := <q-a>right</q-w>;
<a name="1133"><q-n>     1133  </q-n></a>    FIELD     : <q-a>in</q-w>    WIDTH := 0);
<a name="1134"><q-n>     1134  </q-n></a>
<a name="1135"><q-n>     1135  </q-n></a>  <q-m>-- purpose: writes fixed point into a line</q-m>
<a name="1136"><q-n>     1136  </q-n></a>  <q-w>procedure</q-w> WRITE (
<a name="1137"><q-n>     1137  </q-n></a>    L         : <q-a>inout</q-w> <q-t>LINE</q-w>;               <q-m>-- input line</q-m>
<a name="1138"><q-n>     1138  </q-n></a>    <q-a>VALUE</q-w>     : <q-a>in</q-w>    UNRESOLVED_sfixed;  <q-m>-- fixed point input</q-m>
<a name="1139"><q-n>     1139  </q-n></a>    JUSTIFIED : <q-a>in</q-w>    SIDE  := <q-a>right</q-w>;
<a name="1140"><q-n>     1140  </q-n></a>    FIELD     : <q-a>in</q-w>    WIDTH := 0);
<a name="1141"><q-n>     1141  </q-n></a>
<a name="1142"><q-n>     1142  </q-n></a>  <q-w>procedure</q-w> READ(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="1143"><q-n>     1143  </q-n></a>                 <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_ufixed);
<a name="1144"><q-n>     1144  </q-n></a>
<a name="1145"><q-n>     1145  </q-n></a>  <q-w>procedure</q-w> READ(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="1146"><q-n>     1146  </q-n></a>                 <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_ufixed;
<a name="1147"><q-n>     1147  </q-n></a>                 GOOD  : <q-a>out</q-w>   <q-t>BOOLEAN</q-w>);
<a name="1148"><q-n>     1148  </q-n></a>
<a name="1149"><q-n>     1149  </q-n></a>  <q-w>procedure</q-w> READ(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="1150"><q-n>     1150  </q-n></a>                 <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_sfixed);
<a name="1151"><q-n>     1151  </q-n></a>
<a name="1152"><q-n>     1152  </q-n></a>  <q-w>procedure</q-w> READ(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="1153"><q-n>     1153  </q-n></a>                 <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_sfixed;
<a name="1154"><q-n>     1154  </q-n></a>                 GOOD  : <q-a>out</q-w>   <q-t>BOOLEAN</q-w>);
<a name="1155"><q-n>     1155  </q-n></a>
<a name="1156"><q-n>     1156  </q-n></a>  <q-w>alias</q-w> bwrite <q-w>is</q-w> WRITE [<q-t>LINE</q-w>, UNRESOLVED_ufixed, SIDE, width];
<a name="1157"><q-n>     1157  </q-n></a>  <q-w>alias</q-w> bwrite <q-w>is</q-w> WRITE [<q-t>LINE</q-w>, UNRESOLVED_sfixed, SIDE, width];
<a name="1158"><q-n>     1158  </q-n></a>  <q-w>alias</q-w> bread <q-w>is</q-w> READ [<q-t>LINE</q-w>, UNRESOLVED_ufixed];
<a name="1159"><q-n>     1159  </q-n></a>  <q-w>alias</q-w> bread <q-w>is</q-w> READ [<q-t>LINE</q-w>, UNRESOLVED_ufixed, <q-t>BOOLEAN</q-w>];
<a name="1160"><q-n>     1160  </q-n></a>  <q-w>alias</q-w> bread <q-w>is</q-w> READ [<q-t>LINE</q-w>, UNRESOLVED_sfixed];
<a name="1161"><q-n>     1161  </q-n></a>  <q-w>alias</q-w> bread <q-w>is</q-w> READ [<q-t>LINE</q-w>, UNRESOLVED_sfixed, <q-t>BOOLEAN</q-w>];
<a name="1162"><q-n>     1162  </q-n></a>  <q-w>alias</q-w> BINARY_WRITE <q-w>is</q-w> WRITE [<q-t>LINE</q-w>, UNRESOLVED_ufixed, SIDE, width];
<a name="1163"><q-n>     1163  </q-n></a>  <q-w>alias</q-w> BINARY_WRITE <q-w>is</q-w> WRITE [<q-t>LINE</q-w>, UNRESOLVED_sfixed, SIDE, width];
<a name="1164"><q-n>     1164  </q-n></a>  <q-w>alias</q-w> BINARY_READ <q-w>is</q-w> READ [<q-t>LINE</q-w>, UNRESOLVED_ufixed, <q-t>BOOLEAN</q-w>];
<a name="1165"><q-n>     1165  </q-n></a>  <q-w>alias</q-w> BINARY_READ <q-w>is</q-w> READ [<q-t>LINE</q-w>, UNRESOLVED_ufixed];
<a name="1166"><q-n>     1166  </q-n></a>  <q-w>alias</q-w> BINARY_READ <q-w>is</q-w> READ [<q-t>LINE</q-w>, UNRESOLVED_sfixed, <q-t>BOOLEAN</q-w>];
<a name="1167"><q-n>     1167  </q-n></a>  <q-w>alias</q-w> BINARY_READ <q-w>is</q-w> READ [<q-t>LINE</q-w>, UNRESOLVED_sfixed];
<a name="1168"><q-n>     1168  </q-n></a>
<a name="1169"><q-n>     1169  </q-n></a>  <q-m>-- octal read and write</q-m>
<a name="1170"><q-n>     1170  </q-n></a>  <q-w>procedure</q-w> OWRITE (
<a name="1171"><q-n>     1171  </q-n></a>    L         : <q-a>inout</q-w> <q-t>LINE</q-w>;               <q-m>-- input line</q-m>
<a name="1172"><q-n>     1172  </q-n></a>    <q-a>VALUE</q-w>     : <q-a>in</q-w>    UNRESOLVED_ufixed;  <q-m>-- fixed point input</q-m>
<a name="1173"><q-n>     1173  </q-n></a>    JUSTIFIED : <q-a>in</q-w>    SIDE  := <q-a>right</q-w>;
<a name="1174"><q-n>     1174  </q-n></a>    FIELD     : <q-a>in</q-w>    WIDTH := 0);
<a name="1175"><q-n>     1175  </q-n></a>
<a name="1176"><q-n>     1176  </q-n></a>  <q-w>procedure</q-w> OWRITE (
<a name="1177"><q-n>     1177  </q-n></a>    L         : <q-a>inout</q-w> <q-t>LINE</q-w>;               <q-m>-- input line</q-m>
<a name="1178"><q-n>     1178  </q-n></a>    <q-a>VALUE</q-w>     : <q-a>in</q-w>    UNRESOLVED_sfixed;  <q-m>-- fixed point input</q-m>
<a name="1179"><q-n>     1179  </q-n></a>    JUSTIFIED : <q-a>in</q-w>    SIDE  := <q-a>right</q-w>;
<a name="1180"><q-n>     1180  </q-n></a>    FIELD     : <q-a>in</q-w>    WIDTH := 0);
<a name="1181"><q-n>     1181  </q-n></a>
<a name="1182"><q-n>     1182  </q-n></a>  <q-w>procedure</q-w> OREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="1183"><q-n>     1183  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_ufixed);
<a name="1184"><q-n>     1184  </q-n></a>
<a name="1185"><q-n>     1185  </q-n></a>  <q-w>procedure</q-w> OREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="1186"><q-n>     1186  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_ufixed;
<a name="1187"><q-n>     1187  </q-n></a>                  GOOD  : <q-a>out</q-w>   <q-t>BOOLEAN</q-w>);
<a name="1188"><q-n>     1188  </q-n></a>
<a name="1189"><q-n>     1189  </q-n></a>  <q-w>procedure</q-w> OREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="1190"><q-n>     1190  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_sfixed);
<a name="1191"><q-n>     1191  </q-n></a>
<a name="1192"><q-n>     1192  </q-n></a>  <q-w>procedure</q-w> OREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="1193"><q-n>     1193  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_sfixed;
<a name="1194"><q-n>     1194  </q-n></a>                  GOOD  : <q-a>out</q-w>   <q-t>BOOLEAN</q-w>);
<a name="1195"><q-n>     1195  </q-n></a>  <q-w>alias</q-w> OCTAL_READ <q-w>is</q-w> OREAD [<q-t>LINE</q-w>, UNRESOLVED_ufixed, <q-t>BOOLEAN</q-w>];
<a name="1196"><q-n>     1196  </q-n></a>  <q-w>alias</q-w> OCTAL_READ <q-w>is</q-w> OREAD [<q-t>LINE</q-w>, UNRESOLVED_ufixed];
<a name="1197"><q-n>     1197  </q-n></a>  <q-w>alias</q-w> OCTAL_READ <q-w>is</q-w> OREAD [<q-t>LINE</q-w>, UNRESOLVED_sfixed, <q-t>BOOLEAN</q-w>];
<a name="1198"><q-n>     1198  </q-n></a>  <q-w>alias</q-w> OCTAL_READ <q-w>is</q-w> OREAD [<q-t>LINE</q-w>, UNRESOLVED_sfixed];
<a name="1199"><q-n>     1199  </q-n></a>  <q-w>alias</q-w> OCTAL_WRITE <q-w>is</q-w> OWRITE [<q-t>LINE</q-w>, UNRESOLVED_ufixed, SIDE, WIDTH];
<a name="1200"><q-n>     1200  </q-n></a>  <q-w>alias</q-w> OCTAL_WRITE <q-w>is</q-w> OWRITE [<q-t>LINE</q-w>, UNRESOLVED_sfixed, SIDE, WIDTH];
<a name="1201"><q-n>     1201  </q-n></a>
<a name="1202"><q-n>     1202  </q-n></a>  <q-m>-- hex read and write</q-m>
<a name="1203"><q-n>     1203  </q-n></a>  <q-w>procedure</q-w> HWRITE (
<a name="1204"><q-n>     1204  </q-n></a>    L         : <q-a>inout</q-w> <q-t>LINE</q-w>;               <q-m>-- input line</q-m>
<a name="1205"><q-n>     1205  </q-n></a>    <q-a>VALUE</q-w>     : <q-a>in</q-w>    UNRESOLVED_ufixed;  <q-m>-- fixed point input</q-m>
<a name="1206"><q-n>     1206  </q-n></a>    JUSTIFIED : <q-a>in</q-w>    SIDE  := <q-a>right</q-w>;
<a name="1207"><q-n>     1207  </q-n></a>    FIELD     : <q-a>in</q-w>    WIDTH := 0);
<a name="1208"><q-n>     1208  </q-n></a>
<a name="1209"><q-n>     1209  </q-n></a>  <q-m>-- purpose: writes fixed point into a line</q-m>
<a name="1210"><q-n>     1210  </q-n></a>  <q-w>procedure</q-w> HWRITE (
<a name="1211"><q-n>     1211  </q-n></a>    L         : <q-a>inout</q-w> <q-t>LINE</q-w>;               <q-m>-- input line</q-m>
<a name="1212"><q-n>     1212  </q-n></a>    <q-a>VALUE</q-w>     : <q-a>in</q-w>    UNRESOLVED_sfixed;  <q-m>-- fixed point input</q-m>
<a name="1213"><q-n>     1213  </q-n></a>    JUSTIFIED : <q-a>in</q-w>    SIDE  := <q-a>right</q-w>;
<a name="1214"><q-n>     1214  </q-n></a>    FIELD     : <q-a>in</q-w>    WIDTH := 0);
<a name="1215"><q-n>     1215  </q-n></a>
<a name="1216"><q-n>     1216  </q-n></a>  <q-w>procedure</q-w> HREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="1217"><q-n>     1217  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_ufixed);
<a name="1218"><q-n>     1218  </q-n></a>
<a name="1219"><q-n>     1219  </q-n></a>  <q-w>procedure</q-w> HREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="1220"><q-n>     1220  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_ufixed;
<a name="1221"><q-n>     1221  </q-n></a>                  GOOD  : <q-a>out</q-w>   <q-t>BOOLEAN</q-w>);
<a name="1222"><q-n>     1222  </q-n></a>
<a name="1223"><q-n>     1223  </q-n></a>  <q-w>procedure</q-w> HREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="1224"><q-n>     1224  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_sfixed);
<a name="1225"><q-n>     1225  </q-n></a>
<a name="1226"><q-n>     1226  </q-n></a>  <q-w>procedure</q-w> HREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="1227"><q-n>     1227  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_sfixed;
<a name="1228"><q-n>     1228  </q-n></a>                  GOOD  : <q-a>out</q-w>   <q-t>BOOLEAN</q-w>);
<a name="1229"><q-n>     1229  </q-n></a>  <q-w>alias</q-w> HEX_READ <q-w>is</q-w> HREAD [<q-t>LINE</q-w>, UNRESOLVED_ufixed, <q-t>BOOLEAN</q-w>];
<a name="1230"><q-n>     1230  </q-n></a>  <q-w>alias</q-w> HEX_READ <q-w>is</q-w> HREAD [<q-t>LINE</q-w>, UNRESOLVED_sfixed, <q-t>BOOLEAN</q-w>];
<a name="1231"><q-n>     1231  </q-n></a>  <q-w>alias</q-w> HEX_READ <q-w>is</q-w> HREAD [<q-t>LINE</q-w>, UNRESOLVED_ufixed];
<a name="1232"><q-n>     1232  </q-n></a>  <q-w>alias</q-w> HEX_READ <q-w>is</q-w> HREAD [<q-t>LINE</q-w>, UNRESOLVED_sfixed];
<a name="1233"><q-n>     1233  </q-n></a>  <q-w>alias</q-w> HEX_WRITE <q-w>is</q-w> HWRITE [<q-t>LINE</q-w>, UNRESOLVED_ufixed, SIDE, WIDTH];
<a name="1234"><q-n>     1234  </q-n></a>  <q-w>alias</q-w> HEX_WRITE <q-w>is</q-w> HWRITE [<q-t>LINE</q-w>, UNRESOLVED_sfixed, SIDE, WIDTH];
<a name="1235"><q-n>     1235  </q-n></a>
<a name="1236"><q-n>     1236  </q-n></a>  <q-m>-- returns a string, useful for:</q-m>
<a name="1237"><q-n>     1237  </q-n></a>  <q-m>-- assert (x = y) report "error found " &amp; to_string(x) severity error;</q-m>
<a name="1238"><q-n>     1238  </q-n></a>  <q-w>function</q-w> to_string (<q-a>value</q-w> : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STRING</q-w>;
<a name="1239"><q-n>     1239  </q-n></a>  <q-w>alias</q-w> to_bstring <q-w>is</q-w> to_string [UNRESOLVED_ufixed <q-w>return</q-w> <q-t>STRING</q-w>];
<a name="1240"><q-n>     1240  </q-n></a>  <q-w>alias</q-w> TO_BINARY_STRING <q-w>is</q-w> TO_STRING [UNRESOLVED_ufixed <q-w>return</q-w> <q-t>STRING</q-w>];
<a name="1241"><q-n>     1241  </q-n></a>
<a name="1242"><q-n>     1242  </q-n></a>  <q-w>function</q-w> to_ostring (<q-a>value</q-w> : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STRING</q-w>;
<a name="1243"><q-n>     1243  </q-n></a>  <q-w>alias</q-w> TO_OCTAL_STRING <q-w>is</q-w> TO_OSTRING [UNRESOLVED_ufixed <q-w>return</q-w> <q-t>STRING</q-w>];
<a name="1244"><q-n>     1244  </q-n></a>
<a name="1245"><q-n>     1245  </q-n></a>  <q-w>function</q-w> to_hstring (<q-a>value</q-w> : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STRING</q-w>;
<a name="1246"><q-n>     1246  </q-n></a>  <q-w>alias</q-w> TO_HEX_STRING <q-w>is</q-w> TO_HSTRING [UNRESOLVED_ufixed <q-w>return</q-w> <q-t>STRING</q-w>];
<a name="1247"><q-n>     1247  </q-n></a>
<a name="1248"><q-n>     1248  </q-n></a>  <q-w>function</q-w> to_string (<q-a>value</q-w> : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STRING</q-w>;
<a name="1249"><q-n>     1249  </q-n></a>  <q-w>alias</q-w> to_bstring <q-w>is</q-w> to_string [UNRESOLVED_sfixed <q-w>return</q-w> <q-t>STRING</q-w>];
<a name="1250"><q-n>     1250  </q-n></a>  <q-w>alias</q-w> TO_BINARY_STRING <q-w>is</q-w> TO_STRING [UNRESOLVED_sfixed <q-w>return</q-w> <q-t>STRING</q-w>];
<a name="1251"><q-n>     1251  </q-n></a>
<a name="1252"><q-n>     1252  </q-n></a>  <q-w>function</q-w> to_ostring (<q-a>value</q-w> : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STRING</q-w>;
<a name="1253"><q-n>     1253  </q-n></a>  <q-w>alias</q-w> TO_OCTAL_STRING <q-w>is</q-w> TO_OSTRING [UNRESOLVED_sfixed <q-w>return</q-w> <q-t>STRING</q-w>];
<a name="1254"><q-n>     1254  </q-n></a>
<a name="1255"><q-n>     1255  </q-n></a>  <q-w>function</q-w> to_hstring (<q-a>value</q-w> : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STRING</q-w>;
<a name="1256"><q-n>     1256  </q-n></a>  <q-w>alias</q-w> TO_HEX_STRING <q-w>is</q-w> TO_HSTRING [UNRESOLVED_sfixed <q-w>return</q-w> <q-t>STRING</q-w>];
<a name="1257"><q-n>     1257  </q-n></a>
<a name="1258"><q-n>     1258  </q-n></a>  <q-m>-- From string functions allow you to convert a string into a fixed</q-m>
<a name="1259"><q-n>     1259  </q-n></a>  <q-m>-- point number.  Example:</q-m>
<a name="1260"><q-n>     1260  </q-n></a>  <q-m>--  signal uf1 : ufixed (3 downto -3);</q-m>
<a name="1261"><q-n>     1261  </q-n></a>  <q-m>--  uf1 &lt;= from_string ("0110.100", uf1'high, uf1'low); -- 6.5</q-m>
<a name="1262"><q-n>     1262  </q-n></a>  <q-m>-- The "." is optional in this syntax, however it exist and is</q-m>
<a name="1263"><q-n>     1263  </q-n></a>  <q-m>-- in the wrong location an error is produced.  Overflow will</q-m>
<a name="1264"><q-n>     1264  </q-n></a>  <q-m>-- result in saturation.</q-m>
<a name="1265"><q-n>     1265  </q-n></a>  
<a name="1266"><q-n>     1266  </q-n></a>  <q-w>function</q-w> from_string (
<a name="1267"><q-n>     1267  </q-n></a>    bstring              : <q-t>STRING</q-w>;      <q-m>-- binary string</q-m>
<a name="1268"><q-n>     1268  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="1269"><q-n>     1269  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="1270"><q-n>     1270  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1271"><q-n>     1271  </q-n></a>  <q-w>alias</q-w> from_bstring <q-w>is</q-w> from_string [<q-t>STRING</q-w>, <q-t>INTEGER</q-w>, <q-t>INTEGER</q-w>
<a name="1272"><q-n>     1272  </q-n></a>                                     <q-w>return</q-w> UNRESOLVED_ufixed];
<a name="1273"><q-n>     1273  </q-n></a>  <q-w>alias</q-w> from_binary_string <q-w>is</q-w> from_string [<q-t>STRING</q-w>, <q-t>INTEGER</q-w>, <q-t>INTEGER</q-w>
<a name="1274"><q-n>     1274  </q-n></a>                                           <q-w>return</q-w> UNRESOLVED_ufixed];
<a name="1275"><q-n>     1275  </q-n></a>
<a name="1276"><q-n>     1276  </q-n></a>  <q-m>-- Octal and hex conversions work as follows:</q-m>
<a name="1277"><q-n>     1277  </q-n></a>  <q-m>-- uf1 &lt;= from_hstring ("6.8", 3, -3); -- 6.5 (bottom zeros dropped)</q-m>
<a name="1278"><q-n>     1278  </q-n></a>  <q-m>-- uf1 &lt;= from_ostring ("06.4", 3, -3); -- 6.5 (top zeros dropped)</q-m>
<a name="1279"><q-n>     1279  </q-n></a>  
<a name="1280"><q-n>     1280  </q-n></a>  <q-w>function</q-w> from_ostring (
<a name="1281"><q-n>     1281  </q-n></a>    ostring              : <q-t>STRING</q-w>;      <q-m>-- Octal string</q-m>
<a name="1282"><q-n>     1282  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="1283"><q-n>     1283  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="1284"><q-n>     1284  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1285"><q-n>     1285  </q-n></a>  <q-w>alias</q-w> from_octal_string <q-w>is</q-w> from_ostring [<q-t>STRING</q-w>, <q-t>INTEGER</q-w>, <q-t>INTEGER</q-w>
<a name="1286"><q-n>     1286  </q-n></a>                                           <q-w>return</q-w> UNRESOLVED_ufixed];
<a name="1287"><q-n>     1287  </q-n></a>
<a name="1288"><q-n>     1288  </q-n></a>  <q-w>function</q-w> from_hstring (
<a name="1289"><q-n>     1289  </q-n></a>    hstring              : <q-t>STRING</q-w>;      <q-m>-- hex string</q-m>
<a name="1290"><q-n>     1290  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="1291"><q-n>     1291  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="1292"><q-n>     1292  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1293"><q-n>     1293  </q-n></a>  <q-w>alias</q-w> from_hex_string <q-w>is</q-w> from_hstring [<q-t>STRING</q-w>, <q-t>INTEGER</q-w>, <q-t>INTEGER</q-w>
<a name="1294"><q-n>     1294  </q-n></a>                                         <q-w>return</q-w> UNRESOLVED_ufixed];
<a name="1295"><q-n>     1295  </q-n></a>
<a name="1296"><q-n>     1296  </q-n></a>  <q-w>function</q-w> from_string (
<a name="1297"><q-n>     1297  </q-n></a>    bstring              : <q-t>STRING</q-w>;      <q-m>-- binary string</q-m>
<a name="1298"><q-n>     1298  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="1299"><q-n>     1299  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="1300"><q-n>     1300  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1301"><q-n>     1301  </q-n></a>  <q-w>alias</q-w> from_bstring <q-w>is</q-w> from_string [<q-t>STRING</q-w>, <q-t>INTEGER</q-w>, <q-t>INTEGER</q-w>
<a name="1302"><q-n>     1302  </q-n></a>                                     <q-w>return</q-w> UNRESOLVED_sfixed];
<a name="1303"><q-n>     1303  </q-n></a>  <q-w>alias</q-w> from_binary_string <q-w>is</q-w> from_string [<q-t>STRING</q-w>, <q-t>INTEGER</q-w>, <q-t>INTEGER</q-w>
<a name="1304"><q-n>     1304  </q-n></a>                                           <q-w>return</q-w> UNRESOLVED_sfixed];
<a name="1305"><q-n>     1305  </q-n></a>
<a name="1306"><q-n>     1306  </q-n></a>  <q-w>function</q-w> from_ostring (
<a name="1307"><q-n>     1307  </q-n></a>    ostring              : <q-t>STRING</q-w>;      <q-m>-- Octal string</q-m>
<a name="1308"><q-n>     1308  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="1309"><q-n>     1309  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="1310"><q-n>     1310  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1311"><q-n>     1311  </q-n></a>  <q-w>alias</q-w> from_octal_string <q-w>is</q-w> from_ostring [<q-t>STRING</q-w>, <q-t>INTEGER</q-w>, <q-t>INTEGER</q-w>
<a name="1312"><q-n>     1312  </q-n></a>                                           <q-w>return</q-w> UNRESOLVED_sfixed];
<a name="1313"><q-n>     1313  </q-n></a>
<a name="1314"><q-n>     1314  </q-n></a>  <q-w>function</q-w> from_hstring (
<a name="1315"><q-n>     1315  </q-n></a>    hstring              : <q-t>STRING</q-w>;      <q-m>-- hex string</q-m>
<a name="1316"><q-n>     1316  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="1317"><q-n>     1317  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="1318"><q-n>     1318  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1319"><q-n>     1319  </q-n></a>  <q-w>alias</q-w> from_hex_string <q-w>is</q-w> from_hstring [<q-t>STRING</q-w>, <q-t>INTEGER</q-w>, <q-t>INTEGER</q-w>
<a name="1320"><q-n>     1320  </q-n></a>                                         <q-w>return</q-w> UNRESOLVED_sfixed];
<a name="1321"><q-n>     1321  </q-n></a>
<a name="1322"><q-n>     1322  </q-n></a>  <q-m>-- Same as above, "size_res" is used for it's range only.</q-m>
<a name="1323"><q-n>     1323  </q-n></a>  <q-w>function</q-w> from_string (
<a name="1324"><q-n>     1324  </q-n></a>    bstring  : <q-t>STRING</q-w>;                  <q-m>-- binary string</q-m>
<a name="1325"><q-n>     1325  </q-n></a>    size_res : UNRESOLVED_ufixed)
<a name="1326"><q-n>     1326  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1327"><q-n>     1327  </q-n></a>  <q-w>alias</q-w> from_bstring <q-w>is</q-w> from_string [<q-t>STRING</q-w>, UNRESOLVED_ufixed
<a name="1328"><q-n>     1328  </q-n></a>                                     <q-w>return</q-w> UNRESOLVED_ufixed];
<a name="1329"><q-n>     1329  </q-n></a>  <q-w>alias</q-w> from_binary_string <q-w>is</q-w> from_string [<q-t>STRING</q-w>, UNRESOLVED_ufixed
<a name="1330"><q-n>     1330  </q-n></a>                                           <q-w>return</q-w> UNRESOLVED_ufixed];
<a name="1331"><q-n>     1331  </q-n></a>
<a name="1332"><q-n>     1332  </q-n></a>  <q-w>function</q-w> from_ostring (
<a name="1333"><q-n>     1333  </q-n></a>    ostring  : <q-t>STRING</q-w>;                  <q-m>-- Octal string</q-m>
<a name="1334"><q-n>     1334  </q-n></a>    size_res : UNRESOLVED_ufixed)
<a name="1335"><q-n>     1335  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1336"><q-n>     1336  </q-n></a>  <q-w>alias</q-w> from_octal_string <q-w>is</q-w> from_ostring [<q-t>STRING</q-w>, UNRESOLVED_ufixed
<a name="1337"><q-n>     1337  </q-n></a>                                           <q-w>return</q-w> UNRESOLVED_ufixed];
<a name="1338"><q-n>     1338  </q-n></a>
<a name="1339"><q-n>     1339  </q-n></a>  <q-w>function</q-w> from_hstring (
<a name="1340"><q-n>     1340  </q-n></a>    hstring  : <q-t>STRING</q-w>;                  <q-m>-- hex string</q-m>
<a name="1341"><q-n>     1341  </q-n></a>    size_res : UNRESOLVED_ufixed)
<a name="1342"><q-n>     1342  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1343"><q-n>     1343  </q-n></a>  <q-w>alias</q-w> from_hex_string <q-w>is</q-w> from_hstring [<q-t>STRING</q-w>, UNRESOLVED_ufixed
<a name="1344"><q-n>     1344  </q-n></a>                                         <q-w>return</q-w> UNRESOLVED_ufixed];
<a name="1345"><q-n>     1345  </q-n></a>
<a name="1346"><q-n>     1346  </q-n></a>  <q-w>function</q-w> from_string (
<a name="1347"><q-n>     1347  </q-n></a>    bstring  : <q-t>STRING</q-w>;                  <q-m>-- binary string</q-m>
<a name="1348"><q-n>     1348  </q-n></a>    size_res : UNRESOLVED_sfixed)
<a name="1349"><q-n>     1349  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1350"><q-n>     1350  </q-n></a>  <q-w>alias</q-w> from_bstring <q-w>is</q-w> from_string [<q-t>STRING</q-w>, UNRESOLVED_sfixed
<a name="1351"><q-n>     1351  </q-n></a>                                     <q-w>return</q-w> UNRESOLVED_sfixed];
<a name="1352"><q-n>     1352  </q-n></a>  <q-w>alias</q-w> from_binary_string <q-w>is</q-w> from_string [<q-t>STRING</q-w>, UNRESOLVED_sfixed
<a name="1353"><q-n>     1353  </q-n></a>                                           <q-w>return</q-w> UNRESOLVED_sfixed];
<a name="1354"><q-n>     1354  </q-n></a>
<a name="1355"><q-n>     1355  </q-n></a>  <q-w>function</q-w> from_ostring (
<a name="1356"><q-n>     1356  </q-n></a>    ostring  : <q-t>STRING</q-w>;                  <q-m>-- Octal string</q-m>
<a name="1357"><q-n>     1357  </q-n></a>    size_res : UNRESOLVED_sfixed)
<a name="1358"><q-n>     1358  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1359"><q-n>     1359  </q-n></a>  <q-w>alias</q-w> from_octal_string <q-w>is</q-w> from_ostring [<q-t>STRING</q-w>, UNRESOLVED_sfixed
<a name="1360"><q-n>     1360  </q-n></a>                                           <q-w>return</q-w> UNRESOLVED_sfixed];
<a name="1361"><q-n>     1361  </q-n></a>
<a name="1362"><q-n>     1362  </q-n></a>  <q-w>function</q-w> from_hstring (
<a name="1363"><q-n>     1363  </q-n></a>    hstring  : <q-t>STRING</q-w>;                  <q-m>-- hex string</q-m>
<a name="1364"><q-n>     1364  </q-n></a>    size_res : UNRESOLVED_sfixed)
<a name="1365"><q-n>     1365  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1366"><q-n>     1366  </q-n></a>  <q-w>alias</q-w> from_hex_string <q-w>is</q-w> from_hstring [<q-t>STRING</q-w>, UNRESOLVED_sfixed
<a name="1367"><q-n>     1367  </q-n></a>                                         <q-w>return</q-w> UNRESOLVED_sfixed];
<a name="1368"><q-n>     1368  </q-n></a>
<a name="1369"><q-n>     1369  </q-n></a>  <q-m>-- Direct conversion functions.  Example:</q-m>
<a name="1370"><q-n>     1370  </q-n></a>  <q-m>--  signal uf1 : ufixed (3 downto -3);</q-m>
<a name="1371"><q-n>     1371  </q-n></a>  <q-m>--  uf1 &lt;= from_string ("0110.100"); -- 6.5</q-m>
<a name="1372"><q-n>     1372  </q-n></a>  <q-m>-- In this case the "." is not optional, and the size of</q-m>
<a name="1373"><q-n>     1373  </q-n></a>  <q-m>-- the output must match exactly.</q-m>
<a name="1374"><q-n>     1374  </q-n></a>  
<a name="1375"><q-n>     1375  </q-n></a>  <q-w>function</q-w> from_string (
<a name="1376"><q-n>     1376  </q-n></a>    bstring : <q-t>STRING</q-w>)                   <q-m>-- binary string</q-m>
<a name="1377"><q-n>     1377  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1378"><q-n>     1378  </q-n></a>  <q-w>alias</q-w> from_bstring <q-w>is</q-w> from_string [<q-t>STRING</q-w> <q-w>return</q-w> UNRESOLVED_ufixed];
<a name="1379"><q-n>     1379  </q-n></a>  <q-w>alias</q-w> from_binary_string <q-w>is</q-w> from_string [<q-t>STRING</q-w> <q-w>return</q-w> UNRESOLVED_ufixed];
<a name="1380"><q-n>     1380  </q-n></a>
<a name="1381"><q-n>     1381  </q-n></a>  <q-m>-- Direct octal and hex conversion functions.  In this case</q-m>
<a name="1382"><q-n>     1382  </q-n></a>  <q-m>-- the string lengths must match.  Example:</q-m>
<a name="1383"><q-n>     1383  </q-n></a>  <q-m>-- signal sf1 := sfixed (5 downto -3);</q-m>
<a name="1384"><q-n>     1384  </q-n></a>  <q-m>-- sf1 &lt;= from_ostring ("71.4") -- -6.5</q-m>
<a name="1385"><q-n>     1385  </q-n></a>  
<a name="1386"><q-n>     1386  </q-n></a>  <q-w>function</q-w> from_ostring (
<a name="1387"><q-n>     1387  </q-n></a>    ostring : <q-t>STRING</q-w>)                   <q-m>-- Octal string</q-m>
<a name="1388"><q-n>     1388  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1389"><q-n>     1389  </q-n></a>  <q-w>alias</q-w> from_octal_string <q-w>is</q-w> from_ostring [<q-t>STRING</q-w> <q-w>return</q-w> UNRESOLVED_ufixed];
<a name="1390"><q-n>     1390  </q-n></a>
<a name="1391"><q-n>     1391  </q-n></a>  <q-w>function</q-w> from_hstring (
<a name="1392"><q-n>     1392  </q-n></a>    hstring : <q-t>STRING</q-w>)                   <q-m>-- hex string</q-m>
<a name="1393"><q-n>     1393  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1394"><q-n>     1394  </q-n></a>  <q-w>alias</q-w> from_hex_string <q-w>is</q-w> from_hstring [<q-t>STRING</q-w> <q-w>return</q-w> UNRESOLVED_ufixed];
<a name="1395"><q-n>     1395  </q-n></a>
<a name="1396"><q-n>     1396  </q-n></a>  <q-w>function</q-w> from_string (
<a name="1397"><q-n>     1397  </q-n></a>    bstring : <q-t>STRING</q-w>)                   <q-m>-- binary string</q-m>
<a name="1398"><q-n>     1398  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1399"><q-n>     1399  </q-n></a>  <q-w>alias</q-w> from_bstring <q-w>is</q-w> from_string [<q-t>STRING</q-w> <q-w>return</q-w> UNRESOLVED_sfixed];
<a name="1400"><q-n>     1400  </q-n></a>  <q-w>alias</q-w> from_binary_string <q-w>is</q-w> from_string [<q-t>STRING</q-w> <q-w>return</q-w> UNRESOLVED_sfixed];
<a name="1401"><q-n>     1401  </q-n></a>
<a name="1402"><q-n>     1402  </q-n></a>  <q-w>function</q-w> from_ostring (
<a name="1403"><q-n>     1403  </q-n></a>    ostring : <q-t>STRING</q-w>)                   <q-m>-- Octal string</q-m>
<a name="1404"><q-n>     1404  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1405"><q-n>     1405  </q-n></a>  <q-w>alias</q-w> from_octal_string <q-w>is</q-w> from_ostring [<q-t>STRING</q-w> <q-w>return</q-w> UNRESOLVED_sfixed];
<a name="1406"><q-n>     1406  </q-n></a>
<a name="1407"><q-n>     1407  </q-n></a>  <q-w>function</q-w> from_hstring (
<a name="1408"><q-n>     1408  </q-n></a>    hstring : <q-t>STRING</q-w>)                   <q-m>-- hex string</q-m>
<a name="1409"><q-n>     1409  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1410"><q-n>     1410  </q-n></a>  <q-w>alias</q-w> from_hex_string <q-w>is</q-w> from_hstring [<q-t>STRING</q-w> <q-w>return</q-w> UNRESOLVED_sfixed];
<a name="1411"><q-n>     1411  </q-n></a><q-m>-- rtl_synthesis on</q-m>
<a name="1412"><q-n>     1412  </q-n></a><q-m>-- pragma synthesis_on</q-m>
<a name="1413"><q-n>     1413  </q-n></a>
<a name="1414"><q-n>     1414  </q-n></a>  <q-m>-- IN VHDL-2006 std_logic_vector is a subtype of std_ulogic_vector, so these</q-m>
<a name="1415"><q-n>     1415  </q-n></a>  <q-m>-- extra functions are needed for compatability.</q-m>
<a name="1416"><q-n>     1416  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="1417"><q-n>     1417  </q-n></a>    arg                  : <q-t>STD_LOGIC_VECTOR</q-w>;  <q-m>-- shifted vector</q-m>
<a name="1418"><q-n>     1418  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="1419"><q-n>     1419  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="1420"><q-n>     1420  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1421"><q-n>     1421  </q-n></a>
<a name="1422"><q-n>     1422  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="1423"><q-n>     1423  </q-n></a>    arg      : <q-t>STD_LOGIC_VECTOR</q-w>;       <q-m>-- shifted vector</q-m>
<a name="1424"><q-n>     1424  </q-n></a>    size_res : UNRESOLVED_ufixed)       <q-m>-- for size only</q-m>
<a name="1425"><q-n>     1425  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1426"><q-n>     1426  </q-n></a>
<a name="1427"><q-n>     1427  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="1428"><q-n>     1428  </q-n></a>    arg                  : <q-t>STD_LOGIC_VECTOR</q-w>;  <q-m>-- shifted vector</q-m>
<a name="1429"><q-n>     1429  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="1430"><q-n>     1430  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="1431"><q-n>     1431  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1432"><q-n>     1432  </q-n></a>
<a name="1433"><q-n>     1433  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="1434"><q-n>     1434  </q-n></a>    arg      : <q-t>STD_LOGIC_VECTOR</q-w>;       <q-m>-- shifted vector</q-m>
<a name="1435"><q-n>     1435  </q-n></a>    size_res : UNRESOLVED_sfixed)       <q-m>-- for size only</q-m>
<a name="1436"><q-n>     1436  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1437"><q-n>     1437  </q-n></a>
<a name="1438"><q-n>     1438  </q-n></a>  <q-m>-- unsigned fixed point</q-m>
<a name="1439"><q-n>     1439  </q-n></a>  <q-w>function</q-w> to_UFix (
<a name="1440"><q-n>     1440  </q-n></a>    arg      : <q-t>STD_LOGIC_VECTOR</q-w>;
<a name="1441"><q-n>     1441  </q-n></a>    width    : <q-t>NATURAL</q-w>;                 <q-m>-- width of vector</q-m>
<a name="1442"><q-n>     1442  </q-n></a>    fraction : <q-t>NATURAL</q-w>)                 <q-m>-- width of fraction</q-m>
<a name="1443"><q-n>     1443  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed;
<a name="1444"><q-n>     1444  </q-n></a>
<a name="1445"><q-n>     1445  </q-n></a>  <q-m>-- signed fixed point</q-m>
<a name="1446"><q-n>     1446  </q-n></a>  <q-w>function</q-w> to_SFix (
<a name="1447"><q-n>     1447  </q-n></a>    arg      : <q-t>STD_LOGIC_VECTOR</q-w>;
<a name="1448"><q-n>     1448  </q-n></a>    width    : <q-t>NATURAL</q-w>;                 <q-m>-- width of vector</q-m>
<a name="1449"><q-n>     1449  </q-n></a>    fraction : <q-t>NATURAL</q-w>)                 <q-m>-- width of fraction</q-m>
<a name="1450"><q-n>     1450  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed;
<a name="1451"><q-n>     1451  </q-n></a>
<a name="1452"><q-n>     1452  </q-n></a><q-w>end</q-w> <q-w>package</q-w> fixed_pkg;
<a name="1453"><q-n>     1453  </q-n></a><q-m>-------------------------------------------------------------------------------</q-m>
<a name="1454"><q-n>     1454  </q-n></a><q-m>-- Proposed package body for the VHDL-200x-FT fixed_pkg package</q-m>
<a name="1455"><q-n>     1455  </q-n></a><q-m>-- (Fixed point math package)</q-m>
<a name="1456"><q-n>     1456  </q-n></a><q-m>-- This package body supplies a recommended implementation of these functions</q-m>
<a name="1457"><q-n>     1457  </q-n></a><q-m>-- Version    : $Revision: 1.1 $</q-m>
<a name="1458"><q-n>     1458  </q-n></a><q-m>-- Date       : $Date: 2012/03/09 20:36:50 $</q-m>
<a name="1459"><q-n>     1459  </q-n></a><q-m>--</q-m>
<a name="1460"><q-n>     1460  </q-n></a><q-m>--  Created for VHDL-200X-ft, David Bishop (dbishop@vhdl.org)</q-m>
<a name="1461"><q-n>     1461  </q-n></a><q-m>-------------------------------------------------------------------------------</q-m>
<a name="1462"><q-n>     1462  </q-n></a><q-w>library</q-w> IEEE;
<a name="1463"><q-n>     1463  </q-n></a><q-w>use</q-w> IEEE.MATH_REAL.<q-w>all</q-w>;
<a name="1464"><q-n>     1464  </q-n></a>
<a name="1465"><q-n>     1465  </q-n></a><q-w>package</q-w> <q-w>body</q-w> fixed_pkg <q-w>is</q-w>
<a name="1466"><q-n>     1466  </q-n></a>  <q-m>-- Author David Bishop (dbishop@vhdl.org)</q-m>
<a name="1467"><q-n>     1467  </q-n></a>  <q-m>-- Other contributers: Jim Lewis, Yannick Grugni, Ryan W. Hilton</q-m>
<a name="1468"><q-n>     1468  </q-n></a>  <q-m>-- null array constants</q-m>
<a name="1469"><q-n>     1469  </q-n></a>  <q-w>constant</q-w> NAUF : UNRESOLVED_ufixed (0 <q-w>downto</q-w> 1) := (<q-w>others</q-w> =&gt; '0');
<a name="1470"><q-n>     1470  </q-n></a>  <q-w>constant</q-w> NASF : UNRESOLVED_sfixed (0 <q-w>downto</q-w> 1) := (<q-w>others</q-w> =&gt; '0');
<a name="1471"><q-n>     1471  </q-n></a>  <q-w>constant</q-w> NSLV : <q-t>STD_ULOGIC_VECTOR</q-w> (0 <q-w>downto</q-w> 1) := (<q-w>others</q-w> =&gt; '0');
<a name="1472"><q-n>     1472  </q-n></a>
<a name="1473"><q-n>     1473  </q-n></a>  <q-m>-- This differed constant will tell you if the package body is synthesizable</q-m>
<a name="1474"><q-n>     1474  </q-n></a>  <q-m>-- or implemented as real numbers, set to "true" if synthesizable.</q-m>
<a name="1475"><q-n>     1475  </q-n></a>  <q-w>constant</q-w> fixedsynth_or_real : <q-t>BOOLEAN</q-w> := true;
<a name="1476"><q-n>     1476  </q-n></a>
<a name="1477"><q-n>     1477  </q-n></a>  <q-m>-- %%% Replicated functions</q-m>
<a name="1478"><q-n>     1478  </q-n></a>  <q-w>function</q-w> maximum (
<a name="1479"><q-n>     1479  </q-n></a>    l, r : <q-t>integer</q-w>)                    <q-m>-- inputs</q-m>
<a name="1480"><q-n>     1480  </q-n></a>    <q-w>return</q-w> <q-t>integer</q-w> <q-w>is</q-w>
<a name="1481"><q-n>     1481  </q-n></a>  <q-w>begin</q-w>  <q-m>-- function max</q-m>
<a name="1482"><q-n>     1482  </q-n></a>    <q-w>if</q-w> l &gt; r <q-w>then</q-w> <q-w>return</q-w> l;
<a name="1483"><q-n>     1483  </q-n></a>    <q-w>else</q-w> <q-w>return</q-w> r;
<a name="1484"><q-n>     1484  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1485"><q-n>     1485  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> maximum;
<a name="1486"><q-n>     1486  </q-n></a>
<a name="1487"><q-n>     1487  </q-n></a>  <q-w>function</q-w> minimum (
<a name="1488"><q-n>     1488  </q-n></a>    l, r : <q-t>integer</q-w>)                    <q-m>-- inputs</q-m>
<a name="1489"><q-n>     1489  </q-n></a>    <q-w>return</q-w> <q-t>integer</q-w> <q-w>is</q-w>
<a name="1490"><q-n>     1490  </q-n></a>  <q-w>begin</q-w>  <q-m>-- function min</q-m>
<a name="1491"><q-n>     1491  </q-n></a>    <q-w>if</q-w> l &gt; r <q-w>then</q-w> <q-w>return</q-w> r;
<a name="1492"><q-n>     1492  </q-n></a>    <q-w>else</q-w> <q-w>return</q-w> l;
<a name="1493"><q-n>     1493  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1494"><q-n>     1494  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> minimum;
<a name="1495"><q-n>     1495  </q-n></a>
<a name="1496"><q-n>     1496  </q-n></a>  <q-w>function</q-w> <q-l>"sra"</q-l> (arg : <q-t>SIGNED</q-w>; count : <q-t>INTEGER</q-w>)
<a name="1497"><q-n>     1497  </q-n></a>    <q-w>return</q-w> <q-t>SIGNED</q-w> <q-w>is</q-w>
<a name="1498"><q-n>     1498  </q-n></a>  <q-w>begin</q-w>
<a name="1499"><q-n>     1499  </q-n></a>    <q-w>if</q-w> (COUNT &gt;= 0) <q-w>then</q-w>
<a name="1500"><q-n>     1500  </q-n></a>      <q-w>return</q-w> SHIFT_RIGHT(arg, count);
<a name="1501"><q-n>     1501  </q-n></a>    <q-w>else</q-w>
<a name="1502"><q-n>     1502  </q-n></a>      <q-w>return</q-w> SHIFT_LEFT(arg, -count);
<a name="1503"><q-n>     1503  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1504"><q-n>     1504  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"sra"</q-l>;
<a name="1505"><q-n>     1505  </q-n></a>  
<a name="1506"><q-n>     1506  </q-n></a>  <q-w>function</q-w> or_reduce (arg : <q-t>STD_ULOGIC_VECTOR</q-w>)
<a name="1507"><q-n>     1507  </q-n></a>    <q-w>return</q-w> <q-t>STD_LOGIC</q-w> <q-w>is</q-w>
<a name="1508"><q-n>     1508  </q-n></a>    <q-w>variable</q-w> Upper, Lower : <q-t>STD_ULOGIC</q-w>;
<a name="1509"><q-n>     1509  </q-n></a>    <q-w>variable</q-w> Half         : <q-t>INTEGER</q-w>;
<a name="1510"><q-n>     1510  </q-n></a>    <q-w>variable</q-w> BUS_int      : <q-t>STD_ULOGIC_VECTOR</q-w> (arg'<q-a>length</q-w> - 1 <q-w>downto</q-w> 0);
<a name="1511"><q-n>     1511  </q-n></a>    <q-w>variable</q-w> Result       : <q-t>STD_ULOGIC</q-w>;
<a name="1512"><q-n>     1512  </q-n></a>  <q-w>begin</q-w>
<a name="1513"><q-n>     1513  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>            <q-m>-- In the case of a NULL range</q-m>
<a name="1514"><q-n>     1514  </q-n></a>      Result := '0';
<a name="1515"><q-n>     1515  </q-n></a>    <q-w>else</q-w>
<a name="1516"><q-n>     1516  </q-n></a>      BUS_int := to_ux01 (arg);
<a name="1517"><q-n>     1517  </q-n></a>      <q-w>if</q-w> (BUS_int'<q-a>length</q-w> = 1) <q-w>then</q-w>
<a name="1518"><q-n>     1518  </q-n></a>        Result := BUS_int (BUS_int'<q-a>left</q-w>);
<a name="1519"><q-n>     1519  </q-n></a>      <q-w>elsif</q-w> (BUS_int'<q-a>length</q-w> = 2) <q-w>then</q-w>
<a name="1520"><q-n>     1520  </q-n></a>        Result := BUS_int (BUS_int'<q-a>right</q-w>) <q-w>or</q-w> BUS_int (BUS_int'<q-a>left</q-w>);
<a name="1521"><q-n>     1521  </q-n></a>      <q-w>else</q-w>
<a name="1522"><q-n>     1522  </q-n></a>        Half   := (BUS_int'<q-a>length</q-w> + 1) / 2 + BUS_int'<q-a>right</q-w>;
<a name="1523"><q-n>     1523  </q-n></a>        Upper  := or_reduce (BUS_int (BUS_int'<q-a>left</q-w> <q-w>downto</q-w> Half));
<a name="1524"><q-n>     1524  </q-n></a>        Lower  := or_reduce (BUS_int (Half - 1 <q-w>downto</q-w> BUS_int'<q-a>right</q-w>));
<a name="1525"><q-n>     1525  </q-n></a>        Result := Upper <q-w>or</q-w> Lower;
<a name="1526"><q-n>     1526  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="1527"><q-n>     1527  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1528"><q-n>     1528  </q-n></a>    <q-w>return</q-w> Result;
<a name="1529"><q-n>     1529  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> or_reduce;
<a name="1530"><q-n>     1530  </q-n></a>
<a name="1531"><q-n>     1531  </q-n></a>  <q-m>-- purpose: AND all of the bits in a vector together</q-m>
<a name="1532"><q-n>     1532  </q-n></a>  <q-m>-- This is a copy of the proposed "and_reduce" from 1076.3</q-m>
<a name="1533"><q-n>     1533  </q-n></a>  <q-w>function</q-w> and_reduce (arg : <q-t>STD_ULOGIC_VECTOR</q-w>)
<a name="1534"><q-n>     1534  </q-n></a>    <q-w>return</q-w> <q-t>STD_LOGIC</q-w> <q-w>is</q-w>
<a name="1535"><q-n>     1535  </q-n></a>    <q-w>variable</q-w> Upper, Lower : <q-t>STD_ULOGIC</q-w>;
<a name="1536"><q-n>     1536  </q-n></a>    <q-w>variable</q-w> Half         : <q-t>INTEGER</q-w>;
<a name="1537"><q-n>     1537  </q-n></a>    <q-w>variable</q-w> BUS_int      : <q-t>STD_ULOGIC_VECTOR</q-w> (arg'<q-a>length</q-w> - 1 <q-w>downto</q-w> 0);
<a name="1538"><q-n>     1538  </q-n></a>    <q-w>variable</q-w> Result       : <q-t>STD_ULOGIC</q-w>;
<a name="1539"><q-n>     1539  </q-n></a>  <q-w>begin</q-w>
<a name="1540"><q-n>     1540  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>            <q-m>-- In the case of a NULL range</q-m>
<a name="1541"><q-n>     1541  </q-n></a>      Result := '1';
<a name="1542"><q-n>     1542  </q-n></a>    <q-w>else</q-w>
<a name="1543"><q-n>     1543  </q-n></a>      BUS_int := to_ux01 (arg);
<a name="1544"><q-n>     1544  </q-n></a>      <q-w>if</q-w> (BUS_int'<q-a>length</q-w> = 1) <q-w>then</q-w>
<a name="1545"><q-n>     1545  </q-n></a>        Result := BUS_int (BUS_int'<q-a>left</q-w>);
<a name="1546"><q-n>     1546  </q-n></a>      <q-w>elsif</q-w> (BUS_int'<q-a>length</q-w> = 2) <q-w>then</q-w>
<a name="1547"><q-n>     1547  </q-n></a>        Result := BUS_int (BUS_int'<q-a>right</q-w>) <q-w>and</q-w> BUS_int (BUS_int'<q-a>left</q-w>);
<a name="1548"><q-n>     1548  </q-n></a>      <q-w>else</q-w>
<a name="1549"><q-n>     1549  </q-n></a>        Half   := (BUS_int'<q-a>length</q-w> + 1) / 2 + BUS_int'<q-a>right</q-w>;
<a name="1550"><q-n>     1550  </q-n></a>        Upper  := and_reduce (BUS_int (BUS_int'<q-a>left</q-w> <q-w>downto</q-w> Half));
<a name="1551"><q-n>     1551  </q-n></a>        Lower  := and_reduce (BUS_int (Half - 1 <q-w>downto</q-w> BUS_int'<q-a>right</q-w>));
<a name="1552"><q-n>     1552  </q-n></a>        Result := Upper <q-w>and</q-w> Lower;
<a name="1553"><q-n>     1553  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="1554"><q-n>     1554  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1555"><q-n>     1555  </q-n></a>    <q-w>return</q-w> Result;
<a name="1556"><q-n>     1556  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> and_reduce;
<a name="1557"><q-n>     1557  </q-n></a>
<a name="1558"><q-n>     1558  </q-n></a>  <q-w>function</q-w> xor_reduce (arg : <q-t>STD_ULOGIC_VECTOR</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1559"><q-n>     1559  </q-n></a>    <q-w>variable</q-w> Upper, Lower : <q-t>STD_ULOGIC</q-w>;
<a name="1560"><q-n>     1560  </q-n></a>    <q-w>variable</q-w> Half         : <q-t>INTEGER</q-w>;
<a name="1561"><q-n>     1561  </q-n></a>    <q-w>variable</q-w> BUS_int      : <q-t>STD_ULOGIC_VECTOR</q-w> (arg'<q-a>length</q-w> - 1 <q-w>downto</q-w> 0);
<a name="1562"><q-n>     1562  </q-n></a>    <q-w>variable</q-w> Result       : <q-t>STD_ULOGIC</q-w> := '0';  <q-m>-- In the case of a NULL range</q-m>
<a name="1563"><q-n>     1563  </q-n></a>  <q-w>begin</q-w>
<a name="1564"><q-n>     1564  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> &gt;= 1) <q-w>then</q-w>
<a name="1565"><q-n>     1565  </q-n></a>      BUS_int := to_ux01 (arg);
<a name="1566"><q-n>     1566  </q-n></a>      <q-w>if</q-w> (BUS_int'<q-a>length</q-w> = 1) <q-w>then</q-w>
<a name="1567"><q-n>     1567  </q-n></a>        Result := BUS_int (BUS_int'<q-a>left</q-w>);
<a name="1568"><q-n>     1568  </q-n></a>      <q-w>elsif</q-w> (BUS_int'<q-a>length</q-w> = 2) <q-w>then</q-w>
<a name="1569"><q-n>     1569  </q-n></a>        Result := BUS_int(BUS_int'<q-a>right</q-w>) <q-w>xor</q-w> BUS_int(BUS_int'<q-a>left</q-w>);
<a name="1570"><q-n>     1570  </q-n></a>      <q-w>else</q-w>
<a name="1571"><q-n>     1571  </q-n></a>        Half   := (BUS_int'<q-a>length</q-w> + 1) / 2 + BUS_int'<q-a>right</q-w>;
<a name="1572"><q-n>     1572  </q-n></a>        Upper  := xor_reduce (BUS_int (BUS_int'<q-a>left</q-w> <q-w>downto</q-w> Half));
<a name="1573"><q-n>     1573  </q-n></a>        Lower  := xor_reduce (BUS_int (Half - 1 <q-w>downto</q-w> BUS_int'<q-a>right</q-w>));
<a name="1574"><q-n>     1574  </q-n></a>        Result := Upper <q-w>xor</q-w> Lower;
<a name="1575"><q-n>     1575  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="1576"><q-n>     1576  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1577"><q-n>     1577  </q-n></a>    <q-w>return</q-w> Result;
<a name="1578"><q-n>     1578  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> xor_reduce;
<a name="1579"><q-n>     1579  </q-n></a>
<a name="1580"><q-n>     1580  </q-n></a>  <q-w>function</q-w> nand_reduce(arg : <q-t>std_ulogic_vector</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1581"><q-n>     1581  </q-n></a>  <q-w>begin</q-w>
<a name="1582"><q-n>     1582  </q-n></a>    <q-w>return</q-w> <q-w>not</q-w> and_reduce (arg);
<a name="1583"><q-n>     1583  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> nand_reduce;
<a name="1584"><q-n>     1584  </q-n></a>  <q-w>function</q-w> nor_reduce(arg : <q-t>std_ulogic_vector</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1585"><q-n>     1585  </q-n></a>  <q-w>begin</q-w>
<a name="1586"><q-n>     1586  </q-n></a>    <q-w>return</q-w> <q-w>not</q-w> or_reduce (arg);
<a name="1587"><q-n>     1587  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> nor_reduce;
<a name="1588"><q-n>     1588  </q-n></a>  <q-w>function</q-w> xnor_reduce(arg : <q-t>std_ulogic_vector</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1589"><q-n>     1589  </q-n></a>  <q-w>begin</q-w>
<a name="1590"><q-n>     1590  </q-n></a>    <q-w>return</q-w> <q-w>not</q-w> xor_reduce (arg);
<a name="1591"><q-n>     1591  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> xnor_reduce;
<a name="1592"><q-n>     1592  </q-n></a>  <q-m>-- Match table, copied form new std_logic_1164</q-m>
<a name="1593"><q-n>     1593  </q-n></a>  <q-w>type</q-w> stdlogic_table <q-w>is</q-w> <q-w>array</q-w>(<q-t>STD_ULOGIC</q-w>, <q-t>STD_ULOGIC</q-w>) <q-w>of</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="1594"><q-n>     1594  </q-n></a>  <q-w>constant</q-w> match_logic_table : stdlogic_table := (
<a name="1595"><q-n>     1595  </q-n></a>    <q-m>-----------------------------------------------------</q-m>
<a name="1596"><q-n>     1596  </q-n></a>    <q-m>-- U    X    0    1    Z    W    L    H    -         |   |  </q-m>
<a name="1597"><q-n>     1597  </q-n></a>    <q-m>-----------------------------------------------------</q-m>
<a name="1598"><q-n>     1598  </q-n></a>    ('U', 'U', 'U', 'U', 'U', 'U', 'U', 'U', '1'),  <q-m>-- | U |</q-m>
<a name="1599"><q-n>     1599  </q-n></a>    ('U', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'),  <q-m>-- | X |</q-m>
<a name="1600"><q-n>     1600  </q-n></a>    ('U', 'X', '1', '0', 'X', 'X', '1', '0', '1'),  <q-m>-- | 0 |</q-m>
<a name="1601"><q-n>     1601  </q-n></a>    ('U', 'X', '0', '1', 'X', 'X', '0', '1', '1'),  <q-m>-- | 1 |</q-m>
<a name="1602"><q-n>     1602  </q-n></a>    ('U', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'),  <q-m>-- | Z |</q-m>
<a name="1603"><q-n>     1603  </q-n></a>    ('U', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '1'),  <q-m>-- | W |</q-m>
<a name="1604"><q-n>     1604  </q-n></a>    ('U', 'X', '1', '0', 'X', 'X', '1', '0', '1'),  <q-m>-- | L |</q-m>
<a name="1605"><q-n>     1605  </q-n></a>    ('U', 'X', '0', '1', 'X', 'X', '0', '1', '1'),  <q-m>-- | H |</q-m>
<a name="1606"><q-n>     1606  </q-n></a>    ('1', '1', '1', '1', '1', '1', '1', '1', '1')   <q-m>-- | - |</q-m>
<a name="1607"><q-n>     1607  </q-n></a>    );
<a name="1608"><q-n>     1608  </q-n></a>
<a name="1609"><q-n>     1609  </q-n></a>  <q-m>-------------------------------------------------------------------</q-m>
<a name="1610"><q-n>     1610  </q-n></a>  <q-m>-- ?= functions, Similar to "std_match", but returns "std_ulogic".</q-m>
<a name="1611"><q-n>     1611  </q-n></a>  <q-m>-------------------------------------------------------------------</q-m>
<a name="1612"><q-n>     1612  </q-n></a>  <q-w>function</q-w> \?=\ (l, r : <q-t>STD_ULOGIC</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1613"><q-n>     1613  </q-n></a>  <q-w>begin</q-w>
<a name="1614"><q-n>     1614  </q-n></a>    <q-w>return</q-w> match_logic_table (l, r);
<a name="1615"><q-n>     1615  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?=\;
<a name="1616"><q-n>     1616  </q-n></a>  <q-w>function</q-w> \?/=\ (l, r : <q-t>STD_ULOGIC</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1617"><q-n>     1617  </q-n></a>  <q-w>begin</q-w>
<a name="1618"><q-n>     1618  </q-n></a>    <q-w>return</q-w> <q-w>not</q-w> match_logic_table (l, r);
<a name="1619"><q-n>     1619  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?/=\;
<a name="1620"><q-n>     1620  </q-n></a>  <q-m>-- "?=" operator is similar to "std_match", but returns a std_ulogic..</q-m>
<a name="1621"><q-n>     1621  </q-n></a>  <q-m>-- Id: M.2B</q-m>
<a name="1622"><q-n>     1622  </q-n></a>  <q-w>function</q-w> \?=\ (L, R: <q-t>UNSIGNED</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1623"><q-n>     1623  </q-n></a>    <q-w>constant</q-w> L_LEFT : <q-t>INTEGER</q-w> := L'<q-a>LENGTH</q-w>-1;
<a name="1624"><q-n>     1624  </q-n></a>    <q-w>constant</q-w> R_LEFT : <q-t>INTEGER</q-w> := R'<q-a>LENGTH</q-w>-1;
<a name="1625"><q-n>     1625  </q-n></a>    <q-w>alias</q-w> XL        : <q-t>UNSIGNED</q-w>(L_LEFT <q-w>downto</q-w> 0) <q-w>is</q-w> L;
<a name="1626"><q-n>     1626  </q-n></a>    <q-w>alias</q-w> XR        : <q-t>UNSIGNED</q-w>(R_LEFT <q-w>downto</q-w> 0) <q-w>is</q-w> R;
<a name="1627"><q-n>     1627  </q-n></a>    <q-w>constant</q-w> SIZE   : <q-t>NATURAL</q-w> := MAXIMUM(L'<q-a>LENGTH</q-w>, R'<q-a>LENGTH</q-w>);
<a name="1628"><q-n>     1628  </q-n></a>    <q-w>variable</q-w> LX     : <q-t>UNSIGNED</q-w>(SIZE-1 <q-w>downto</q-w> 0);
<a name="1629"><q-n>     1629  </q-n></a>    <q-w>variable</q-w> RX     : <q-t>UNSIGNED</q-w>(SIZE-1 <q-w>downto</q-w> 0);
<a name="1630"><q-n>     1630  </q-n></a>    <q-w>variable</q-w> result, result1 : <q-t>STD_ULOGIC</q-w>;          <q-m>-- result</q-m>
<a name="1631"><q-n>     1631  </q-n></a>  <q-w>begin</q-w>
<a name="1632"><q-n>     1632  </q-n></a>    <q-m>-- Logically identical to an "=" operator.</q-m>
<a name="1633"><q-n>     1633  </q-n></a>    <q-w>if</q-w> ((L'<q-a>LENGTH</q-w> &lt; 1) <q-w>or</q-w> (R'<q-a>LENGTH</q-w> &lt; 1)) <q-w>then</q-w>
<a name="1634"><q-n>     1634  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="1635"><q-n>     1635  </q-n></a>        <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?="</q-l><q-l>": null detected, returning X"</q-l>
<a name="1636"><q-n>     1636  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="1637"><q-n>     1637  </q-n></a>      <q-w>return</q-w> 'X';
<a name="1638"><q-n>     1638  </q-n></a>    <q-w>else</q-w>
<a name="1639"><q-n>     1639  </q-n></a>      LX := RESIZE(XL, SIZE);
<a name="1640"><q-n>     1640  </q-n></a>      RX := RESIZE(XR, SIZE);
<a name="1641"><q-n>     1641  </q-n></a>      result := '1';
<a name="1642"><q-n>     1642  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> LX'<q-a>low</q-w> <q-w>to</q-w> LX'<q-a>high</q-w> <q-w>loop</q-w>
<a name="1643"><q-n>     1643  </q-n></a>        result1 := \?=\(LX(i), RX(i));
<a name="1644"><q-n>     1644  </q-n></a>        <q-w>if</q-w> result1 = 'U' <q-w>then</q-w>
<a name="1645"><q-n>     1645  </q-n></a>          <q-w>return</q-w> 'U';
<a name="1646"><q-n>     1646  </q-n></a>        <q-w>elsif</q-w> result1 = 'X' <q-w>or</q-w> result = 'X' <q-w>then</q-w>
<a name="1647"><q-n>     1647  </q-n></a>          result := 'X';
<a name="1648"><q-n>     1648  </q-n></a>        <q-w>else</q-w>
<a name="1649"><q-n>     1649  </q-n></a>          result := result <q-w>and</q-w> result1;
<a name="1650"><q-n>     1650  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1651"><q-n>     1651  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1652"><q-n>     1652  </q-n></a>      <q-w>return</q-w> result;
<a name="1653"><q-n>     1653  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1654"><q-n>     1654  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?=\;
<a name="1655"><q-n>     1655  </q-n></a>
<a name="1656"><q-n>     1656  </q-n></a>  <q-m>-- Id: M.3B</q-m>
<a name="1657"><q-n>     1657  </q-n></a>  <q-w>function</q-w> \?=\ (L, R: <q-t>SIGNED</q-w>) <q-w>return</q-w> <q-t>std_ulogic</q-w> <q-w>is</q-w>
<a name="1658"><q-n>     1658  </q-n></a>    <q-w>constant</q-w> L_LEFT : <q-t>INTEGER</q-w> := L'<q-a>LENGTH</q-w>-1;
<a name="1659"><q-n>     1659  </q-n></a>    <q-w>constant</q-w> R_LEFT : <q-t>INTEGER</q-w> := R'<q-a>LENGTH</q-w>-1;
<a name="1660"><q-n>     1660  </q-n></a>    <q-w>alias</q-w> XL        : <q-t>SIGNED</q-w>(L_LEFT <q-w>downto</q-w> 0) <q-w>is</q-w> L;
<a name="1661"><q-n>     1661  </q-n></a>    <q-w>alias</q-w> XR        : <q-t>SIGNED</q-w>(R_LEFT <q-w>downto</q-w> 0) <q-w>is</q-w> R;
<a name="1662"><q-n>     1662  </q-n></a>    <q-w>constant</q-w> SIZE   : <q-t>NATURAL</q-w> := MAXIMUM(L'<q-a>LENGTH</q-w>, R'<q-a>LENGTH</q-w>);
<a name="1663"><q-n>     1663  </q-n></a>    <q-w>variable</q-w> LX     : <q-t>SIGNED</q-w>(SIZE-1 <q-w>downto</q-w> 0);
<a name="1664"><q-n>     1664  </q-n></a>    <q-w>variable</q-w> RX     : <q-t>SIGNED</q-w>(SIZE-1 <q-w>downto</q-w> 0);
<a name="1665"><q-n>     1665  </q-n></a>    <q-w>variable</q-w> result, result1 : <q-t>STD_ULOGIC</q-w>;          <q-m>-- result</q-m>
<a name="1666"><q-n>     1666  </q-n></a>  <q-w>begin</q-w>                                 <q-m>-- ?=</q-m>
<a name="1667"><q-n>     1667  </q-n></a>    <q-w>if</q-w> ((L'<q-a>LENGTH</q-w> &lt; 1) <q-w>or</q-w> (R'<q-a>LENGTH</q-w> &lt; 1)) <q-w>then</q-w>
<a name="1668"><q-n>     1668  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="1669"><q-n>     1669  </q-n></a>        <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?="</q-l><q-l>": null detected, returning X"</q-l>
<a name="1670"><q-n>     1670  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="1671"><q-n>     1671  </q-n></a>      <q-w>return</q-w> 'X';
<a name="1672"><q-n>     1672  </q-n></a>    <q-w>else</q-w>
<a name="1673"><q-n>     1673  </q-n></a>      LX := RESIZE(XL, SIZE);
<a name="1674"><q-n>     1674  </q-n></a>      RX := RESIZE(XR, SIZE);
<a name="1675"><q-n>     1675  </q-n></a>      result := '1';
<a name="1676"><q-n>     1676  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> LX'<q-a>low</q-w> <q-w>to</q-w> LX'<q-a>high</q-w> <q-w>loop</q-w>
<a name="1677"><q-n>     1677  </q-n></a>        result1 := \?=\ (LX(i), RX(i));
<a name="1678"><q-n>     1678  </q-n></a>        <q-w>if</q-w> result1 = 'U' <q-w>then</q-w>
<a name="1679"><q-n>     1679  </q-n></a>          <q-w>return</q-w> 'U';
<a name="1680"><q-n>     1680  </q-n></a>        <q-w>elsif</q-w> result1 = 'X' <q-w>or</q-w> result = 'X' <q-w>then</q-w>
<a name="1681"><q-n>     1681  </q-n></a>          result := 'X';
<a name="1682"><q-n>     1682  </q-n></a>        <q-w>else</q-w>
<a name="1683"><q-n>     1683  </q-n></a>          result := result <q-w>and</q-w> result1;
<a name="1684"><q-n>     1684  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1685"><q-n>     1685  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1686"><q-n>     1686  </q-n></a>      <q-w>return</q-w> result;
<a name="1687"><q-n>     1687  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1688"><q-n>     1688  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?=\;
<a name="1689"><q-n>     1689  </q-n></a>
<a name="1690"><q-n>     1690  </q-n></a>  <q-w>function</q-w> \?/=\ (L, R : <q-t>UNSIGNED</q-w>) <q-w>return</q-w> <q-t>std_ulogic</q-w> <q-w>is</q-w>
<a name="1691"><q-n>     1691  </q-n></a>    <q-w>constant</q-w> L_LEFT : <q-t>INTEGER</q-w> := L'<q-a>LENGTH</q-w>-1;
<a name="1692"><q-n>     1692  </q-n></a>    <q-w>constant</q-w> R_LEFT : <q-t>INTEGER</q-w> := R'<q-a>LENGTH</q-w>-1;
<a name="1693"><q-n>     1693  </q-n></a>    <q-w>alias</q-w> XL        : <q-t>UNSIGNED</q-w>(L_LEFT <q-w>downto</q-w> 0) <q-w>is</q-w> L;
<a name="1694"><q-n>     1694  </q-n></a>    <q-w>alias</q-w> XR        : <q-t>UNSIGNED</q-w>(R_LEFT <q-w>downto</q-w> 0) <q-w>is</q-w> R;
<a name="1695"><q-n>     1695  </q-n></a>    <q-w>constant</q-w> SIZE   : <q-t>NATURAL</q-w> := MAXIMUM(L'<q-a>LENGTH</q-w>, R'<q-a>LENGTH</q-w>);
<a name="1696"><q-n>     1696  </q-n></a>    <q-w>variable</q-w> LX     : <q-t>UNSIGNED</q-w>(SIZE-1 <q-w>downto</q-w> 0);
<a name="1697"><q-n>     1697  </q-n></a>    <q-w>variable</q-w> RX     : <q-t>UNSIGNED</q-w>(SIZE-1 <q-w>downto</q-w> 0);
<a name="1698"><q-n>     1698  </q-n></a>    <q-w>variable</q-w> result, result1 : <q-t>STD_ULOGIC</q-w>;             <q-m>-- result</q-m>
<a name="1699"><q-n>     1699  </q-n></a>  <q-w>begin</q-w>                                 <q-m>-- ?=</q-m>
<a name="1700"><q-n>     1700  </q-n></a>    <q-w>if</q-w> ((L'<q-a>LENGTH</q-w> &lt; 1) <q-w>or</q-w> (R'<q-a>LENGTH</q-w> &lt; 1)) <q-w>then</q-w>
<a name="1701"><q-n>     1701  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="1702"><q-n>     1702  </q-n></a>        <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?/="</q-l><q-l>": null detected, returning X"</q-l>
<a name="1703"><q-n>     1703  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="1704"><q-n>     1704  </q-n></a>      <q-w>return</q-w> 'X';
<a name="1705"><q-n>     1705  </q-n></a>    <q-w>else</q-w>
<a name="1706"><q-n>     1706  </q-n></a>      LX := RESIZE(XL, SIZE);
<a name="1707"><q-n>     1707  </q-n></a>      RX := RESIZE(XR, SIZE);
<a name="1708"><q-n>     1708  </q-n></a>      result := '0';
<a name="1709"><q-n>     1709  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> LX'<q-a>low</q-w> <q-w>to</q-w> LX'<q-a>high</q-w> <q-w>loop</q-w>
<a name="1710"><q-n>     1710  </q-n></a>        result1 := \?/=\ (LX(i), RX(i));
<a name="1711"><q-n>     1711  </q-n></a>        <q-w>if</q-w> result1 = 'U' <q-w>then</q-w>
<a name="1712"><q-n>     1712  </q-n></a>          result := 'U';
<a name="1713"><q-n>     1713  </q-n></a>        <q-w>elsif</q-w> result1 = 'X' <q-w>or</q-w> result = 'X' <q-w>then</q-w>
<a name="1714"><q-n>     1714  </q-n></a>          result := 'X';
<a name="1715"><q-n>     1715  </q-n></a>        <q-w>else</q-w>
<a name="1716"><q-n>     1716  </q-n></a>          result := result <q-w>or</q-w> result1;
<a name="1717"><q-n>     1717  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1718"><q-n>     1718  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1719"><q-n>     1719  </q-n></a>      <q-w>return</q-w> result;
<a name="1720"><q-n>     1720  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1721"><q-n>     1721  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?/=\;
<a name="1722"><q-n>     1722  </q-n></a>
<a name="1723"><q-n>     1723  </q-n></a>  <q-w>function</q-w> \?/=\ (L, R : <q-t>SIGNED</q-w>) <q-w>return</q-w> <q-t>std_ulogic</q-w> <q-w>is</q-w>
<a name="1724"><q-n>     1724  </q-n></a>    <q-w>constant</q-w> L_LEFT : <q-t>INTEGER</q-w> := L'<q-a>LENGTH</q-w>-1;
<a name="1725"><q-n>     1725  </q-n></a>    <q-w>constant</q-w> R_LEFT : <q-t>INTEGER</q-w> := R'<q-a>LENGTH</q-w>-1;
<a name="1726"><q-n>     1726  </q-n></a>    <q-w>alias</q-w> XL        : <q-t>SIGNED</q-w>(L_LEFT <q-w>downto</q-w> 0) <q-w>is</q-w> L;
<a name="1727"><q-n>     1727  </q-n></a>    <q-w>alias</q-w> XR        : <q-t>SIGNED</q-w>(R_LEFT <q-w>downto</q-w> 0) <q-w>is</q-w> R;
<a name="1728"><q-n>     1728  </q-n></a>    <q-w>constant</q-w> SIZE   : <q-t>NATURAL</q-w> := MAXIMUM(L'<q-a>LENGTH</q-w>, R'<q-a>LENGTH</q-w>);
<a name="1729"><q-n>     1729  </q-n></a>    <q-w>variable</q-w> LX     : <q-t>SIGNED</q-w>(SIZE-1 <q-w>downto</q-w> 0);
<a name="1730"><q-n>     1730  </q-n></a>    <q-w>variable</q-w> RX     : <q-t>SIGNED</q-w>(SIZE-1 <q-w>downto</q-w> 0);
<a name="1731"><q-n>     1731  </q-n></a>    <q-w>variable</q-w> result, result1 : <q-t>STD_ULOGIC</q-w>;                   <q-m>-- result</q-m>
<a name="1732"><q-n>     1732  </q-n></a>  <q-w>begin</q-w>                                 <q-m>-- ?=</q-m>
<a name="1733"><q-n>     1733  </q-n></a>    <q-w>if</q-w> ((L'<q-a>LENGTH</q-w> &lt; 1) <q-w>or</q-w> (R'<q-a>LENGTH</q-w> &lt; 1)) <q-w>then</q-w>
<a name="1734"><q-n>     1734  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="1735"><q-n>     1735  </q-n></a>        <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?/="</q-l><q-l>": null detected, returning X"</q-l>
<a name="1736"><q-n>     1736  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="1737"><q-n>     1737  </q-n></a>      <q-w>return</q-w> 'X';
<a name="1738"><q-n>     1738  </q-n></a>    <q-w>else</q-w>
<a name="1739"><q-n>     1739  </q-n></a>      LX := RESIZE(XL, SIZE);
<a name="1740"><q-n>     1740  </q-n></a>      RX := RESIZE(XR, SIZE);
<a name="1741"><q-n>     1741  </q-n></a>      result := '0';
<a name="1742"><q-n>     1742  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> LX'<q-a>low</q-w> <q-w>to</q-w> LX'<q-a>high</q-w> <q-w>loop</q-w>
<a name="1743"><q-n>     1743  </q-n></a>        result1 := \?/=\ (LX(i), RX(i));
<a name="1744"><q-n>     1744  </q-n></a>        <q-w>if</q-w> result1 = 'U' <q-w>then</q-w>
<a name="1745"><q-n>     1745  </q-n></a>          <q-w>return</q-w> 'U';
<a name="1746"><q-n>     1746  </q-n></a>        <q-w>elsif</q-w> result1 = 'X' <q-w>or</q-w> result = 'X' <q-w>then</q-w>
<a name="1747"><q-n>     1747  </q-n></a>          result := 'X';
<a name="1748"><q-n>     1748  </q-n></a>        <q-w>else</q-w>
<a name="1749"><q-n>     1749  </q-n></a>          result := result <q-w>or</q-w> result1;
<a name="1750"><q-n>     1750  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1751"><q-n>     1751  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1752"><q-n>     1752  </q-n></a>      <q-w>return</q-w> result;
<a name="1753"><q-n>     1753  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1754"><q-n>     1754  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?/=\;
<a name="1755"><q-n>     1755  </q-n></a>  <q-w>function</q-w> Is_X ( s : <q-t>UNSIGNED</q-w> ) <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="1756"><q-n>     1756  </q-n></a>  <q-w>begin</q-w>
<a name="1757"><q-n>     1757  </q-n></a>    <q-w>return</q-w> Is_X (<q-t>STD_LOGIC_VECTOR</q-w> (s));
<a name="1758"><q-n>     1758  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> Is_X;
<a name="1759"><q-n>     1759  </q-n></a>  
<a name="1760"><q-n>     1760  </q-n></a>  <q-w>function</q-w> Is_X ( s : <q-t>SIGNED</q-w> ) <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="1761"><q-n>     1761  </q-n></a>  <q-w>begin</q-w>
<a name="1762"><q-n>     1762  </q-n></a>    <q-w>return</q-w> Is_X (<q-t>STD_LOGIC_VECTOR</q-w> (s));
<a name="1763"><q-n>     1763  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> Is_X;
<a name="1764"><q-n>     1764  </q-n></a>  <q-w>function</q-w> \?&gt;\ (L, R : <q-t>UNSIGNED</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1765"><q-n>     1765  </q-n></a>  <q-w>begin</q-w>
<a name="1766"><q-n>     1766  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="1767"><q-n>     1767  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="1768"><q-n>     1768  </q-n></a>        <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&gt;"</q-l><q-l>": null detected, returning X"</q-l>
<a name="1769"><q-n>     1769  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="1770"><q-n>     1770  </q-n></a>      <q-w>return</q-w> 'X';
<a name="1771"><q-n>     1771  </q-n></a>    <q-w>else</q-w>
<a name="1772"><q-n>     1772  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> L'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1773"><q-n>     1773  </q-n></a>        <q-w>if</q-w> L(i) = '-' <q-w>then</q-w>
<a name="1774"><q-n>     1774  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&gt;"</q-l><q-l>": '-' found in compare string"</q-l>
<a name="1775"><q-n>     1775  </q-n></a>            <q-w>severity</q-w> error;
<a name="1776"><q-n>     1776  </q-n></a>          <q-w>return</q-w> 'X';
<a name="1777"><q-n>     1777  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1778"><q-n>     1778  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1779"><q-n>     1779  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> R'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1780"><q-n>     1780  </q-n></a>        <q-w>if</q-w> R(i) = '-' <q-w>then</q-w>
<a name="1781"><q-n>     1781  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&gt;"</q-l><q-l>": '-' found in compare string"</q-l>
<a name="1782"><q-n>     1782  </q-n></a>            <q-w>severity</q-w> error;
<a name="1783"><q-n>     1783  </q-n></a>          <q-w>return</q-w> 'X';
<a name="1784"><q-n>     1784  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1785"><q-n>     1785  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1786"><q-n>     1786  </q-n></a>      <q-w>if</q-w> is_x(l) <q-w>or</q-w> is_x(r) <q-w>then</q-w>
<a name="1787"><q-n>     1787  </q-n></a>        <q-w>return</q-w> 'X';
<a name="1788"><q-n>     1788  </q-n></a>      <q-w>elsif</q-w> l &gt; r <q-w>then</q-w>
<a name="1789"><q-n>     1789  </q-n></a>        <q-w>return</q-w> '1';
<a name="1790"><q-n>     1790  </q-n></a>      <q-w>else</q-w>
<a name="1791"><q-n>     1791  </q-n></a>        <q-w>return</q-w> '0';
<a name="1792"><q-n>     1792  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="1793"><q-n>     1793  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1794"><q-n>     1794  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;\;
<a name="1795"><q-n>     1795  </q-n></a>  <q-m>-- %%% function "?&gt;" (L, R : UNSIGNED) return std_ulogic is</q-m>
<a name="1796"><q-n>     1796  </q-n></a>  <q-m>-- %%% end function "?&gt;"\;</q-m>
<a name="1797"><q-n>     1797  </q-n></a>  <q-w>function</q-w> \?&gt;\ (L, R : <q-t>SIGNED</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1798"><q-n>     1798  </q-n></a>  <q-w>begin</q-w>
<a name="1799"><q-n>     1799  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="1800"><q-n>     1800  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="1801"><q-n>     1801  </q-n></a>        <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&gt;"</q-l><q-l>": null detected, returning X"</q-l>
<a name="1802"><q-n>     1802  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="1803"><q-n>     1803  </q-n></a>      <q-w>return</q-w> 'X';
<a name="1804"><q-n>     1804  </q-n></a>    <q-w>else</q-w>
<a name="1805"><q-n>     1805  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> L'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1806"><q-n>     1806  </q-n></a>        <q-w>if</q-w> L(i) = '-' <q-w>then</q-w>
<a name="1807"><q-n>     1807  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&gt;"</q-l><q-l>": '-' found in compare string"</q-l>
<a name="1808"><q-n>     1808  </q-n></a>            <q-w>severity</q-w> error;
<a name="1809"><q-n>     1809  </q-n></a>          <q-w>return</q-w> 'X';
<a name="1810"><q-n>     1810  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1811"><q-n>     1811  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1812"><q-n>     1812  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> R'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1813"><q-n>     1813  </q-n></a>        <q-w>if</q-w> R(i) = '-' <q-w>then</q-w>
<a name="1814"><q-n>     1814  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&gt;"</q-l><q-l>": '-' found in compare string"</q-l>
<a name="1815"><q-n>     1815  </q-n></a>            <q-w>severity</q-w> error;
<a name="1816"><q-n>     1816  </q-n></a>          <q-w>return</q-w> 'X';
<a name="1817"><q-n>     1817  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1818"><q-n>     1818  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1819"><q-n>     1819  </q-n></a>      <q-w>if</q-w> is_x(l) <q-w>or</q-w> is_x(r) <q-w>then</q-w>
<a name="1820"><q-n>     1820  </q-n></a>        <q-w>return</q-w> 'X';
<a name="1821"><q-n>     1821  </q-n></a>      <q-w>elsif</q-w> l &gt; r <q-w>then</q-w>
<a name="1822"><q-n>     1822  </q-n></a>        <q-w>return</q-w> '1';
<a name="1823"><q-n>     1823  </q-n></a>      <q-w>else</q-w>
<a name="1824"><q-n>     1824  </q-n></a>        <q-w>return</q-w> '0';
<a name="1825"><q-n>     1825  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="1826"><q-n>     1826  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1827"><q-n>     1827  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;\;
<a name="1828"><q-n>     1828  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (L, R : <q-t>UNSIGNED</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1829"><q-n>     1829  </q-n></a>  <q-w>begin</q-w>
<a name="1830"><q-n>     1830  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="1831"><q-n>     1831  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="1832"><q-n>     1832  </q-n></a>        <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&gt;="</q-l><q-l>": null detected, returning X"</q-l>
<a name="1833"><q-n>     1833  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="1834"><q-n>     1834  </q-n></a>      <q-w>return</q-w> 'X';
<a name="1835"><q-n>     1835  </q-n></a>    <q-w>else</q-w>
<a name="1836"><q-n>     1836  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> L'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1837"><q-n>     1837  </q-n></a>        <q-w>if</q-w> L(i) = '-' <q-w>then</q-w>
<a name="1838"><q-n>     1838  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&gt;="</q-l><q-l>": '-' found in compare string"</q-l>
<a name="1839"><q-n>     1839  </q-n></a>            <q-w>severity</q-w> error;
<a name="1840"><q-n>     1840  </q-n></a>          <q-w>return</q-w> 'X';
<a name="1841"><q-n>     1841  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1842"><q-n>     1842  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1843"><q-n>     1843  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> R'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1844"><q-n>     1844  </q-n></a>        <q-w>if</q-w> R(i) = '-' <q-w>then</q-w>
<a name="1845"><q-n>     1845  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&gt;="</q-l><q-l>": '-' found in compare string"</q-l>
<a name="1846"><q-n>     1846  </q-n></a>            <q-w>severity</q-w> error;
<a name="1847"><q-n>     1847  </q-n></a>          <q-w>return</q-w> 'X';
<a name="1848"><q-n>     1848  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1849"><q-n>     1849  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1850"><q-n>     1850  </q-n></a>      <q-w>if</q-w> is_x(l) <q-w>or</q-w> is_x(r) <q-w>then</q-w>
<a name="1851"><q-n>     1851  </q-n></a>        <q-w>return</q-w> 'X';
<a name="1852"><q-n>     1852  </q-n></a>      <q-w>elsif</q-w> l &gt;= r <q-w>then</q-w>
<a name="1853"><q-n>     1853  </q-n></a>        <q-w>return</q-w> '1';
<a name="1854"><q-n>     1854  </q-n></a>      <q-w>else</q-w>
<a name="1855"><q-n>     1855  </q-n></a>        <q-w>return</q-w> '0';
<a name="1856"><q-n>     1856  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="1857"><q-n>     1857  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1858"><q-n>     1858  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;=\;
<a name="1859"><q-n>     1859  </q-n></a>  <q-m>-- %%% function "?&gt;=" (L, R : UNSIGNED) return std_ulogic is</q-m>
<a name="1860"><q-n>     1860  </q-n></a>  <q-m>-- %%% end function "?&gt;=";</q-m>
<a name="1861"><q-n>     1861  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (L, R : <q-t>SIGNED</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1862"><q-n>     1862  </q-n></a>  <q-w>begin</q-w>
<a name="1863"><q-n>     1863  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="1864"><q-n>     1864  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="1865"><q-n>     1865  </q-n></a>        <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&gt;="</q-l><q-l>": null detected, returning X"</q-l>
<a name="1866"><q-n>     1866  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="1867"><q-n>     1867  </q-n></a>      <q-w>return</q-w> 'X';
<a name="1868"><q-n>     1868  </q-n></a>    <q-w>else</q-w>
<a name="1869"><q-n>     1869  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> L'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1870"><q-n>     1870  </q-n></a>        <q-w>if</q-w> L(i) = '-' <q-w>then</q-w>
<a name="1871"><q-n>     1871  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&gt;="</q-l><q-l>": '-' found in compare string"</q-l>
<a name="1872"><q-n>     1872  </q-n></a>            <q-w>severity</q-w> error;
<a name="1873"><q-n>     1873  </q-n></a>          <q-w>return</q-w> 'X';
<a name="1874"><q-n>     1874  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1875"><q-n>     1875  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1876"><q-n>     1876  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> R'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1877"><q-n>     1877  </q-n></a>        <q-w>if</q-w> R(i) = '-' <q-w>then</q-w>
<a name="1878"><q-n>     1878  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&gt;="</q-l><q-l>": '-' found in compare string"</q-l>
<a name="1879"><q-n>     1879  </q-n></a>            <q-w>severity</q-w> error;
<a name="1880"><q-n>     1880  </q-n></a>          <q-w>return</q-w> 'X';
<a name="1881"><q-n>     1881  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1882"><q-n>     1882  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1883"><q-n>     1883  </q-n></a>      <q-w>if</q-w> is_x(l) <q-w>or</q-w> is_x(r) <q-w>then</q-w>
<a name="1884"><q-n>     1884  </q-n></a>        <q-w>return</q-w> 'X';
<a name="1885"><q-n>     1885  </q-n></a>      <q-w>elsif</q-w> l &gt;= r <q-w>then</q-w>
<a name="1886"><q-n>     1886  </q-n></a>        <q-w>return</q-w> '1';
<a name="1887"><q-n>     1887  </q-n></a>      <q-w>else</q-w>
<a name="1888"><q-n>     1888  </q-n></a>        <q-w>return</q-w> '0';
<a name="1889"><q-n>     1889  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="1890"><q-n>     1890  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1891"><q-n>     1891  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;=\;
<a name="1892"><q-n>     1892  </q-n></a>  <q-w>function</q-w> \?&lt;\ (L, R : <q-t>UNSIGNED</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1893"><q-n>     1893  </q-n></a>  <q-w>begin</q-w>
<a name="1894"><q-n>     1894  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="1895"><q-n>     1895  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="1896"><q-n>     1896  </q-n></a>        <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&lt;"</q-l><q-l>": null detected, returning X"</q-l>
<a name="1897"><q-n>     1897  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="1898"><q-n>     1898  </q-n></a>      <q-w>return</q-w> 'X';
<a name="1899"><q-n>     1899  </q-n></a>    <q-w>else</q-w>
<a name="1900"><q-n>     1900  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> L'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1901"><q-n>     1901  </q-n></a>        <q-w>if</q-w> L(i) = '-' <q-w>then</q-w>
<a name="1902"><q-n>     1902  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&lt;"</q-l><q-l>": '-' found in compare string"</q-l>
<a name="1903"><q-n>     1903  </q-n></a>            <q-w>severity</q-w> error;
<a name="1904"><q-n>     1904  </q-n></a>          <q-w>return</q-w> 'X';
<a name="1905"><q-n>     1905  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1906"><q-n>     1906  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1907"><q-n>     1907  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> R'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1908"><q-n>     1908  </q-n></a>        <q-w>if</q-w> R(i) = '-' <q-w>then</q-w>
<a name="1909"><q-n>     1909  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&lt;"</q-l><q-l>": '-' found in compare string"</q-l>
<a name="1910"><q-n>     1910  </q-n></a>            <q-w>severity</q-w> error;
<a name="1911"><q-n>     1911  </q-n></a>          <q-w>return</q-w> 'X';
<a name="1912"><q-n>     1912  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1913"><q-n>     1913  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1914"><q-n>     1914  </q-n></a>      <q-w>if</q-w> is_x(l) <q-w>or</q-w> is_x(r) <q-w>then</q-w>
<a name="1915"><q-n>     1915  </q-n></a>        <q-w>return</q-w> 'X';
<a name="1916"><q-n>     1916  </q-n></a>      <q-w>elsif</q-w> l &lt; r <q-w>then</q-w>
<a name="1917"><q-n>     1917  </q-n></a>        <q-w>return</q-w> '1';
<a name="1918"><q-n>     1918  </q-n></a>      <q-w>else</q-w>
<a name="1919"><q-n>     1919  </q-n></a>        <q-w>return</q-w> '0';
<a name="1920"><q-n>     1920  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="1921"><q-n>     1921  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1922"><q-n>     1922  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;\;
<a name="1923"><q-n>     1923  </q-n></a>  <q-m>-- %%% function "?&lt;" (L, R : UNSIGNED) return std_ulogic is</q-m>
<a name="1924"><q-n>     1924  </q-n></a>  <q-m>-- %%% end function "?&lt;";</q-m>
<a name="1925"><q-n>     1925  </q-n></a>  <q-w>function</q-w> \?&lt;\ (L, R : <q-t>SIGNED</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1926"><q-n>     1926  </q-n></a>  <q-w>begin</q-w>
<a name="1927"><q-n>     1927  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="1928"><q-n>     1928  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="1929"><q-n>     1929  </q-n></a>        <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&lt;"</q-l><q-l>": null detected, returning X"</q-l>
<a name="1930"><q-n>     1930  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="1931"><q-n>     1931  </q-n></a>      <q-w>return</q-w> 'X';
<a name="1932"><q-n>     1932  </q-n></a>    <q-w>else</q-w>
<a name="1933"><q-n>     1933  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> L'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1934"><q-n>     1934  </q-n></a>        <q-w>if</q-w> L(i) = '-' <q-w>then</q-w>
<a name="1935"><q-n>     1935  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&lt;"</q-l><q-l>": '-' found in compare string"</q-l>
<a name="1936"><q-n>     1936  </q-n></a>            <q-w>severity</q-w> error;
<a name="1937"><q-n>     1937  </q-n></a>          <q-w>return</q-w> 'X';
<a name="1938"><q-n>     1938  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1939"><q-n>     1939  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1940"><q-n>     1940  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> R'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1941"><q-n>     1941  </q-n></a>        <q-w>if</q-w> R(i) = '-' <q-w>then</q-w>
<a name="1942"><q-n>     1942  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&lt;"</q-l><q-l>": '-' found in compare string"</q-l>
<a name="1943"><q-n>     1943  </q-n></a>            <q-w>severity</q-w> error;
<a name="1944"><q-n>     1944  </q-n></a>          <q-w>return</q-w> 'X';
<a name="1945"><q-n>     1945  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1946"><q-n>     1946  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1947"><q-n>     1947  </q-n></a>      <q-w>if</q-w> is_x(l) <q-w>or</q-w> is_x(r) <q-w>then</q-w>
<a name="1948"><q-n>     1948  </q-n></a>        <q-w>return</q-w> 'X';
<a name="1949"><q-n>     1949  </q-n></a>      <q-w>elsif</q-w> l &lt; r <q-w>then</q-w>
<a name="1950"><q-n>     1950  </q-n></a>        <q-w>return</q-w> '1';
<a name="1951"><q-n>     1951  </q-n></a>      <q-w>else</q-w>
<a name="1952"><q-n>     1952  </q-n></a>        <q-w>return</q-w> '0';
<a name="1953"><q-n>     1953  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="1954"><q-n>     1954  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1955"><q-n>     1955  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;\;
<a name="1956"><q-n>     1956  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (L, R : <q-t>UNSIGNED</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1957"><q-n>     1957  </q-n></a>  <q-w>begin</q-w>
<a name="1958"><q-n>     1958  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="1959"><q-n>     1959  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="1960"><q-n>     1960  </q-n></a>        <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&lt;="</q-l><q-l>": null detected, returning X"</q-l>
<a name="1961"><q-n>     1961  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="1962"><q-n>     1962  </q-n></a>      <q-w>return</q-w> 'X';
<a name="1963"><q-n>     1963  </q-n></a>    <q-w>else</q-w>
<a name="1964"><q-n>     1964  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> L'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1965"><q-n>     1965  </q-n></a>        <q-w>if</q-w> L(i) = '-' <q-w>then</q-w>
<a name="1966"><q-n>     1966  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&lt;="</q-l><q-l>": '-' found in compare string"</q-l>
<a name="1967"><q-n>     1967  </q-n></a>            <q-w>severity</q-w> error;
<a name="1968"><q-n>     1968  </q-n></a>          <q-w>return</q-w> 'X';
<a name="1969"><q-n>     1969  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1970"><q-n>     1970  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1971"><q-n>     1971  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> R'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1972"><q-n>     1972  </q-n></a>        <q-w>if</q-w> R(i) = '-' <q-w>then</q-w>
<a name="1973"><q-n>     1973  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&lt;="</q-l><q-l>": '-' found in compare string"</q-l>
<a name="1974"><q-n>     1974  </q-n></a>            <q-w>severity</q-w> error;
<a name="1975"><q-n>     1975  </q-n></a>          <q-w>return</q-w> 'X';
<a name="1976"><q-n>     1976  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="1977"><q-n>     1977  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="1978"><q-n>     1978  </q-n></a>      <q-w>if</q-w> is_x(l) <q-w>or</q-w> is_x(r) <q-w>then</q-w>
<a name="1979"><q-n>     1979  </q-n></a>        <q-w>return</q-w> 'X';
<a name="1980"><q-n>     1980  </q-n></a>      <q-w>elsif</q-w> l &lt;= r <q-w>then</q-w>
<a name="1981"><q-n>     1981  </q-n></a>        <q-w>return</q-w> '1';
<a name="1982"><q-n>     1982  </q-n></a>      <q-w>else</q-w>
<a name="1983"><q-n>     1983  </q-n></a>        <q-w>return</q-w> '0';
<a name="1984"><q-n>     1984  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="1985"><q-n>     1985  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="1986"><q-n>     1986  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;=\;
<a name="1987"><q-n>     1987  </q-n></a>  <q-m>-- %%% function "?&lt;=" (L, R : UNSIGNED) return std_ulogic is</q-m>
<a name="1988"><q-n>     1988  </q-n></a>  <q-m>-- %%% end function "?&lt;=";</q-m>
<a name="1989"><q-n>     1989  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (L, R : <q-t>SIGNED</q-w>) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="1990"><q-n>     1990  </q-n></a>  <q-w>begin</q-w>
<a name="1991"><q-n>     1991  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="1992"><q-n>     1992  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="1993"><q-n>     1993  </q-n></a>        <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&lt;="</q-l><q-l>": null detected, returning X"</q-l>
<a name="1994"><q-n>     1994  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="1995"><q-n>     1995  </q-n></a>      <q-w>return</q-w> 'X';
<a name="1996"><q-n>     1996  </q-n></a>    <q-w>else</q-w>
<a name="1997"><q-n>     1997  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> L'<q-w>range</q-w> <q-w>loop</q-w>
<a name="1998"><q-n>     1998  </q-n></a>        <q-w>if</q-w> L(i) = '-' <q-w>then</q-w>
<a name="1999"><q-n>     1999  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&lt;="</q-l><q-l>": '-' found in compare string"</q-l>
<a name="2000"><q-n>     2000  </q-n></a>            <q-w>severity</q-w> error;
<a name="2001"><q-n>     2001  </q-n></a>          <q-w>return</q-w> 'X';
<a name="2002"><q-n>     2002  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="2003"><q-n>     2003  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="2004"><q-n>     2004  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> R'<q-w>range</q-w> <q-w>loop</q-w>
<a name="2005"><q-n>     2005  </q-n></a>        <q-w>if</q-w> R(i) = '-' <q-w>then</q-w>
<a name="2006"><q-n>     2006  </q-n></a>          <q-w>report</q-w> <q-l>"NUMERIC_STD."</q-l><q-l>"?&lt;="</q-l><q-l>": '-' found in compare string"</q-l>
<a name="2007"><q-n>     2007  </q-n></a>            <q-w>severity</q-w> error;
<a name="2008"><q-n>     2008  </q-n></a>          <q-w>return</q-w> 'X';
<a name="2009"><q-n>     2009  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="2010"><q-n>     2010  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="2011"><q-n>     2011  </q-n></a>      <q-w>if</q-w> is_x(l) <q-w>or</q-w> is_x(r) <q-w>then</q-w>
<a name="2012"><q-n>     2012  </q-n></a>        <q-w>return</q-w> 'X';
<a name="2013"><q-n>     2013  </q-n></a>      <q-w>elsif</q-w> l &lt;= r <q-w>then</q-w>
<a name="2014"><q-n>     2014  </q-n></a>        <q-w>return</q-w> '1';
<a name="2015"><q-n>     2015  </q-n></a>      <q-w>else</q-w>
<a name="2016"><q-n>     2016  </q-n></a>        <q-w>return</q-w> '0';
<a name="2017"><q-n>     2017  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="2018"><q-n>     2018  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2019"><q-n>     2019  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;=\;
<a name="2020"><q-n>     2020  </q-n></a>
<a name="2021"><q-n>     2021  </q-n></a><q-m>-- %%% END replicated functions</q-m>
<a name="2022"><q-n>     2022  </q-n></a>  <q-m>-- Special version of "minimum" to do some boundary checking without errors</q-m>
<a name="2023"><q-n>     2023  </q-n></a>  <q-w>function</q-w> mins (l, r : <q-t>INTEGER</q-w>)
<a name="2024"><q-n>     2024  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="2025"><q-n>     2025  </q-n></a>  <q-w>begin</q-w>  <q-m>-- function mins</q-m>
<a name="2026"><q-n>     2026  </q-n></a>    <q-w>if</q-w> (L = <q-t>INTEGER</q-w>'<q-a>low</q-w> <q-w>or</q-w> R = <q-t>INTEGER</q-w>'<q-a>low</q-w>) <q-w>then</q-w>
<a name="2027"><q-n>     2027  </q-n></a>      <q-w>return</q-w> 0;                         <q-m>-- error condition, silent</q-m>
<a name="2028"><q-n>     2028  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2029"><q-n>     2029  </q-n></a>    <q-w>return</q-w> minimum (L, R);
<a name="2030"><q-n>     2030  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> mins;
<a name="2031"><q-n>     2031  </q-n></a>
<a name="2032"><q-n>     2032  </q-n></a>  <q-m>-- Special version of "minimum" to do some boundary checking with errors</q-m>
<a name="2033"><q-n>     2033  </q-n></a>  <q-w>function</q-w> mine (l, r : <q-t>INTEGER</q-w>)
<a name="2034"><q-n>     2034  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="2035"><q-n>     2035  </q-n></a>  <q-w>begin</q-w>  <q-m>-- function mine</q-m>
<a name="2036"><q-n>     2036  </q-n></a>    <q-w>if</q-w> (L = <q-t>INTEGER</q-w>'<q-a>low</q-w> <q-w>or</q-w> R = <q-t>INTEGER</q-w>'<q-a>low</q-w>) <q-w>then</q-w>
<a name="2037"><q-n>     2037  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="2038"><q-n>     2038  </q-n></a>        &amp; <q-l>" Unbounded number passed, was a literal used?"</q-l>
<a name="2039"><q-n>     2039  </q-n></a>        <q-w>severity</q-w> error;
<a name="2040"><q-n>     2040  </q-n></a>      <q-w>return</q-w> 0;
<a name="2041"><q-n>     2041  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2042"><q-n>     2042  </q-n></a>    <q-w>return</q-w> minimum (L, R);
<a name="2043"><q-n>     2043  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> mine;
<a name="2044"><q-n>     2044  </q-n></a>
<a name="2045"><q-n>     2045  </q-n></a>  <q-m>-- The following functions are used only internally.  Every function</q-m>
<a name="2046"><q-n>     2046  </q-n></a>  <q-m>-- calls "cleanvec" either directly or indirectly.</q-m>
<a name="2047"><q-n>     2047  </q-n></a>  <q-m>-- purpose: Fixes "downto" problem and resolves meta states</q-m>
<a name="2048"><q-n>     2048  </q-n></a>  <q-w>function</q-w> cleanvec (
<a name="2049"><q-n>     2049  </q-n></a>    arg : UNRESOLVED_sfixed)            <q-m>-- input</q-m>
<a name="2050"><q-n>     2050  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="2051"><q-n>     2051  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w> := maximum(arg'<q-a>left</q-w>, arg'<q-a>right</q-w>);
<a name="2052"><q-n>     2052  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w> := mins(arg'<q-a>left</q-w>, arg'<q-a>right</q-w>);
<a name="2053"><q-n>     2053  </q-n></a>    <q-w>variable</q-w> result      : UNRESOLVED_sfixed (arg'<q-w>range</q-w>);
<a name="2054"><q-n>     2054  </q-n></a>  <q-w>begin</q-w>  <q-m>-- function cleanvec</q-m>
<a name="2055"><q-n>     2055  </q-n></a>    <q-w>assert</q-w> <q-w>not</q-w> (arg'<q-a>ascending</q-w> <q-w>and</q-w> (arg'<q-a>low</q-w> /= <q-t>INTEGER</q-w>'<q-a>low</q-w>))
<a name="2056"><q-n>     2056  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="2057"><q-n>     2057  </q-n></a>      &amp; <q-l>" Vector passed using a "</q-l><q-l>"to"</q-l><q-l>" range, expected is "</q-l><q-l>"downto"</q-l><q-l>""</q-l>
<a name="2058"><q-n>     2058  </q-n></a>      <q-w>severity</q-w> error;
<a name="2059"><q-n>     2059  </q-n></a>    <q-w>return</q-w> arg;
<a name="2060"><q-n>     2060  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> cleanvec;
<a name="2061"><q-n>     2061  </q-n></a>
<a name="2062"><q-n>     2062  </q-n></a>  <q-m>-- purpose: Fixes "downto" problem and resolves meta states</q-m>
<a name="2063"><q-n>     2063  </q-n></a>  <q-w>function</q-w> cleanvec (
<a name="2064"><q-n>     2064  </q-n></a>    arg : UNRESOLVED_ufixed)            <q-m>-- input</q-m>
<a name="2065"><q-n>     2065  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="2066"><q-n>     2066  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w> := maximum(arg'<q-a>left</q-w>, arg'<q-a>right</q-w>);
<a name="2067"><q-n>     2067  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w> := mins(arg'<q-a>left</q-w>, arg'<q-a>right</q-w>);
<a name="2068"><q-n>     2068  </q-n></a>    <q-w>variable</q-w> result      : UNRESOLVED_ufixed (arg'<q-w>range</q-w>);
<a name="2069"><q-n>     2069  </q-n></a>  <q-w>begin</q-w>  <q-m>-- function cleanvec</q-m>
<a name="2070"><q-n>     2070  </q-n></a>    <q-w>assert</q-w> <q-w>not</q-w> (arg'<q-a>ascending</q-w> <q-w>and</q-w> (arg'<q-a>low</q-w> /= <q-t>INTEGER</q-w>'<q-a>low</q-w>))
<a name="2071"><q-n>     2071  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="2072"><q-n>     2072  </q-n></a>      &amp; <q-l>" Vector passed using a "</q-l><q-l>"to"</q-l><q-l>" range, expected is "</q-l><q-l>"downto"</q-l><q-l>""</q-l>
<a name="2073"><q-n>     2073  </q-n></a>      <q-w>severity</q-w> error;
<a name="2074"><q-n>     2074  </q-n></a>    <q-w>return</q-w> arg;
<a name="2075"><q-n>     2075  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> cleanvec;
<a name="2076"><q-n>     2076  </q-n></a>
<a name="2077"><q-n>     2077  </q-n></a>  <q-m>-- Type convert a "unsigned" into a "ufixed", used internally</q-m>
<a name="2078"><q-n>     2078  </q-n></a>  <q-w>function</q-w> to_fixed (
<a name="2079"><q-n>     2079  </q-n></a>    arg                  : <q-t>UNSIGNED</q-w>;  <q-m>-- shifted vector</q-m>
<a name="2080"><q-n>     2080  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="2081"><q-n>     2081  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="2082"><q-n>     2082  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="2083"><q-n>     2083  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="2084"><q-n>     2084  </q-n></a>  <q-w>begin</q-w>  <q-m>-- function to_fixed</q-m>
<a name="2085"><q-n>     2085  </q-n></a>    result := UNRESOLVED_ufixed(arg);
<a name="2086"><q-n>     2086  </q-n></a>    <q-w>return</q-w> result;
<a name="2087"><q-n>     2087  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_fixed;
<a name="2088"><q-n>     2088  </q-n></a>
<a name="2089"><q-n>     2089  </q-n></a>  <q-m>-- Type convert a "signed" into an "sfixed", used internally</q-m>
<a name="2090"><q-n>     2090  </q-n></a>  <q-w>function</q-w> to_fixed (
<a name="2091"><q-n>     2091  </q-n></a>    arg                  : <q-t>SIGNED</q-w>;  <q-m>-- shifted vector</q-m>
<a name="2092"><q-n>     2092  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="2093"><q-n>     2093  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="2094"><q-n>     2094  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="2095"><q-n>     2095  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="2096"><q-n>     2096  </q-n></a>  <q-w>begin</q-w>  <q-m>-- function to_fixed</q-m>
<a name="2097"><q-n>     2097  </q-n></a>    result := UNRESOLVED_sfixed(arg);
<a name="2098"><q-n>     2098  </q-n></a>    <q-w>return</q-w> result;
<a name="2099"><q-n>     2099  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_fixed;
<a name="2100"><q-n>     2100  </q-n></a>
<a name="2101"><q-n>     2101  </q-n></a>  <q-m>-- Type convert a "ufixed" into an "unsigned", used internally</q-m>
<a name="2102"><q-n>     2102  </q-n></a>  <q-w>function</q-w> to_uns (
<a name="2103"><q-n>     2103  </q-n></a>    arg : UNRESOLVED_ufixed)            <q-m>-- fp vector</q-m>
<a name="2104"><q-n>     2104  </q-n></a>    <q-w>return</q-w> <q-t>UNSIGNED</q-w> <q-w>is</q-w>
<a name="2105"><q-n>     2105  </q-n></a>    <q-w>subtype</q-w> t <q-w>is</q-w> <q-t>UNSIGNED</q-w>(arg'<q-a>high</q-w> - arg'<q-a>low</q-w> <q-w>downto</q-w> 0);
<a name="2106"><q-n>     2106  </q-n></a>    <q-w>variable</q-w> slv : t;
<a name="2107"><q-n>     2107  </q-n></a>  <q-w>begin</q-w>  <q-m>-- function to_uns</q-m>
<a name="2108"><q-n>     2108  </q-n></a>    slv := t(arg);
<a name="2109"><q-n>     2109  </q-n></a>    <q-w>return</q-w> slv;
<a name="2110"><q-n>     2110  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_uns;
<a name="2111"><q-n>     2111  </q-n></a>
<a name="2112"><q-n>     2112  </q-n></a>  <q-m>-- Type convert an "sfixed" into a "signed", used internally</q-m>
<a name="2113"><q-n>     2113  </q-n></a>  <q-w>function</q-w> to_s (
<a name="2114"><q-n>     2114  </q-n></a>    arg : UNRESOLVED_sfixed)            <q-m>-- fp vector</q-m>
<a name="2115"><q-n>     2115  </q-n></a>    <q-w>return</q-w> <q-t>SIGNED</q-w> <q-w>is</q-w>
<a name="2116"><q-n>     2116  </q-n></a>    <q-w>subtype</q-w> t <q-w>is</q-w> <q-t>SIGNED</q-w>(arg'<q-a>high</q-w> - arg'<q-a>low</q-w> <q-w>downto</q-w> 0);
<a name="2117"><q-n>     2117  </q-n></a>    <q-w>variable</q-w> slv : t;
<a name="2118"><q-n>     2118  </q-n></a>  <q-w>begin</q-w>  <q-m>-- function to_s</q-m>
<a name="2119"><q-n>     2119  </q-n></a>    slv := t(arg);
<a name="2120"><q-n>     2120  </q-n></a>    <q-w>return</q-w> slv;
<a name="2121"><q-n>     2121  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_s;
<a name="2122"><q-n>     2122  </q-n></a>
<a name="2123"><q-n>     2123  </q-n></a>  <q-m>-- adds 1 to the LSB of the number</q-m>
<a name="2124"><q-n>     2124  </q-n></a>  <q-w>procedure</q-w> round_up (arg       : <q-a>in</q-w>  UNRESOLVED_ufixed;
<a name="2125"><q-n>     2125  </q-n></a>                      result    : <q-a>out</q-w> UNRESOLVED_ufixed;
<a name="2126"><q-n>     2126  </q-n></a>                      overflowx : <q-a>out</q-w> <q-t>BOOLEAN</q-w>) <q-w>is</q-w>
<a name="2127"><q-n>     2127  </q-n></a>    <q-w>variable</q-w> arguns, resuns : <q-t>UNSIGNED</q-w> (arg'<q-a>high</q-w>-arg'<q-a>low</q-w>+1 <q-w>downto</q-w> 0)
<a name="2128"><q-n>     2128  </q-n></a>      := (<q-w>others</q-w> =&gt; '0');
<a name="2129"><q-n>     2129  </q-n></a>  <q-w>begin</q-w>  <q-m>-- round_up</q-m>
<a name="2130"><q-n>     2130  </q-n></a>    arguns (arguns'<q-a>high</q-w>-1 <q-w>downto</q-w> 0) := to_uns (arg);
<a name="2131"><q-n>     2131  </q-n></a>    resuns                          := arguns + 1;
<a name="2132"><q-n>     2132  </q-n></a>    result := to_fixed(resuns(arg'<q-a>high</q-w>-arg'<q-a>low</q-w>
<a name="2133"><q-n>     2133  </q-n></a>                              <q-w>downto</q-w> 0), arg'<q-a>high</q-w>, arg'<q-a>low</q-w>);
<a name="2134"><q-n>     2134  </q-n></a>    overflowx := (resuns(resuns'<q-a>high</q-w>) = '1');
<a name="2135"><q-n>     2135  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> round_up;
<a name="2136"><q-n>     2136  </q-n></a>
<a name="2137"><q-n>     2137  </q-n></a>  <q-m>-- adds 1 to the LSB of the number</q-m>
<a name="2138"><q-n>     2138  </q-n></a>  <q-w>procedure</q-w> round_up (arg       : <q-a>in</q-w>  UNRESOLVED_sfixed;
<a name="2139"><q-n>     2139  </q-n></a>                      result    : <q-a>out</q-w> UNRESOLVED_sfixed;
<a name="2140"><q-n>     2140  </q-n></a>                      overflowx : <q-a>out</q-w> <q-t>BOOLEAN</q-w>) <q-w>is</q-w>
<a name="2141"><q-n>     2141  </q-n></a>    <q-w>variable</q-w> args, ress : <q-t>SIGNED</q-w> (arg'<q-a>high</q-w>-arg'<q-a>low</q-w>+1 <q-w>downto</q-w> 0);
<a name="2142"><q-n>     2142  </q-n></a>  <q-w>begin</q-w>  <q-m>-- round_up</q-m>
<a name="2143"><q-n>     2143  </q-n></a>    args (args'<q-a>high</q-w>-1 <q-w>downto</q-w> 0) := to_s (arg);
<a name="2144"><q-n>     2144  </q-n></a>    args(args'<q-a>high</q-w>)             := arg(arg'<q-a>high</q-w>);  <q-m>-- sign extend</q-m>
<a name="2145"><q-n>     2145  </q-n></a>    ress                        := args + 1;
<a name="2146"><q-n>     2146  </q-n></a>    result := to_fixed(ress (ress'<q-a>high</q-w>-1
<a name="2147"><q-n>     2147  </q-n></a>                             <q-w>downto</q-w> 0), arg'<q-a>high</q-w>, arg'<q-a>low</q-w>);
<a name="2148"><q-n>     2148  </q-n></a>    overflowx := ((arg(arg'<q-a>high</q-w>) /= ress(ress'<q-a>high</q-w>-1))
<a name="2149"><q-n>     2149  </q-n></a>                  <q-w>and</q-w> (or_reduce (<q-t>STD_ULOGIC_VECTOR</q-w>(ress)) /= '0'));
<a name="2150"><q-n>     2150  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> round_up;
<a name="2151"><q-n>     2151  </q-n></a>
<a name="2152"><q-n>     2152  </q-n></a>  <q-m>-- Rounding - Performs a "round_nearest" (IEEE 754) which rounds up</q-m>
<a name="2153"><q-n>     2153  </q-n></a>  <q-m>-- when the remainder is &gt; 0.5.  If the remainder IS 0.5 then if the</q-m>
<a name="2154"><q-n>     2154  </q-n></a>  <q-m>-- bottom bit is a "1" it is rounded, otherwise it remains the same.</q-m>
<a name="2155"><q-n>     2155  </q-n></a>  <q-w>function</q-w> round_fixed (arg            : UNRESOLVED_ufixed;
<a name="2156"><q-n>     2156  </q-n></a>                        remainder      : UNRESOLVED_ufixed;
<a name="2157"><q-n>     2157  </q-n></a>                        overflow_style : fixed_overflow_style_type := fixed_overflow_style)
<a name="2158"><q-n>     2158  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="2159"><q-n>     2159  </q-n></a>    <q-w>variable</q-w> rounds         : <q-t>BOOLEAN</q-w>;
<a name="2160"><q-n>     2160  </q-n></a>    <q-w>variable</q-w> round_overflow : <q-t>BOOLEAN</q-w>;
<a name="2161"><q-n>     2161  </q-n></a>    <q-w>variable</q-w> result         : UNRESOLVED_ufixed (arg'<q-w>range</q-w>);
<a name="2162"><q-n>     2162  </q-n></a>  <q-w>begin</q-w>
<a name="2163"><q-n>     2163  </q-n></a>    rounds := false;
<a name="2164"><q-n>     2164  </q-n></a>    <q-w>if</q-w> (remainder'<q-a>length</q-w> &gt; 1) <q-w>then</q-w>
<a name="2165"><q-n>     2165  </q-n></a>      <q-w>if</q-w> (remainder (remainder'<q-a>high</q-w>) = '1') <q-w>then</q-w>
<a name="2166"><q-n>     2166  </q-n></a>        rounds := (arg(arg'<q-a>low</q-w>) = '1')
<a name="2167"><q-n>     2167  </q-n></a>                  <q-w>or</q-w> (or_reduce (to_sulv(remainder(remainder'<q-a>high</q-w>-1 <q-w>downto</q-w>
<a name="2168"><q-n>     2168  </q-n></a>                                                  remainder'<q-a>low</q-w>))) = '1');
<a name="2169"><q-n>     2169  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="2170"><q-n>     2170  </q-n></a>    <q-w>else</q-w>
<a name="2171"><q-n>     2171  </q-n></a>      rounds := (arg(arg'<q-a>low</q-w>) = '1') <q-w>and</q-w> (remainder (remainder'<q-a>high</q-w>) = '1');
<a name="2172"><q-n>     2172  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2173"><q-n>     2173  </q-n></a>    <q-w>if</q-w> rounds <q-w>then</q-w>
<a name="2174"><q-n>     2174  </q-n></a>      round_up(arg       =&gt; arg,
<a name="2175"><q-n>     2175  </q-n></a>               result    =&gt; result,
<a name="2176"><q-n>     2176  </q-n></a>               overflowx =&gt; round_overflow);
<a name="2177"><q-n>     2177  </q-n></a>    <q-w>else</q-w>
<a name="2178"><q-n>     2178  </q-n></a>      result := arg;
<a name="2179"><q-n>     2179  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2180"><q-n>     2180  </q-n></a>    <q-w>if</q-w> (overflow_style = fixed_saturate) <q-w>and</q-w> round_overflow <q-w>then</q-w>
<a name="2181"><q-n>     2181  </q-n></a>      result := saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="2182"><q-n>     2182  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2183"><q-n>     2183  </q-n></a>    <q-w>return</q-w> result;
<a name="2184"><q-n>     2184  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> round_fixed;
<a name="2185"><q-n>     2185  </q-n></a>
<a name="2186"><q-n>     2186  </q-n></a>  <q-m>-- Rounding case statement</q-m>
<a name="2187"><q-n>     2187  </q-n></a>  <q-w>function</q-w> round_fixed (arg            : UNRESOLVED_sfixed;
<a name="2188"><q-n>     2188  </q-n></a>                        remainder      : UNRESOLVED_sfixed;
<a name="2189"><q-n>     2189  </q-n></a>                        overflow_style : fixed_overflow_style_type := fixed_overflow_style)
<a name="2190"><q-n>     2190  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="2191"><q-n>     2191  </q-n></a>    <q-w>variable</q-w> rounds         : <q-t>BOOLEAN</q-w>;
<a name="2192"><q-n>     2192  </q-n></a>    <q-w>variable</q-w> round_overflow : <q-t>BOOLEAN</q-w>;
<a name="2193"><q-n>     2193  </q-n></a>    <q-w>variable</q-w> result         : UNRESOLVED_sfixed (arg'<q-w>range</q-w>);
<a name="2194"><q-n>     2194  </q-n></a>  <q-w>begin</q-w>
<a name="2195"><q-n>     2195  </q-n></a>    rounds := false;
<a name="2196"><q-n>     2196  </q-n></a>    <q-w>if</q-w> (remainder'<q-a>length</q-w> &gt; 1) <q-w>then</q-w>
<a name="2197"><q-n>     2197  </q-n></a>      <q-w>if</q-w> (remainder (remainder'<q-a>high</q-w>) = '1') <q-w>then</q-w>
<a name="2198"><q-n>     2198  </q-n></a>        rounds := (arg(arg'<q-a>low</q-w>) = '1')
<a name="2199"><q-n>     2199  </q-n></a>                  <q-w>or</q-w> (or_reduce (to_sulv(remainder(remainder'<q-a>high</q-w>-1 <q-w>downto</q-w>
<a name="2200"><q-n>     2200  </q-n></a>                                                  remainder'<q-a>low</q-w>))) = '1');
<a name="2201"><q-n>     2201  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="2202"><q-n>     2202  </q-n></a>    <q-w>else</q-w>
<a name="2203"><q-n>     2203  </q-n></a>      rounds := (arg(arg'<q-a>low</q-w>) = '1') <q-w>and</q-w> (remainder (remainder'<q-a>high</q-w>) = '1');
<a name="2204"><q-n>     2204  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2205"><q-n>     2205  </q-n></a>    <q-w>if</q-w> rounds <q-w>then</q-w>
<a name="2206"><q-n>     2206  </q-n></a>      round_up(arg       =&gt; arg,
<a name="2207"><q-n>     2207  </q-n></a>               result    =&gt; result,
<a name="2208"><q-n>     2208  </q-n></a>               overflowx =&gt; round_overflow);
<a name="2209"><q-n>     2209  </q-n></a>    <q-w>else</q-w>
<a name="2210"><q-n>     2210  </q-n></a>      result := arg;
<a name="2211"><q-n>     2211  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2212"><q-n>     2212  </q-n></a>    <q-w>if</q-w> round_overflow <q-w>then</q-w>
<a name="2213"><q-n>     2213  </q-n></a>      <q-w>if</q-w> (overflow_style = fixed_saturate) <q-w>then</q-w>
<a name="2214"><q-n>     2214  </q-n></a>        <q-w>if</q-w> arg(arg'<q-a>high</q-w>) = '0' <q-w>then</q-w>
<a name="2215"><q-n>     2215  </q-n></a>          result := saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="2216"><q-n>     2216  </q-n></a>        <q-w>else</q-w>
<a name="2217"><q-n>     2217  </q-n></a>          result := <q-w>not</q-w> saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="2218"><q-n>     2218  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="2219"><q-n>     2219  </q-n></a>        <q-m>-- Sign bit not fixed when wrapping</q-m>
<a name="2220"><q-n>     2220  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="2221"><q-n>     2221  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2222"><q-n>     2222  </q-n></a>    <q-w>return</q-w> result;
<a name="2223"><q-n>     2223  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> round_fixed;
<a name="2224"><q-n>     2224  </q-n></a>
<a name="2225"><q-n>     2225  </q-n></a>  <q-m>-- converts an sfixed into a ufixed.  The output is the same length as the</q-m>
<a name="2226"><q-n>     2226  </q-n></a>  <q-m>-- input, because abs("1000") = "1000" = 8.</q-m>
<a name="2227"><q-n>     2227  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="2228"><q-n>     2228  </q-n></a>    arg : UNRESOLVED_sfixed)
<a name="2229"><q-n>     2229  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed
<a name="2230"><q-n>     2230  </q-n></a>  <q-w>is</q-w>
<a name="2231"><q-n>     2231  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w> := arg'<q-a>high</q-w>;
<a name="2232"><q-n>     2232  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w> := mine(arg'<q-a>low</q-w>, arg'<q-a>low</q-w>);
<a name="2233"><q-n>     2233  </q-n></a>    <q-w>variable</q-w> xarg        : UNRESOLVED_sfixed(left_index+1 <q-w>downto</q-w> right_index);
<a name="2234"><q-n>     2234  </q-n></a>    <q-w>variable</q-w> result      : UNRESOLVED_ufixed(left_index <q-w>downto</q-w> right_index);
<a name="2235"><q-n>     2235  </q-n></a>  <q-w>begin</q-w>
<a name="2236"><q-n>     2236  </q-n></a>    <q-w>if</q-w> arg'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="2237"><q-n>     2237  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="2238"><q-n>     2238  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2239"><q-n>     2239  </q-n></a>    xarg   := <q-w>abs</q-w>(arg);
<a name="2240"><q-n>     2240  </q-n></a>    result := UNRESOLVED_ufixed (xarg (left_index <q-w>downto</q-w> right_index));
<a name="2241"><q-n>     2241  </q-n></a>    <q-w>return</q-w> result;
<a name="2242"><q-n>     2242  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ufixed;
<a name="2243"><q-n>     2243  </q-n></a>
<a name="2244"><q-n>     2244  </q-n></a><q-m>-----------------------------------------------------------------------------</q-m>
<a name="2245"><q-n>     2245  </q-n></a><q-m>-- Visible functions</q-m>
<a name="2246"><q-n>     2246  </q-n></a><q-m>-----------------------------------------------------------------------------</q-m>
<a name="2247"><q-n>     2247  </q-n></a>
<a name="2248"><q-n>     2248  </q-n></a>  <q-m>-- Conversion functions.  These are needed for synthesis where typically</q-m>
<a name="2249"><q-n>     2249  </q-n></a>  <q-m>-- the only input and output type is a std_logic_vector.</q-m>
<a name="2250"><q-n>     2250  </q-n></a>  <q-w>function</q-w> to_sulv (
<a name="2251"><q-n>     2251  </q-n></a>    arg : UNRESOLVED_ufixed)            <q-m>-- fixed point vector</q-m>
<a name="2252"><q-n>     2252  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC_VECTOR</q-w> <q-w>is</q-w>
<a name="2253"><q-n>     2253  </q-n></a>    <q-w>variable</q-w> result : <q-t>STD_ULOGIC_VECTOR</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2254"><q-n>     2254  </q-n></a>  <q-w>begin</q-w>
<a name="2255"><q-n>     2255  </q-n></a>    <q-w>if</q-w> arg'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="2256"><q-n>     2256  </q-n></a>      <q-w>return</q-w> NSLV;
<a name="2257"><q-n>     2257  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2258"><q-n>     2258  </q-n></a>    result := <q-t>STD_ULOGIC_VECTOR</q-w> (arg);
<a name="2259"><q-n>     2259  </q-n></a>    <q-w>return</q-w> result;
<a name="2260"><q-n>     2260  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_sulv;
<a name="2261"><q-n>     2261  </q-n></a>
<a name="2262"><q-n>     2262  </q-n></a>  <q-w>function</q-w> to_sulv (
<a name="2263"><q-n>     2263  </q-n></a>    arg : UNRESOLVED_sfixed)            <q-m>-- fixed point vector</q-m>
<a name="2264"><q-n>     2264  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC_VECTOR</q-w> <q-w>is</q-w>
<a name="2265"><q-n>     2265  </q-n></a>    <q-w>variable</q-w> result : <q-t>STD_ULOGIC_VECTOR</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2266"><q-n>     2266  </q-n></a>  <q-w>begin</q-w>
<a name="2267"><q-n>     2267  </q-n></a>    <q-w>if</q-w> arg'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="2268"><q-n>     2268  </q-n></a>      <q-w>return</q-w> NSLV;
<a name="2269"><q-n>     2269  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2270"><q-n>     2270  </q-n></a>    result := <q-t>STD_ULOGIC_VECTOR</q-w> (arg);
<a name="2271"><q-n>     2271  </q-n></a>    <q-w>return</q-w> result;
<a name="2272"><q-n>     2272  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_sulv;
<a name="2273"><q-n>     2273  </q-n></a>
<a name="2274"><q-n>     2274  </q-n></a>  <q-w>function</q-w> to_slv (
<a name="2275"><q-n>     2275  </q-n></a>    arg : UNRESOLVED_ufixed)            <q-m>-- fixed point vector</q-m>
<a name="2276"><q-n>     2276  </q-n></a>    <q-w>return</q-w> <q-t>STD_LOGIC_VECTOR</q-w> <q-w>is</q-w>
<a name="2277"><q-n>     2277  </q-n></a>  <q-w>begin</q-w>
<a name="2278"><q-n>     2278  </q-n></a>    <q-w>return</q-w> to_stdlogicvector(to_sulv(arg));
<a name="2279"><q-n>     2279  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_slv;
<a name="2280"><q-n>     2280  </q-n></a>
<a name="2281"><q-n>     2281  </q-n></a>  <q-w>function</q-w> to_slv (
<a name="2282"><q-n>     2282  </q-n></a>    arg : UNRESOLVED_sfixed)            <q-m>-- fixed point vector</q-m>
<a name="2283"><q-n>     2283  </q-n></a>    <q-w>return</q-w> <q-t>STD_LOGIC_VECTOR</q-w> <q-w>is</q-w>
<a name="2284"><q-n>     2284  </q-n></a>  <q-w>begin</q-w>
<a name="2285"><q-n>     2285  </q-n></a>    <q-w>return</q-w> to_stdlogicvector(to_sulv(arg));
<a name="2286"><q-n>     2286  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_slv;
<a name="2287"><q-n>     2287  </q-n></a>
<a name="2288"><q-n>     2288  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="2289"><q-n>     2289  </q-n></a>    arg                  : <q-t>STD_ULOGIC_VECTOR</q-w>;  <q-m>-- shifted vector</q-m>
<a name="2290"><q-n>     2290  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="2291"><q-n>     2291  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="2292"><q-n>     2292  </q-n></a>    <q-w>return</q-w> unresolved_ufixed <q-w>is</q-w>
<a name="2293"><q-n>     2293  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="2294"><q-n>     2294  </q-n></a>  <q-w>begin</q-w>
<a name="2295"><q-n>     2295  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> right_index &gt; left_index) <q-w>then</q-w>
<a name="2296"><q-n>     2296  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="2297"><q-n>     2297  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2298"><q-n>     2298  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> /= result'<q-a>length</q-w>) <q-w>then</q-w>
<a name="2299"><q-n>     2299  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"TO_UFIXED(SLV) "</q-l>
<a name="2300"><q-n>     2300  </q-n></a>        &amp; <q-l>"Vector lengths do not match.  Input length is "</q-l>
<a name="2301"><q-n>     2301  </q-n></a>        &amp; <q-t>INTEGER</q-w>'<q-a>image</q-w>(arg'<q-a>length</q-w>) &amp; <q-l>" and output will be "</q-l>
<a name="2302"><q-n>     2302  </q-n></a>        &amp; <q-t>INTEGER</q-w>'<q-a>image</q-w>(result'<q-a>length</q-w>) &amp; <q-l>" wide."</q-l>
<a name="2303"><q-n>     2303  </q-n></a>        <q-w>severity</q-w> error;
<a name="2304"><q-n>     2304  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="2305"><q-n>     2305  </q-n></a>    <q-w>else</q-w>
<a name="2306"><q-n>     2306  </q-n></a>      result := to_fixed (arg         =&gt; <q-t>UNSIGNED</q-w>(arg),
<a name="2307"><q-n>     2307  </q-n></a>                          left_index  =&gt; left_index,
<a name="2308"><q-n>     2308  </q-n></a>                          right_index =&gt; right_index);
<a name="2309"><q-n>     2309  </q-n></a>      <q-w>return</q-w> result;
<a name="2310"><q-n>     2310  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2311"><q-n>     2311  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ufixed;
<a name="2312"><q-n>     2312  </q-n></a>
<a name="2313"><q-n>     2313  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="2314"><q-n>     2314  </q-n></a>    arg                  : <q-t>STD_ULOGIC_VECTOR</q-w>;  <q-m>-- shifted vector</q-m>
<a name="2315"><q-n>     2315  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="2316"><q-n>     2316  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="2317"><q-n>     2317  </q-n></a>    <q-w>return</q-w> unresolved_sfixed <q-w>is</q-w>
<a name="2318"><q-n>     2318  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="2319"><q-n>     2319  </q-n></a>  <q-w>begin</q-w>
<a name="2320"><q-n>     2320  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> right_index &gt; left_index) <q-w>then</q-w>
<a name="2321"><q-n>     2321  </q-n></a>      <q-w>return</q-w> NASF;
<a name="2322"><q-n>     2322  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2323"><q-n>     2323  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> /= result'<q-a>length</q-w>) <q-w>then</q-w>
<a name="2324"><q-n>     2324  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"TO_SFIXED(SLV) "</q-l>
<a name="2325"><q-n>     2325  </q-n></a>        &amp; <q-l>"Vector lengths do not match.  Input length is "</q-l>
<a name="2326"><q-n>     2326  </q-n></a>        &amp; <q-t>INTEGER</q-w>'<q-a>image</q-w>(arg'<q-a>length</q-w>) &amp; <q-l>" and output will be "</q-l>
<a name="2327"><q-n>     2327  </q-n></a>        &amp; <q-t>INTEGER</q-w>'<q-a>image</q-w>(result'<q-a>length</q-w>) &amp; <q-l>" wide."</q-l>
<a name="2328"><q-n>     2328  </q-n></a>        <q-w>severity</q-w> error;
<a name="2329"><q-n>     2329  </q-n></a>      <q-w>return</q-w> NASF;
<a name="2330"><q-n>     2330  </q-n></a>    <q-w>else</q-w>
<a name="2331"><q-n>     2331  </q-n></a>      result := to_fixed (arg         =&gt; <q-t>SIGNED</q-w>(arg),
<a name="2332"><q-n>     2332  </q-n></a>                          left_index  =&gt; left_index,
<a name="2333"><q-n>     2333  </q-n></a>                          right_index =&gt; right_index);
<a name="2334"><q-n>     2334  </q-n></a>      <q-w>return</q-w> result;
<a name="2335"><q-n>     2335  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2336"><q-n>     2336  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_sfixed;
<a name="2337"><q-n>     2337  </q-n></a>
<a name="2338"><q-n>     2338  </q-n></a>  <q-m>-- Two's complement number, Grows the vector by 1 bit.</q-m>
<a name="2339"><q-n>     2339  </q-n></a>  <q-m>-- because "abs (1000.000) = 01000.000" or abs(-16) = 16.</q-m>
<a name="2340"><q-n>     2340  </q-n></a>  <q-w>function</q-w> <q-l>"abs"</q-l> (
<a name="2341"><q-n>     2341  </q-n></a>    arg : UNRESOLVED_sfixed)            <q-m>-- fixed point input</q-m>
<a name="2342"><q-n>     2342  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="2343"><q-n>     2343  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w> := arg'<q-a>high</q-w>;
<a name="2344"><q-n>     2344  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w> := mine(arg'<q-a>low</q-w>, arg'<q-a>low</q-w>);
<a name="2345"><q-n>     2345  </q-n></a>    <q-w>variable</q-w> ressns      : <q-t>SIGNED</q-w> (arg'<q-a>length</q-w> <q-w>downto</q-w> 0);
<a name="2346"><q-n>     2346  </q-n></a>    <q-w>variable</q-w> result      : UNRESOLVED_sfixed (left_index+1 <q-w>downto</q-w> right_index);
<a name="2347"><q-n>     2347  </q-n></a>  <q-w>begin</q-w>
<a name="2348"><q-n>     2348  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> result'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="2349"><q-n>     2349  </q-n></a>      <q-w>return</q-w> NASF;
<a name="2350"><q-n>     2350  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2351"><q-n>     2351  </q-n></a>    ressns (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0) := to_s (cleanvec (arg));
<a name="2352"><q-n>     2352  </q-n></a>    ressns (arg'<q-a>length</q-w>)            := ressns (arg'<q-a>length</q-w>-1);  <q-m>-- expand sign bit</q-m>
<a name="2353"><q-n>     2353  </q-n></a>    result                         := to_fixed (<q-w>abs</q-w>(ressns), left_index+1, right_index);
<a name="2354"><q-n>     2354  </q-n></a>    <q-w>return</q-w> result;
<a name="2355"><q-n>     2355  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"abs"</q-l>;
<a name="2356"><q-n>     2356  </q-n></a>
<a name="2357"><q-n>     2357  </q-n></a>  <q-m>-- also grows the vector by 1 bit.</q-m>
<a name="2358"><q-n>     2358  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (
<a name="2359"><q-n>     2359  </q-n></a>    arg : UNRESOLVED_sfixed)            <q-m>-- fixed point input</q-m>
<a name="2360"><q-n>     2360  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="2361"><q-n>     2361  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w> := arg'<q-a>high</q-w>+1;
<a name="2362"><q-n>     2362  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w> := mine(arg'<q-a>low</q-w>, arg'<q-a>low</q-w>);
<a name="2363"><q-n>     2363  </q-n></a>    <q-w>variable</q-w> ressns      : <q-t>SIGNED</q-w> (arg'<q-a>length</q-w> <q-w>downto</q-w> 0);
<a name="2364"><q-n>     2364  </q-n></a>    <q-w>variable</q-w> result      : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="2365"><q-n>     2365  </q-n></a>  <q-w>begin</q-w>
<a name="2366"><q-n>     2366  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> result'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="2367"><q-n>     2367  </q-n></a>      <q-w>return</q-w> NASF;
<a name="2368"><q-n>     2368  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2369"><q-n>     2369  </q-n></a>    ressns (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0) := to_s (cleanvec(arg));
<a name="2370"><q-n>     2370  </q-n></a>    ressns (arg'<q-a>length</q-w>)            := ressns (arg'<q-a>length</q-w>-1);  <q-m>-- expand sign bit</q-m>
<a name="2371"><q-n>     2371  </q-n></a>    result                         := to_fixed (-ressns, left_index, right_index);
<a name="2372"><q-n>     2372  </q-n></a>    <q-w>return</q-w> result;
<a name="2373"><q-n>     2373  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"-"</q-l>;
<a name="2374"><q-n>     2374  </q-n></a>
<a name="2375"><q-n>     2375  </q-n></a>  <q-m>-- Addition</q-m>
<a name="2376"><q-n>     2376  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (
<a name="2377"><q-n>     2377  </q-n></a>    l, r : UNRESOLVED_ufixed)    <q-m>-- ufixed(a downto b) + ufixed(c downto d) =</q-m>
<a name="2378"><q-n>     2378  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>         <q-m>-- ufixed(max(a,c)+1 downto min(b,d))</q-m>
<a name="2379"><q-n>     2379  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>)+1;
<a name="2380"><q-n>     2380  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mine(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="2381"><q-n>     2381  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="2382"><q-n>     2382  </q-n></a>    <q-w>variable</q-w> result           : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="2383"><q-n>     2383  </q-n></a>    <q-w>variable</q-w> lslv, rslv : <q-t>UNSIGNED</q-w> (left_index-right_index
<a name="2384"><q-n>     2384  </q-n></a>                                    <q-w>downto</q-w> 0);
<a name="2385"><q-n>     2385  </q-n></a>    <q-w>variable</q-w> result_slv : <q-t>UNSIGNED</q-w> (left_index-right_index
<a name="2386"><q-n>     2386  </q-n></a>                                    <q-w>downto</q-w> 0);
<a name="2387"><q-n>     2387  </q-n></a>  <q-w>begin</q-w>
<a name="2388"><q-n>     2388  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> result'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="2389"><q-n>     2389  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="2390"><q-n>     2390  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2391"><q-n>     2391  </q-n></a>    lresize    := resize (l, left_index, right_index);
<a name="2392"><q-n>     2392  </q-n></a>    rresize    := resize (r, left_index, right_index);
<a name="2393"><q-n>     2393  </q-n></a>    lslv       := to_uns (lresize);
<a name="2394"><q-n>     2394  </q-n></a>    rslv       := to_uns (rresize);
<a name="2395"><q-n>     2395  </q-n></a>    result_slv := lslv + rslv;
<a name="2396"><q-n>     2396  </q-n></a>    result     := to_fixed(result_slv, left_index, right_index);
<a name="2397"><q-n>     2397  </q-n></a>    <q-w>return</q-w> result;
<a name="2398"><q-n>     2398  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"+"</q-l>;
<a name="2399"><q-n>     2399  </q-n></a>
<a name="2400"><q-n>     2400  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (
<a name="2401"><q-n>     2401  </q-n></a>    l, r : UNRESOLVED_sfixed)    <q-m>-- sfixed(a downto b) + sfixed(c downto d) = </q-m>
<a name="2402"><q-n>     2402  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>         <q-m>-- sfixed(max(a,c)+1 downto min(b,d))</q-m>
<a name="2403"><q-n>     2403  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>)+1;
<a name="2404"><q-n>     2404  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mine(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="2405"><q-n>     2405  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="2406"><q-n>     2406  </q-n></a>    <q-w>variable</q-w> result           : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="2407"><q-n>     2407  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>SIGNED</q-w> (left_index-right_index <q-w>downto</q-w> 0);
<a name="2408"><q-n>     2408  </q-n></a>    <q-w>variable</q-w> result_slv       : <q-t>SIGNED</q-w> (left_index-right_index <q-w>downto</q-w> 0);
<a name="2409"><q-n>     2409  </q-n></a>  <q-w>begin</q-w>
<a name="2410"><q-n>     2410  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> result'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="2411"><q-n>     2411  </q-n></a>      <q-w>return</q-w> NASF;
<a name="2412"><q-n>     2412  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2413"><q-n>     2413  </q-n></a>    lresize    := resize (l, left_index, right_index);
<a name="2414"><q-n>     2414  </q-n></a>    rresize    := resize (r, left_index, right_index);
<a name="2415"><q-n>     2415  </q-n></a>    lslv       := to_s (lresize);
<a name="2416"><q-n>     2416  </q-n></a>    rslv       := to_s (rresize);
<a name="2417"><q-n>     2417  </q-n></a>    result_slv := lslv + rslv;
<a name="2418"><q-n>     2418  </q-n></a>    result     := to_fixed(result_slv, left_index, right_index);
<a name="2419"><q-n>     2419  </q-n></a>    <q-w>return</q-w> result;
<a name="2420"><q-n>     2420  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"+"</q-l>;
<a name="2421"><q-n>     2421  </q-n></a>
<a name="2422"><q-n>     2422  </q-n></a>  <q-m>-- Subtraction</q-m>
<a name="2423"><q-n>     2423  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (
<a name="2424"><q-n>     2424  </q-n></a>    l, r : UNRESOLVED_ufixed)    <q-m>-- ufixed(a downto b) - ufixed(c downto d) =</q-m>
<a name="2425"><q-n>     2425  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>         <q-m>-- ufixed(max(a,c)+1 downto min(b,d))</q-m>
<a name="2426"><q-n>     2426  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>)+1;
<a name="2427"><q-n>     2427  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mine(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="2428"><q-n>     2428  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="2429"><q-n>     2429  </q-n></a>    <q-w>variable</q-w> result           : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="2430"><q-n>     2430  </q-n></a>    <q-w>variable</q-w> lslv, rslv : <q-t>UNSIGNED</q-w> (left_index-right_index
<a name="2431"><q-n>     2431  </q-n></a>                                    <q-w>downto</q-w> 0);
<a name="2432"><q-n>     2432  </q-n></a>    <q-w>variable</q-w> result_slv : <q-t>UNSIGNED</q-w> (left_index-right_index
<a name="2433"><q-n>     2433  </q-n></a>                                    <q-w>downto</q-w> 0);
<a name="2434"><q-n>     2434  </q-n></a>  <q-w>begin</q-w>
<a name="2435"><q-n>     2435  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> result'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="2436"><q-n>     2436  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="2437"><q-n>     2437  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2438"><q-n>     2438  </q-n></a>    lresize    := resize (l, left_index, right_index);
<a name="2439"><q-n>     2439  </q-n></a>    rresize    := resize (r, left_index, right_index);
<a name="2440"><q-n>     2440  </q-n></a>    lslv       := to_uns (lresize);
<a name="2441"><q-n>     2441  </q-n></a>    rslv       := to_uns (rresize);
<a name="2442"><q-n>     2442  </q-n></a>    result_slv := lslv - rslv;
<a name="2443"><q-n>     2443  </q-n></a>    result     := to_fixed(result_slv, left_index, right_index);
<a name="2444"><q-n>     2444  </q-n></a>    <q-w>return</q-w> result;
<a name="2445"><q-n>     2445  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"-"</q-l>;
<a name="2446"><q-n>     2446  </q-n></a>
<a name="2447"><q-n>     2447  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (
<a name="2448"><q-n>     2448  </q-n></a>    l, r : UNRESOLVED_sfixed)    <q-m>-- sfixed(a downto b) - sfixed(c downto d) = </q-m>
<a name="2449"><q-n>     2449  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>         <q-m>-- sfixed(max(a,c)+1 downto min(b,d))</q-m>
<a name="2450"><q-n>     2450  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>)+1;
<a name="2451"><q-n>     2451  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mine(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="2452"><q-n>     2452  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="2453"><q-n>     2453  </q-n></a>    <q-w>variable</q-w> result           : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="2454"><q-n>     2454  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>SIGNED</q-w> (left_index-right_index <q-w>downto</q-w> 0);
<a name="2455"><q-n>     2455  </q-n></a>    <q-w>variable</q-w> result_slv       : <q-t>SIGNED</q-w> (left_index-right_index <q-w>downto</q-w> 0);
<a name="2456"><q-n>     2456  </q-n></a>  <q-w>begin</q-w>
<a name="2457"><q-n>     2457  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> result'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="2458"><q-n>     2458  </q-n></a>      <q-w>return</q-w> NASF;
<a name="2459"><q-n>     2459  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2460"><q-n>     2460  </q-n></a>    lresize    := resize (l, left_index, right_index);
<a name="2461"><q-n>     2461  </q-n></a>    rresize    := resize (r, left_index, right_index);
<a name="2462"><q-n>     2462  </q-n></a>    lslv       := to_s (lresize);
<a name="2463"><q-n>     2463  </q-n></a>    rslv       := to_s (rresize);
<a name="2464"><q-n>     2464  </q-n></a>    result_slv := lslv - rslv;
<a name="2465"><q-n>     2465  </q-n></a>    result     := to_fixed(result_slv, left_index, right_index);
<a name="2466"><q-n>     2466  </q-n></a>    <q-w>return</q-w> result;
<a name="2467"><q-n>     2467  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"-"</q-l>;
<a name="2468"><q-n>     2468  </q-n></a>
<a name="2469"><q-n>     2469  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (
<a name="2470"><q-n>     2470  </q-n></a>    l, r : UNRESOLVED_ufixed)    <q-m>-- ufixed(a downto b) * ufixed(c downto d) =</q-m>
<a name="2471"><q-n>     2471  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>         <q-m>-- ufixed(a+c+1 downto b+d)</q-m>
<a name="2472"><q-n>     2472  </q-n></a>    <q-w>variable</q-w> lslv       : <q-t>UNSIGNED</q-w> (l'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2473"><q-n>     2473  </q-n></a>    <q-w>variable</q-w> rslv       : <q-t>UNSIGNED</q-w> (r'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2474"><q-n>     2474  </q-n></a>    <q-w>variable</q-w> result_slv : <q-t>UNSIGNED</q-w> (r'<q-a>length</q-w>+l'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2475"><q-n>     2475  </q-n></a>    <q-w>variable</q-w> result     : UNRESOLVED_ufixed (l'<q-a>high</q-w> + r'<q-a>high</q-w>+1 <q-w>downto</q-w>
<a name="2476"><q-n>     2476  </q-n></a>                                             mine(l'<q-a>low</q-w>, l'<q-a>low</q-w>) + mine(r'<q-a>low</q-w>, r'<q-a>low</q-w>));
<a name="2477"><q-n>     2477  </q-n></a>  <q-w>begin</q-w>
<a name="2478"><q-n>     2478  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1 <q-w>or</q-w>
<a name="2479"><q-n>     2479  </q-n></a>        result'<q-a>length</q-w> /= result_slv'<q-a>length</q-w>) <q-w>then</q-w>
<a name="2480"><q-n>     2480  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="2481"><q-n>     2481  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2482"><q-n>     2482  </q-n></a>    lslv       := to_uns (cleanvec(l));
<a name="2483"><q-n>     2483  </q-n></a>    rslv       := to_uns (cleanvec(r));
<a name="2484"><q-n>     2484  </q-n></a>    result_slv := lslv * rslv;
<a name="2485"><q-n>     2485  </q-n></a>    result     := to_fixed (result_slv, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="2486"><q-n>     2486  </q-n></a>    <q-w>return</q-w> result;
<a name="2487"><q-n>     2487  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"*"</q-l>;
<a name="2488"><q-n>     2488  </q-n></a>
<a name="2489"><q-n>     2489  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (
<a name="2490"><q-n>     2490  </q-n></a>    l, r : UNRESOLVED_sfixed)    <q-m>-- sfixed(a downto b) * sfixed(c downto d) = </q-m>
<a name="2491"><q-n>     2491  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>         <q-m>--  sfixed(a+c+1 downto b+d)</q-m>
<a name="2492"><q-n>     2492  </q-n></a>    <q-w>variable</q-w> lslv       : <q-t>SIGNED</q-w> (l'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2493"><q-n>     2493  </q-n></a>    <q-w>variable</q-w> rslv       : <q-t>SIGNED</q-w> (r'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2494"><q-n>     2494  </q-n></a>    <q-w>variable</q-w> result_slv : <q-t>SIGNED</q-w> (r'<q-a>length</q-w>+l'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2495"><q-n>     2495  </q-n></a>    <q-w>variable</q-w> result     : UNRESOLVED_sfixed (l'<q-a>high</q-w> + r'<q-a>high</q-w>+1 <q-w>downto</q-w>
<a name="2496"><q-n>     2496  </q-n></a>                                             mine(l'<q-a>low</q-w>, l'<q-a>low</q-w>) + mine(r'<q-a>low</q-w>, r'<q-a>low</q-w>));
<a name="2497"><q-n>     2497  </q-n></a>  <q-w>begin</q-w>
<a name="2498"><q-n>     2498  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1 <q-w>or</q-w>
<a name="2499"><q-n>     2499  </q-n></a>        result'<q-a>length</q-w> /= result_slv'<q-a>length</q-w>) <q-w>then</q-w>
<a name="2500"><q-n>     2500  </q-n></a>      <q-w>return</q-w> NASF;
<a name="2501"><q-n>     2501  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2502"><q-n>     2502  </q-n></a>    lslv       := to_s (cleanvec(l));
<a name="2503"><q-n>     2503  </q-n></a>    rslv       := to_s (cleanvec(r));
<a name="2504"><q-n>     2504  </q-n></a>    result_slv := lslv * rslv;
<a name="2505"><q-n>     2505  </q-n></a>    result     := to_fixed (result_slv, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="2506"><q-n>     2506  </q-n></a>    <q-w>return</q-w> result;
<a name="2507"><q-n>     2507  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"*"</q-l>;
<a name="2508"><q-n>     2508  </q-n></a>
<a name="2509"><q-n>     2509  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (
<a name="2510"><q-n>     2510  </q-n></a>    l, r : UNRESOLVED_ufixed)    <q-m>-- ufixed(a downto b) / ufixed(c downto d) = </q-m>
<a name="2511"><q-n>     2511  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>         <q-m>--  ufixed(a-d downto b-c-1)</q-m>
<a name="2512"><q-n>     2512  </q-n></a>  <q-w>begin</q-w>
<a name="2513"><q-n>     2513  </q-n></a>    <q-w>return</q-w> divide (l, r);
<a name="2514"><q-n>     2514  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/"</q-l>;
<a name="2515"><q-n>     2515  </q-n></a>
<a name="2516"><q-n>     2516  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (
<a name="2517"><q-n>     2517  </q-n></a>    l, r : UNRESOLVED_sfixed)    <q-m>-- sfixed(a downto b) / sfixed(c downto d) = </q-m>
<a name="2518"><q-n>     2518  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>         <q-m>-- sfixed(a-d+1 downto b-c)</q-m>
<a name="2519"><q-n>     2519  </q-n></a>  <q-w>begin</q-w>
<a name="2520"><q-n>     2520  </q-n></a>    <q-w>return</q-w> divide (l, r);
<a name="2521"><q-n>     2521  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/"</q-l>;
<a name="2522"><q-n>     2522  </q-n></a>
<a name="2523"><q-n>     2523  </q-n></a>  <q-m>-- This version of divide gives the user more control</q-m>
<a name="2524"><q-n>     2524  </q-n></a>  <q-m>-- ufixed(a downto b) / ufixed(c downto d) = ufixed(a-d downto b-c-1)</q-m>
<a name="2525"><q-n>     2525  </q-n></a>  <q-w>function</q-w> divide (
<a name="2526"><q-n>     2526  </q-n></a>    l, r                 : UNRESOLVED_ufixed;
<a name="2527"><q-n>     2527  </q-n></a>    <q-w>constant</q-w> round_style : fixed_round_style_type := fixed_round_style;
<a name="2528"><q-n>     2528  </q-n></a>    <q-w>constant</q-w> guard_bits  : <q-t>NATURAL</q-w>                := fixed_guard_bits)
<a name="2529"><q-n>     2529  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="2530"><q-n>     2530  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (l'<q-a>high</q-w> - mine(r'<q-a>low</q-w>, r'<q-a>low</q-w>) <q-w>downto</q-w>
<a name="2531"><q-n>     2531  </q-n></a>                                         mine (l'<q-a>low</q-w>, l'<q-a>low</q-w>) - r'<q-a>high</q-w> -1);
<a name="2532"><q-n>     2532  </q-n></a>    <q-w>variable</q-w> dresult    : UNRESOLVED_ufixed (result'<q-a>high</q-w> <q-w>downto</q-w> result'<q-a>low</q-w> -guard_bits);
<a name="2533"><q-n>     2533  </q-n></a>    <q-w>variable</q-w> lresize    : UNRESOLVED_ufixed (l'<q-a>high</q-w> <q-w>downto</q-w> l'<q-a>high</q-w> - dresult'<q-a>length</q-w>+1);
<a name="2534"><q-n>     2534  </q-n></a>    <q-w>variable</q-w> lslv       : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2535"><q-n>     2535  </q-n></a>    <q-w>variable</q-w> rslv       : <q-t>UNSIGNED</q-w> (r'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2536"><q-n>     2536  </q-n></a>    <q-w>variable</q-w> result_slv : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2537"><q-n>     2537  </q-n></a>  <q-w>begin</q-w>
<a name="2538"><q-n>     2538  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1 <q-w>or</q-w>
<a name="2539"><q-n>     2539  </q-n></a>        mins(r'<q-a>low</q-w>, r'<q-a>low</q-w>) /= r'<q-a>low</q-w> <q-w>or</q-w> mins(l'<q-a>low</q-w>, l'<q-a>low</q-w>) /= l'<q-a>low</q-w>) <q-w>then</q-w>
<a name="2540"><q-n>     2540  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="2541"><q-n>     2541  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2542"><q-n>     2542  </q-n></a>    lresize := resize (arg            =&gt; l,
<a name="2543"><q-n>     2543  </q-n></a>                       left_index     =&gt; lresize'<q-a>high</q-w>,
<a name="2544"><q-n>     2544  </q-n></a>                       right_index    =&gt; lresize'<q-a>low</q-w>,
<a name="2545"><q-n>     2545  </q-n></a>                       overflow_style =&gt; fixed_wrap,   <q-m>-- vector only grows</q-m>
<a name="2546"><q-n>     2546  </q-n></a>                       round_style    =&gt; fixed_truncate);
<a name="2547"><q-n>     2547  </q-n></a>    lslv := to_uns (cleanvec (lresize));
<a name="2548"><q-n>     2548  </q-n></a>    rslv := to_uns (cleanvec (r));
<a name="2549"><q-n>     2549  </q-n></a>    <q-w>if</q-w> (rslv = 0) <q-w>then</q-w>
<a name="2550"><q-n>     2550  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="2551"><q-n>     2551  </q-n></a>        &amp; <q-l>"DIVIDE(ufixed) Division by zero"</q-l> <q-w>severity</q-w> error;
<a name="2552"><q-n>     2552  </q-n></a>      result := saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);    <q-m>-- saturate</q-m>
<a name="2553"><q-n>     2553  </q-n></a>    <q-w>else</q-w>
<a name="2554"><q-n>     2554  </q-n></a>      result_slv := lslv / rslv;
<a name="2555"><q-n>     2555  </q-n></a>      dresult    := to_fixed (result_slv, dresult'<q-a>high</q-w>, dresult'<q-a>low</q-w>);
<a name="2556"><q-n>     2556  </q-n></a>      result := resize (arg            =&gt; dresult,
<a name="2557"><q-n>     2557  </q-n></a>                        left_index     =&gt; result'<q-a>high</q-w>,
<a name="2558"><q-n>     2558  </q-n></a>                        right_index    =&gt; result'<q-a>low</q-w>,
<a name="2559"><q-n>     2559  </q-n></a>                        overflow_style =&gt; fixed_wrap,  <q-m>-- overflow impossible</q-m>
<a name="2560"><q-n>     2560  </q-n></a>                        round_style    =&gt; round_style);
<a name="2561"><q-n>     2561  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2562"><q-n>     2562  </q-n></a>    <q-w>return</q-w> result;
<a name="2563"><q-n>     2563  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> divide;
<a name="2564"><q-n>     2564  </q-n></a>
<a name="2565"><q-n>     2565  </q-n></a>  <q-m>-- sfixed(a downto b) / sfixed(c downto d) = sfixed(a-d+1 downto b-c)</q-m>
<a name="2566"><q-n>     2566  </q-n></a>  <q-w>function</q-w> divide (
<a name="2567"><q-n>     2567  </q-n></a>    l, r                 : UNRESOLVED_sfixed;
<a name="2568"><q-n>     2568  </q-n></a>    <q-w>constant</q-w> round_style : fixed_round_style_type := fixed_round_style;
<a name="2569"><q-n>     2569  </q-n></a>    <q-w>constant</q-w> guard_bits  : <q-t>NATURAL</q-w>                := fixed_guard_bits)
<a name="2570"><q-n>     2570  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="2571"><q-n>     2571  </q-n></a>    <q-w>variable</q-w> result     : UNRESOLVED_sfixed (l'<q-a>high</q-w> - mine(r'<q-a>low</q-w>, r'<q-a>low</q-w>) + 1 <q-w>downto</q-w> 
<a name="2572"><q-n>     2572  </q-n></a>                                             mine (l'<q-a>low</q-w>, l'<q-a>low</q-w>) - r'<q-a>high</q-w>);
<a name="2573"><q-n>     2573  </q-n></a>    <q-w>variable</q-w> dresult    : UNRESOLVED_sfixed (result'<q-a>high</q-w> <q-w>downto</q-w> result'<q-a>low</q-w>-guard_bits);
<a name="2574"><q-n>     2574  </q-n></a>    <q-w>variable</q-w> lresize    : UNRESOLVED_sfixed (l'<q-a>high</q-w>+1 <q-w>downto</q-w> l'<q-a>high</q-w>+1 -dresult'<q-a>length</q-w>+1);
<a name="2575"><q-n>     2575  </q-n></a>    <q-w>variable</q-w> lslv       : <q-t>SIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2576"><q-n>     2576  </q-n></a>    <q-w>variable</q-w> rslv       : <q-t>SIGNED</q-w> (r'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2577"><q-n>     2577  </q-n></a>    <q-w>variable</q-w> result_slv : <q-t>SIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2578"><q-n>     2578  </q-n></a>  <q-w>begin</q-w>
<a name="2579"><q-n>     2579  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1 <q-w>or</q-w>
<a name="2580"><q-n>     2580  </q-n></a>        mins(r'<q-a>low</q-w>, r'<q-a>low</q-w>) /= r'<q-a>low</q-w> <q-w>or</q-w> mins(l'<q-a>low</q-w>, l'<q-a>low</q-w>) /= l'<q-a>low</q-w>) <q-w>then</q-w>
<a name="2581"><q-n>     2581  </q-n></a>      <q-w>return</q-w> NASF;
<a name="2582"><q-n>     2582  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2583"><q-n>     2583  </q-n></a>    lresize := resize (arg            =&gt; l,
<a name="2584"><q-n>     2584  </q-n></a>                       left_index     =&gt; lresize'<q-a>high</q-w>,
<a name="2585"><q-n>     2585  </q-n></a>                       right_index    =&gt; lresize'<q-a>low</q-w>,
<a name="2586"><q-n>     2586  </q-n></a>                       overflow_style =&gt; fixed_wrap,   <q-m>-- vector only grows</q-m>
<a name="2587"><q-n>     2587  </q-n></a>                       round_style    =&gt; fixed_truncate);
<a name="2588"><q-n>     2588  </q-n></a>    lslv := to_s (cleanvec (lresize));
<a name="2589"><q-n>     2589  </q-n></a>    rslv := to_s (cleanvec (r));
<a name="2590"><q-n>     2590  </q-n></a>    <q-w>if</q-w> (rslv = 0) <q-w>then</q-w>
<a name="2591"><q-n>     2591  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="2592"><q-n>     2592  </q-n></a>        &amp; <q-l>"DIVIDE(sfixed) Division by zero"</q-l> <q-w>severity</q-w> error;
<a name="2593"><q-n>     2593  </q-n></a>      result := saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="2594"><q-n>     2594  </q-n></a>    <q-w>else</q-w>
<a name="2595"><q-n>     2595  </q-n></a>      result_slv := lslv / rslv;
<a name="2596"><q-n>     2596  </q-n></a>      dresult    := to_fixed (result_slv, dresult'<q-a>high</q-w>, dresult'<q-a>low</q-w>);
<a name="2597"><q-n>     2597  </q-n></a>      result := resize (arg            =&gt; dresult,
<a name="2598"><q-n>     2598  </q-n></a>                        left_index     =&gt; result'<q-a>high</q-w>,
<a name="2599"><q-n>     2599  </q-n></a>                        right_index    =&gt; result'<q-a>low</q-w>,
<a name="2600"><q-n>     2600  </q-n></a>                        overflow_style =&gt; fixed_wrap,  <q-m>-- overflow impossible</q-m>
<a name="2601"><q-n>     2601  </q-n></a>                        round_style    =&gt; round_style);
<a name="2602"><q-n>     2602  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2603"><q-n>     2603  </q-n></a>    <q-w>return</q-w> result;
<a name="2604"><q-n>     2604  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> divide;
<a name="2605"><q-n>     2605  </q-n></a>
<a name="2606"><q-n>     2606  </q-n></a>  <q-m>-- 1 / ufixed(a downto b) = ufixed(-b downto -a-1)</q-m>
<a name="2607"><q-n>     2607  </q-n></a>  <q-w>function</q-w> reciprocal (
<a name="2608"><q-n>     2608  </q-n></a>    arg                  : UNRESOLVED_ufixed;  <q-m>-- fixed point input</q-m>
<a name="2609"><q-n>     2609  </q-n></a>    <q-w>constant</q-w> round_style : fixed_round_style_type := fixed_round_style;
<a name="2610"><q-n>     2610  </q-n></a>    <q-w>constant</q-w> guard_bits  : <q-t>NATURAL</q-w>                := fixed_guard_bits)
<a name="2611"><q-n>     2611  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="2612"><q-n>     2612  </q-n></a>    <q-w>constant</q-w> one : UNRESOLVED_ufixed (0 <q-w>downto</q-w> 0) := <q-l>"1"</q-l>;
<a name="2613"><q-n>     2613  </q-n></a>  <q-w>begin</q-w>
<a name="2614"><q-n>     2614  </q-n></a>    <q-w>return</q-w> divide (l           =&gt; one,
<a name="2615"><q-n>     2615  </q-n></a>                   r           =&gt; arg,
<a name="2616"><q-n>     2616  </q-n></a>                   round_style =&gt; round_style,
<a name="2617"><q-n>     2617  </q-n></a>                   guard_bits  =&gt; guard_bits);
<a name="2618"><q-n>     2618  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> reciprocal;
<a name="2619"><q-n>     2619  </q-n></a>
<a name="2620"><q-n>     2620  </q-n></a>  <q-m>-- 1 / sfixed(a downto b) = sfixed(-b+1 downto -a)</q-m>
<a name="2621"><q-n>     2621  </q-n></a>  <q-w>function</q-w> reciprocal (
<a name="2622"><q-n>     2622  </q-n></a>    arg                  : UNRESOLVED_sfixed;              <q-m>-- fixed point input</q-m>
<a name="2623"><q-n>     2623  </q-n></a>    <q-w>constant</q-w> round_style : fixed_round_style_type := fixed_round_style;
<a name="2624"><q-n>     2624  </q-n></a>    <q-w>constant</q-w> guard_bits  : <q-t>NATURAL</q-w>                := fixed_guard_bits)
<a name="2625"><q-n>     2625  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="2626"><q-n>     2626  </q-n></a>    <q-w>constant</q-w> one     : UNRESOLVED_sfixed (1 <q-w>downto</q-w> 0) := <q-l>"01"</q-l>;  <q-m>-- extra bit.</q-m>
<a name="2627"><q-n>     2627  </q-n></a>    <q-w>variable</q-w> resultx : UNRESOLVED_sfixed (-mine(arg'<q-a>low</q-w>, arg'<q-a>low</q-w>)+2 <q-w>downto</q-w> -arg'<q-a>high</q-w>);
<a name="2628"><q-n>     2628  </q-n></a>  <q-w>begin</q-w>
<a name="2629"><q-n>     2629  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> resultx'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="2630"><q-n>     2630  </q-n></a>      <q-w>return</q-w> NASF;
<a name="2631"><q-n>     2631  </q-n></a>    <q-w>else</q-w>
<a name="2632"><q-n>     2632  </q-n></a>      resultx := divide (l           =&gt; one,
<a name="2633"><q-n>     2633  </q-n></a>                         r           =&gt; arg,
<a name="2634"><q-n>     2634  </q-n></a>                         round_style =&gt; round_style,
<a name="2635"><q-n>     2635  </q-n></a>                         guard_bits  =&gt; guard_bits);
<a name="2636"><q-n>     2636  </q-n></a>      <q-w>return</q-w> resultx (resultx'<q-a>high</q-w>-1 <q-w>downto</q-w> resultx'<q-a>low</q-w>);  <q-m>-- remove extra bit</q-m>
<a name="2637"><q-n>     2637  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2638"><q-n>     2638  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> reciprocal;
<a name="2639"><q-n>     2639  </q-n></a>
<a name="2640"><q-n>     2640  </q-n></a>  <q-m>-- ufixed (a downto b) rem ufixed (c downto d)</q-m>
<a name="2641"><q-n>     2641  </q-n></a>  <q-m>--        = ufixed (min(a,c) downto min(b,d))</q-m>
<a name="2642"><q-n>     2642  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (
<a name="2643"><q-n>     2643  </q-n></a>    l, r : UNRESOLVED_ufixed)           <q-m>-- fixed point input</q-m>
<a name="2644"><q-n>     2644  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="2645"><q-n>     2645  </q-n></a>  <q-w>begin</q-w>
<a name="2646"><q-n>     2646  </q-n></a>    <q-w>return</q-w> remainder (l, r);
<a name="2647"><q-n>     2647  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"rem"</q-l>;
<a name="2648"><q-n>     2648  </q-n></a>
<a name="2649"><q-n>     2649  </q-n></a>  <q-m>-- remainder</q-m>
<a name="2650"><q-n>     2650  </q-n></a>  <q-m>-- sfixed (a downto b) rem sfixed (c downto d)</q-m>
<a name="2651"><q-n>     2651  </q-n></a>  <q-m>--        = sfixed (min(a,c) downto min(b,d))</q-m>
<a name="2652"><q-n>     2652  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (
<a name="2653"><q-n>     2653  </q-n></a>    l, r : UNRESOLVED_sfixed)           <q-m>-- fixed point input</q-m>
<a name="2654"><q-n>     2654  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="2655"><q-n>     2655  </q-n></a>  <q-w>begin</q-w>
<a name="2656"><q-n>     2656  </q-n></a>    <q-w>return</q-w> remainder (l, r);
<a name="2657"><q-n>     2657  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"rem"</q-l>;
<a name="2658"><q-n>     2658  </q-n></a>
<a name="2659"><q-n>     2659  </q-n></a>  <q-m>-- ufixed (a downto b) rem ufixed (c downto d)</q-m>
<a name="2660"><q-n>     2660  </q-n></a>  <q-m>--        = ufixed (min(a,c) downto min(b,d))</q-m>
<a name="2661"><q-n>     2661  </q-n></a>  <q-w>function</q-w> remainder (
<a name="2662"><q-n>     2662  </q-n></a>    l, r                 : UNRESOLVED_ufixed;            <q-m>-- fixed point input</q-m>
<a name="2663"><q-n>     2663  </q-n></a>    <q-w>constant</q-w> round_style : fixed_round_style_type := fixed_round_style;
<a name="2664"><q-n>     2664  </q-n></a>    <q-w>constant</q-w> guard_bits  : <q-t>NATURAL</q-w>                := fixed_guard_bits)
<a name="2665"><q-n>     2665  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="2666"><q-n>     2666  </q-n></a>    <q-w>variable</q-w> result     : UNRESOLVED_ufixed (minimum(l'<q-a>high</q-w>, r'<q-a>high</q-w>) <q-w>downto</q-w>
<a name="2667"><q-n>     2667  </q-n></a>                                             mine(l'<q-a>low</q-w>, r'<q-a>low</q-w>));
<a name="2668"><q-n>     2668  </q-n></a>    <q-w>variable</q-w> lresize    : UNRESOLVED_ufixed (maximum(l'<q-a>high</q-w>, r'<q-a>low</q-w>) <q-w>downto</q-w>
<a name="2669"><q-n>     2669  </q-n></a>                                             mins(r'<q-a>low</q-w>, r'<q-a>low</q-w>)-guard_bits);
<a name="2670"><q-n>     2670  </q-n></a>    <q-w>variable</q-w> rresize    : UNRESOLVED_ufixed (r'<q-a>high</q-w> <q-w>downto</q-w> r'<q-a>low</q-w>-guard_bits);
<a name="2671"><q-n>     2671  </q-n></a>    <q-w>variable</q-w> dresult    : UNRESOLVED_ufixed (rresize'<q-w>range</q-w>);
<a name="2672"><q-n>     2672  </q-n></a>    <q-w>variable</q-w> lslv       : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2673"><q-n>     2673  </q-n></a>    <q-w>variable</q-w> rslv       : <q-t>UNSIGNED</q-w> (rresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2674"><q-n>     2674  </q-n></a>    <q-w>variable</q-w> result_slv : <q-t>UNSIGNED</q-w> (rslv'<q-w>range</q-w>);
<a name="2675"><q-n>     2675  </q-n></a>  <q-w>begin</q-w>
<a name="2676"><q-n>     2676  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1 <q-w>or</q-w>
<a name="2677"><q-n>     2677  </q-n></a>        mins(r'<q-a>low</q-w>, r'<q-a>low</q-w>) /= r'<q-a>low</q-w> <q-w>or</q-w> mins(l'<q-a>low</q-w>, l'<q-a>low</q-w>) /= l'<q-a>low</q-w>) <q-w>then</q-w>
<a name="2678"><q-n>     2678  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="2679"><q-n>     2679  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2680"><q-n>     2680  </q-n></a>    lresize := resize (arg            =&gt; l,
<a name="2681"><q-n>     2681  </q-n></a>                       left_index     =&gt; lresize'<q-a>high</q-w>,
<a name="2682"><q-n>     2682  </q-n></a>                       right_index    =&gt; lresize'<q-a>low</q-w>,
<a name="2683"><q-n>     2683  </q-n></a>                       overflow_style =&gt; fixed_wrap,     <q-m>-- vector only grows</q-m>
<a name="2684"><q-n>     2684  </q-n></a>                       round_style    =&gt; fixed_truncate);
<a name="2685"><q-n>     2685  </q-n></a>    lslv := to_uns (lresize);
<a name="2686"><q-n>     2686  </q-n></a>    rresize := resize (arg            =&gt; r,
<a name="2687"><q-n>     2687  </q-n></a>                       left_index     =&gt; rresize'<q-a>high</q-w>,
<a name="2688"><q-n>     2688  </q-n></a>                       right_index    =&gt; rresize'<q-a>low</q-w>,
<a name="2689"><q-n>     2689  </q-n></a>                       overflow_style =&gt; fixed_wrap,     <q-m>-- vector only grows</q-m>
<a name="2690"><q-n>     2690  </q-n></a>                       round_style    =&gt; fixed_truncate);
<a name="2691"><q-n>     2691  </q-n></a>    rslv := to_uns (rresize);
<a name="2692"><q-n>     2692  </q-n></a>    <q-w>if</q-w> (rslv = 0) <q-w>then</q-w>
<a name="2693"><q-n>     2693  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="2694"><q-n>     2694  </q-n></a>        &amp; <q-l>"remainder(ufixed) Division by zero"</q-l> <q-w>severity</q-w> error;
<a name="2695"><q-n>     2695  </q-n></a>      result := saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);      <q-m>-- saturate</q-m>
<a name="2696"><q-n>     2696  </q-n></a>    <q-w>else</q-w>
<a name="2697"><q-n>     2697  </q-n></a>      <q-w>if</q-w> (r'<q-a>low</q-w> &lt;= l'<q-a>high</q-w>) <q-w>then</q-w>
<a name="2698"><q-n>     2698  </q-n></a>        result_slv := lslv <q-w>rem</q-w> rslv;
<a name="2699"><q-n>     2699  </q-n></a>        dresult    := to_fixed (result_slv, dresult'<q-a>high</q-w>, dresult'<q-a>low</q-w>);
<a name="2700"><q-n>     2700  </q-n></a>        result := resize (arg            =&gt; dresult,
<a name="2701"><q-n>     2701  </q-n></a>                          left_index     =&gt; result'<q-a>high</q-w>,
<a name="2702"><q-n>     2702  </q-n></a>                          right_index    =&gt; result'<q-a>low</q-w>,
<a name="2703"><q-n>     2703  </q-n></a>                          overflow_style =&gt; fixed_wrap,  <q-m>-- can't overflow</q-m>
<a name="2704"><q-n>     2704  </q-n></a>                          round_style    =&gt; round_style);
<a name="2705"><q-n>     2705  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="2706"><q-n>     2706  </q-n></a>      <q-w>if</q-w> l'<q-a>low</q-w> &lt; r'<q-a>low</q-w> <q-w>then</q-w>
<a name="2707"><q-n>     2707  </q-n></a>        result(mins(r'<q-a>low</q-w>-1, l'<q-a>high</q-w>) <q-w>downto</q-w> l'<q-a>low</q-w>) :=
<a name="2708"><q-n>     2708  </q-n></a>          cleanvec(l(mins(r'<q-a>low</q-w>-1, l'<q-a>high</q-w>) <q-w>downto</q-w> l'<q-a>low</q-w>));
<a name="2709"><q-n>     2709  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="2710"><q-n>     2710  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2711"><q-n>     2711  </q-n></a>    <q-w>return</q-w> result;
<a name="2712"><q-n>     2712  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> remainder;
<a name="2713"><q-n>     2713  </q-n></a>
<a name="2714"><q-n>     2714  </q-n></a>  <q-m>-- remainder</q-m>
<a name="2715"><q-n>     2715  </q-n></a>  <q-m>-- sfixed (a downto b) rem sfixed (c downto d)</q-m>
<a name="2716"><q-n>     2716  </q-n></a>  <q-m>--        = sfixed (min(a,c) downto min(b,d))</q-m>
<a name="2717"><q-n>     2717  </q-n></a>  <q-w>function</q-w> remainder (
<a name="2718"><q-n>     2718  </q-n></a>    l, r                 : UNRESOLVED_sfixed;  <q-m>-- fixed point input</q-m>
<a name="2719"><q-n>     2719  </q-n></a>    <q-w>constant</q-w> round_style : fixed_round_style_type := fixed_round_style;
<a name="2720"><q-n>     2720  </q-n></a>    <q-w>constant</q-w> guard_bits  : <q-t>NATURAL</q-w>                := fixed_guard_bits)
<a name="2721"><q-n>     2721  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="2722"><q-n>     2722  </q-n></a>    <q-w>variable</q-w> l_abs      : UNRESOLVED_ufixed (l'<q-w>range</q-w>);
<a name="2723"><q-n>     2723  </q-n></a>    <q-w>variable</q-w> r_abs      : UNRESOLVED_ufixed (r'<q-w>range</q-w>);
<a name="2724"><q-n>     2724  </q-n></a>    <q-w>variable</q-w> result     : UNRESOLVED_sfixed (minimum(r'<q-a>high</q-w>, l'<q-a>high</q-w>) <q-w>downto</q-w>
<a name="2725"><q-n>     2725  </q-n></a>                                             mine(r'<q-a>low</q-w>, l'<q-a>low</q-w>));
<a name="2726"><q-n>     2726  </q-n></a>    <q-w>variable</q-w> neg_result : UNRESOLVED_sfixed (minimum(r'<q-a>high</q-w>, l'<q-a>high</q-w>)+1 <q-w>downto</q-w>
<a name="2727"><q-n>     2727  </q-n></a>                                             mins(r'<q-a>low</q-w>, l'<q-a>low</q-w>));
<a name="2728"><q-n>     2728  </q-n></a>  <q-w>begin</q-w>
<a name="2729"><q-n>     2729  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1 <q-w>or</q-w>
<a name="2730"><q-n>     2730  </q-n></a>        mins(r'<q-a>low</q-w>, r'<q-a>low</q-w>) /= r'<q-a>low</q-w> <q-w>or</q-w> mins(l'<q-a>low</q-w>, l'<q-a>low</q-w>) /= l'<q-a>low</q-w>) <q-w>then</q-w>
<a name="2731"><q-n>     2731  </q-n></a>      <q-w>return</q-w> NASF;
<a name="2732"><q-n>     2732  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2733"><q-n>     2733  </q-n></a>    l_abs := to_ufixed (l);
<a name="2734"><q-n>     2734  </q-n></a>    r_abs := to_ufixed (r);
<a name="2735"><q-n>     2735  </q-n></a>    result := UNRESOLVED_sfixed (remainder (
<a name="2736"><q-n>     2736  </q-n></a>      l           =&gt; l_abs,
<a name="2737"><q-n>     2737  </q-n></a>      r           =&gt; r_abs,
<a name="2738"><q-n>     2738  </q-n></a>      round_style =&gt; round_style));
<a name="2739"><q-n>     2739  </q-n></a>    neg_result := -result;
<a name="2740"><q-n>     2740  </q-n></a>    <q-w>if</q-w> l(l'<q-a>high</q-w>) = '1' <q-w>then</q-w>
<a name="2741"><q-n>     2741  </q-n></a>      result := neg_result(result'<q-w>range</q-w>);
<a name="2742"><q-n>     2742  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2743"><q-n>     2743  </q-n></a>    <q-w>return</q-w> result;
<a name="2744"><q-n>     2744  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> remainder;
<a name="2745"><q-n>     2745  </q-n></a>
<a name="2746"><q-n>     2746  </q-n></a>  <q-m>-- modulo</q-m>
<a name="2747"><q-n>     2747  </q-n></a>  <q-m>-- ufixed (a downto b) mod ufixed (c downto d)</q-m>
<a name="2748"><q-n>     2748  </q-n></a>  <q-m>--        = ufixed (min(a,c) downto min(b, d))</q-m>
<a name="2749"><q-n>     2749  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (
<a name="2750"><q-n>     2750  </q-n></a>    l, r : UNRESOLVED_ufixed)           <q-m>-- fixed point input</q-m>
<a name="2751"><q-n>     2751  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="2752"><q-n>     2752  </q-n></a>  <q-w>begin</q-w>
<a name="2753"><q-n>     2753  </q-n></a>    <q-w>return</q-w> modulo (l, r);
<a name="2754"><q-n>     2754  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"mod"</q-l>;
<a name="2755"><q-n>     2755  </q-n></a>
<a name="2756"><q-n>     2756  </q-n></a>  <q-m>-- sfixed (a downto b) mod sfixed (c downto d)</q-m>
<a name="2757"><q-n>     2757  </q-n></a>  <q-m>--        = sfixed (c downto min(b, d))</q-m>
<a name="2758"><q-n>     2758  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (
<a name="2759"><q-n>     2759  </q-n></a>    l, r : UNRESOLVED_sfixed)           <q-m>-- fixed point input</q-m>
<a name="2760"><q-n>     2760  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="2761"><q-n>     2761  </q-n></a>  <q-w>begin</q-w>
<a name="2762"><q-n>     2762  </q-n></a>    <q-w>return</q-w> modulo(l, r);
<a name="2763"><q-n>     2763  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"mod"</q-l>;
<a name="2764"><q-n>     2764  </q-n></a>
<a name="2765"><q-n>     2765  </q-n></a>  <q-m>-- modulo</q-m>
<a name="2766"><q-n>     2766  </q-n></a>  <q-m>-- ufixed (a downto b) mod ufixed (c downto d)</q-m>
<a name="2767"><q-n>     2767  </q-n></a>  <q-m>--        = ufixed (min(a,c) downto min(b, d))</q-m>
<a name="2768"><q-n>     2768  </q-n></a>  <q-w>function</q-w> modulo (
<a name="2769"><q-n>     2769  </q-n></a>    l, r                 : UNRESOLVED_ufixed;  <q-m>-- fixed point input</q-m>
<a name="2770"><q-n>     2770  </q-n></a>    <q-w>constant</q-w> round_style : fixed_round_style_type := fixed_round_style;
<a name="2771"><q-n>     2771  </q-n></a>    <q-w>constant</q-w> guard_bits  : <q-t>NATURAL</q-w>                := fixed_guard_bits)
<a name="2772"><q-n>     2772  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="2773"><q-n>     2773  </q-n></a>  <q-w>begin</q-w>
<a name="2774"><q-n>     2774  </q-n></a>    <q-w>return</q-w> remainder(l           =&gt; l,
<a name="2775"><q-n>     2775  </q-n></a>                     r           =&gt; r,
<a name="2776"><q-n>     2776  </q-n></a>                     round_style =&gt; round_style,
<a name="2777"><q-n>     2777  </q-n></a>                     guard_bits  =&gt; guard_bits);
<a name="2778"><q-n>     2778  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> modulo;
<a name="2779"><q-n>     2779  </q-n></a>
<a name="2780"><q-n>     2780  </q-n></a>  <q-m>-- sfixed (a downto b) mod sfixed (c downto d)</q-m>
<a name="2781"><q-n>     2781  </q-n></a>  <q-m>--        = sfixed (c downto min(b, d))</q-m>
<a name="2782"><q-n>     2782  </q-n></a>  <q-w>function</q-w> modulo (
<a name="2783"><q-n>     2783  </q-n></a>    l, r                    : UNRESOLVED_sfixed;  <q-m>-- fixed point input</q-m>
<a name="2784"><q-n>     2784  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="2785"><q-n>     2785  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style;
<a name="2786"><q-n>     2786  </q-n></a>    <q-w>constant</q-w> guard_bits     : <q-t>NATURAL</q-w>                   := fixed_guard_bits)
<a name="2787"><q-n>     2787  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="2788"><q-n>     2788  </q-n></a>    <q-w>variable</q-w> l_abs : UNRESOLVED_ufixed (l'<q-w>range</q-w>);
<a name="2789"><q-n>     2789  </q-n></a>    <q-w>variable</q-w> r_abs : UNRESOLVED_ufixed (r'<q-w>range</q-w>);
<a name="2790"><q-n>     2790  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (r'<q-a>high</q-w> <q-w>downto</q-w>
<a name="2791"><q-n>     2791  </q-n></a>                                         mine(r'<q-a>low</q-w>, l'<q-a>low</q-w>));
<a name="2792"><q-n>     2792  </q-n></a>    <q-w>variable</q-w> dresult : UNRESOLVED_sfixed (minimum(r'<q-a>high</q-w>, l'<q-a>high</q-w>)+1 <q-w>downto</q-w>
<a name="2793"><q-n>     2793  </q-n></a>                                          mins(r'<q-a>low</q-w>, l'<q-a>low</q-w>));
<a name="2794"><q-n>     2794  </q-n></a>    <q-w>variable</q-w> dresult_not_zero : <q-t>BOOLEAN</q-w>;
<a name="2795"><q-n>     2795  </q-n></a>  <q-w>begin</q-w>
<a name="2796"><q-n>     2796  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1 <q-w>or</q-w>
<a name="2797"><q-n>     2797  </q-n></a>        mins(r'<q-a>low</q-w>, r'<q-a>low</q-w>) /= r'<q-a>low</q-w> <q-w>or</q-w> mins(l'<q-a>low</q-w>, l'<q-a>low</q-w>) /= l'<q-a>low</q-w>) <q-w>then</q-w>
<a name="2798"><q-n>     2798  </q-n></a>      <q-w>return</q-w> NASF;
<a name="2799"><q-n>     2799  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2800"><q-n>     2800  </q-n></a>    l_abs := to_ufixed (l);
<a name="2801"><q-n>     2801  </q-n></a>    r_abs := to_ufixed (r);
<a name="2802"><q-n>     2802  </q-n></a>    dresult := <q-l>"0"</q-l> &amp; UNRESOLVED_sfixed(remainder (l           =&gt; l_abs,
<a name="2803"><q-n>     2803  </q-n></a>                                                  r           =&gt; r_abs,
<a name="2804"><q-n>     2804  </q-n></a>                                                  round_style =&gt; round_style));
<a name="2805"><q-n>     2805  </q-n></a>    <q-w>if</q-w> (to_s(dresult) = 0) <q-w>then</q-w>
<a name="2806"><q-n>     2806  </q-n></a>      dresult_not_zero := false;
<a name="2807"><q-n>     2807  </q-n></a>    <q-w>else</q-w>
<a name="2808"><q-n>     2808  </q-n></a>      dresult_not_zero := true;
<a name="2809"><q-n>     2809  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2810"><q-n>     2810  </q-n></a>    <q-w>if</q-w> to_x01(l(l'<q-a>high</q-w>)) = '1' <q-w>and</q-w> to_x01(r(r'<q-a>high</q-w>)) = '0'
<a name="2811"><q-n>     2811  </q-n></a>      <q-w>and</q-w> dresult_not_zero <q-w>then</q-w>
<a name="2812"><q-n>     2812  </q-n></a>      result := resize (arg            =&gt; r - dresult,
<a name="2813"><q-n>     2813  </q-n></a>                        left_index     =&gt; result'<q-a>high</q-w>,
<a name="2814"><q-n>     2814  </q-n></a>                        right_index    =&gt; result'<q-a>low</q-w>,
<a name="2815"><q-n>     2815  </q-n></a>                        overflow_style =&gt; overflow_style,
<a name="2816"><q-n>     2816  </q-n></a>                        round_style    =&gt; round_style);
<a name="2817"><q-n>     2817  </q-n></a>    <q-w>elsif</q-w> to_x01(l(l'<q-a>high</q-w>)) = '1' <q-w>and</q-w> to_x01(r(r'<q-a>high</q-w>)) = '1' <q-w>then</q-w>
<a name="2818"><q-n>     2818  </q-n></a>      result := resize (arg            =&gt; -dresult,
<a name="2819"><q-n>     2819  </q-n></a>                        left_index     =&gt; result'<q-a>high</q-w>,
<a name="2820"><q-n>     2820  </q-n></a>                        right_index    =&gt; result'<q-a>low</q-w>,
<a name="2821"><q-n>     2821  </q-n></a>                        overflow_style =&gt; overflow_style,
<a name="2822"><q-n>     2822  </q-n></a>                        round_style    =&gt; round_style);
<a name="2823"><q-n>     2823  </q-n></a>    <q-w>elsif</q-w> to_x01(l(l'<q-a>high</q-w>)) = '0' <q-w>and</q-w> to_x01(r(r'<q-a>high</q-w>)) = '1'
<a name="2824"><q-n>     2824  </q-n></a>      <q-w>and</q-w> dresult_not_zero <q-w>then</q-w>
<a name="2825"><q-n>     2825  </q-n></a>      result := resize (arg            =&gt; dresult + r,
<a name="2826"><q-n>     2826  </q-n></a>                        left_index     =&gt; result'<q-a>high</q-w>,
<a name="2827"><q-n>     2827  </q-n></a>                        right_index    =&gt; result'<q-a>low</q-w>,
<a name="2828"><q-n>     2828  </q-n></a>                        overflow_style =&gt; overflow_style,
<a name="2829"><q-n>     2829  </q-n></a>                        round_style    =&gt; round_style);
<a name="2830"><q-n>     2830  </q-n></a>    <q-w>else</q-w>
<a name="2831"><q-n>     2831  </q-n></a>      result := resize (arg            =&gt; dresult,
<a name="2832"><q-n>     2832  </q-n></a>                        left_index     =&gt; result'<q-a>high</q-w>,
<a name="2833"><q-n>     2833  </q-n></a>                        right_index    =&gt; result'<q-a>low</q-w>,
<a name="2834"><q-n>     2834  </q-n></a>                        overflow_style =&gt; overflow_style,
<a name="2835"><q-n>     2835  </q-n></a>                        round_style    =&gt; round_style);
<a name="2836"><q-n>     2836  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2837"><q-n>     2837  </q-n></a>    <q-w>return</q-w> result;
<a name="2838"><q-n>     2838  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> modulo;
<a name="2839"><q-n>     2839  </q-n></a>
<a name="2840"><q-n>     2840  </q-n></a>  <q-m>-- Procedure for those who need an "accumulator" function</q-m>
<a name="2841"><q-n>     2841  </q-n></a>  <q-w>procedure</q-w> add_carry (
<a name="2842"><q-n>     2842  </q-n></a>    L, R   : <q-a>in</q-w>  UNRESOLVED_ufixed;
<a name="2843"><q-n>     2843  </q-n></a>    c_in   : <q-a>in</q-w>  <q-t>STD_ULOGIC</q-w>;
<a name="2844"><q-n>     2844  </q-n></a>    result : <q-a>out</q-w> UNRESOLVED_ufixed;
<a name="2845"><q-n>     2845  </q-n></a>    c_out  : <q-a>out</q-w> <q-t>STD_ULOGIC</q-w>) <q-w>is</q-w>
<a name="2846"><q-n>     2846  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>)+1;
<a name="2847"><q-n>     2847  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="2848"><q-n>     2848  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="2849"><q-n>     2849  </q-n></a>    <q-w>variable</q-w> lslv, rslv : <q-t>UNSIGNED</q-w> (left_index-right_index
<a name="2850"><q-n>     2850  </q-n></a>                                    <q-w>downto</q-w> 0);
<a name="2851"><q-n>     2851  </q-n></a>    <q-w>variable</q-w> result_slv : <q-t>UNSIGNED</q-w> (left_index-right_index
<a name="2852"><q-n>     2852  </q-n></a>                                    <q-w>downto</q-w> 0);
<a name="2853"><q-n>     2853  </q-n></a>    <q-w>variable</q-w> cx : <q-t>UNSIGNED</q-w> (0 <q-w>downto</q-w> 0);  <q-m>-- Carry in</q-m>
<a name="2854"><q-n>     2854  </q-n></a>  <q-w>begin</q-w>
<a name="2855"><q-n>     2855  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="2856"><q-n>     2856  </q-n></a>      result := NAUF;
<a name="2857"><q-n>     2857  </q-n></a>      c_out  := '0';
<a name="2858"><q-n>     2858  </q-n></a>    <q-w>else</q-w>
<a name="2859"><q-n>     2859  </q-n></a>      cx (0)     := c_in;
<a name="2860"><q-n>     2860  </q-n></a>      lresize    := resize (l, left_index, right_index);
<a name="2861"><q-n>     2861  </q-n></a>      rresize    := resize (r, left_index, right_index);
<a name="2862"><q-n>     2862  </q-n></a>      lslv       := to_uns (lresize);
<a name="2863"><q-n>     2863  </q-n></a>      rslv       := to_uns (rresize);
<a name="2864"><q-n>     2864  </q-n></a>      result_slv := lslv + rslv + cx;
<a name="2865"><q-n>     2865  </q-n></a>      c_out      := result_slv(left_index);
<a name="2866"><q-n>     2866  </q-n></a>      result := to_fixed(result_slv (left_index-right_index-1 <q-w>downto</q-w> 0),
<a name="2867"><q-n>     2867  </q-n></a>                         left_index-1, right_index);
<a name="2868"><q-n>     2868  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2869"><q-n>     2869  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> add_carry;
<a name="2870"><q-n>     2870  </q-n></a>
<a name="2871"><q-n>     2871  </q-n></a>  <q-w>procedure</q-w> add_carry (
<a name="2872"><q-n>     2872  </q-n></a>    L, R   : <q-a>in</q-w>  UNRESOLVED_sfixed;
<a name="2873"><q-n>     2873  </q-n></a>    c_in   : <q-a>in</q-w>  <q-t>STD_ULOGIC</q-w>;
<a name="2874"><q-n>     2874  </q-n></a>    result : <q-a>out</q-w> UNRESOLVED_sfixed;
<a name="2875"><q-n>     2875  </q-n></a>    c_out  : <q-a>out</q-w> <q-t>STD_ULOGIC</q-w>) <q-w>is</q-w>
<a name="2876"><q-n>     2876  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>)+1;
<a name="2877"><q-n>     2877  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="2878"><q-n>     2878  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="2879"><q-n>     2879  </q-n></a>    <q-w>variable</q-w> lslv, rslv : <q-t>SIGNED</q-w> (left_index-right_index
<a name="2880"><q-n>     2880  </q-n></a>                                  <q-w>downto</q-w> 0);
<a name="2881"><q-n>     2881  </q-n></a>    <q-w>variable</q-w> result_slv : <q-t>SIGNED</q-w> (left_index-right_index
<a name="2882"><q-n>     2882  </q-n></a>                                  <q-w>downto</q-w> 0);
<a name="2883"><q-n>     2883  </q-n></a>    <q-w>variable</q-w> cx : <q-t>SIGNED</q-w> (1 <q-w>downto</q-w> 0);  <q-m>-- Carry in</q-m>
<a name="2884"><q-n>     2884  </q-n></a>  <q-w>begin</q-w>
<a name="2885"><q-n>     2885  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="2886"><q-n>     2886  </q-n></a>      result := NASF;
<a name="2887"><q-n>     2887  </q-n></a>      c_out  := '0';
<a name="2888"><q-n>     2888  </q-n></a>    <q-w>else</q-w>
<a name="2889"><q-n>     2889  </q-n></a>      cx (1)     := '0';
<a name="2890"><q-n>     2890  </q-n></a>      cx (0)     := c_in;
<a name="2891"><q-n>     2891  </q-n></a>      lresize    := resize (l, left_index, right_index);
<a name="2892"><q-n>     2892  </q-n></a>      rresize    := resize (r, left_index, right_index);
<a name="2893"><q-n>     2893  </q-n></a>      lslv       := to_s (lresize);
<a name="2894"><q-n>     2894  </q-n></a>      rslv       := to_s (rresize);
<a name="2895"><q-n>     2895  </q-n></a>      result_slv := lslv + rslv + cx;
<a name="2896"><q-n>     2896  </q-n></a>      c_out      := result_slv(left_index);
<a name="2897"><q-n>     2897  </q-n></a>      result := to_fixed(result_slv (left_index-right_index-1 <q-w>downto</q-w> 0),
<a name="2898"><q-n>     2898  </q-n></a>                         left_index-1, right_index);
<a name="2899"><q-n>     2899  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2900"><q-n>     2900  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> add_carry;
<a name="2901"><q-n>     2901  </q-n></a>
<a name="2902"><q-n>     2902  </q-n></a>  <q-m>-- Scales the result by a power of 2.  Width of input = width of output with</q-m>
<a name="2903"><q-n>     2903  </q-n></a>  <q-m>-- the decimal point moved.</q-m>
<a name="2904"><q-n>     2904  </q-n></a>  <q-w>function</q-w> scalb (y : UNRESOLVED_ufixed; N : <q-t>INTEGER</q-w>)
<a name="2905"><q-n>     2905  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="2906"><q-n>     2906  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (y'<q-a>high</q-w>+N <q-w>downto</q-w> y'<q-a>low</q-w>+N);
<a name="2907"><q-n>     2907  </q-n></a>  <q-w>begin</q-w>
<a name="2908"><q-n>     2908  </q-n></a>    <q-w>if</q-w> y'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="2909"><q-n>     2909  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="2910"><q-n>     2910  </q-n></a>    <q-w>else</q-w>
<a name="2911"><q-n>     2911  </q-n></a>      result := y;
<a name="2912"><q-n>     2912  </q-n></a>      <q-w>return</q-w> result;
<a name="2913"><q-n>     2913  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2914"><q-n>     2914  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> scalb;
<a name="2915"><q-n>     2915  </q-n></a>
<a name="2916"><q-n>     2916  </q-n></a>  <q-w>function</q-w> scalb (y : UNRESOLVED_ufixed; N : <q-t>SIGNED</q-w>)
<a name="2917"><q-n>     2917  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="2918"><q-n>     2918  </q-n></a>  <q-w>begin</q-w>
<a name="2919"><q-n>     2919  </q-n></a>    <q-w>return</q-w> scalb (y =&gt; y,
<a name="2920"><q-n>     2920  </q-n></a>                  N =&gt; to_integer(N));
<a name="2921"><q-n>     2921  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> scalb;
<a name="2922"><q-n>     2922  </q-n></a>
<a name="2923"><q-n>     2923  </q-n></a>  <q-w>function</q-w> scalb (y : UNRESOLVED_sfixed; N : <q-t>INTEGER</q-w>)
<a name="2924"><q-n>     2924  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="2925"><q-n>     2925  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (y'<q-a>high</q-w>+N <q-w>downto</q-w> y'<q-a>low</q-w>+N);
<a name="2926"><q-n>     2926  </q-n></a>  <q-w>begin</q-w>
<a name="2927"><q-n>     2927  </q-n></a>    <q-w>if</q-w> y'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="2928"><q-n>     2928  </q-n></a>      <q-w>return</q-w> NASF;
<a name="2929"><q-n>     2929  </q-n></a>    <q-w>else</q-w>
<a name="2930"><q-n>     2930  </q-n></a>      result := y;
<a name="2931"><q-n>     2931  </q-n></a>      <q-w>return</q-w> result;
<a name="2932"><q-n>     2932  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2933"><q-n>     2933  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> scalb;
<a name="2934"><q-n>     2934  </q-n></a>
<a name="2935"><q-n>     2935  </q-n></a>  <q-w>function</q-w> scalb (y : UNRESOLVED_sfixed; N : <q-t>SIGNED</q-w>)
<a name="2936"><q-n>     2936  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="2937"><q-n>     2937  </q-n></a>  <q-w>begin</q-w>
<a name="2938"><q-n>     2938  </q-n></a>    <q-w>return</q-w> scalb (y =&gt; y,
<a name="2939"><q-n>     2939  </q-n></a>                  N =&gt; to_integer(N));
<a name="2940"><q-n>     2940  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> scalb;
<a name="2941"><q-n>     2941  </q-n></a>
<a name="2942"><q-n>     2942  </q-n></a>  <q-w>function</q-w> Is_Negative (arg : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="2943"><q-n>     2943  </q-n></a>  <q-w>begin</q-w>
<a name="2944"><q-n>     2944  </q-n></a>    <q-w>if</q-w> to_X01(arg(arg'<q-a>high</q-w>)) = '1' <q-w>then</q-w>
<a name="2945"><q-n>     2945  </q-n></a>      <q-w>return</q-w> true;
<a name="2946"><q-n>     2946  </q-n></a>    <q-w>else</q-w>
<a name="2947"><q-n>     2947  </q-n></a>      <q-w>return</q-w> false;
<a name="2948"><q-n>     2948  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="2949"><q-n>     2949  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> Is_Negative;
<a name="2950"><q-n>     2950  </q-n></a>
<a name="2951"><q-n>     2951  </q-n></a>  <q-w>function</q-w> find_rightmost (arg : UNRESOLVED_ufixed; y : <q-t>STD_ULOGIC</q-w>)
<a name="2952"><q-n>     2952  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="2953"><q-n>     2953  </q-n></a>  <q-w>begin</q-w>
<a name="2954"><q-n>     2954  </q-n></a>    for_loop : <q-w>for</q-w> i <q-a>in</q-w> arg'<q-a>reverse_range</q-w> <q-w>loop</q-w>
<a name="2955"><q-n>     2955  </q-n></a>      <q-w>if</q-w> \?=\ (arg(i), y) = '1' <q-w>then</q-w>
<a name="2956"><q-n>     2956  </q-n></a>        <q-w>return</q-w> i;
<a name="2957"><q-n>     2957  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="2958"><q-n>     2958  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="2959"><q-n>     2959  </q-n></a>    <q-w>return</q-w> arg'<q-a>high</q-w>+1;                  <q-m>-- return out of bounds 'high</q-m>
<a name="2960"><q-n>     2960  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> find_rightmost;
<a name="2961"><q-n>     2961  </q-n></a>
<a name="2962"><q-n>     2962  </q-n></a>  <q-w>function</q-w> find_leftmost (arg : UNRESOLVED_ufixed; y : <q-t>STD_ULOGIC</q-w>)
<a name="2963"><q-n>     2963  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="2964"><q-n>     2964  </q-n></a>  <q-w>begin</q-w>
<a name="2965"><q-n>     2965  </q-n></a>    for_loop : <q-w>for</q-w> i <q-a>in</q-w> arg'<q-w>range</q-w> <q-w>loop</q-w>
<a name="2966"><q-n>     2966  </q-n></a>      <q-w>if</q-w> \?=\ (arg(i), y) = '1' <q-w>then</q-w>
<a name="2967"><q-n>     2967  </q-n></a>        <q-w>return</q-w> i;
<a name="2968"><q-n>     2968  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="2969"><q-n>     2969  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="2970"><q-n>     2970  </q-n></a>    <q-w>return</q-w> arg'<q-a>low</q-w>-1;                   <q-m>-- return out of bounds 'low</q-m>
<a name="2971"><q-n>     2971  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> find_leftmost;
<a name="2972"><q-n>     2972  </q-n></a>
<a name="2973"><q-n>     2973  </q-n></a>  <q-w>function</q-w> find_rightmost (arg : UNRESOLVED_sfixed; y : <q-t>STD_ULOGIC</q-w>)
<a name="2974"><q-n>     2974  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="2975"><q-n>     2975  </q-n></a>  <q-w>begin</q-w>
<a name="2976"><q-n>     2976  </q-n></a>    for_loop : <q-w>for</q-w> i <q-a>in</q-w> arg'<q-a>reverse_range</q-w> <q-w>loop</q-w>
<a name="2977"><q-n>     2977  </q-n></a>      <q-w>if</q-w> \?=\ (arg(i), y) = '1' <q-w>then</q-w>
<a name="2978"><q-n>     2978  </q-n></a>        <q-w>return</q-w> i;
<a name="2979"><q-n>     2979  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="2980"><q-n>     2980  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="2981"><q-n>     2981  </q-n></a>    <q-w>return</q-w> arg'<q-a>high</q-w>+1;                  <q-m>-- return out of bounds 'high</q-m>
<a name="2982"><q-n>     2982  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> find_rightmost;
<a name="2983"><q-n>     2983  </q-n></a>
<a name="2984"><q-n>     2984  </q-n></a>  <q-w>function</q-w> find_leftmost (arg : UNRESOLVED_sfixed; y : <q-t>STD_ULOGIC</q-w>)
<a name="2985"><q-n>     2985  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="2986"><q-n>     2986  </q-n></a>  <q-w>begin</q-w>
<a name="2987"><q-n>     2987  </q-n></a>    for_loop : <q-w>for</q-w> i <q-a>in</q-w> arg'<q-w>range</q-w> <q-w>loop</q-w>
<a name="2988"><q-n>     2988  </q-n></a>      <q-w>if</q-w> \?=\ (arg(i), y) = '1' <q-w>then</q-w>
<a name="2989"><q-n>     2989  </q-n></a>        <q-w>return</q-w> i;
<a name="2990"><q-n>     2990  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="2991"><q-n>     2991  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="2992"><q-n>     2992  </q-n></a>    <q-w>return</q-w> arg'<q-a>low</q-w>-1;                   <q-m>-- return out of bounds 'low</q-m>
<a name="2993"><q-n>     2993  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> find_leftmost;
<a name="2994"><q-n>     2994  </q-n></a>
<a name="2995"><q-n>     2995  </q-n></a>  <q-w>function</q-w> <q-l>"sll"</q-l> (ARG : UNRESOLVED_ufixed; COUNT : <q-t>INTEGER</q-w>)
<a name="2996"><q-n>     2996  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="2997"><q-n>     2997  </q-n></a>    <q-w>variable</q-w> argslv : <q-t>UNSIGNED</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="2998"><q-n>     2998  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (arg'<q-w>range</q-w>);
<a name="2999"><q-n>     2999  </q-n></a>  <q-w>begin</q-w>
<a name="3000"><q-n>     3000  </q-n></a>    argslv := to_uns (arg);
<a name="3001"><q-n>     3001  </q-n></a>    argslv := argslv <q-w>sll</q-w> COUNT;
<a name="3002"><q-n>     3002  </q-n></a>    result := to_fixed (argslv, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="3003"><q-n>     3003  </q-n></a>    <q-w>return</q-w> result;
<a name="3004"><q-n>     3004  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"sll"</q-l>;
<a name="3005"><q-n>     3005  </q-n></a>
<a name="3006"><q-n>     3006  </q-n></a>  <q-w>function</q-w> <q-l>"srl"</q-l> (ARG : UNRESOLVED_ufixed; COUNT : <q-t>INTEGER</q-w>)
<a name="3007"><q-n>     3007  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3008"><q-n>     3008  </q-n></a>    <q-w>variable</q-w> argslv : <q-t>UNSIGNED</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3009"><q-n>     3009  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (arg'<q-w>range</q-w>);
<a name="3010"><q-n>     3010  </q-n></a>  <q-w>begin</q-w>
<a name="3011"><q-n>     3011  </q-n></a>    argslv := to_uns (arg);
<a name="3012"><q-n>     3012  </q-n></a>    argslv := argslv <q-w>srl</q-w> COUNT;
<a name="3013"><q-n>     3013  </q-n></a>    result := to_fixed (argslv, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="3014"><q-n>     3014  </q-n></a>    <q-w>return</q-w> result;
<a name="3015"><q-n>     3015  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"srl"</q-l>;
<a name="3016"><q-n>     3016  </q-n></a>
<a name="3017"><q-n>     3017  </q-n></a>  <q-w>function</q-w> <q-l>"rol"</q-l> (ARG : UNRESOLVED_ufixed; COUNT : <q-t>INTEGER</q-w>)
<a name="3018"><q-n>     3018  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3019"><q-n>     3019  </q-n></a>    <q-w>variable</q-w> argslv : <q-t>UNSIGNED</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3020"><q-n>     3020  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (arg'<q-w>range</q-w>);
<a name="3021"><q-n>     3021  </q-n></a>  <q-w>begin</q-w>
<a name="3022"><q-n>     3022  </q-n></a>    argslv := to_uns (arg);
<a name="3023"><q-n>     3023  </q-n></a>    argslv := argslv <q-w>rol</q-w> COUNT;
<a name="3024"><q-n>     3024  </q-n></a>    result := to_fixed (argslv, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="3025"><q-n>     3025  </q-n></a>    <q-w>return</q-w> result;
<a name="3026"><q-n>     3026  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"rol"</q-l>;
<a name="3027"><q-n>     3027  </q-n></a>
<a name="3028"><q-n>     3028  </q-n></a>  <q-w>function</q-w> <q-l>"ror"</q-l> (ARG : UNRESOLVED_ufixed; COUNT : <q-t>INTEGER</q-w>)
<a name="3029"><q-n>     3029  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3030"><q-n>     3030  </q-n></a>    <q-w>variable</q-w> argslv : <q-t>UNSIGNED</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3031"><q-n>     3031  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (arg'<q-w>range</q-w>);
<a name="3032"><q-n>     3032  </q-n></a>  <q-w>begin</q-w>
<a name="3033"><q-n>     3033  </q-n></a>    argslv := to_uns (arg);
<a name="3034"><q-n>     3034  </q-n></a>    argslv := argslv <q-w>ror</q-w> COUNT;
<a name="3035"><q-n>     3035  </q-n></a>    result := to_fixed (argslv, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="3036"><q-n>     3036  </q-n></a>    <q-w>return</q-w> result;
<a name="3037"><q-n>     3037  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"ror"</q-l>;
<a name="3038"><q-n>     3038  </q-n></a>
<a name="3039"><q-n>     3039  </q-n></a>  <q-w>function</q-w> <q-l>"sla"</q-l> (ARG : UNRESOLVED_ufixed; COUNT : <q-t>INTEGER</q-w>)
<a name="3040"><q-n>     3040  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3041"><q-n>     3041  </q-n></a>    <q-w>variable</q-w> argslv : <q-t>UNSIGNED</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3042"><q-n>     3042  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (arg'<q-w>range</q-w>);
<a name="3043"><q-n>     3043  </q-n></a>  <q-w>begin</q-w>
<a name="3044"><q-n>     3044  </q-n></a>    argslv := to_uns (arg);
<a name="3045"><q-n>     3045  </q-n></a>    <q-m>-- Arithmetic shift on an unsigned is a logical shift</q-m>
<a name="3046"><q-n>     3046  </q-n></a>    argslv := argslv <q-w>sll</q-w> COUNT;
<a name="3047"><q-n>     3047  </q-n></a>    result := to_fixed (argslv, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="3048"><q-n>     3048  </q-n></a>    <q-w>return</q-w> result;
<a name="3049"><q-n>     3049  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"sla"</q-l>;
<a name="3050"><q-n>     3050  </q-n></a>
<a name="3051"><q-n>     3051  </q-n></a>  <q-w>function</q-w> <q-l>"sra"</q-l> (ARG : UNRESOLVED_ufixed; COUNT : <q-t>INTEGER</q-w>)
<a name="3052"><q-n>     3052  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3053"><q-n>     3053  </q-n></a>    <q-w>variable</q-w> argslv : <q-t>UNSIGNED</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3054"><q-n>     3054  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (arg'<q-w>range</q-w>);
<a name="3055"><q-n>     3055  </q-n></a>  <q-w>begin</q-w>
<a name="3056"><q-n>     3056  </q-n></a>    argslv := to_uns (arg);
<a name="3057"><q-n>     3057  </q-n></a>    <q-m>-- Arithmetic shift on an unsigned is a logical shift</q-m>
<a name="3058"><q-n>     3058  </q-n></a>    argslv := argslv <q-w>srl</q-w> COUNT;
<a name="3059"><q-n>     3059  </q-n></a>    result := to_fixed (argslv, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="3060"><q-n>     3060  </q-n></a>    <q-w>return</q-w> result;
<a name="3061"><q-n>     3061  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"sra"</q-l>;
<a name="3062"><q-n>     3062  </q-n></a>
<a name="3063"><q-n>     3063  </q-n></a>  <q-w>function</q-w> <q-l>"sll"</q-l> (ARG : UNRESOLVED_sfixed; COUNT : <q-t>INTEGER</q-w>)
<a name="3064"><q-n>     3064  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3065"><q-n>     3065  </q-n></a>    <q-w>variable</q-w> argslv : <q-t>SIGNED</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3066"><q-n>     3066  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (arg'<q-w>range</q-w>);
<a name="3067"><q-n>     3067  </q-n></a>  <q-w>begin</q-w>
<a name="3068"><q-n>     3068  </q-n></a>    argslv := to_s (arg);
<a name="3069"><q-n>     3069  </q-n></a>    argslv := argslv <q-w>sll</q-w> COUNT;
<a name="3070"><q-n>     3070  </q-n></a>    result := to_fixed (argslv, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="3071"><q-n>     3071  </q-n></a>    <q-w>return</q-w> result;
<a name="3072"><q-n>     3072  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"sll"</q-l>;
<a name="3073"><q-n>     3073  </q-n></a>
<a name="3074"><q-n>     3074  </q-n></a>  <q-w>function</q-w> <q-l>"srl"</q-l> (ARG : UNRESOLVED_sfixed; COUNT : <q-t>INTEGER</q-w>)
<a name="3075"><q-n>     3075  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3076"><q-n>     3076  </q-n></a>    <q-w>variable</q-w> argslv : <q-t>SIGNED</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3077"><q-n>     3077  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (arg'<q-w>range</q-w>);
<a name="3078"><q-n>     3078  </q-n></a>  <q-w>begin</q-w>
<a name="3079"><q-n>     3079  </q-n></a>    argslv := to_s (arg);
<a name="3080"><q-n>     3080  </q-n></a>    argslv := argslv <q-w>srl</q-w> COUNT;
<a name="3081"><q-n>     3081  </q-n></a>    result := to_fixed (argslv, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="3082"><q-n>     3082  </q-n></a>    <q-w>return</q-w> result;
<a name="3083"><q-n>     3083  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"srl"</q-l>;
<a name="3084"><q-n>     3084  </q-n></a>
<a name="3085"><q-n>     3085  </q-n></a>  <q-w>function</q-w> <q-l>"rol"</q-l> (ARG : UNRESOLVED_sfixed; COUNT : <q-t>INTEGER</q-w>)
<a name="3086"><q-n>     3086  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3087"><q-n>     3087  </q-n></a>    <q-w>variable</q-w> argslv : <q-t>SIGNED</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3088"><q-n>     3088  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (arg'<q-w>range</q-w>);
<a name="3089"><q-n>     3089  </q-n></a>  <q-w>begin</q-w>
<a name="3090"><q-n>     3090  </q-n></a>    argslv := to_s (arg);
<a name="3091"><q-n>     3091  </q-n></a>    argslv := argslv <q-w>rol</q-w> COUNT;
<a name="3092"><q-n>     3092  </q-n></a>    result := to_fixed (argslv, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="3093"><q-n>     3093  </q-n></a>    <q-w>return</q-w> result;
<a name="3094"><q-n>     3094  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"rol"</q-l>;
<a name="3095"><q-n>     3095  </q-n></a>
<a name="3096"><q-n>     3096  </q-n></a>  <q-w>function</q-w> <q-l>"ror"</q-l> (ARG : UNRESOLVED_sfixed; COUNT : <q-t>INTEGER</q-w>)
<a name="3097"><q-n>     3097  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3098"><q-n>     3098  </q-n></a>    <q-w>variable</q-w> argslv : <q-t>SIGNED</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3099"><q-n>     3099  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (arg'<q-w>range</q-w>);
<a name="3100"><q-n>     3100  </q-n></a>  <q-w>begin</q-w>
<a name="3101"><q-n>     3101  </q-n></a>    argslv := to_s (arg);
<a name="3102"><q-n>     3102  </q-n></a>    argslv := argslv <q-w>ror</q-w> COUNT;
<a name="3103"><q-n>     3103  </q-n></a>    result := to_fixed (argslv, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="3104"><q-n>     3104  </q-n></a>    <q-w>return</q-w> result;
<a name="3105"><q-n>     3105  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"ror"</q-l>;
<a name="3106"><q-n>     3106  </q-n></a>
<a name="3107"><q-n>     3107  </q-n></a>  <q-w>function</q-w> <q-l>"sla"</q-l> (ARG : UNRESOLVED_sfixed; COUNT : <q-t>INTEGER</q-w>)
<a name="3108"><q-n>     3108  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3109"><q-n>     3109  </q-n></a>    <q-w>variable</q-w> argslv : <q-t>SIGNED</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3110"><q-n>     3110  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (arg'<q-w>range</q-w>);
<a name="3111"><q-n>     3111  </q-n></a>  <q-w>begin</q-w>
<a name="3112"><q-n>     3112  </q-n></a>    argslv := to_s (arg);
<a name="3113"><q-n>     3113  </q-n></a>    <q-w>if</q-w> COUNT &gt; 0 <q-w>then</q-w>
<a name="3114"><q-n>     3114  </q-n></a>      <q-m>-- Arithmetic shift left on a 2's complement number is a logic shift</q-m>
<a name="3115"><q-n>     3115  </q-n></a>      argslv := argslv <q-w>sll</q-w> COUNT;
<a name="3116"><q-n>     3116  </q-n></a>    <q-w>else</q-w>
<a name="3117"><q-n>     3117  </q-n></a>      argslv := argslv <q-w>sra</q-w> -COUNT;
<a name="3118"><q-n>     3118  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3119"><q-n>     3119  </q-n></a>    result := to_fixed (argslv, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="3120"><q-n>     3120  </q-n></a>    <q-w>return</q-w> result;
<a name="3121"><q-n>     3121  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"sla"</q-l>;
<a name="3122"><q-n>     3122  </q-n></a>
<a name="3123"><q-n>     3123  </q-n></a>  <q-w>function</q-w> <q-l>"sra"</q-l> (ARG : UNRESOLVED_sfixed; COUNT : <q-t>INTEGER</q-w>)
<a name="3124"><q-n>     3124  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3125"><q-n>     3125  </q-n></a>    <q-w>variable</q-w> argslv : <q-t>SIGNED</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3126"><q-n>     3126  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (arg'<q-w>range</q-w>);
<a name="3127"><q-n>     3127  </q-n></a>  <q-w>begin</q-w>
<a name="3128"><q-n>     3128  </q-n></a>    argslv := to_s (arg);
<a name="3129"><q-n>     3129  </q-n></a>    <q-w>if</q-w> COUNT &gt; 0 <q-w>then</q-w>
<a name="3130"><q-n>     3130  </q-n></a>      argslv := argslv <q-w>sra</q-w> COUNT;
<a name="3131"><q-n>     3131  </q-n></a>    <q-w>else</q-w>
<a name="3132"><q-n>     3132  </q-n></a>      <q-m>-- Arithmetic shift left on a 2's complement number is a logic shift</q-m>
<a name="3133"><q-n>     3133  </q-n></a>      argslv := argslv <q-w>sll</q-w> -COUNT;
<a name="3134"><q-n>     3134  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3135"><q-n>     3135  </q-n></a>    result := to_fixed (argslv, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="3136"><q-n>     3136  </q-n></a>    <q-w>return</q-w> result;
<a name="3137"><q-n>     3137  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"sra"</q-l>;
<a name="3138"><q-n>     3138  </q-n></a>
<a name="3139"><q-n>     3139  </q-n></a>  <q-m>-- Because some people want the older functions.</q-m>
<a name="3140"><q-n>     3140  </q-n></a>  <q-w>function</q-w> SHIFT_LEFT (ARG : UNRESOLVED_ufixed; COUNT : <q-t>NATURAL</q-w>)
<a name="3141"><q-n>     3141  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3142"><q-n>     3142  </q-n></a>  <q-w>begin</q-w>
<a name="3143"><q-n>     3143  </q-n></a>    <q-w>if</q-w> (ARG'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="3144"><q-n>     3144  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="3145"><q-n>     3145  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3146"><q-n>     3146  </q-n></a>    <q-w>return</q-w> ARG <q-w>sla</q-w> COUNT;
<a name="3147"><q-n>     3147  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> SHIFT_LEFT;
<a name="3148"><q-n>     3148  </q-n></a>
<a name="3149"><q-n>     3149  </q-n></a>  <q-w>function</q-w> SHIFT_RIGHT (ARG : UNRESOLVED_ufixed; COUNT : <q-t>NATURAL</q-w>)
<a name="3150"><q-n>     3150  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3151"><q-n>     3151  </q-n></a>  <q-w>begin</q-w>
<a name="3152"><q-n>     3152  </q-n></a>    <q-w>if</q-w> (ARG'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="3153"><q-n>     3153  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="3154"><q-n>     3154  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3155"><q-n>     3155  </q-n></a>    <q-w>return</q-w> ARG <q-w>sra</q-w> COUNT;
<a name="3156"><q-n>     3156  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> SHIFT_RIGHT;
<a name="3157"><q-n>     3157  </q-n></a>
<a name="3158"><q-n>     3158  </q-n></a>  <q-w>function</q-w> SHIFT_LEFT (ARG : UNRESOLVED_sfixed; COUNT : <q-t>NATURAL</q-w>)
<a name="3159"><q-n>     3159  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3160"><q-n>     3160  </q-n></a>  <q-w>begin</q-w>
<a name="3161"><q-n>     3161  </q-n></a>    <q-w>if</q-w> (ARG'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="3162"><q-n>     3162  </q-n></a>      <q-w>return</q-w> NASF;
<a name="3163"><q-n>     3163  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3164"><q-n>     3164  </q-n></a>    <q-w>return</q-w> ARG <q-w>sla</q-w> COUNT;
<a name="3165"><q-n>     3165  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> SHIFT_LEFT;
<a name="3166"><q-n>     3166  </q-n></a>
<a name="3167"><q-n>     3167  </q-n></a>  <q-w>function</q-w> SHIFT_RIGHT (ARG : UNRESOLVED_sfixed; COUNT : <q-t>NATURAL</q-w>)
<a name="3168"><q-n>     3168  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3169"><q-n>     3169  </q-n></a>  <q-w>begin</q-w>
<a name="3170"><q-n>     3170  </q-n></a>    <q-w>if</q-w> (ARG'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="3171"><q-n>     3171  </q-n></a>      <q-w>return</q-w> NASF;
<a name="3172"><q-n>     3172  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3173"><q-n>     3173  </q-n></a>    <q-w>return</q-w> ARG <q-w>sra</q-w> COUNT;
<a name="3174"><q-n>     3174  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> SHIFT_RIGHT;
<a name="3175"><q-n>     3175  </q-n></a>
<a name="3176"><q-n>     3176  </q-n></a>  <q-m>----------------------------------------------------------------------------</q-m>
<a name="3177"><q-n>     3177  </q-n></a>  <q-m>-- logical functions</q-m>
<a name="3178"><q-n>     3178  </q-n></a>  <q-m>----------------------------------------------------------------------------</q-m>
<a name="3179"><q-n>     3179  </q-n></a>  <q-w>function</q-w> <q-l>"not"</q-l> (L : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3180"><q-n>     3180  </q-n></a>    <q-w>variable</q-w> RESULT : <q-t>STD_ULOGIC_VECTOR</q-w>(L'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- force downto</q-m>
<a name="3181"><q-n>     3181  </q-n></a>  <q-w>begin</q-w>
<a name="3182"><q-n>     3182  </q-n></a>    RESULT := <q-w>not</q-w> to_sulv(L);
<a name="3183"><q-n>     3183  </q-n></a>    <q-w>return</q-w> to_ufixed(RESULT, L'<q-a>high</q-w>, L'<q-a>low</q-w>);
<a name="3184"><q-n>     3184  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"not"</q-l>;
<a name="3185"><q-n>     3185  </q-n></a>
<a name="3186"><q-n>     3186  </q-n></a>  <q-w>function</q-w> <q-l>"and"</q-l> (L, R : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3187"><q-n>     3187  </q-n></a>    <q-w>variable</q-w> RESULT : <q-t>STD_ULOGIC_VECTOR</q-w>(L'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- force downto</q-m>
<a name="3188"><q-n>     3188  </q-n></a>  <q-w>begin</q-w>
<a name="3189"><q-n>     3189  </q-n></a>    <q-w>if</q-w> (L'<q-a>high</q-w> = R'<q-a>high</q-w> <q-w>and</q-w> L'<q-a>low</q-w> = R'<q-a>low</q-w>) <q-w>then</q-w>
<a name="3190"><q-n>     3190  </q-n></a>      RESULT := to_sulv(L) <q-w>and</q-w> to_sulv(R);
<a name="3191"><q-n>     3191  </q-n></a>    <q-w>else</q-w>
<a name="3192"><q-n>     3192  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3193"><q-n>     3193  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3194"><q-n>     3194  </q-n></a>        &amp; <q-l>""</q-l><q-l>"and"</q-l><q-l>": Range error L'RANGE /= R'RANGE"</q-l>
<a name="3195"><q-n>     3195  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3196"><q-n>     3196  </q-n></a>      RESULT := (<q-w>others</q-w> =&gt; 'X');
<a name="3197"><q-n>     3197  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3198"><q-n>     3198  </q-n></a>    <q-w>return</q-w> to_ufixed(RESULT, L'<q-a>high</q-w>, L'<q-a>low</q-w>);
<a name="3199"><q-n>     3199  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"and"</q-l>;
<a name="3200"><q-n>     3200  </q-n></a>
<a name="3201"><q-n>     3201  </q-n></a>  <q-w>function</q-w> <q-l>"or"</q-l> (L, R : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3202"><q-n>     3202  </q-n></a>    <q-w>variable</q-w> RESULT : <q-t>STD_ULOGIC_VECTOR</q-w>(L'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- force downto</q-m>
<a name="3203"><q-n>     3203  </q-n></a>  <q-w>begin</q-w>
<a name="3204"><q-n>     3204  </q-n></a>    <q-w>if</q-w> (L'<q-a>high</q-w> = R'<q-a>high</q-w> <q-w>and</q-w> L'<q-a>low</q-w> = R'<q-a>low</q-w>) <q-w>then</q-w>
<a name="3205"><q-n>     3205  </q-n></a>      RESULT := to_sulv(L) <q-w>or</q-w> to_sulv(R);
<a name="3206"><q-n>     3206  </q-n></a>    <q-w>else</q-w>
<a name="3207"><q-n>     3207  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3208"><q-n>     3208  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3209"><q-n>     3209  </q-n></a>        &amp; <q-l>""</q-l><q-l>"or"</q-l><q-l>": Range error L'RANGE /= R'RANGE"</q-l>
<a name="3210"><q-n>     3210  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3211"><q-n>     3211  </q-n></a>      RESULT := (<q-w>others</q-w> =&gt; 'X');
<a name="3212"><q-n>     3212  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3213"><q-n>     3213  </q-n></a>    <q-w>return</q-w> to_ufixed(RESULT, L'<q-a>high</q-w>, L'<q-a>low</q-w>);
<a name="3214"><q-n>     3214  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"or"</q-l>;
<a name="3215"><q-n>     3215  </q-n></a>
<a name="3216"><q-n>     3216  </q-n></a>  <q-w>function</q-w> <q-l>"nand"</q-l> (L, R : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3217"><q-n>     3217  </q-n></a>    <q-w>variable</q-w> RESULT : <q-t>STD_ULOGIC_VECTOR</q-w>(L'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- force downto</q-m>
<a name="3218"><q-n>     3218  </q-n></a>  <q-w>begin</q-w>
<a name="3219"><q-n>     3219  </q-n></a>    <q-w>if</q-w> (L'<q-a>high</q-w> = R'<q-a>high</q-w> <q-w>and</q-w> L'<q-a>low</q-w> = R'<q-a>low</q-w>) <q-w>then</q-w>
<a name="3220"><q-n>     3220  </q-n></a>      RESULT := to_sulv(L) <q-w>nand</q-w> to_sulv(R);
<a name="3221"><q-n>     3221  </q-n></a>    <q-w>else</q-w>
<a name="3222"><q-n>     3222  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3223"><q-n>     3223  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3224"><q-n>     3224  </q-n></a>        &amp; <q-l>""</q-l><q-l>"nand"</q-l><q-l>": Range error L'RANGE /= R'RANGE"</q-l>
<a name="3225"><q-n>     3225  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3226"><q-n>     3226  </q-n></a>      RESULT := (<q-w>others</q-w> =&gt; 'X');
<a name="3227"><q-n>     3227  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3228"><q-n>     3228  </q-n></a>    <q-w>return</q-w> to_ufixed(RESULT, L'<q-a>high</q-w>, L'<q-a>low</q-w>);
<a name="3229"><q-n>     3229  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"nand"</q-l>;
<a name="3230"><q-n>     3230  </q-n></a>
<a name="3231"><q-n>     3231  </q-n></a>  <q-w>function</q-w> <q-l>"nor"</q-l> (L, R : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3232"><q-n>     3232  </q-n></a>    <q-w>variable</q-w> RESULT : <q-t>STD_ULOGIC_VECTOR</q-w>(L'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- force downto</q-m>
<a name="3233"><q-n>     3233  </q-n></a>  <q-w>begin</q-w>
<a name="3234"><q-n>     3234  </q-n></a>    <q-w>if</q-w> (L'<q-a>high</q-w> = R'<q-a>high</q-w> <q-w>and</q-w> L'<q-a>low</q-w> = R'<q-a>low</q-w>) <q-w>then</q-w>
<a name="3235"><q-n>     3235  </q-n></a>      RESULT := to_sulv(L) <q-w>nor</q-w> to_sulv(R);
<a name="3236"><q-n>     3236  </q-n></a>    <q-w>else</q-w>
<a name="3237"><q-n>     3237  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3238"><q-n>     3238  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3239"><q-n>     3239  </q-n></a>        &amp; <q-l>""</q-l><q-l>"nor"</q-l><q-l>": Range error L'RANGE /= R'RANGE"</q-l>
<a name="3240"><q-n>     3240  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3241"><q-n>     3241  </q-n></a>      RESULT := (<q-w>others</q-w> =&gt; 'X');
<a name="3242"><q-n>     3242  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3243"><q-n>     3243  </q-n></a>    <q-w>return</q-w> to_ufixed(RESULT, L'<q-a>high</q-w>, L'<q-a>low</q-w>);
<a name="3244"><q-n>     3244  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"nor"</q-l>;
<a name="3245"><q-n>     3245  </q-n></a>
<a name="3246"><q-n>     3246  </q-n></a>  <q-w>function</q-w> <q-l>"xor"</q-l> (L, R : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3247"><q-n>     3247  </q-n></a>    <q-w>variable</q-w> RESULT : <q-t>STD_ULOGIC_VECTOR</q-w>(L'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- force downto</q-m>
<a name="3248"><q-n>     3248  </q-n></a>  <q-w>begin</q-w>
<a name="3249"><q-n>     3249  </q-n></a>    <q-w>if</q-w> (L'<q-a>high</q-w> = R'<q-a>high</q-w> <q-w>and</q-w> L'<q-a>low</q-w> = R'<q-a>low</q-w>) <q-w>then</q-w>
<a name="3250"><q-n>     3250  </q-n></a>      RESULT := to_sulv(L) <q-w>xor</q-w> to_sulv(R);
<a name="3251"><q-n>     3251  </q-n></a>    <q-w>else</q-w>
<a name="3252"><q-n>     3252  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3253"><q-n>     3253  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3254"><q-n>     3254  </q-n></a>        &amp; <q-l>""</q-l><q-l>"xor"</q-l><q-l>": Range error L'RANGE /= R'RANGE"</q-l>
<a name="3255"><q-n>     3255  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3256"><q-n>     3256  </q-n></a>      RESULT := (<q-w>others</q-w> =&gt; 'X');
<a name="3257"><q-n>     3257  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3258"><q-n>     3258  </q-n></a>    <q-w>return</q-w> to_ufixed(RESULT, L'<q-a>high</q-w>, L'<q-a>low</q-w>);
<a name="3259"><q-n>     3259  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"xor"</q-l>;
<a name="3260"><q-n>     3260  </q-n></a>
<a name="3261"><q-n>     3261  </q-n></a>  <q-w>function</q-w> <q-l>"xnor"</q-l> (L, R : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3262"><q-n>     3262  </q-n></a>    <q-w>variable</q-w> RESULT : <q-t>STD_ULOGIC_VECTOR</q-w>(L'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- force downto</q-m>
<a name="3263"><q-n>     3263  </q-n></a>  <q-w>begin</q-w>
<a name="3264"><q-n>     3264  </q-n></a>    <q-w>if</q-w> (L'<q-a>high</q-w> = R'<q-a>high</q-w> <q-w>and</q-w> L'<q-a>low</q-w> = R'<q-a>low</q-w>) <q-w>then</q-w>
<a name="3265"><q-n>     3265  </q-n></a>      RESULT := to_sulv(L) <q-w>xnor</q-w> to_sulv(R);
<a name="3266"><q-n>     3266  </q-n></a>    <q-w>else</q-w>
<a name="3267"><q-n>     3267  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3268"><q-n>     3268  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3269"><q-n>     3269  </q-n></a>        &amp; <q-l>""</q-l><q-l>"xnor"</q-l><q-l>": Range error L'RANGE /= R'RANGE"</q-l>
<a name="3270"><q-n>     3270  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3271"><q-n>     3271  </q-n></a>      RESULT := (<q-w>others</q-w> =&gt; 'X');
<a name="3272"><q-n>     3272  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3273"><q-n>     3273  </q-n></a>    <q-w>return</q-w> to_ufixed(RESULT, L'<q-a>high</q-w>, L'<q-a>low</q-w>);
<a name="3274"><q-n>     3274  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"xnor"</q-l>;
<a name="3275"><q-n>     3275  </q-n></a>
<a name="3276"><q-n>     3276  </q-n></a>  <q-w>function</q-w> <q-l>"not"</q-l> (L : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3277"><q-n>     3277  </q-n></a>    <q-w>variable</q-w> RESULT : <q-t>STD_ULOGIC_VECTOR</q-w>(L'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- force downto</q-m>
<a name="3278"><q-n>     3278  </q-n></a>  <q-w>begin</q-w>
<a name="3279"><q-n>     3279  </q-n></a>    RESULT := <q-w>not</q-w> to_sulv(L);
<a name="3280"><q-n>     3280  </q-n></a>    <q-w>return</q-w> to_sfixed(RESULT, L'<q-a>high</q-w>, L'<q-a>low</q-w>);
<a name="3281"><q-n>     3281  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"not"</q-l>;
<a name="3282"><q-n>     3282  </q-n></a>
<a name="3283"><q-n>     3283  </q-n></a>  <q-w>function</q-w> <q-l>"and"</q-l> (L, R : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3284"><q-n>     3284  </q-n></a>    <q-w>variable</q-w> RESULT : <q-t>STD_ULOGIC_VECTOR</q-w>(L'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- force downto</q-m>
<a name="3285"><q-n>     3285  </q-n></a>  <q-w>begin</q-w>
<a name="3286"><q-n>     3286  </q-n></a>    <q-w>if</q-w> (L'<q-a>high</q-w> = R'<q-a>high</q-w> <q-w>and</q-w> L'<q-a>low</q-w> = R'<q-a>low</q-w>) <q-w>then</q-w>
<a name="3287"><q-n>     3287  </q-n></a>      RESULT := to_sulv(L) <q-w>and</q-w> to_sulv(R);
<a name="3288"><q-n>     3288  </q-n></a>    <q-w>else</q-w>
<a name="3289"><q-n>     3289  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3290"><q-n>     3290  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3291"><q-n>     3291  </q-n></a>        &amp; <q-l>""</q-l><q-l>"and"</q-l><q-l>": Range error L'RANGE /= R'RANGE"</q-l>
<a name="3292"><q-n>     3292  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3293"><q-n>     3293  </q-n></a>      RESULT := (<q-w>others</q-w> =&gt; 'X');
<a name="3294"><q-n>     3294  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3295"><q-n>     3295  </q-n></a>    <q-w>return</q-w> to_sfixed(RESULT, L'<q-a>high</q-w>, L'<q-a>low</q-w>);
<a name="3296"><q-n>     3296  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"and"</q-l>;
<a name="3297"><q-n>     3297  </q-n></a>
<a name="3298"><q-n>     3298  </q-n></a>  <q-w>function</q-w> <q-l>"or"</q-l> (L, R : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3299"><q-n>     3299  </q-n></a>    <q-w>variable</q-w> RESULT : <q-t>STD_ULOGIC_VECTOR</q-w>(L'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- force downto</q-m>
<a name="3300"><q-n>     3300  </q-n></a>  <q-w>begin</q-w>
<a name="3301"><q-n>     3301  </q-n></a>    <q-w>if</q-w> (L'<q-a>high</q-w> = R'<q-a>high</q-w> <q-w>and</q-w> L'<q-a>low</q-w> = R'<q-a>low</q-w>) <q-w>then</q-w>
<a name="3302"><q-n>     3302  </q-n></a>      RESULT := to_sulv(L) <q-w>or</q-w> to_sulv(R);
<a name="3303"><q-n>     3303  </q-n></a>    <q-w>else</q-w>
<a name="3304"><q-n>     3304  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3305"><q-n>     3305  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3306"><q-n>     3306  </q-n></a>        &amp; <q-l>""</q-l><q-l>"or"</q-l><q-l>": Range error L'RANGE /= R'RANGE"</q-l>
<a name="3307"><q-n>     3307  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3308"><q-n>     3308  </q-n></a>      RESULT := (<q-w>others</q-w> =&gt; 'X');
<a name="3309"><q-n>     3309  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3310"><q-n>     3310  </q-n></a>    <q-w>return</q-w> to_sfixed(RESULT, L'<q-a>high</q-w>, L'<q-a>low</q-w>);
<a name="3311"><q-n>     3311  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"or"</q-l>;
<a name="3312"><q-n>     3312  </q-n></a>
<a name="3313"><q-n>     3313  </q-n></a>  <q-w>function</q-w> <q-l>"nand"</q-l> (L, R : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3314"><q-n>     3314  </q-n></a>    <q-w>variable</q-w> RESULT : <q-t>STD_ULOGIC_VECTOR</q-w>(L'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- force downto</q-m>
<a name="3315"><q-n>     3315  </q-n></a>  <q-w>begin</q-w>
<a name="3316"><q-n>     3316  </q-n></a>    <q-w>if</q-w> (L'<q-a>high</q-w> = R'<q-a>high</q-w> <q-w>and</q-w> L'<q-a>low</q-w> = R'<q-a>low</q-w>) <q-w>then</q-w>
<a name="3317"><q-n>     3317  </q-n></a>      RESULT := to_sulv(L) <q-w>nand</q-w> to_sulv(R);
<a name="3318"><q-n>     3318  </q-n></a>    <q-w>else</q-w>
<a name="3319"><q-n>     3319  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3320"><q-n>     3320  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3321"><q-n>     3321  </q-n></a>        &amp; <q-l>""</q-l><q-l>"nand"</q-l><q-l>": Range error L'RANGE /= R'RANGE"</q-l>
<a name="3322"><q-n>     3322  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3323"><q-n>     3323  </q-n></a>      RESULT := (<q-w>others</q-w> =&gt; 'X');
<a name="3324"><q-n>     3324  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3325"><q-n>     3325  </q-n></a>    <q-w>return</q-w> to_sfixed(RESULT, L'<q-a>high</q-w>, L'<q-a>low</q-w>);
<a name="3326"><q-n>     3326  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"nand"</q-l>;
<a name="3327"><q-n>     3327  </q-n></a>
<a name="3328"><q-n>     3328  </q-n></a>  <q-w>function</q-w> <q-l>"nor"</q-l> (L, R : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3329"><q-n>     3329  </q-n></a>    <q-w>variable</q-w> RESULT : <q-t>STD_ULOGIC_VECTOR</q-w>(L'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- force downto</q-m>
<a name="3330"><q-n>     3330  </q-n></a>  <q-w>begin</q-w>
<a name="3331"><q-n>     3331  </q-n></a>    <q-w>if</q-w> (L'<q-a>high</q-w> = R'<q-a>high</q-w> <q-w>and</q-w> L'<q-a>low</q-w> = R'<q-a>low</q-w>) <q-w>then</q-w>
<a name="3332"><q-n>     3332  </q-n></a>      RESULT := to_sulv(L) <q-w>nor</q-w> to_sulv(R);
<a name="3333"><q-n>     3333  </q-n></a>    <q-w>else</q-w>
<a name="3334"><q-n>     3334  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3335"><q-n>     3335  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3336"><q-n>     3336  </q-n></a>        &amp; <q-l>""</q-l><q-l>"nor"</q-l><q-l>": Range error L'RANGE /= R'RANGE"</q-l>
<a name="3337"><q-n>     3337  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3338"><q-n>     3338  </q-n></a>      RESULT := (<q-w>others</q-w> =&gt; 'X');
<a name="3339"><q-n>     3339  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3340"><q-n>     3340  </q-n></a>    <q-w>return</q-w> to_sfixed(RESULT, L'<q-a>high</q-w>, L'<q-a>low</q-w>);
<a name="3341"><q-n>     3341  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"nor"</q-l>;
<a name="3342"><q-n>     3342  </q-n></a>
<a name="3343"><q-n>     3343  </q-n></a>  <q-w>function</q-w> <q-l>"xor"</q-l> (L, R : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3344"><q-n>     3344  </q-n></a>    <q-w>variable</q-w> RESULT : <q-t>STD_ULOGIC_VECTOR</q-w>(L'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- force downto</q-m>
<a name="3345"><q-n>     3345  </q-n></a>  <q-w>begin</q-w>
<a name="3346"><q-n>     3346  </q-n></a>    <q-w>if</q-w> (L'<q-a>high</q-w> = R'<q-a>high</q-w> <q-w>and</q-w> L'<q-a>low</q-w> = R'<q-a>low</q-w>) <q-w>then</q-w>
<a name="3347"><q-n>     3347  </q-n></a>      RESULT := to_sulv(L) <q-w>xor</q-w> to_sulv(R);
<a name="3348"><q-n>     3348  </q-n></a>    <q-w>else</q-w>
<a name="3349"><q-n>     3349  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3350"><q-n>     3350  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3351"><q-n>     3351  </q-n></a>        &amp; <q-l>""</q-l><q-l>"xor"</q-l><q-l>": Range error L'RANGE /= R'RANGE"</q-l>
<a name="3352"><q-n>     3352  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3353"><q-n>     3353  </q-n></a>      RESULT := (<q-w>others</q-w> =&gt; 'X');
<a name="3354"><q-n>     3354  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3355"><q-n>     3355  </q-n></a>    <q-w>return</q-w> to_sfixed(RESULT, L'<q-a>high</q-w>, L'<q-a>low</q-w>);
<a name="3356"><q-n>     3356  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"xor"</q-l>;
<a name="3357"><q-n>     3357  </q-n></a>
<a name="3358"><q-n>     3358  </q-n></a>  <q-w>function</q-w> <q-l>"xnor"</q-l> (L, R : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3359"><q-n>     3359  </q-n></a>    <q-w>variable</q-w> RESULT : <q-t>STD_ULOGIC_VECTOR</q-w>(L'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- force downto</q-m>
<a name="3360"><q-n>     3360  </q-n></a>  <q-w>begin</q-w>
<a name="3361"><q-n>     3361  </q-n></a>    <q-w>if</q-w> (L'<q-a>high</q-w> = R'<q-a>high</q-w> <q-w>and</q-w> L'<q-a>low</q-w> = R'<q-a>low</q-w>) <q-w>then</q-w>
<a name="3362"><q-n>     3362  </q-n></a>      RESULT := to_sulv(L) <q-w>xnor</q-w> to_sulv(R);
<a name="3363"><q-n>     3363  </q-n></a>    <q-w>else</q-w>
<a name="3364"><q-n>     3364  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3365"><q-n>     3365  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3366"><q-n>     3366  </q-n></a>        &amp; <q-l>""</q-l><q-l>"xnor"</q-l><q-l>": Range error L'RANGE /= R'RANGE"</q-l>
<a name="3367"><q-n>     3367  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3368"><q-n>     3368  </q-n></a>      RESULT := (<q-w>others</q-w> =&gt; 'X');
<a name="3369"><q-n>     3369  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3370"><q-n>     3370  </q-n></a>    <q-w>return</q-w> to_sfixed(RESULT, L'<q-a>high</q-w>, L'<q-a>low</q-w>);
<a name="3371"><q-n>     3371  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"xnor"</q-l>;
<a name="3372"><q-n>     3372  </q-n></a>
<a name="3373"><q-n>     3373  </q-n></a>  <q-m>-- Vector and std_ulogic functions, same as functions in numeric_std</q-m>
<a name="3374"><q-n>     3374  </q-n></a>  <q-w>function</q-w> <q-l>"and"</q-l> (L : <q-t>STD_ULOGIC</q-w>; R : UNRESOLVED_ufixed)
<a name="3375"><q-n>     3375  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3376"><q-n>     3376  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (R'<q-w>range</q-w>);
<a name="3377"><q-n>     3377  </q-n></a>  <q-w>begin</q-w>
<a name="3378"><q-n>     3378  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3379"><q-n>     3379  </q-n></a>      result(i) := L <q-w>and</q-w> R(i);
<a name="3380"><q-n>     3380  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3381"><q-n>     3381  </q-n></a>    <q-w>return</q-w> result;
<a name="3382"><q-n>     3382  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"and"</q-l>;
<a name="3383"><q-n>     3383  </q-n></a>
<a name="3384"><q-n>     3384  </q-n></a>  <q-w>function</q-w> <q-l>"and"</q-l> (L : UNRESOLVED_ufixed; R : <q-t>STD_ULOGIC</q-w>)
<a name="3385"><q-n>     3385  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3386"><q-n>     3386  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (L'<q-w>range</q-w>);
<a name="3387"><q-n>     3387  </q-n></a>  <q-w>begin</q-w>
<a name="3388"><q-n>     3388  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3389"><q-n>     3389  </q-n></a>      result(i) := L(i) <q-w>and</q-w> R;
<a name="3390"><q-n>     3390  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3391"><q-n>     3391  </q-n></a>    <q-w>return</q-w> result;
<a name="3392"><q-n>     3392  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"and"</q-l>;
<a name="3393"><q-n>     3393  </q-n></a>
<a name="3394"><q-n>     3394  </q-n></a>  <q-w>function</q-w> <q-l>"or"</q-l> (L : <q-t>STD_ULOGIC</q-w>; R : UNRESOLVED_ufixed)
<a name="3395"><q-n>     3395  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3396"><q-n>     3396  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (R'<q-w>range</q-w>);
<a name="3397"><q-n>     3397  </q-n></a>  <q-w>begin</q-w>
<a name="3398"><q-n>     3398  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3399"><q-n>     3399  </q-n></a>      result(i) := L <q-w>or</q-w> R(i);
<a name="3400"><q-n>     3400  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3401"><q-n>     3401  </q-n></a>    <q-w>return</q-w> result;
<a name="3402"><q-n>     3402  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"or"</q-l>;
<a name="3403"><q-n>     3403  </q-n></a>
<a name="3404"><q-n>     3404  </q-n></a>  <q-w>function</q-w> <q-l>"or"</q-l> (L : UNRESOLVED_ufixed; R : <q-t>STD_ULOGIC</q-w>)
<a name="3405"><q-n>     3405  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3406"><q-n>     3406  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (L'<q-w>range</q-w>);
<a name="3407"><q-n>     3407  </q-n></a>  <q-w>begin</q-w>
<a name="3408"><q-n>     3408  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3409"><q-n>     3409  </q-n></a>      result(i) := L(i) <q-w>or</q-w> R;
<a name="3410"><q-n>     3410  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3411"><q-n>     3411  </q-n></a>    <q-w>return</q-w> result;
<a name="3412"><q-n>     3412  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"or"</q-l>;
<a name="3413"><q-n>     3413  </q-n></a>
<a name="3414"><q-n>     3414  </q-n></a>  <q-w>function</q-w> <q-l>"nand"</q-l> (L : <q-t>STD_ULOGIC</q-w>; R : UNRESOLVED_ufixed)
<a name="3415"><q-n>     3415  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3416"><q-n>     3416  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (R'<q-w>range</q-w>);
<a name="3417"><q-n>     3417  </q-n></a>  <q-w>begin</q-w>
<a name="3418"><q-n>     3418  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3419"><q-n>     3419  </q-n></a>      result(i) := L <q-w>nand</q-w> R(i);
<a name="3420"><q-n>     3420  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3421"><q-n>     3421  </q-n></a>    <q-w>return</q-w> result;
<a name="3422"><q-n>     3422  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"nand"</q-l>;
<a name="3423"><q-n>     3423  </q-n></a>
<a name="3424"><q-n>     3424  </q-n></a>  <q-w>function</q-w> <q-l>"nand"</q-l> (L : UNRESOLVED_ufixed; R : <q-t>STD_ULOGIC</q-w>)
<a name="3425"><q-n>     3425  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3426"><q-n>     3426  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (L'<q-w>range</q-w>);
<a name="3427"><q-n>     3427  </q-n></a>  <q-w>begin</q-w>
<a name="3428"><q-n>     3428  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3429"><q-n>     3429  </q-n></a>      result(i) := L(i) <q-w>nand</q-w> R;
<a name="3430"><q-n>     3430  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3431"><q-n>     3431  </q-n></a>    <q-w>return</q-w> result;
<a name="3432"><q-n>     3432  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"nand"</q-l>;
<a name="3433"><q-n>     3433  </q-n></a>
<a name="3434"><q-n>     3434  </q-n></a>  <q-w>function</q-w> <q-l>"nor"</q-l> (L : <q-t>STD_ULOGIC</q-w>; R : UNRESOLVED_ufixed)
<a name="3435"><q-n>     3435  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3436"><q-n>     3436  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (R'<q-w>range</q-w>);
<a name="3437"><q-n>     3437  </q-n></a>  <q-w>begin</q-w>
<a name="3438"><q-n>     3438  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3439"><q-n>     3439  </q-n></a>      result(i) := L <q-w>nor</q-w> R(i);
<a name="3440"><q-n>     3440  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3441"><q-n>     3441  </q-n></a>    <q-w>return</q-w> result;
<a name="3442"><q-n>     3442  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"nor"</q-l>;
<a name="3443"><q-n>     3443  </q-n></a>
<a name="3444"><q-n>     3444  </q-n></a>  <q-w>function</q-w> <q-l>"nor"</q-l> (L : UNRESOLVED_ufixed; R : <q-t>STD_ULOGIC</q-w>)
<a name="3445"><q-n>     3445  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3446"><q-n>     3446  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (L'<q-w>range</q-w>);
<a name="3447"><q-n>     3447  </q-n></a>  <q-w>begin</q-w>
<a name="3448"><q-n>     3448  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3449"><q-n>     3449  </q-n></a>      result(i) := L(i) <q-w>nor</q-w> R;
<a name="3450"><q-n>     3450  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3451"><q-n>     3451  </q-n></a>    <q-w>return</q-w> result;
<a name="3452"><q-n>     3452  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"nor"</q-l>;
<a name="3453"><q-n>     3453  </q-n></a>
<a name="3454"><q-n>     3454  </q-n></a>  <q-w>function</q-w> <q-l>"xor"</q-l> (L : <q-t>STD_ULOGIC</q-w>; R : UNRESOLVED_ufixed)
<a name="3455"><q-n>     3455  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3456"><q-n>     3456  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (R'<q-w>range</q-w>);
<a name="3457"><q-n>     3457  </q-n></a>  <q-w>begin</q-w>
<a name="3458"><q-n>     3458  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3459"><q-n>     3459  </q-n></a>      result(i) := L <q-w>xor</q-w> R(i);
<a name="3460"><q-n>     3460  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3461"><q-n>     3461  </q-n></a>    <q-w>return</q-w> result;
<a name="3462"><q-n>     3462  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"xor"</q-l>;
<a name="3463"><q-n>     3463  </q-n></a>
<a name="3464"><q-n>     3464  </q-n></a>  <q-w>function</q-w> <q-l>"xor"</q-l> (L : UNRESOLVED_ufixed; R : <q-t>STD_ULOGIC</q-w>)
<a name="3465"><q-n>     3465  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3466"><q-n>     3466  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (L'<q-w>range</q-w>);
<a name="3467"><q-n>     3467  </q-n></a>  <q-w>begin</q-w>
<a name="3468"><q-n>     3468  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3469"><q-n>     3469  </q-n></a>      result(i) := L(i) <q-w>xor</q-w> R;
<a name="3470"><q-n>     3470  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3471"><q-n>     3471  </q-n></a>    <q-w>return</q-w> result;
<a name="3472"><q-n>     3472  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"xor"</q-l>;
<a name="3473"><q-n>     3473  </q-n></a>
<a name="3474"><q-n>     3474  </q-n></a>  <q-w>function</q-w> <q-l>"xnor"</q-l> (L : <q-t>STD_ULOGIC</q-w>; R : UNRESOLVED_ufixed)
<a name="3475"><q-n>     3475  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3476"><q-n>     3476  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (R'<q-w>range</q-w>);
<a name="3477"><q-n>     3477  </q-n></a>  <q-w>begin</q-w>
<a name="3478"><q-n>     3478  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3479"><q-n>     3479  </q-n></a>      result(i) := L <q-w>xnor</q-w> R(i);
<a name="3480"><q-n>     3480  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3481"><q-n>     3481  </q-n></a>    <q-w>return</q-w> result;
<a name="3482"><q-n>     3482  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"xnor"</q-l>;
<a name="3483"><q-n>     3483  </q-n></a>
<a name="3484"><q-n>     3484  </q-n></a>  <q-w>function</q-w> <q-l>"xnor"</q-l> (L : UNRESOLVED_ufixed; R : <q-t>STD_ULOGIC</q-w>)
<a name="3485"><q-n>     3485  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="3486"><q-n>     3486  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (L'<q-w>range</q-w>);
<a name="3487"><q-n>     3487  </q-n></a>  <q-w>begin</q-w>
<a name="3488"><q-n>     3488  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3489"><q-n>     3489  </q-n></a>      result(i) := L(i) <q-w>xnor</q-w> R;
<a name="3490"><q-n>     3490  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3491"><q-n>     3491  </q-n></a>    <q-w>return</q-w> result;
<a name="3492"><q-n>     3492  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"xnor"</q-l>;
<a name="3493"><q-n>     3493  </q-n></a>
<a name="3494"><q-n>     3494  </q-n></a>  <q-w>function</q-w> <q-l>"and"</q-l> (L : <q-t>STD_ULOGIC</q-w>; R : UNRESOLVED_sfixed)
<a name="3495"><q-n>     3495  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3496"><q-n>     3496  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (R'<q-w>range</q-w>);
<a name="3497"><q-n>     3497  </q-n></a>  <q-w>begin</q-w>
<a name="3498"><q-n>     3498  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3499"><q-n>     3499  </q-n></a>      result(i) := L <q-w>and</q-w> R(i);
<a name="3500"><q-n>     3500  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3501"><q-n>     3501  </q-n></a>    <q-w>return</q-w> result;
<a name="3502"><q-n>     3502  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"and"</q-l>;
<a name="3503"><q-n>     3503  </q-n></a>
<a name="3504"><q-n>     3504  </q-n></a>  <q-w>function</q-w> <q-l>"and"</q-l> (L : UNRESOLVED_sfixed; R : <q-t>STD_ULOGIC</q-w>)
<a name="3505"><q-n>     3505  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3506"><q-n>     3506  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (L'<q-w>range</q-w>);
<a name="3507"><q-n>     3507  </q-n></a>  <q-w>begin</q-w>
<a name="3508"><q-n>     3508  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3509"><q-n>     3509  </q-n></a>      result(i) := L(i) <q-w>and</q-w> R;
<a name="3510"><q-n>     3510  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3511"><q-n>     3511  </q-n></a>    <q-w>return</q-w> result;
<a name="3512"><q-n>     3512  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"and"</q-l>;
<a name="3513"><q-n>     3513  </q-n></a>
<a name="3514"><q-n>     3514  </q-n></a>  <q-w>function</q-w> <q-l>"or"</q-l> (L : <q-t>STD_ULOGIC</q-w>; R : UNRESOLVED_sfixed)
<a name="3515"><q-n>     3515  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3516"><q-n>     3516  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (R'<q-w>range</q-w>);
<a name="3517"><q-n>     3517  </q-n></a>  <q-w>begin</q-w>
<a name="3518"><q-n>     3518  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3519"><q-n>     3519  </q-n></a>      result(i) := L <q-w>or</q-w> R(i);
<a name="3520"><q-n>     3520  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3521"><q-n>     3521  </q-n></a>    <q-w>return</q-w> result;
<a name="3522"><q-n>     3522  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"or"</q-l>;
<a name="3523"><q-n>     3523  </q-n></a>
<a name="3524"><q-n>     3524  </q-n></a>  <q-w>function</q-w> <q-l>"or"</q-l> (L : UNRESOLVED_sfixed; R : <q-t>STD_ULOGIC</q-w>)
<a name="3525"><q-n>     3525  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3526"><q-n>     3526  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (L'<q-w>range</q-w>);
<a name="3527"><q-n>     3527  </q-n></a>  <q-w>begin</q-w>
<a name="3528"><q-n>     3528  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3529"><q-n>     3529  </q-n></a>      result(i) := L(i) <q-w>or</q-w> R;
<a name="3530"><q-n>     3530  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3531"><q-n>     3531  </q-n></a>    <q-w>return</q-w> result;
<a name="3532"><q-n>     3532  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"or"</q-l>;
<a name="3533"><q-n>     3533  </q-n></a>
<a name="3534"><q-n>     3534  </q-n></a>  <q-w>function</q-w> <q-l>"nand"</q-l> (L : <q-t>STD_ULOGIC</q-w>; R : UNRESOLVED_sfixed)
<a name="3535"><q-n>     3535  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3536"><q-n>     3536  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (R'<q-w>range</q-w>);
<a name="3537"><q-n>     3537  </q-n></a>  <q-w>begin</q-w>
<a name="3538"><q-n>     3538  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3539"><q-n>     3539  </q-n></a>      result(i) := L <q-w>nand</q-w> R(i);
<a name="3540"><q-n>     3540  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3541"><q-n>     3541  </q-n></a>    <q-w>return</q-w> result;
<a name="3542"><q-n>     3542  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"nand"</q-l>;
<a name="3543"><q-n>     3543  </q-n></a>
<a name="3544"><q-n>     3544  </q-n></a>  <q-w>function</q-w> <q-l>"nand"</q-l> (L : UNRESOLVED_sfixed; R : <q-t>STD_ULOGIC</q-w>)
<a name="3545"><q-n>     3545  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3546"><q-n>     3546  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (L'<q-w>range</q-w>);
<a name="3547"><q-n>     3547  </q-n></a>  <q-w>begin</q-w>
<a name="3548"><q-n>     3548  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3549"><q-n>     3549  </q-n></a>      result(i) := L(i) <q-w>nand</q-w> R;
<a name="3550"><q-n>     3550  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3551"><q-n>     3551  </q-n></a>    <q-w>return</q-w> result;
<a name="3552"><q-n>     3552  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"nand"</q-l>;
<a name="3553"><q-n>     3553  </q-n></a>
<a name="3554"><q-n>     3554  </q-n></a>  <q-w>function</q-w> <q-l>"nor"</q-l> (L : <q-t>STD_ULOGIC</q-w>; R : UNRESOLVED_sfixed)
<a name="3555"><q-n>     3555  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3556"><q-n>     3556  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (R'<q-w>range</q-w>);
<a name="3557"><q-n>     3557  </q-n></a>  <q-w>begin</q-w>
<a name="3558"><q-n>     3558  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3559"><q-n>     3559  </q-n></a>      result(i) := L <q-w>nor</q-w> R(i);
<a name="3560"><q-n>     3560  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3561"><q-n>     3561  </q-n></a>    <q-w>return</q-w> result;
<a name="3562"><q-n>     3562  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"nor"</q-l>;
<a name="3563"><q-n>     3563  </q-n></a>
<a name="3564"><q-n>     3564  </q-n></a>  <q-w>function</q-w> <q-l>"nor"</q-l> (L : UNRESOLVED_sfixed; R : <q-t>STD_ULOGIC</q-w>)
<a name="3565"><q-n>     3565  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3566"><q-n>     3566  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (L'<q-w>range</q-w>);
<a name="3567"><q-n>     3567  </q-n></a>  <q-w>begin</q-w>
<a name="3568"><q-n>     3568  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3569"><q-n>     3569  </q-n></a>      result(i) := L(i) <q-w>nor</q-w> R;
<a name="3570"><q-n>     3570  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3571"><q-n>     3571  </q-n></a>    <q-w>return</q-w> result;
<a name="3572"><q-n>     3572  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"nor"</q-l>;
<a name="3573"><q-n>     3573  </q-n></a>
<a name="3574"><q-n>     3574  </q-n></a>  <q-w>function</q-w> <q-l>"xor"</q-l> (L : <q-t>STD_ULOGIC</q-w>; R : UNRESOLVED_sfixed)
<a name="3575"><q-n>     3575  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3576"><q-n>     3576  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (R'<q-w>range</q-w>);
<a name="3577"><q-n>     3577  </q-n></a>  <q-w>begin</q-w>
<a name="3578"><q-n>     3578  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3579"><q-n>     3579  </q-n></a>      result(i) := L <q-w>xor</q-w> R(i);
<a name="3580"><q-n>     3580  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3581"><q-n>     3581  </q-n></a>    <q-w>return</q-w> result;
<a name="3582"><q-n>     3582  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"xor"</q-l>;
<a name="3583"><q-n>     3583  </q-n></a>
<a name="3584"><q-n>     3584  </q-n></a>  <q-w>function</q-w> <q-l>"xor"</q-l> (L : UNRESOLVED_sfixed; R : <q-t>STD_ULOGIC</q-w>)
<a name="3585"><q-n>     3585  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3586"><q-n>     3586  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (L'<q-w>range</q-w>);
<a name="3587"><q-n>     3587  </q-n></a>  <q-w>begin</q-w>
<a name="3588"><q-n>     3588  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3589"><q-n>     3589  </q-n></a>      result(i) := L(i) <q-w>xor</q-w> R;
<a name="3590"><q-n>     3590  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3591"><q-n>     3591  </q-n></a>    <q-w>return</q-w> result;
<a name="3592"><q-n>     3592  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"xor"</q-l>;
<a name="3593"><q-n>     3593  </q-n></a>
<a name="3594"><q-n>     3594  </q-n></a>  <q-w>function</q-w> <q-l>"xnor"</q-l> (L : <q-t>STD_ULOGIC</q-w>; R : UNRESOLVED_sfixed)
<a name="3595"><q-n>     3595  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3596"><q-n>     3596  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (R'<q-w>range</q-w>);
<a name="3597"><q-n>     3597  </q-n></a>  <q-w>begin</q-w>
<a name="3598"><q-n>     3598  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3599"><q-n>     3599  </q-n></a>      result(i) := L <q-w>xnor</q-w> R(i);
<a name="3600"><q-n>     3600  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3601"><q-n>     3601  </q-n></a>    <q-w>return</q-w> result;
<a name="3602"><q-n>     3602  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"xnor"</q-l>;
<a name="3603"><q-n>     3603  </q-n></a>
<a name="3604"><q-n>     3604  </q-n></a>  <q-w>function</q-w> <q-l>"xnor"</q-l> (L : UNRESOLVED_sfixed; R : <q-t>STD_ULOGIC</q-w>)
<a name="3605"><q-n>     3605  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="3606"><q-n>     3606  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (L'<q-w>range</q-w>);
<a name="3607"><q-n>     3607  </q-n></a>  <q-w>begin</q-w>
<a name="3608"><q-n>     3608  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> result'<q-w>range</q-w> <q-w>loop</q-w>
<a name="3609"><q-n>     3609  </q-n></a>      result(i) := L(i) <q-w>xnor</q-w> R;
<a name="3610"><q-n>     3610  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="3611"><q-n>     3611  </q-n></a>    <q-w>return</q-w> result;
<a name="3612"><q-n>     3612  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"xnor"</q-l>;
<a name="3613"><q-n>     3613  </q-n></a>
<a name="3614"><q-n>     3614  </q-n></a>  <q-m>-- Reduction operator_reduces</q-m>
<a name="3615"><q-n>     3615  </q-n></a>  <q-w>function</q-w> and_reduce (l : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3616"><q-n>     3616  </q-n></a>  <q-w>begin</q-w>
<a name="3617"><q-n>     3617  </q-n></a>    <q-w>return</q-w> and_reduce (to_sulv(l));
<a name="3618"><q-n>     3618  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> and_reduce;
<a name="3619"><q-n>     3619  </q-n></a>
<a name="3620"><q-n>     3620  </q-n></a>  <q-w>function</q-w> nand_reduce (l : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3621"><q-n>     3621  </q-n></a>  <q-w>begin</q-w>
<a name="3622"><q-n>     3622  </q-n></a>    <q-w>return</q-w> nand_reduce (to_sulv(l));
<a name="3623"><q-n>     3623  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> nand_reduce;
<a name="3624"><q-n>     3624  </q-n></a>
<a name="3625"><q-n>     3625  </q-n></a>  <q-w>function</q-w> or_reduce (l : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3626"><q-n>     3626  </q-n></a>  <q-w>begin</q-w>
<a name="3627"><q-n>     3627  </q-n></a>    <q-w>return</q-w> or_reduce (to_sulv(l));
<a name="3628"><q-n>     3628  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> or_reduce;
<a name="3629"><q-n>     3629  </q-n></a>
<a name="3630"><q-n>     3630  </q-n></a>  <q-w>function</q-w> nor_reduce (l : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3631"><q-n>     3631  </q-n></a>  <q-w>begin</q-w>
<a name="3632"><q-n>     3632  </q-n></a>    <q-w>return</q-w> nor_reduce (to_sulv(l));
<a name="3633"><q-n>     3633  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> nor_reduce;
<a name="3634"><q-n>     3634  </q-n></a>
<a name="3635"><q-n>     3635  </q-n></a>  <q-w>function</q-w> xor_reduce (l : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3636"><q-n>     3636  </q-n></a>  <q-w>begin</q-w>
<a name="3637"><q-n>     3637  </q-n></a>    <q-w>return</q-w> xor_reduce (to_sulv(l));
<a name="3638"><q-n>     3638  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> xor_reduce;
<a name="3639"><q-n>     3639  </q-n></a>
<a name="3640"><q-n>     3640  </q-n></a>  <q-w>function</q-w> xnor_reduce (l : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3641"><q-n>     3641  </q-n></a>  <q-w>begin</q-w>
<a name="3642"><q-n>     3642  </q-n></a>    <q-w>return</q-w> xnor_reduce (to_sulv(l));
<a name="3643"><q-n>     3643  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> xnor_reduce;
<a name="3644"><q-n>     3644  </q-n></a>
<a name="3645"><q-n>     3645  </q-n></a>  <q-w>function</q-w> and_reduce (l : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3646"><q-n>     3646  </q-n></a>  <q-w>begin</q-w>
<a name="3647"><q-n>     3647  </q-n></a>    <q-w>return</q-w> and_reduce (to_sulv(l));
<a name="3648"><q-n>     3648  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> and_reduce;
<a name="3649"><q-n>     3649  </q-n></a>
<a name="3650"><q-n>     3650  </q-n></a>  <q-w>function</q-w> nand_reduce (l : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3651"><q-n>     3651  </q-n></a>  <q-w>begin</q-w>
<a name="3652"><q-n>     3652  </q-n></a>    <q-w>return</q-w> nand_reduce (to_sulv(l));
<a name="3653"><q-n>     3653  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> nand_reduce;
<a name="3654"><q-n>     3654  </q-n></a>
<a name="3655"><q-n>     3655  </q-n></a>  <q-w>function</q-w> or_reduce (l : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3656"><q-n>     3656  </q-n></a>  <q-w>begin</q-w>
<a name="3657"><q-n>     3657  </q-n></a>    <q-w>return</q-w> or_reduce (to_sulv(l));
<a name="3658"><q-n>     3658  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> or_reduce;
<a name="3659"><q-n>     3659  </q-n></a>
<a name="3660"><q-n>     3660  </q-n></a>  <q-w>function</q-w> nor_reduce (l : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3661"><q-n>     3661  </q-n></a>  <q-w>begin</q-w>
<a name="3662"><q-n>     3662  </q-n></a>    <q-w>return</q-w> nor_reduce (to_sulv(l));
<a name="3663"><q-n>     3663  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> nor_reduce;
<a name="3664"><q-n>     3664  </q-n></a>
<a name="3665"><q-n>     3665  </q-n></a>  <q-w>function</q-w> xor_reduce (l : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3666"><q-n>     3666  </q-n></a>  <q-w>begin</q-w>
<a name="3667"><q-n>     3667  </q-n></a>    <q-w>return</q-w> xor_reduce (to_sulv(l));
<a name="3668"><q-n>     3668  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> xor_reduce;
<a name="3669"><q-n>     3669  </q-n></a>
<a name="3670"><q-n>     3670  </q-n></a>  <q-w>function</q-w> xnor_reduce (l : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3671"><q-n>     3671  </q-n></a>  <q-w>begin</q-w>
<a name="3672"><q-n>     3672  </q-n></a>    <q-w>return</q-w> xnor_reduce (to_sulv(l));
<a name="3673"><q-n>     3673  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> xnor_reduce;
<a name="3674"><q-n>     3674  </q-n></a>  <q-m>-- End reduction operator_reduces</q-m>
<a name="3675"><q-n>     3675  </q-n></a>
<a name="3676"><q-n>     3676  </q-n></a>  <q-w>function</q-w> \?=\ (L, R : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3677"><q-n>     3677  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="3678"><q-n>     3678  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="3679"><q-n>     3679  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="3680"><q-n>     3680  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3681"><q-n>     3681  </q-n></a>  <q-w>begin</q-w>  <q-m>-- ?=</q-m>
<a name="3682"><q-n>     3682  </q-n></a>    <q-w>if</q-w> ((L'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (R'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="3683"><q-n>     3683  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3684"><q-n>     3684  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3685"><q-n>     3685  </q-n></a>        &amp; <q-l>""</q-l><q-l>"?="</q-l><q-l>": null detected, returning X"</q-l>
<a name="3686"><q-n>     3686  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3687"><q-n>     3687  </q-n></a>      <q-w>return</q-w> 'X';
<a name="3688"><q-n>     3688  </q-n></a>    <q-w>else</q-w>
<a name="3689"><q-n>     3689  </q-n></a>      lresize := resize (l, left_index, right_index);
<a name="3690"><q-n>     3690  </q-n></a>      rresize := resize (r, left_index, right_index);
<a name="3691"><q-n>     3691  </q-n></a>      lslv    := to_uns (lresize);
<a name="3692"><q-n>     3692  </q-n></a>      rslv    := to_uns (rresize);
<a name="3693"><q-n>     3693  </q-n></a>      <q-w>return</q-w> \?=\ (lslv, rslv);
<a name="3694"><q-n>     3694  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3695"><q-n>     3695  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?=\;
<a name="3696"><q-n>     3696  </q-n></a>
<a name="3697"><q-n>     3697  </q-n></a>  <q-w>function</q-w> \?/=\ (L, R : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3698"><q-n>     3698  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="3699"><q-n>     3699  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="3700"><q-n>     3700  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="3701"><q-n>     3701  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3702"><q-n>     3702  </q-n></a>  <q-w>begin</q-w>  <q-m>-- ?/=</q-m>
<a name="3703"><q-n>     3703  </q-n></a>    <q-w>if</q-w> ((L'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (R'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="3704"><q-n>     3704  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3705"><q-n>     3705  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3706"><q-n>     3706  </q-n></a>        &amp; <q-l>""</q-l><q-l>"?/="</q-l><q-l>": null detected, returning X"</q-l>
<a name="3707"><q-n>     3707  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3708"><q-n>     3708  </q-n></a>      <q-w>return</q-w> 'X';
<a name="3709"><q-n>     3709  </q-n></a>    <q-w>else</q-w>
<a name="3710"><q-n>     3710  </q-n></a>      lresize := resize (l, left_index, right_index);
<a name="3711"><q-n>     3711  </q-n></a>      rresize := resize (r, left_index, right_index);
<a name="3712"><q-n>     3712  </q-n></a>      lslv    := to_uns (lresize);
<a name="3713"><q-n>     3713  </q-n></a>      rslv    := to_uns (rresize);
<a name="3714"><q-n>     3714  </q-n></a>      <q-w>return</q-w> \?/=\ (lslv, rslv);
<a name="3715"><q-n>     3715  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3716"><q-n>     3716  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?/=\;
<a name="3717"><q-n>     3717  </q-n></a>
<a name="3718"><q-n>     3718  </q-n></a>  <q-w>function</q-w> \?&gt;\ (L, R : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3719"><q-n>     3719  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="3720"><q-n>     3720  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="3721"><q-n>     3721  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="3722"><q-n>     3722  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3723"><q-n>     3723  </q-n></a>  <q-w>begin</q-w>  <q-m>-- ?&gt;</q-m>
<a name="3724"><q-n>     3724  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="3725"><q-n>     3725  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3726"><q-n>     3726  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3727"><q-n>     3727  </q-n></a>        &amp; <q-l>""</q-l><q-l>"?&gt;"</q-l><q-l>": null detected, returning X"</q-l>
<a name="3728"><q-n>     3728  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3729"><q-n>     3729  </q-n></a>      <q-w>return</q-w> 'X';
<a name="3730"><q-n>     3730  </q-n></a>    <q-w>else</q-w>
<a name="3731"><q-n>     3731  </q-n></a>      lresize := resize (l, left_index, right_index);
<a name="3732"><q-n>     3732  </q-n></a>      rresize := resize (r, left_index, right_index);
<a name="3733"><q-n>     3733  </q-n></a>      lslv    := to_uns (lresize);
<a name="3734"><q-n>     3734  </q-n></a>      rslv    := to_uns (rresize);
<a name="3735"><q-n>     3735  </q-n></a>      <q-w>return</q-w> \?&gt;\ (lslv, rslv);
<a name="3736"><q-n>     3736  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3737"><q-n>     3737  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;\;
<a name="3738"><q-n>     3738  </q-n></a>
<a name="3739"><q-n>     3739  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (L, R : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3740"><q-n>     3740  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="3741"><q-n>     3741  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="3742"><q-n>     3742  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="3743"><q-n>     3743  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3744"><q-n>     3744  </q-n></a>  <q-w>begin</q-w>  <q-m>-- ?&gt;=</q-m>
<a name="3745"><q-n>     3745  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="3746"><q-n>     3746  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3747"><q-n>     3747  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3748"><q-n>     3748  </q-n></a>        &amp; <q-l>""</q-l><q-l>"?&gt;="</q-l><q-l>": null detected, returning X"</q-l>
<a name="3749"><q-n>     3749  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3750"><q-n>     3750  </q-n></a>      <q-w>return</q-w> 'X';
<a name="3751"><q-n>     3751  </q-n></a>    <q-w>else</q-w>
<a name="3752"><q-n>     3752  </q-n></a>      lresize := resize (l, left_index, right_index);
<a name="3753"><q-n>     3753  </q-n></a>      rresize := resize (r, left_index, right_index);
<a name="3754"><q-n>     3754  </q-n></a>      lslv    := to_uns (lresize);
<a name="3755"><q-n>     3755  </q-n></a>      rslv    := to_uns (rresize);
<a name="3756"><q-n>     3756  </q-n></a>      <q-w>return</q-w> \?&gt;=\ (lslv, rslv);
<a name="3757"><q-n>     3757  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3758"><q-n>     3758  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;=\;
<a name="3759"><q-n>     3759  </q-n></a>
<a name="3760"><q-n>     3760  </q-n></a>  <q-w>function</q-w> \?&lt;\ (L, R : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3761"><q-n>     3761  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="3762"><q-n>     3762  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="3763"><q-n>     3763  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="3764"><q-n>     3764  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3765"><q-n>     3765  </q-n></a>  <q-w>begin</q-w>  <q-m>-- ?&lt;</q-m>
<a name="3766"><q-n>     3766  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="3767"><q-n>     3767  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3768"><q-n>     3768  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3769"><q-n>     3769  </q-n></a>        &amp; <q-l>""</q-l><q-l>"?&lt;"</q-l><q-l>": null detected, returning X"</q-l>
<a name="3770"><q-n>     3770  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3771"><q-n>     3771  </q-n></a>      <q-w>return</q-w> 'X';
<a name="3772"><q-n>     3772  </q-n></a>    <q-w>else</q-w>
<a name="3773"><q-n>     3773  </q-n></a>      lresize := resize (l, left_index, right_index);
<a name="3774"><q-n>     3774  </q-n></a>      rresize := resize (r, left_index, right_index);
<a name="3775"><q-n>     3775  </q-n></a>      lslv    := to_uns (lresize);
<a name="3776"><q-n>     3776  </q-n></a>      rslv    := to_uns (rresize);
<a name="3777"><q-n>     3777  </q-n></a>      <q-w>return</q-w> \?&lt;\ (lslv, rslv);
<a name="3778"><q-n>     3778  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3779"><q-n>     3779  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;\;
<a name="3780"><q-n>     3780  </q-n></a>
<a name="3781"><q-n>     3781  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (L, R : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3782"><q-n>     3782  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="3783"><q-n>     3783  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="3784"><q-n>     3784  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="3785"><q-n>     3785  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3786"><q-n>     3786  </q-n></a>  <q-w>begin</q-w>  <q-m>-- ?&lt;=</q-m>
<a name="3787"><q-n>     3787  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="3788"><q-n>     3788  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3789"><q-n>     3789  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3790"><q-n>     3790  </q-n></a>        &amp; <q-l>""</q-l><q-l>"?&lt;="</q-l><q-l>": null detected, returning X"</q-l>
<a name="3791"><q-n>     3791  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3792"><q-n>     3792  </q-n></a>      <q-w>return</q-w> 'X';
<a name="3793"><q-n>     3793  </q-n></a>    <q-w>else</q-w>
<a name="3794"><q-n>     3794  </q-n></a>      lresize := resize (l, left_index, right_index);
<a name="3795"><q-n>     3795  </q-n></a>      rresize := resize (r, left_index, right_index);
<a name="3796"><q-n>     3796  </q-n></a>      lslv    := to_uns (lresize);
<a name="3797"><q-n>     3797  </q-n></a>      rslv    := to_uns (rresize);
<a name="3798"><q-n>     3798  </q-n></a>      <q-w>return</q-w> \?&lt;=\ (lslv, rslv);
<a name="3799"><q-n>     3799  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3800"><q-n>     3800  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;=\;
<a name="3801"><q-n>     3801  </q-n></a>
<a name="3802"><q-n>     3802  </q-n></a>  <q-w>function</q-w> \?=\ (L, R : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3803"><q-n>     3803  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="3804"><q-n>     3804  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="3805"><q-n>     3805  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="3806"><q-n>     3806  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>SIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3807"><q-n>     3807  </q-n></a>  <q-w>begin</q-w>  <q-m>-- ?=</q-m>
<a name="3808"><q-n>     3808  </q-n></a>    <q-w>if</q-w> ((L'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (R'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="3809"><q-n>     3809  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3810"><q-n>     3810  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3811"><q-n>     3811  </q-n></a>        &amp; <q-l>""</q-l><q-l>"?="</q-l><q-l>": null detected, returning X"</q-l>
<a name="3812"><q-n>     3812  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3813"><q-n>     3813  </q-n></a>      <q-w>return</q-w> 'X';
<a name="3814"><q-n>     3814  </q-n></a>    <q-w>else</q-w>
<a name="3815"><q-n>     3815  </q-n></a>      lresize := resize (l, left_index, right_index);
<a name="3816"><q-n>     3816  </q-n></a>      rresize := resize (r, left_index, right_index);
<a name="3817"><q-n>     3817  </q-n></a>      lslv    := to_s (lresize);
<a name="3818"><q-n>     3818  </q-n></a>      rslv    := to_s (rresize);
<a name="3819"><q-n>     3819  </q-n></a>      <q-w>return</q-w> \?=\ (lslv, rslv);
<a name="3820"><q-n>     3820  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3821"><q-n>     3821  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?=\;
<a name="3822"><q-n>     3822  </q-n></a>
<a name="3823"><q-n>     3823  </q-n></a>  <q-w>function</q-w> \?/=\ (L, R : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3824"><q-n>     3824  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="3825"><q-n>     3825  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="3826"><q-n>     3826  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="3827"><q-n>     3827  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>SIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3828"><q-n>     3828  </q-n></a>  <q-w>begin</q-w>  <q-m>-- ?/=</q-m>
<a name="3829"><q-n>     3829  </q-n></a>    <q-w>if</q-w> ((L'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (R'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="3830"><q-n>     3830  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3831"><q-n>     3831  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3832"><q-n>     3832  </q-n></a>        &amp; <q-l>""</q-l><q-l>"?/="</q-l><q-l>": null detected, returning X"</q-l>
<a name="3833"><q-n>     3833  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3834"><q-n>     3834  </q-n></a>      <q-w>return</q-w> 'X';
<a name="3835"><q-n>     3835  </q-n></a>    <q-w>else</q-w>
<a name="3836"><q-n>     3836  </q-n></a>      lresize := resize (l, left_index, right_index);
<a name="3837"><q-n>     3837  </q-n></a>      rresize := resize (r, left_index, right_index);
<a name="3838"><q-n>     3838  </q-n></a>      lslv    := to_s (lresize);
<a name="3839"><q-n>     3839  </q-n></a>      rslv    := to_s (rresize);
<a name="3840"><q-n>     3840  </q-n></a>      <q-w>return</q-w> \?/=\ (lslv, rslv);
<a name="3841"><q-n>     3841  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3842"><q-n>     3842  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?/=\;
<a name="3843"><q-n>     3843  </q-n></a>
<a name="3844"><q-n>     3844  </q-n></a>  <q-w>function</q-w> \?&gt;\ (L, R : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3845"><q-n>     3845  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="3846"><q-n>     3846  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="3847"><q-n>     3847  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="3848"><q-n>     3848  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>SIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3849"><q-n>     3849  </q-n></a>  <q-w>begin</q-w>  <q-m>-- ?&gt;</q-m>
<a name="3850"><q-n>     3850  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="3851"><q-n>     3851  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3852"><q-n>     3852  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3853"><q-n>     3853  </q-n></a>        &amp; <q-l>""</q-l><q-l>"?&gt;"</q-l><q-l>": null detected, returning X"</q-l>
<a name="3854"><q-n>     3854  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3855"><q-n>     3855  </q-n></a>      <q-w>return</q-w> 'X';
<a name="3856"><q-n>     3856  </q-n></a>    <q-w>else</q-w>
<a name="3857"><q-n>     3857  </q-n></a>      lresize := resize (l, left_index, right_index);
<a name="3858"><q-n>     3858  </q-n></a>      rresize := resize (r, left_index, right_index);
<a name="3859"><q-n>     3859  </q-n></a>      lslv    := to_s (lresize);
<a name="3860"><q-n>     3860  </q-n></a>      rslv    := to_s (rresize);
<a name="3861"><q-n>     3861  </q-n></a>      <q-w>return</q-w> \?&gt;\ (lslv, rslv);
<a name="3862"><q-n>     3862  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3863"><q-n>     3863  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;\;
<a name="3864"><q-n>     3864  </q-n></a>
<a name="3865"><q-n>     3865  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (L, R : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3866"><q-n>     3866  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="3867"><q-n>     3867  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="3868"><q-n>     3868  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="3869"><q-n>     3869  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>SIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3870"><q-n>     3870  </q-n></a>  <q-w>begin</q-w>  <q-m>-- ?&gt;=</q-m>
<a name="3871"><q-n>     3871  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="3872"><q-n>     3872  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3873"><q-n>     3873  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3874"><q-n>     3874  </q-n></a>        &amp; <q-l>""</q-l><q-l>"?&gt;="</q-l><q-l>": null detected, returning X"</q-l>
<a name="3875"><q-n>     3875  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3876"><q-n>     3876  </q-n></a>      <q-w>return</q-w> 'X';
<a name="3877"><q-n>     3877  </q-n></a>    <q-w>else</q-w>
<a name="3878"><q-n>     3878  </q-n></a>      lresize := resize (l, left_index, right_index);
<a name="3879"><q-n>     3879  </q-n></a>      rresize := resize (r, left_index, right_index);
<a name="3880"><q-n>     3880  </q-n></a>      lslv    := to_s (lresize);
<a name="3881"><q-n>     3881  </q-n></a>      rslv    := to_s (rresize);
<a name="3882"><q-n>     3882  </q-n></a>      <q-w>return</q-w> \?&gt;=\ (lslv, rslv);
<a name="3883"><q-n>     3883  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3884"><q-n>     3884  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;=\;
<a name="3885"><q-n>     3885  </q-n></a>
<a name="3886"><q-n>     3886  </q-n></a>  <q-w>function</q-w> \?&lt;\ (L, R : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3887"><q-n>     3887  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="3888"><q-n>     3888  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="3889"><q-n>     3889  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="3890"><q-n>     3890  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>SIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3891"><q-n>     3891  </q-n></a>  <q-w>begin</q-w>  <q-m>-- ?&lt;</q-m>
<a name="3892"><q-n>     3892  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="3893"><q-n>     3893  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3894"><q-n>     3894  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3895"><q-n>     3895  </q-n></a>        &amp; <q-l>""</q-l><q-l>"?&lt;"</q-l><q-l>": null detected, returning X"</q-l>
<a name="3896"><q-n>     3896  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3897"><q-n>     3897  </q-n></a>      <q-w>return</q-w> 'X';
<a name="3898"><q-n>     3898  </q-n></a>    <q-w>else</q-w>
<a name="3899"><q-n>     3899  </q-n></a>      lresize := resize (l, left_index, right_index);
<a name="3900"><q-n>     3900  </q-n></a>      rresize := resize (r, left_index, right_index);
<a name="3901"><q-n>     3901  </q-n></a>      lslv    := to_s (lresize);
<a name="3902"><q-n>     3902  </q-n></a>      rslv    := to_s (rresize);
<a name="3903"><q-n>     3903  </q-n></a>      <q-w>return</q-w> \?&lt;\ (lslv, rslv);
<a name="3904"><q-n>     3904  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3905"><q-n>     3905  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;\;
<a name="3906"><q-n>     3906  </q-n></a>
<a name="3907"><q-n>     3907  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (L, R : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="3908"><q-n>     3908  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="3909"><q-n>     3909  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="3910"><q-n>     3910  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="3911"><q-n>     3911  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>SIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3912"><q-n>     3912  </q-n></a>  <q-w>begin</q-w>  <q-m>-- ?&lt;=</q-m>
<a name="3913"><q-n>     3913  </q-n></a>    <q-w>if</q-w> ((l'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (r'<q-a>length</q-w> &lt; 1)) <q-w>then</q-w>
<a name="3914"><q-n>     3914  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3915"><q-n>     3915  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3916"><q-n>     3916  </q-n></a>        &amp; <q-l>""</q-l><q-l>"?&lt;="</q-l><q-l>": null detected, returning X"</q-l>
<a name="3917"><q-n>     3917  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3918"><q-n>     3918  </q-n></a>      <q-w>return</q-w> 'X';
<a name="3919"><q-n>     3919  </q-n></a>    <q-w>else</q-w>
<a name="3920"><q-n>     3920  </q-n></a>      lresize := resize (l, left_index, right_index);
<a name="3921"><q-n>     3921  </q-n></a>      rresize := resize (r, left_index, right_index);
<a name="3922"><q-n>     3922  </q-n></a>      lslv    := to_s (lresize);
<a name="3923"><q-n>     3923  </q-n></a>      rslv    := to_s (rresize);
<a name="3924"><q-n>     3924  </q-n></a>      <q-w>return</q-w> \?&lt;=\ (lslv, rslv);
<a name="3925"><q-n>     3925  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3926"><q-n>     3926  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;=\;
<a name="3927"><q-n>     3927  </q-n></a>
<a name="3928"><q-n>     3928  </q-n></a>  <q-m>-- Match function, similar to "std_match" from numeric_std</q-m>
<a name="3929"><q-n>     3929  </q-n></a>  <q-w>function</q-w> std_match (L, R : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="3930"><q-n>     3930  </q-n></a>  <q-w>begin</q-w>
<a name="3931"><q-n>     3931  </q-n></a>    <q-w>if</q-w> (L'<q-a>high</q-w> = R'<q-a>high</q-w> <q-w>and</q-w> L'<q-a>low</q-w> = R'<q-a>low</q-w>) <q-w>then</q-w>
<a name="3932"><q-n>     3932  </q-n></a>      <q-w>return</q-w> std_match(to_sulv(L), to_sulv(R));
<a name="3933"><q-n>     3933  </q-n></a>    <q-w>else</q-w>
<a name="3934"><q-n>     3934  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3935"><q-n>     3935  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3936"><q-n>     3936  </q-n></a>        &amp; <q-l>"STD_MATCH: L'RANGE /= R'RANGE, returning FALSE"</q-l>
<a name="3937"><q-n>     3937  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3938"><q-n>     3938  </q-n></a>      <q-w>return</q-w> false;
<a name="3939"><q-n>     3939  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3940"><q-n>     3940  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> std_match;
<a name="3941"><q-n>     3941  </q-n></a>
<a name="3942"><q-n>     3942  </q-n></a>  <q-w>function</q-w> std_match (L, R : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="3943"><q-n>     3943  </q-n></a>  <q-w>begin</q-w>
<a name="3944"><q-n>     3944  </q-n></a>    <q-w>if</q-w> (L'<q-a>high</q-w> = R'<q-a>high</q-w> <q-w>and</q-w> L'<q-a>low</q-w> = R'<q-a>low</q-w>) <q-w>then</q-w>
<a name="3945"><q-n>     3945  </q-n></a>      <q-w>return</q-w> std_match(to_sulv(L), to_sulv(R));
<a name="3946"><q-n>     3946  </q-n></a>    <q-w>else</q-w>
<a name="3947"><q-n>     3947  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3948"><q-n>     3948  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3949"><q-n>     3949  </q-n></a>        &amp; <q-l>"STD_MATCH: L'RANGE /= R'RANGE, returning FALSE"</q-l>
<a name="3950"><q-n>     3950  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3951"><q-n>     3951  </q-n></a>      <q-w>return</q-w> false;
<a name="3952"><q-n>     3952  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3953"><q-n>     3953  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> std_match;
<a name="3954"><q-n>     3954  </q-n></a>
<a name="3955"><q-n>     3955  </q-n></a>  <q-m>-- compare functions</q-m>
<a name="3956"><q-n>     3956  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l> (
<a name="3957"><q-n>     3957  </q-n></a>    l, r : UNRESOLVED_ufixed)           <q-m>-- fixed point input</q-m>
<a name="3958"><q-n>     3958  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="3959"><q-n>     3959  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="3960"><q-n>     3960  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="3961"><q-n>     3961  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="3962"><q-n>     3962  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3963"><q-n>     3963  </q-n></a>  <q-w>begin</q-w>
<a name="3964"><q-n>     3964  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="3965"><q-n>     3965  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3966"><q-n>     3966  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3967"><q-n>     3967  </q-n></a>        &amp; <q-l>""</q-l><q-l>"="</q-l><q-l>": null argument detected, returning FALSE"</q-l>
<a name="3968"><q-n>     3968  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3969"><q-n>     3969  </q-n></a>      <q-w>return</q-w> false;
<a name="3970"><q-n>     3970  </q-n></a>    <q-w>elsif</q-w> (Is_X(l) <q-w>or</q-w> Is_X(r)) <q-w>then</q-w>
<a name="3971"><q-n>     3971  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3972"><q-n>     3972  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3973"><q-n>     3973  </q-n></a>        &amp; <q-l>""</q-l><q-l>"="</q-l><q-l>": metavalue detected, returning FALSE"</q-l>
<a name="3974"><q-n>     3974  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3975"><q-n>     3975  </q-n></a>      <q-w>return</q-w> false;
<a name="3976"><q-n>     3976  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="3977"><q-n>     3977  </q-n></a>    lresize := resize (l, left_index, right_index);
<a name="3978"><q-n>     3978  </q-n></a>    rresize := resize (r, left_index, right_index);
<a name="3979"><q-n>     3979  </q-n></a>    lslv    := to_uns (lresize);
<a name="3980"><q-n>     3980  </q-n></a>    rslv    := to_uns (rresize);
<a name="3981"><q-n>     3981  </q-n></a>    <q-w>return</q-w> lslv = rslv;
<a name="3982"><q-n>     3982  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"="</q-l>;
<a name="3983"><q-n>     3983  </q-n></a>
<a name="3984"><q-n>     3984  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l> (
<a name="3985"><q-n>     3985  </q-n></a>    l, r : UNRESOLVED_sfixed)           <q-m>-- fixed point input</q-m>
<a name="3986"><q-n>     3986  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="3987"><q-n>     3987  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="3988"><q-n>     3988  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="3989"><q-n>     3989  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="3990"><q-n>     3990  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>SIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="3991"><q-n>     3991  </q-n></a>  <q-w>begin</q-w>
<a name="3992"><q-n>     3992  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="3993"><q-n>     3993  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="3994"><q-n>     3994  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="3995"><q-n>     3995  </q-n></a>        &amp; <q-l>""</q-l><q-l>"="</q-l><q-l>": null argument detected, returning FALSE"</q-l>
<a name="3996"><q-n>     3996  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="3997"><q-n>     3997  </q-n></a>      <q-w>return</q-w> false;
<a name="3998"><q-n>     3998  </q-n></a>    <q-w>elsif</q-w> (Is_X(l) <q-w>or</q-w> Is_X(r)) <q-w>then</q-w>
<a name="3999"><q-n>     3999  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4000"><q-n>     4000  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4001"><q-n>     4001  </q-n></a>        &amp; <q-l>""</q-l><q-l>"="</q-l><q-l>": metavalue detected, returning FALSE"</q-l>
<a name="4002"><q-n>     4002  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4003"><q-n>     4003  </q-n></a>      <q-w>return</q-w> false;
<a name="4004"><q-n>     4004  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4005"><q-n>     4005  </q-n></a>    lresize := resize (l, left_index, right_index);
<a name="4006"><q-n>     4006  </q-n></a>    rresize := resize (r, left_index, right_index);
<a name="4007"><q-n>     4007  </q-n></a>    lslv    := to_s (lresize);
<a name="4008"><q-n>     4008  </q-n></a>    rslv    := to_s (rresize);
<a name="4009"><q-n>     4009  </q-n></a>    <q-w>return</q-w> lslv = rslv;
<a name="4010"><q-n>     4010  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"="</q-l>;
<a name="4011"><q-n>     4011  </q-n></a>
<a name="4012"><q-n>     4012  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (
<a name="4013"><q-n>     4013  </q-n></a>    l, r : UNRESOLVED_ufixed)           <q-m>-- fixed point input</q-m>
<a name="4014"><q-n>     4014  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="4015"><q-n>     4015  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="4016"><q-n>     4016  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="4017"><q-n>     4017  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="4018"><q-n>     4018  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="4019"><q-n>     4019  </q-n></a>  <q-w>begin</q-w>
<a name="4020"><q-n>     4020  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4021"><q-n>     4021  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4022"><q-n>     4022  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4023"><q-n>     4023  </q-n></a>        &amp; <q-l>""</q-l><q-l>"/="</q-l><q-l>": null argument detected, returning TRUE"</q-l>
<a name="4024"><q-n>     4024  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4025"><q-n>     4025  </q-n></a>      <q-w>return</q-w> true;
<a name="4026"><q-n>     4026  </q-n></a>    <q-w>elsif</q-w> (Is_X(l) <q-w>or</q-w> Is_X(r)) <q-w>then</q-w>
<a name="4027"><q-n>     4027  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4028"><q-n>     4028  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4029"><q-n>     4029  </q-n></a>        &amp; <q-l>""</q-l><q-l>"/="</q-l><q-l>": metavalue detected, returning TRUE"</q-l>
<a name="4030"><q-n>     4030  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4031"><q-n>     4031  </q-n></a>      <q-w>return</q-w> true;
<a name="4032"><q-n>     4032  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4033"><q-n>     4033  </q-n></a>    lresize := resize (l, left_index, right_index);
<a name="4034"><q-n>     4034  </q-n></a>    rresize := resize (r, left_index, right_index);
<a name="4035"><q-n>     4035  </q-n></a>    lslv    := to_uns (lresize);
<a name="4036"><q-n>     4036  </q-n></a>    rslv    := to_uns (rresize);
<a name="4037"><q-n>     4037  </q-n></a>    <q-w>return</q-w> lslv /= rslv;
<a name="4038"><q-n>     4038  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/="</q-l>;
<a name="4039"><q-n>     4039  </q-n></a>
<a name="4040"><q-n>     4040  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (
<a name="4041"><q-n>     4041  </q-n></a>    l, r : UNRESOLVED_sfixed)           <q-m>-- fixed point input</q-m>
<a name="4042"><q-n>     4042  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="4043"><q-n>     4043  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="4044"><q-n>     4044  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="4045"><q-n>     4045  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="4046"><q-n>     4046  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>SIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="4047"><q-n>     4047  </q-n></a>  <q-w>begin</q-w>
<a name="4048"><q-n>     4048  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4049"><q-n>     4049  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4050"><q-n>     4050  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4051"><q-n>     4051  </q-n></a>        &amp; <q-l>""</q-l><q-l>"/="</q-l><q-l>": null argument detected, returning TRUE"</q-l>
<a name="4052"><q-n>     4052  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4053"><q-n>     4053  </q-n></a>      <q-w>return</q-w> true;
<a name="4054"><q-n>     4054  </q-n></a>    <q-w>elsif</q-w> (Is_X(l) <q-w>or</q-w> Is_X(r)) <q-w>then</q-w>
<a name="4055"><q-n>     4055  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4056"><q-n>     4056  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4057"><q-n>     4057  </q-n></a>        &amp; <q-l>""</q-l><q-l>"/="</q-l><q-l>": metavalue detected, returning TRUE"</q-l>
<a name="4058"><q-n>     4058  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4059"><q-n>     4059  </q-n></a>      <q-w>return</q-w> true;
<a name="4060"><q-n>     4060  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4061"><q-n>     4061  </q-n></a>    lresize := resize (l, left_index, right_index);
<a name="4062"><q-n>     4062  </q-n></a>    rresize := resize (r, left_index, right_index);
<a name="4063"><q-n>     4063  </q-n></a>    lslv    := to_s (lresize);
<a name="4064"><q-n>     4064  </q-n></a>    rslv    := to_s (rresize);
<a name="4065"><q-n>     4065  </q-n></a>    <q-w>return</q-w> lslv /= rslv;
<a name="4066"><q-n>     4066  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/="</q-l>;
<a name="4067"><q-n>     4067  </q-n></a>
<a name="4068"><q-n>     4068  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l> (
<a name="4069"><q-n>     4069  </q-n></a>    l, r : UNRESOLVED_ufixed)           <q-m>-- fixed point input</q-m>
<a name="4070"><q-n>     4070  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="4071"><q-n>     4071  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="4072"><q-n>     4072  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="4073"><q-n>     4073  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="4074"><q-n>     4074  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="4075"><q-n>     4075  </q-n></a>  <q-w>begin</q-w>
<a name="4076"><q-n>     4076  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4077"><q-n>     4077  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4078"><q-n>     4078  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4079"><q-n>     4079  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&gt;"</q-l><q-l>": null argument detected, returning FALSE"</q-l>
<a name="4080"><q-n>     4080  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4081"><q-n>     4081  </q-n></a>      <q-w>return</q-w> false;
<a name="4082"><q-n>     4082  </q-n></a>    <q-w>elsif</q-w> (Is_X(l) <q-w>or</q-w> Is_X(r)) <q-w>then</q-w>
<a name="4083"><q-n>     4083  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4084"><q-n>     4084  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4085"><q-n>     4085  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&gt;"</q-l><q-l>": metavalue detected, returning FALSE"</q-l>
<a name="4086"><q-n>     4086  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4087"><q-n>     4087  </q-n></a>      <q-w>return</q-w> false;
<a name="4088"><q-n>     4088  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4089"><q-n>     4089  </q-n></a>    lresize := resize (l, left_index, right_index);
<a name="4090"><q-n>     4090  </q-n></a>    rresize := resize (r, left_index, right_index);
<a name="4091"><q-n>     4091  </q-n></a>    lslv    := to_uns (lresize);
<a name="4092"><q-n>     4092  </q-n></a>    rslv    := to_uns (rresize);
<a name="4093"><q-n>     4093  </q-n></a>    <q-w>return</q-w> lslv &gt; rslv;
<a name="4094"><q-n>     4094  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;"</q-l>;
<a name="4095"><q-n>     4095  </q-n></a>
<a name="4096"><q-n>     4096  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l> (
<a name="4097"><q-n>     4097  </q-n></a>    l, r : UNRESOLVED_sfixed)           <q-m>-- fixed point input</q-m>
<a name="4098"><q-n>     4098  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="4099"><q-n>     4099  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="4100"><q-n>     4100  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="4101"><q-n>     4101  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="4102"><q-n>     4102  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>SIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="4103"><q-n>     4103  </q-n></a>  <q-w>begin</q-w>
<a name="4104"><q-n>     4104  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4105"><q-n>     4105  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4106"><q-n>     4106  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4107"><q-n>     4107  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&gt;"</q-l><q-l>": null argument detected, returning FALSE"</q-l>
<a name="4108"><q-n>     4108  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4109"><q-n>     4109  </q-n></a>      <q-w>return</q-w> false;
<a name="4110"><q-n>     4110  </q-n></a>    <q-w>elsif</q-w> (Is_X(l) <q-w>or</q-w> Is_X(r)) <q-w>then</q-w>
<a name="4111"><q-n>     4111  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4112"><q-n>     4112  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4113"><q-n>     4113  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&gt;"</q-l><q-l>": metavalue detected, returning FALSE"</q-l>
<a name="4114"><q-n>     4114  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4115"><q-n>     4115  </q-n></a>      <q-w>return</q-w> false;
<a name="4116"><q-n>     4116  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4117"><q-n>     4117  </q-n></a>    lresize := resize (l, left_index, right_index);
<a name="4118"><q-n>     4118  </q-n></a>    rresize := resize (r, left_index, right_index);
<a name="4119"><q-n>     4119  </q-n></a>    lslv    := to_s (lresize);
<a name="4120"><q-n>     4120  </q-n></a>    rslv    := to_s (rresize);
<a name="4121"><q-n>     4121  </q-n></a>    <q-w>return</q-w> lslv &gt; rslv;
<a name="4122"><q-n>     4122  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;"</q-l>;
<a name="4123"><q-n>     4123  </q-n></a>
<a name="4124"><q-n>     4124  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l> (
<a name="4125"><q-n>     4125  </q-n></a>    l, r : UNRESOLVED_ufixed)           <q-m>-- fixed point input</q-m>
<a name="4126"><q-n>     4126  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="4127"><q-n>     4127  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="4128"><q-n>     4128  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="4129"><q-n>     4129  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="4130"><q-n>     4130  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="4131"><q-n>     4131  </q-n></a>  <q-w>begin</q-w>
<a name="4132"><q-n>     4132  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4133"><q-n>     4133  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4134"><q-n>     4134  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4135"><q-n>     4135  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&lt;"</q-l><q-l>": null argument detected, returning FALSE"</q-l>
<a name="4136"><q-n>     4136  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4137"><q-n>     4137  </q-n></a>      <q-w>return</q-w> false;
<a name="4138"><q-n>     4138  </q-n></a>    <q-w>elsif</q-w> (Is_X(l) <q-w>or</q-w> Is_X(r)) <q-w>then</q-w>
<a name="4139"><q-n>     4139  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4140"><q-n>     4140  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4141"><q-n>     4141  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&lt;"</q-l><q-l>": metavalue detected, returning FALSE"</q-l>
<a name="4142"><q-n>     4142  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4143"><q-n>     4143  </q-n></a>      <q-w>return</q-w> false;
<a name="4144"><q-n>     4144  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4145"><q-n>     4145  </q-n></a>    lresize := resize (l, left_index, right_index);
<a name="4146"><q-n>     4146  </q-n></a>    rresize := resize (r, left_index, right_index);
<a name="4147"><q-n>     4147  </q-n></a>    lslv    := to_uns (lresize);
<a name="4148"><q-n>     4148  </q-n></a>    rslv    := to_uns (rresize);
<a name="4149"><q-n>     4149  </q-n></a>    <q-w>return</q-w> lslv &lt; rslv;
<a name="4150"><q-n>     4150  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;"</q-l>;
<a name="4151"><q-n>     4151  </q-n></a>
<a name="4152"><q-n>     4152  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l> (
<a name="4153"><q-n>     4153  </q-n></a>    l, r : UNRESOLVED_sfixed)           <q-m>-- fixed point input</q-m>
<a name="4154"><q-n>     4154  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="4155"><q-n>     4155  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="4156"><q-n>     4156  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="4157"><q-n>     4157  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="4158"><q-n>     4158  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>SIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="4159"><q-n>     4159  </q-n></a>  <q-w>begin</q-w>
<a name="4160"><q-n>     4160  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4161"><q-n>     4161  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4162"><q-n>     4162  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4163"><q-n>     4163  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&lt;"</q-l><q-l>": null argument detected, returning FALSE"</q-l>
<a name="4164"><q-n>     4164  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4165"><q-n>     4165  </q-n></a>      <q-w>return</q-w> false;
<a name="4166"><q-n>     4166  </q-n></a>    <q-w>elsif</q-w> (Is_X(l) <q-w>or</q-w> Is_X(r)) <q-w>then</q-w>
<a name="4167"><q-n>     4167  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4168"><q-n>     4168  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4169"><q-n>     4169  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&lt;"</q-l><q-l>": metavalue detected, returning FALSE"</q-l>
<a name="4170"><q-n>     4170  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4171"><q-n>     4171  </q-n></a>      <q-w>return</q-w> false;
<a name="4172"><q-n>     4172  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4173"><q-n>     4173  </q-n></a>    lresize := resize (l, left_index, right_index);
<a name="4174"><q-n>     4174  </q-n></a>    rresize := resize (r, left_index, right_index);
<a name="4175"><q-n>     4175  </q-n></a>    lslv    := to_s (lresize);
<a name="4176"><q-n>     4176  </q-n></a>    rslv    := to_s (rresize);
<a name="4177"><q-n>     4177  </q-n></a>    <q-w>return</q-w> lslv &lt; rslv;
<a name="4178"><q-n>     4178  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;"</q-l>;
<a name="4179"><q-n>     4179  </q-n></a>
<a name="4180"><q-n>     4180  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (
<a name="4181"><q-n>     4181  </q-n></a>    l, r : UNRESOLVED_ufixed)           <q-m>-- fixed point input</q-m>
<a name="4182"><q-n>     4182  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="4183"><q-n>     4183  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="4184"><q-n>     4184  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="4185"><q-n>     4185  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="4186"><q-n>     4186  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="4187"><q-n>     4187  </q-n></a>  <q-w>begin</q-w>
<a name="4188"><q-n>     4188  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4189"><q-n>     4189  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4190"><q-n>     4190  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4191"><q-n>     4191  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&gt;="</q-l><q-l>": null argument detected, returning FALSE"</q-l>
<a name="4192"><q-n>     4192  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4193"><q-n>     4193  </q-n></a>      <q-w>return</q-w> false;
<a name="4194"><q-n>     4194  </q-n></a>    <q-w>elsif</q-w> (Is_X(l) <q-w>or</q-w> Is_X(r)) <q-w>then</q-w>
<a name="4195"><q-n>     4195  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4196"><q-n>     4196  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4197"><q-n>     4197  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&gt;="</q-l><q-l>": metavalue detected, returning FALSE"</q-l>
<a name="4198"><q-n>     4198  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4199"><q-n>     4199  </q-n></a>      <q-w>return</q-w> false;
<a name="4200"><q-n>     4200  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4201"><q-n>     4201  </q-n></a>    lresize := resize (l, left_index, right_index);
<a name="4202"><q-n>     4202  </q-n></a>    rresize := resize (r, left_index, right_index);
<a name="4203"><q-n>     4203  </q-n></a>    lslv    := to_uns (lresize);
<a name="4204"><q-n>     4204  </q-n></a>    rslv    := to_uns (rresize);
<a name="4205"><q-n>     4205  </q-n></a>    <q-w>return</q-w> lslv &gt;= rslv;
<a name="4206"><q-n>     4206  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;="</q-l>;
<a name="4207"><q-n>     4207  </q-n></a>
<a name="4208"><q-n>     4208  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (
<a name="4209"><q-n>     4209  </q-n></a>    l, r : UNRESOLVED_sfixed)           <q-m>-- fixed point input</q-m>
<a name="4210"><q-n>     4210  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="4211"><q-n>     4211  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="4212"><q-n>     4212  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="4213"><q-n>     4213  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="4214"><q-n>     4214  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>SIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="4215"><q-n>     4215  </q-n></a>  <q-w>begin</q-w>
<a name="4216"><q-n>     4216  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4217"><q-n>     4217  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4218"><q-n>     4218  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4219"><q-n>     4219  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&gt;="</q-l><q-l>": null argument detected, returning FALSE"</q-l>
<a name="4220"><q-n>     4220  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4221"><q-n>     4221  </q-n></a>      <q-w>return</q-w> false;
<a name="4222"><q-n>     4222  </q-n></a>    <q-w>elsif</q-w> (Is_X(l) <q-w>or</q-w> Is_X(r)) <q-w>then</q-w>
<a name="4223"><q-n>     4223  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4224"><q-n>     4224  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4225"><q-n>     4225  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&gt;="</q-l><q-l>": metavalue detected, returning FALSE"</q-l>
<a name="4226"><q-n>     4226  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4227"><q-n>     4227  </q-n></a>      <q-w>return</q-w> false;
<a name="4228"><q-n>     4228  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4229"><q-n>     4229  </q-n></a>    lresize := resize (l, left_index, right_index);
<a name="4230"><q-n>     4230  </q-n></a>    rresize := resize (r, left_index, right_index);
<a name="4231"><q-n>     4231  </q-n></a>    lslv    := to_s (lresize);
<a name="4232"><q-n>     4232  </q-n></a>    rslv    := to_s (rresize);
<a name="4233"><q-n>     4233  </q-n></a>    <q-w>return</q-w> lslv &gt;= rslv;
<a name="4234"><q-n>     4234  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;="</q-l>;
<a name="4235"><q-n>     4235  </q-n></a>
<a name="4236"><q-n>     4236  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (
<a name="4237"><q-n>     4237  </q-n></a>    l, r : UNRESOLVED_ufixed)           <q-m>-- fixed point input</q-m>
<a name="4238"><q-n>     4238  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="4239"><q-n>     4239  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="4240"><q-n>     4240  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="4241"><q-n>     4241  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="4242"><q-n>     4242  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>UNSIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="4243"><q-n>     4243  </q-n></a>  <q-w>begin</q-w>
<a name="4244"><q-n>     4244  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4245"><q-n>     4245  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4246"><q-n>     4246  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4247"><q-n>     4247  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&lt;="</q-l><q-l>": null argument detected, returning FALSE"</q-l>
<a name="4248"><q-n>     4248  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4249"><q-n>     4249  </q-n></a>      <q-w>return</q-w> false;
<a name="4250"><q-n>     4250  </q-n></a>    <q-w>elsif</q-w> (Is_X(l) <q-w>or</q-w> Is_X(r)) <q-w>then</q-w>
<a name="4251"><q-n>     4251  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4252"><q-n>     4252  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4253"><q-n>     4253  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&lt;="</q-l><q-l>": metavalue detected, returning FALSE"</q-l>
<a name="4254"><q-n>     4254  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4255"><q-n>     4255  </q-n></a>      <q-w>return</q-w> false;
<a name="4256"><q-n>     4256  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4257"><q-n>     4257  </q-n></a>    lresize     := resize (l, left_index, right_index);
<a name="4258"><q-n>     4258  </q-n></a>    rresize     := resize (r, left_index, right_index);
<a name="4259"><q-n>     4259  </q-n></a>    lslv        := to_uns (lresize);
<a name="4260"><q-n>     4260  </q-n></a>    rslv        := to_uns (rresize);
<a name="4261"><q-n>     4261  </q-n></a>    <q-w>return</q-w> lslv &lt;= rslv;
<a name="4262"><q-n>     4262  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;="</q-l>;
<a name="4263"><q-n>     4263  </q-n></a>
<a name="4264"><q-n>     4264  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (
<a name="4265"><q-n>     4265  </q-n></a>    l, r : UNRESOLVED_sfixed)           <q-m>-- fixed point input</q-m>
<a name="4266"><q-n>     4266  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="4267"><q-n>     4267  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="4268"><q-n>     4268  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="4269"><q-n>     4269  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="4270"><q-n>     4270  </q-n></a>    <q-w>variable</q-w> lslv, rslv       : <q-t>SIGNED</q-w> (lresize'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="4271"><q-n>     4271  </q-n></a>  <q-w>begin</q-w>
<a name="4272"><q-n>     4272  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4273"><q-n>     4273  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4274"><q-n>     4274  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4275"><q-n>     4275  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&lt;="</q-l><q-l>": null argument detected, returning FALSE"</q-l>
<a name="4276"><q-n>     4276  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4277"><q-n>     4277  </q-n></a>      <q-w>return</q-w> false;
<a name="4278"><q-n>     4278  </q-n></a>    <q-w>elsif</q-w> (Is_X(l) <q-w>or</q-w> Is_X(r)) <q-w>then</q-w>
<a name="4279"><q-n>     4279  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4280"><q-n>     4280  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4281"><q-n>     4281  </q-n></a>        &amp; <q-l>""</q-l><q-l>"&lt;="</q-l><q-l>": metavalue detected, returning FALSE"</q-l>
<a name="4282"><q-n>     4282  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4283"><q-n>     4283  </q-n></a>      <q-w>return</q-w> false;
<a name="4284"><q-n>     4284  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4285"><q-n>     4285  </q-n></a>    lresize     := resize (l, left_index, right_index);
<a name="4286"><q-n>     4286  </q-n></a>    rresize     := resize (r, left_index, right_index);
<a name="4287"><q-n>     4287  </q-n></a>    lslv        := to_s (lresize);
<a name="4288"><q-n>     4288  </q-n></a>    rslv        := to_s (rresize);
<a name="4289"><q-n>     4289  </q-n></a>    <q-w>return</q-w> lslv &lt;= rslv;
<a name="4290"><q-n>     4290  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;="</q-l>;
<a name="4291"><q-n>     4291  </q-n></a>
<a name="4292"><q-n>     4292  </q-n></a>  <q-m>-- overloads of the default maximum and minimum functions</q-m>
<a name="4293"><q-n>     4293  </q-n></a>  <q-w>function</q-w> maximum (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="4294"><q-n>     4294  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="4295"><q-n>     4295  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="4296"><q-n>     4296  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="4297"><q-n>     4297  </q-n></a>  <q-w>begin</q-w>
<a name="4298"><q-n>     4298  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4299"><q-n>     4299  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="4300"><q-n>     4300  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4301"><q-n>     4301  </q-n></a>    lresize := resize (l, left_index, right_index);
<a name="4302"><q-n>     4302  </q-n></a>    rresize := resize (r, left_index, right_index);
<a name="4303"><q-n>     4303  </q-n></a>    <q-w>if</q-w> lresize &gt; rresize <q-w>then</q-w> <q-w>return</q-w> lresize;
<a name="4304"><q-n>     4304  </q-n></a>    <q-w>else</q-w> <q-w>return</q-w> rresize;
<a name="4305"><q-n>     4305  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4306"><q-n>     4306  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> maximum;
<a name="4307"><q-n>     4307  </q-n></a>
<a name="4308"><q-n>     4308  </q-n></a>  <q-w>function</q-w> maximum (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="4309"><q-n>     4309  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="4310"><q-n>     4310  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="4311"><q-n>     4311  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="4312"><q-n>     4312  </q-n></a>  <q-w>begin</q-w>
<a name="4313"><q-n>     4313  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4314"><q-n>     4314  </q-n></a>      <q-w>return</q-w> NASF;
<a name="4315"><q-n>     4315  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4316"><q-n>     4316  </q-n></a>    lresize := resize (l, left_index, right_index);
<a name="4317"><q-n>     4317  </q-n></a>    rresize := resize (r, left_index, right_index);
<a name="4318"><q-n>     4318  </q-n></a>    <q-w>if</q-w> lresize &gt; rresize <q-w>then</q-w> <q-w>return</q-w> lresize;
<a name="4319"><q-n>     4319  </q-n></a>    <q-w>else</q-w> <q-w>return</q-w> rresize;
<a name="4320"><q-n>     4320  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4321"><q-n>     4321  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> maximum;
<a name="4322"><q-n>     4322  </q-n></a>
<a name="4323"><q-n>     4323  </q-n></a>  <q-w>function</q-w> minimum (l, r : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="4324"><q-n>     4324  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="4325"><q-n>     4325  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="4326"><q-n>     4326  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="4327"><q-n>     4327  </q-n></a>  <q-w>begin</q-w>
<a name="4328"><q-n>     4328  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4329"><q-n>     4329  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="4330"><q-n>     4330  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4331"><q-n>     4331  </q-n></a>    lresize := resize (l, left_index, right_index);
<a name="4332"><q-n>     4332  </q-n></a>    rresize := resize (r, left_index, right_index);
<a name="4333"><q-n>     4333  </q-n></a>    <q-w>if</q-w> lresize &gt; rresize <q-w>then</q-w> <q-w>return</q-w> rresize;
<a name="4334"><q-n>     4334  </q-n></a>    <q-w>else</q-w> <q-w>return</q-w> lresize;
<a name="4335"><q-n>     4335  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4336"><q-n>     4336  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> minimum;
<a name="4337"><q-n>     4337  </q-n></a>
<a name="4338"><q-n>     4338  </q-n></a>  <q-w>function</q-w> minimum (l, r : UNRESOLVED_sfixed) <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="4339"><q-n>     4339  </q-n></a>    <q-w>constant</q-w> left_index       : <q-t>INTEGER</q-w> := maximum(l'<q-a>high</q-w>, r'<q-a>high</q-w>);
<a name="4340"><q-n>     4340  </q-n></a>    <q-w>constant</q-w> right_index      : <q-t>INTEGER</q-w> := mins(l'<q-a>low</q-w>, r'<q-a>low</q-w>);
<a name="4341"><q-n>     4341  </q-n></a>    <q-w>variable</q-w> lresize, rresize : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="4342"><q-n>     4342  </q-n></a>  <q-w>begin</q-w>
<a name="4343"><q-n>     4343  </q-n></a>    <q-w>if</q-w> (l'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> r'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4344"><q-n>     4344  </q-n></a>      <q-w>return</q-w> NASF;
<a name="4345"><q-n>     4345  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4346"><q-n>     4346  </q-n></a>    lresize := resize (l, left_index, right_index);
<a name="4347"><q-n>     4347  </q-n></a>    rresize := resize (r, left_index, right_index);
<a name="4348"><q-n>     4348  </q-n></a>    <q-w>if</q-w> lresize &gt; rresize <q-w>then</q-w> <q-w>return</q-w> rresize;
<a name="4349"><q-n>     4349  </q-n></a>    <q-w>else</q-w> <q-w>return</q-w> lresize;
<a name="4350"><q-n>     4350  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4351"><q-n>     4351  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> minimum;
<a name="4352"><q-n>     4352  </q-n></a>
<a name="4353"><q-n>     4353  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="4354"><q-n>     4354  </q-n></a>    arg                     : <q-t>NATURAL</q-w>;  <q-m>-- integer</q-m>
<a name="4355"><q-n>     4355  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- left index (high index)</q-m>
<a name="4356"><q-n>     4356  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>                   := 0;  <q-m>-- right index</q-m>
<a name="4357"><q-n>     4357  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="4358"><q-n>     4358  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="4359"><q-n>     4359  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="4360"><q-n>     4360  </q-n></a>    <q-w>constant</q-w> fw      : <q-t>INTEGER</q-w> := mins (right_index, right_index);  <q-m>-- catch literals</q-m>
<a name="4361"><q-n>     4361  </q-n></a>    <q-w>variable</q-w> result  : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> fw);
<a name="4362"><q-n>     4362  </q-n></a>    <q-w>variable</q-w> sresult : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> 0) :=
<a name="4363"><q-n>     4363  </q-n></a>      (<q-w>others</q-w> =&gt; '0');  <q-m>-- integer portion</q-m>
<a name="4364"><q-n>     4364  </q-n></a>    <q-w>variable</q-w> argx    : <q-t>NATURAL</q-w>;         <q-m>-- internal version of arg</q-m>
<a name="4365"><q-n>     4365  </q-n></a>  <q-w>begin</q-w>
<a name="4366"><q-n>     4366  </q-n></a>    <q-w>if</q-w> (result'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4367"><q-n>     4367  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="4368"><q-n>     4368  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4369"><q-n>     4369  </q-n></a>    <q-w>if</q-w> arg /= 0 <q-w>then</q-w>
<a name="4370"><q-n>     4370  </q-n></a>      argx := arg;
<a name="4371"><q-n>     4371  </q-n></a>      <q-w>for</q-w> I <q-a>in</q-w> 0 <q-w>to</q-w> sresult'<q-a>left</q-w> <q-w>loop</q-w>
<a name="4372"><q-n>     4372  </q-n></a>        <q-w>if</q-w> (argx <q-w>mod</q-w> 2) = 0 <q-w>then</q-w>
<a name="4373"><q-n>     4373  </q-n></a>          sresult(I) := '0';
<a name="4374"><q-n>     4374  </q-n></a>        <q-w>else</q-w>
<a name="4375"><q-n>     4375  </q-n></a>          sresult(I) := '1';
<a name="4376"><q-n>     4376  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="4377"><q-n>     4377  </q-n></a>        argx := argx/2;
<a name="4378"><q-n>     4378  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="4379"><q-n>     4379  </q-n></a>      <q-w>if</q-w> argx /= 0 <q-w>then</q-w>
<a name="4380"><q-n>     4380  </q-n></a>        <q-w>assert</q-w> NO_WARNING
<a name="4381"><q-n>     4381  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4382"><q-n>     4382  </q-n></a>          &amp; <q-l>"TO_UFIXED(NATURAL): vector truncated"</q-l>
<a name="4383"><q-n>     4383  </q-n></a>          <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4384"><q-n>     4384  </q-n></a>        <q-w>if</q-w> overflow_style = fixed_saturate <q-w>then</q-w>
<a name="4385"><q-n>     4385  </q-n></a>          <q-w>return</q-w> saturate (left_index, right_index);
<a name="4386"><q-n>     4386  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="4387"><q-n>     4387  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="4388"><q-n>     4388  </q-n></a>      result := resize (arg            =&gt; sresult,
<a name="4389"><q-n>     4389  </q-n></a>                        left_index     =&gt; left_index,
<a name="4390"><q-n>     4390  </q-n></a>                        right_index    =&gt; right_index,
<a name="4391"><q-n>     4391  </q-n></a>                        round_style    =&gt; round_style,
<a name="4392"><q-n>     4392  </q-n></a>                        overflow_style =&gt; overflow_style);
<a name="4393"><q-n>     4393  </q-n></a>    <q-w>else</q-w>
<a name="4394"><q-n>     4394  </q-n></a>      result := (<q-w>others</q-w> =&gt; '0');
<a name="4395"><q-n>     4395  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4396"><q-n>     4396  </q-n></a>    <q-w>return</q-w> result;
<a name="4397"><q-n>     4397  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ufixed;
<a name="4398"><q-n>     4398  </q-n></a>
<a name="4399"><q-n>     4399  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="4400"><q-n>     4400  </q-n></a>    arg                     : <q-t>INTEGER</q-w>;  <q-m>-- integer</q-m>
<a name="4401"><q-n>     4401  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- left index (high index)</q-m>
<a name="4402"><q-n>     4402  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>                   := 0;  <q-m>-- right index</q-m>
<a name="4403"><q-n>     4403  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="4404"><q-n>     4404  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="4405"><q-n>     4405  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="4406"><q-n>     4406  </q-n></a>    <q-w>constant</q-w> fw      : <q-t>INTEGER</q-w> := mins (right_index, right_index);  <q-m>-- catch literals</q-m>
<a name="4407"><q-n>     4407  </q-n></a>    <q-w>variable</q-w> result  : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> fw);
<a name="4408"><q-n>     4408  </q-n></a>    <q-w>variable</q-w> sresult : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> 0) :=
<a name="4409"><q-n>     4409  </q-n></a>      (<q-w>others</q-w> =&gt; '0');  <q-m>-- integer portion</q-m>
<a name="4410"><q-n>     4410  </q-n></a>    <q-w>variable</q-w> argx    : <q-t>INTEGER</q-w>;         <q-m>-- internal version of arg</q-m>
<a name="4411"><q-n>     4411  </q-n></a>    <q-w>variable</q-w> sign    : <q-t>STD_ULOGIC</q-w>;      <q-m>-- sign of input</q-m>
<a name="4412"><q-n>     4412  </q-n></a>  <q-w>begin</q-w>
<a name="4413"><q-n>     4413  </q-n></a>    <q-w>if</q-w> (result'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>         <q-m>-- null range</q-m>
<a name="4414"><q-n>     4414  </q-n></a>      <q-w>return</q-w> NASF;
<a name="4415"><q-n>     4415  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4416"><q-n>     4416  </q-n></a>    <q-w>if</q-w> arg /= 0 <q-w>then</q-w>
<a name="4417"><q-n>     4417  </q-n></a>      <q-w>if</q-w> (arg &lt; 0) <q-w>then</q-w>
<a name="4418"><q-n>     4418  </q-n></a>        sign := '1';
<a name="4419"><q-n>     4419  </q-n></a>        argx := -(arg + 1);
<a name="4420"><q-n>     4420  </q-n></a>      <q-w>else</q-w>
<a name="4421"><q-n>     4421  </q-n></a>        sign := '0';
<a name="4422"><q-n>     4422  </q-n></a>        argx := arg;
<a name="4423"><q-n>     4423  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="4424"><q-n>     4424  </q-n></a>      <q-w>for</q-w> I <q-a>in</q-w> 0 <q-w>to</q-w> sresult'<q-a>left</q-w> <q-w>loop</q-w>
<a name="4425"><q-n>     4425  </q-n></a>        <q-w>if</q-w> (argx <q-w>mod</q-w> 2) = 0 <q-w>then</q-w>
<a name="4426"><q-n>     4426  </q-n></a>          sresult(I) := sign;
<a name="4427"><q-n>     4427  </q-n></a>        <q-w>else</q-w>
<a name="4428"><q-n>     4428  </q-n></a>          sresult(I) := <q-w>not</q-w> sign;
<a name="4429"><q-n>     4429  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="4430"><q-n>     4430  </q-n></a>        argx := argx/2;
<a name="4431"><q-n>     4431  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="4432"><q-n>     4432  </q-n></a>      <q-w>if</q-w> argx /= 0 <q-w>or</q-w> left_index &lt; 0 <q-w>or</q-w> sign /= sresult(sresult'<q-a>left</q-w>) <q-w>then</q-w>
<a name="4433"><q-n>     4433  </q-n></a>        <q-w>assert</q-w> NO_WARNING
<a name="4434"><q-n>     4434  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4435"><q-n>     4435  </q-n></a>          &amp; <q-l>"TO_SFIXED(INTEGER): vector truncated"</q-l>
<a name="4436"><q-n>     4436  </q-n></a>          <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4437"><q-n>     4437  </q-n></a>        <q-w>if</q-w> overflow_style = fixed_saturate <q-w>then</q-w>                <q-m>-- saturate</q-m>
<a name="4438"><q-n>     4438  </q-n></a>          <q-w>if</q-w> arg &lt; 0 <q-w>then</q-w>
<a name="4439"><q-n>     4439  </q-n></a>            result := <q-w>not</q-w> saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);  <q-m>-- underflow</q-m>
<a name="4440"><q-n>     4440  </q-n></a>          <q-w>else</q-w>
<a name="4441"><q-n>     4441  </q-n></a>            result := saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);      <q-m>-- overflow</q-m>
<a name="4442"><q-n>     4442  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="4443"><q-n>     4443  </q-n></a>          <q-w>return</q-w> result;
<a name="4444"><q-n>     4444  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="4445"><q-n>     4445  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="4446"><q-n>     4446  </q-n></a>      result := resize (arg            =&gt; sresult,
<a name="4447"><q-n>     4447  </q-n></a>                        left_index     =&gt; left_index,
<a name="4448"><q-n>     4448  </q-n></a>                        right_index    =&gt; right_index,
<a name="4449"><q-n>     4449  </q-n></a>                        round_style    =&gt; round_style,
<a name="4450"><q-n>     4450  </q-n></a>                        overflow_style =&gt; overflow_style);
<a name="4451"><q-n>     4451  </q-n></a>    <q-w>else</q-w>
<a name="4452"><q-n>     4452  </q-n></a>      result := (<q-w>others</q-w> =&gt; '0');
<a name="4453"><q-n>     4453  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4454"><q-n>     4454  </q-n></a>    <q-w>return</q-w> result;
<a name="4455"><q-n>     4455  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_sfixed;
<a name="4456"><q-n>     4456  </q-n></a>
<a name="4457"><q-n>     4457  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="4458"><q-n>     4458  </q-n></a>    arg                     : <q-t>REAL</q-w>;     <q-m>-- real</q-m>
<a name="4459"><q-n>     4459  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- left index (high index)</q-m>
<a name="4460"><q-n>     4460  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>;  <q-m>-- right index</q-m>
<a name="4461"><q-n>     4461  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="4462"><q-n>     4462  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style;
<a name="4463"><q-n>     4463  </q-n></a>    <q-w>constant</q-w> guard_bits     : <q-t>NATURAL</q-w>                   := fixed_guard_bits)  <q-m>-- # of guard bits</q-m>
<a name="4464"><q-n>     4464  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="4465"><q-n>     4465  </q-n></a>    <q-w>constant</q-w> fw              : <q-t>INTEGER</q-w> := mins (right_index, right_index);  <q-m>-- catch literals</q-m>
<a name="4466"><q-n>     4466  </q-n></a>    <q-w>variable</q-w> result          : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> fw) :=
<a name="4467"><q-n>     4467  </q-n></a>      (<q-w>others</q-w> =&gt; '0');
<a name="4468"><q-n>     4468  </q-n></a>    <q-w>variable</q-w> Xresult         : UNRESOLVED_ufixed (left_index <q-w>downto</q-w>
<a name="4469"><q-n>     4469  </q-n></a>                                                  fw-guard_bits) :=
<a name="4470"><q-n>     4470  </q-n></a>      (<q-w>others</q-w> =&gt; '0');
<a name="4471"><q-n>     4471  </q-n></a>    <q-w>variable</q-w> presult         : <q-t>REAL</q-w>;
<a name="4472"><q-n>     4472  </q-n></a><q-m>--    variable overflow_needed : BOOLEAN;</q-m>
<a name="4473"><q-n>     4473  </q-n></a>  <q-w>begin</q-w>
<a name="4474"><q-n>     4474  </q-n></a>    <q-m>-- If negative or null range, return.</q-m>
<a name="4475"><q-n>     4475  </q-n></a>    <q-w>if</q-w> (left_index &lt; fw) <q-w>then</q-w>
<a name="4476"><q-n>     4476  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="4477"><q-n>     4477  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4478"><q-n>     4478  </q-n></a>    <q-w>if</q-w> (arg &lt; 0.0) <q-w>then</q-w>
<a name="4479"><q-n>     4479  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4480"><q-n>     4480  </q-n></a>        &amp; <q-l>"TO_UFIXED: Negative argument passed "</q-l>
<a name="4481"><q-n>     4481  </q-n></a>        &amp; <q-t>REAL</q-w>'<q-a>image</q-w>(arg) <q-w>severity</q-w> error;
<a name="4482"><q-n>     4482  </q-n></a>      <q-w>return</q-w> result;
<a name="4483"><q-n>     4483  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4484"><q-n>     4484  </q-n></a>    presult := arg;
<a name="4485"><q-n>     4485  </q-n></a>    <q-w>if</q-w> presult &gt;= (2.0**(left_index+1)) <q-w>then</q-w>
<a name="4486"><q-n>     4486  </q-n></a>      <q-w>assert</q-w> NO_WARNING <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4487"><q-n>     4487  </q-n></a>        &amp; <q-l>"TO_UFIXED(REAL): vector truncated"</q-l>
<a name="4488"><q-n>     4488  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4489"><q-n>     4489  </q-n></a>      <q-w>if</q-w> overflow_style = fixed_wrap <q-w>then</q-w>
<a name="4490"><q-n>     4490  </q-n></a>        presult := presult <q-w>mod</q-w> (2.0**(left_index+1));  <q-m>-- wrap</q-m>
<a name="4491"><q-n>     4491  </q-n></a>      <q-w>else</q-w>
<a name="4492"><q-n>     4492  </q-n></a>        <q-w>return</q-w> saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="4493"><q-n>     4493  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="4494"><q-n>     4494  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4495"><q-n>     4495  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> Xresult'<q-w>range</q-w> <q-w>loop</q-w>
<a name="4496"><q-n>     4496  </q-n></a>      <q-w>if</q-w> presult &gt;= 2.0**i <q-w>then</q-w>
<a name="4497"><q-n>     4497  </q-n></a>        Xresult(i) := '1';
<a name="4498"><q-n>     4498  </q-n></a>        presult    := presult - 2.0**i;
<a name="4499"><q-n>     4499  </q-n></a>      <q-w>else</q-w>
<a name="4500"><q-n>     4500  </q-n></a>        Xresult(i) := '0';
<a name="4501"><q-n>     4501  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="4502"><q-n>     4502  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="4503"><q-n>     4503  </q-n></a>    <q-w>if</q-w> guard_bits &gt; 0 <q-w>and</q-w> round_style = fixed_round <q-w>then</q-w>
<a name="4504"><q-n>     4504  </q-n></a>      result := round_fixed (arg =&gt; Xresult (left_index
<a name="4505"><q-n>     4505  </q-n></a>                                             <q-w>downto</q-w> right_index),
<a name="4506"><q-n>     4506  </q-n></a>                             remainder =&gt; Xresult (right_index-1 <q-w>downto</q-w>
<a name="4507"><q-n>     4507  </q-n></a>                                                   right_index-guard_bits),
<a name="4508"><q-n>     4508  </q-n></a>                             overflow_style =&gt; overflow_style);
<a name="4509"><q-n>     4509  </q-n></a>    <q-w>else</q-w>
<a name="4510"><q-n>     4510  </q-n></a>      result := Xresult (result'<q-w>range</q-w>);
<a name="4511"><q-n>     4511  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4512"><q-n>     4512  </q-n></a>    <q-w>return</q-w> result;
<a name="4513"><q-n>     4513  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ufixed;
<a name="4514"><q-n>     4514  </q-n></a>
<a name="4515"><q-n>     4515  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="4516"><q-n>     4516  </q-n></a>    arg                     : <q-t>REAL</q-w>;     <q-m>-- real</q-m>
<a name="4517"><q-n>     4517  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- left index (high index)</q-m>
<a name="4518"><q-n>     4518  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>;  <q-m>-- right index</q-m>
<a name="4519"><q-n>     4519  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="4520"><q-n>     4520  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style;
<a name="4521"><q-n>     4521  </q-n></a>    <q-w>constant</q-w> guard_bits     : <q-t>NATURAL</q-w>                   := fixed_guard_bits)  <q-m>-- # of guard bits</q-m>
<a name="4522"><q-n>     4522  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="4523"><q-n>     4523  </q-n></a>    <q-w>constant</q-w> fw     : <q-t>INTEGER</q-w> := mins (right_index, right_index);  <q-m>-- catch literals</q-m>
<a name="4524"><q-n>     4524  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> fw) :=
<a name="4525"><q-n>     4525  </q-n></a>      (<q-w>others</q-w> =&gt; '0');
<a name="4526"><q-n>     4526  </q-n></a>    <q-w>variable</q-w> Xresult : UNRESOLVED_sfixed (left_index+1 <q-w>downto</q-w> fw-guard_bits) :=
<a name="4527"><q-n>     4527  </q-n></a>      (<q-w>others</q-w> =&gt; '0');
<a name="4528"><q-n>     4528  </q-n></a>    <q-w>variable</q-w> presult : <q-t>REAL</q-w>;
<a name="4529"><q-n>     4529  </q-n></a>  <q-w>begin</q-w>
<a name="4530"><q-n>     4530  </q-n></a>    <q-w>if</q-w> (left_index &lt; fw) <q-w>then</q-w>           <q-m>-- null range</q-m>
<a name="4531"><q-n>     4531  </q-n></a>      <q-w>return</q-w> NASF;
<a name="4532"><q-n>     4532  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4533"><q-n>     4533  </q-n></a>    <q-w>if</q-w> (arg &gt;= (2.0**left_index) <q-w>or</q-w> arg &lt; -(2.0**left_index)) <q-w>then</q-w>
<a name="4534"><q-n>     4534  </q-n></a>      <q-w>assert</q-w> NO_WARNING <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4535"><q-n>     4535  </q-n></a>        &amp; <q-l>"TO_SFIXED(REAL): vector truncated"</q-l>
<a name="4536"><q-n>     4536  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="4537"><q-n>     4537  </q-n></a>      <q-w>if</q-w> overflow_style = fixed_saturate <q-w>then</q-w>
<a name="4538"><q-n>     4538  </q-n></a>        <q-w>if</q-w> arg &lt; 0.0 <q-w>then</q-w>               <q-m>-- saturate</q-m>
<a name="4539"><q-n>     4539  </q-n></a>          result := <q-w>not</q-w> saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);        <q-m>-- underflow</q-m>
<a name="4540"><q-n>     4540  </q-n></a>        <q-w>else</q-w>
<a name="4541"><q-n>     4541  </q-n></a>          result := saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);            <q-m>-- overflow</q-m>
<a name="4542"><q-n>     4542  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="4543"><q-n>     4543  </q-n></a>        <q-w>return</q-w> result;
<a name="4544"><q-n>     4544  </q-n></a>      <q-w>else</q-w>
<a name="4545"><q-n>     4545  </q-n></a>        presult := <q-w>abs</q-w>(arg) <q-w>mod</q-w> (2.0**(left_index+1));             <q-m>-- wrap</q-m>
<a name="4546"><q-n>     4546  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="4547"><q-n>     4547  </q-n></a>    <q-w>else</q-w>
<a name="4548"><q-n>     4548  </q-n></a>      presult := <q-w>abs</q-w>(arg);
<a name="4549"><q-n>     4549  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4550"><q-n>     4550  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> Xresult'<q-w>range</q-w> <q-w>loop</q-w>
<a name="4551"><q-n>     4551  </q-n></a>      <q-w>if</q-w> presult &gt;= 2.0**i <q-w>then</q-w>
<a name="4552"><q-n>     4552  </q-n></a>        Xresult(i) := '1';
<a name="4553"><q-n>     4553  </q-n></a>        presult    := presult - 2.0**i;
<a name="4554"><q-n>     4554  </q-n></a>      <q-w>else</q-w>
<a name="4555"><q-n>     4555  </q-n></a>        Xresult(i) := '0';
<a name="4556"><q-n>     4556  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="4557"><q-n>     4557  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="4558"><q-n>     4558  </q-n></a>    <q-w>if</q-w> arg &lt; 0.0 <q-w>then</q-w>
<a name="4559"><q-n>     4559  </q-n></a>      Xresult := to_fixed(-to_s(Xresult), Xresult'<q-a>high</q-w>, Xresult'<q-a>low</q-w>);
<a name="4560"><q-n>     4560  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4561"><q-n>     4561  </q-n></a>    <q-w>if</q-w> guard_bits &gt; 0 <q-w>and</q-w> round_style = fixed_round <q-w>then</q-w>
<a name="4562"><q-n>     4562  </q-n></a>      result := round_fixed (arg =&gt; Xresult (left_index
<a name="4563"><q-n>     4563  </q-n></a>                                             <q-w>downto</q-w> right_index),
<a name="4564"><q-n>     4564  </q-n></a>                             remainder =&gt; Xresult (right_index-1 <q-w>downto</q-w>
<a name="4565"><q-n>     4565  </q-n></a>                                                   right_index-guard_bits),
<a name="4566"><q-n>     4566  </q-n></a>                             overflow_style =&gt; overflow_style);
<a name="4567"><q-n>     4567  </q-n></a>    <q-w>else</q-w>
<a name="4568"><q-n>     4568  </q-n></a>      result := Xresult (result'<q-w>range</q-w>);
<a name="4569"><q-n>     4569  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4570"><q-n>     4570  </q-n></a>    <q-w>return</q-w> result;
<a name="4571"><q-n>     4571  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_sfixed;
<a name="4572"><q-n>     4572  </q-n></a>
<a name="4573"><q-n>     4573  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="4574"><q-n>     4574  </q-n></a>    arg                     : <q-t>UNSIGNED</q-w>;             <q-m>-- unsigned</q-m>
<a name="4575"><q-n>     4575  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- left index (high index)</q-m>
<a name="4576"><q-n>     4576  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>                   := 0;  <q-m>-- right index</q-m>
<a name="4577"><q-n>     4577  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="4578"><q-n>     4578  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="4579"><q-n>     4579  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="4580"><q-n>     4580  </q-n></a>    <q-w>constant</q-w> ARG_LEFT : <q-t>INTEGER</q-w> := ARG'<q-a>length</q-w>-1;
<a name="4581"><q-n>     4581  </q-n></a>    <q-w>alias</q-w> XARG        : <q-t>UNSIGNED</q-w>(ARG_LEFT <q-w>downto</q-w> 0) <q-w>is</q-w> ARG;
<a name="4582"><q-n>     4582  </q-n></a>    <q-w>variable</q-w> result   : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="4583"><q-n>     4583  </q-n></a>  <q-w>begin</q-w>
<a name="4584"><q-n>     4584  </q-n></a>    <q-w>if</q-w> arg'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> (left_index &lt; right_index) <q-w>then</q-w>
<a name="4585"><q-n>     4585  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="4586"><q-n>     4586  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4587"><q-n>     4587  </q-n></a>    result := resize (arg            =&gt; UNRESOLVED_ufixed (XARG),
<a name="4588"><q-n>     4588  </q-n></a>                      left_index     =&gt; left_index,
<a name="4589"><q-n>     4589  </q-n></a>                      right_index    =&gt; right_index,
<a name="4590"><q-n>     4590  </q-n></a>                      round_style    =&gt; round_style,
<a name="4591"><q-n>     4591  </q-n></a>                      overflow_style =&gt; overflow_style);
<a name="4592"><q-n>     4592  </q-n></a>    <q-w>return</q-w> result;
<a name="4593"><q-n>     4593  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ufixed;
<a name="4594"><q-n>     4594  </q-n></a>
<a name="4595"><q-n>     4595  </q-n></a>  <q-m>-- converted version</q-m>
<a name="4596"><q-n>     4596  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="4597"><q-n>     4597  </q-n></a>    arg : <q-t>UNSIGNED</q-w>)          <q-m>-- unsigned</q-m>
<a name="4598"><q-n>     4598  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="4599"><q-n>     4599  </q-n></a>    <q-w>constant</q-w> ARG_LEFT : <q-t>INTEGER</q-w> := ARG'<q-a>length</q-w>-1;
<a name="4600"><q-n>     4600  </q-n></a>    <q-w>alias</q-w> XARG        : <q-t>UNSIGNED</q-w>(ARG_LEFT <q-w>downto</q-w> 0) <q-w>is</q-w> ARG;
<a name="4601"><q-n>     4601  </q-n></a>  <q-w>begin</q-w>
<a name="4602"><q-n>     4602  </q-n></a>    <q-w>if</q-w> arg'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="4603"><q-n>     4603  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="4604"><q-n>     4604  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4605"><q-n>     4605  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed(xarg);
<a name="4606"><q-n>     4606  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ufixed;
<a name="4607"><q-n>     4607  </q-n></a>
<a name="4608"><q-n>     4608  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="4609"><q-n>     4609  </q-n></a>    arg                     : <q-t>SIGNED</q-w>;               <q-m>-- signed</q-m>
<a name="4610"><q-n>     4610  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- left index (high index)</q-m>
<a name="4611"><q-n>     4611  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>                   := 0;  <q-m>-- right index</q-m>
<a name="4612"><q-n>     4612  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="4613"><q-n>     4613  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="4614"><q-n>     4614  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="4615"><q-n>     4615  </q-n></a>    <q-w>constant</q-w> ARG_LEFT : <q-t>INTEGER</q-w> := ARG'<q-a>length</q-w>-1;
<a name="4616"><q-n>     4616  </q-n></a>    <q-w>alias</q-w> XARG        : <q-t>SIGNED</q-w>(ARG_LEFT <q-w>downto</q-w> 0) <q-w>is</q-w> ARG;
<a name="4617"><q-n>     4617  </q-n></a>    <q-w>variable</q-w> result   : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="4618"><q-n>     4618  </q-n></a>  <q-w>begin</q-w>
<a name="4619"><q-n>     4619  </q-n></a>    <q-w>if</q-w> arg'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> (left_index &lt; right_index) <q-w>then</q-w>
<a name="4620"><q-n>     4620  </q-n></a>      <q-w>return</q-w> NASF;
<a name="4621"><q-n>     4621  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4622"><q-n>     4622  </q-n></a>    result := resize (arg            =&gt; UNRESOLVED_sfixed (XARG),
<a name="4623"><q-n>     4623  </q-n></a>                      left_index     =&gt; left_index,
<a name="4624"><q-n>     4624  </q-n></a>                      right_index    =&gt; right_index,
<a name="4625"><q-n>     4625  </q-n></a>                      round_style    =&gt; round_style,
<a name="4626"><q-n>     4626  </q-n></a>                      overflow_style =&gt; overflow_style);
<a name="4627"><q-n>     4627  </q-n></a>    <q-w>return</q-w> result;
<a name="4628"><q-n>     4628  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_sfixed;
<a name="4629"><q-n>     4629  </q-n></a>
<a name="4630"><q-n>     4630  </q-n></a>  <q-m>-- converted version</q-m>
<a name="4631"><q-n>     4631  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="4632"><q-n>     4632  </q-n></a>    arg : <q-t>SIGNED</q-w>)            <q-m>-- signed</q-m>
<a name="4633"><q-n>     4633  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="4634"><q-n>     4634  </q-n></a>    <q-w>constant</q-w> ARG_LEFT : <q-t>INTEGER</q-w> := ARG'<q-a>length</q-w>-1;
<a name="4635"><q-n>     4635  </q-n></a>    <q-w>alias</q-w> XARG        : <q-t>SIGNED</q-w>(ARG_LEFT <q-w>downto</q-w> 0) <q-w>is</q-w> ARG;
<a name="4636"><q-n>     4636  </q-n></a>  <q-w>begin</q-w>
<a name="4637"><q-n>     4637  </q-n></a>    <q-w>if</q-w> arg'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="4638"><q-n>     4638  </q-n></a>      <q-w>return</q-w> NASF;
<a name="4639"><q-n>     4639  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4640"><q-n>     4640  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed(xarg);
<a name="4641"><q-n>     4641  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_sfixed;
<a name="4642"><q-n>     4642  </q-n></a>
<a name="4643"><q-n>     4643  </q-n></a>  <q-w>function</q-w> to_sfixed (arg : UNRESOLVED_ufixed) <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="4644"><q-n>     4644  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (arg'<q-a>high</q-w>+1 <q-w>downto</q-w> arg'<q-a>low</q-w>);
<a name="4645"><q-n>     4645  </q-n></a>  <q-w>begin</q-w>
<a name="4646"><q-n>     4646  </q-n></a>    <q-w>if</q-w> arg'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="4647"><q-n>     4647  </q-n></a>      <q-w>return</q-w> NASF;
<a name="4648"><q-n>     4648  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4649"><q-n>     4649  </q-n></a>    result (arg'<q-a>high</q-w> <q-w>downto</q-w> arg'<q-a>low</q-w>) := UNRESOLVED_sfixed(cleanvec(arg));
<a name="4650"><q-n>     4650  </q-n></a>    result (arg'<q-a>high</q-w>+1)              := '0';
<a name="4651"><q-n>     4651  </q-n></a>    <q-w>return</q-w> result;
<a name="4652"><q-n>     4652  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_sfixed;
<a name="4653"><q-n>     4653  </q-n></a>
<a name="4654"><q-n>     4654  </q-n></a>  <q-m>-- Because of the fairly complicated sizing rules in the fixed point</q-m>
<a name="4655"><q-n>     4655  </q-n></a>  <q-m>-- packages these functions are provided to compute the result ranges</q-m>
<a name="4656"><q-n>     4656  </q-n></a>  <q-m>-- Example:</q-m>
<a name="4657"><q-n>     4657  </q-n></a>  <q-m>-- signal uf1 : ufixed (3 downto -3);</q-m>
<a name="4658"><q-n>     4658  </q-n></a>  <q-m>-- signal uf2 : ufixed (4 downto -2);</q-m>
<a name="4659"><q-n>     4659  </q-n></a>  <q-m>-- signal uf1multuf2 : ufixed (ufixed_high (3, -3, '*', 4, -2) downto</q-m>
<a name="4660"><q-n>     4660  </q-n></a>  <q-m>--                             ufixed_low (3, -3, '*', 4, -2));</q-m>
<a name="4661"><q-n>     4661  </q-n></a>  <q-m>-- uf1multuf2 &lt;= uf1 * uf2;</q-m>
<a name="4662"><q-n>     4662  </q-n></a>  <q-m>-- Valid characters: '+', '-', '*', '/', 'r' or 'R' (rem), 'm' or 'M' (mod),</q-m>
<a name="4663"><q-n>     4663  </q-n></a>  <q-m>-- '1' (reciprocal), 'A', 'a' (abs), 'N', 'n' (-sfixed)</q-m>
<a name="4664"><q-n>     4664  </q-n></a>  <q-w>function</q-w> ufixed_high (left_index, right_index   : <q-t>INTEGER</q-w>;
<a name="4665"><q-n>     4665  </q-n></a>                        operation                 : <q-t>CHARACTER</q-w> := 'X';
<a name="4666"><q-n>     4666  </q-n></a>                        left_index2, right_index2 : <q-t>INTEGER</q-w>   := 0)
<a name="4667"><q-n>     4667  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="4668"><q-n>     4668  </q-n></a>  <q-w>begin</q-w>
<a name="4669"><q-n>     4669  </q-n></a>    <q-w>case</q-w> operation <q-w>is</q-w>
<a name="4670"><q-n>     4670  </q-n></a>      <q-w>when</q-w> '+'| '-' =&gt; <q-w>return</q-w> maximum (left_index, left_index2) + 1;
<a name="4671"><q-n>     4671  </q-n></a>      <q-w>when</q-w> '*'      =&gt; <q-w>return</q-w> left_index + left_index2 + 1;
<a name="4672"><q-n>     4672  </q-n></a>      <q-w>when</q-w> '/'      =&gt; <q-w>return</q-w> left_index - right_index2;
<a name="4673"><q-n>     4673  </q-n></a>      <q-w>when</q-w> '1'      =&gt; <q-w>return</q-w> -right_index;                    <q-m>-- reciprocal</q-m>
<a name="4674"><q-n>     4674  </q-n></a>      <q-w>when</q-w> 'R'|'r'  =&gt; <q-w>return</q-w> mins (left_index, left_index2);  <q-m>-- "rem"</q-m>
<a name="4675"><q-n>     4675  </q-n></a>      <q-w>when</q-w> 'M'|'m'  =&gt; <q-w>return</q-w> mins (left_index, left_index2);  <q-m>-- "mod"</q-m>
<a name="4676"><q-n>     4676  </q-n></a>      <q-w>when</q-w> <q-w>others</q-w>   =&gt; <q-w>return</q-w> left_index;  <q-m>-- For abs and default</q-m>
<a name="4677"><q-n>     4677  </q-n></a>    <q-w>end</q-w> <q-w>case</q-w>;
<a name="4678"><q-n>     4678  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> ufixed_high;
<a name="4679"><q-n>     4679  </q-n></a>  
<a name="4680"><q-n>     4680  </q-n></a>  <q-w>function</q-w> ufixed_low (left_index, right_index   : <q-t>INTEGER</q-w>;
<a name="4681"><q-n>     4681  </q-n></a>                       operation                 : <q-t>CHARACTER</q-w> := 'X';
<a name="4682"><q-n>     4682  </q-n></a>                       left_index2, right_index2 : <q-t>INTEGER</q-w>   := 0)
<a name="4683"><q-n>     4683  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="4684"><q-n>     4684  </q-n></a>  <q-w>begin</q-w>
<a name="4685"><q-n>     4685  </q-n></a>    <q-w>case</q-w> operation <q-w>is</q-w>
<a name="4686"><q-n>     4686  </q-n></a>      <q-w>when</q-w> '+'| '-' =&gt; <q-w>return</q-w> mins (right_index, right_index2);
<a name="4687"><q-n>     4687  </q-n></a>      <q-w>when</q-w> '*'      =&gt; <q-w>return</q-w> right_index + right_index2;
<a name="4688"><q-n>     4688  </q-n></a>      <q-w>when</q-w> '/'      =&gt; <q-w>return</q-w> right_index - left_index2 - 1;
<a name="4689"><q-n>     4689  </q-n></a>      <q-w>when</q-w> '1'      =&gt; <q-w>return</q-w> -left_index - 1;                   <q-m>-- reciprocal</q-m>
<a name="4690"><q-n>     4690  </q-n></a>      <q-w>when</q-w> 'R'|'r'  =&gt; <q-w>return</q-w> mins (right_index, right_index2);  <q-m>-- "rem"</q-m>
<a name="4691"><q-n>     4691  </q-n></a>      <q-w>when</q-w> 'M'|'m'  =&gt; <q-w>return</q-w> mins (right_index, right_index2);  <q-m>-- "mod"</q-m>
<a name="4692"><q-n>     4692  </q-n></a>      <q-w>when</q-w> <q-w>others</q-w>   =&gt; <q-w>return</q-w> right_index;  <q-m>-- for abs and default</q-m>
<a name="4693"><q-n>     4693  </q-n></a>    <q-w>end</q-w> <q-w>case</q-w>;
<a name="4694"><q-n>     4694  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> ufixed_low;
<a name="4695"><q-n>     4695  </q-n></a>  
<a name="4696"><q-n>     4696  </q-n></a>  <q-w>function</q-w> sfixed_high (left_index, right_index   : <q-t>INTEGER</q-w>;
<a name="4697"><q-n>     4697  </q-n></a>                        operation                 : <q-t>CHARACTER</q-w> := 'X';
<a name="4698"><q-n>     4698  </q-n></a>                        left_index2, right_index2 : <q-t>INTEGER</q-w>   := 0)
<a name="4699"><q-n>     4699  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="4700"><q-n>     4700  </q-n></a>  <q-w>begin</q-w>
<a name="4701"><q-n>     4701  </q-n></a>    <q-w>case</q-w> operation <q-w>is</q-w>
<a name="4702"><q-n>     4702  </q-n></a>      <q-w>when</q-w> '+'| '-' =&gt; <q-w>return</q-w> maximum (left_index, left_index2) + 1;
<a name="4703"><q-n>     4703  </q-n></a>      <q-w>when</q-w> '*'      =&gt; <q-w>return</q-w> left_index + left_index2 + 1;
<a name="4704"><q-n>     4704  </q-n></a>      <q-w>when</q-w> '/'      =&gt; <q-w>return</q-w> left_index - right_index2 + 1;
<a name="4705"><q-n>     4705  </q-n></a>      <q-w>when</q-w> '1'      =&gt; <q-w>return</q-w> -right_index + 1;                <q-m>-- reciprocal</q-m>
<a name="4706"><q-n>     4706  </q-n></a>      <q-w>when</q-w> 'R'|'r'  =&gt; <q-w>return</q-w> mins (left_index, left_index2);  <q-m>-- "rem"</q-m>
<a name="4707"><q-n>     4707  </q-n></a>      <q-w>when</q-w> 'M'|'m'  =&gt; <q-w>return</q-w> left_index2;                     <q-m>-- "mod"</q-m>
<a name="4708"><q-n>     4708  </q-n></a>      <q-w>when</q-w> 'A'|'a'  =&gt; <q-w>return</q-w> left_index + 1;                  <q-m>-- "abs"</q-m>
<a name="4709"><q-n>     4709  </q-n></a>      <q-w>when</q-w> 'N'|'n'  =&gt; <q-w>return</q-w> left_index + 1;                  <q-m>-- -sfixed</q-m>
<a name="4710"><q-n>     4710  </q-n></a>      <q-w>when</q-w> <q-w>others</q-w>   =&gt; <q-w>return</q-w> left_index;
<a name="4711"><q-n>     4711  </q-n></a>    <q-w>end</q-w> <q-w>case</q-w>;
<a name="4712"><q-n>     4712  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> sfixed_high;
<a name="4713"><q-n>     4713  </q-n></a>
<a name="4714"><q-n>     4714  </q-n></a>  <q-w>function</q-w> sfixed_low (left_index, right_index   : <q-t>INTEGER</q-w>;
<a name="4715"><q-n>     4715  </q-n></a>                       operation                 : <q-t>CHARACTER</q-w> := 'X';
<a name="4716"><q-n>     4716  </q-n></a>                       left_index2, right_index2 : <q-t>INTEGER</q-w>   := 0)
<a name="4717"><q-n>     4717  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="4718"><q-n>     4718  </q-n></a>  <q-w>begin</q-w>
<a name="4719"><q-n>     4719  </q-n></a>    <q-w>case</q-w> operation <q-w>is</q-w>
<a name="4720"><q-n>     4720  </q-n></a>      <q-w>when</q-w> '+'| '-' =&gt; <q-w>return</q-w> mins (right_index, right_index2);
<a name="4721"><q-n>     4721  </q-n></a>      <q-w>when</q-w> '*'      =&gt; <q-w>return</q-w> right_index + right_index2;
<a name="4722"><q-n>     4722  </q-n></a>      <q-w>when</q-w> '/'      =&gt; <q-w>return</q-w> right_index - left_index2;
<a name="4723"><q-n>     4723  </q-n></a>      <q-w>when</q-w> '1'      =&gt; <q-w>return</q-w> -left_index;  <q-m>-- reciprocal</q-m>
<a name="4724"><q-n>     4724  </q-n></a>      <q-w>when</q-w> 'R'|'r'  =&gt; <q-w>return</q-w> mins (right_index, right_index2);  <q-m>-- "rem"</q-m>
<a name="4725"><q-n>     4725  </q-n></a>      <q-w>when</q-w> 'M'|'m'  =&gt; <q-w>return</q-w> mins (right_index, right_index2);  <q-m>-- "mod"</q-m>
<a name="4726"><q-n>     4726  </q-n></a>      <q-w>when</q-w> <q-w>others</q-w>   =&gt; <q-w>return</q-w> right_index;  <q-m>-- default for abs, neg and default</q-m>
<a name="4727"><q-n>     4727  </q-n></a>    <q-w>end</q-w> <q-w>case</q-w>;
<a name="4728"><q-n>     4728  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> sfixed_low;
<a name="4729"><q-n>     4729  </q-n></a>
<a name="4730"><q-n>     4730  </q-n></a>  <q-m>-- Same as above, but using the "size_res" input only for their ranges:</q-m>
<a name="4731"><q-n>     4731  </q-n></a>  <q-m>-- signal uf1multuf2 : ufixed (ufixed_high (uf1, '*', uf2) downto</q-m>
<a name="4732"><q-n>     4732  </q-n></a>  <q-m>--                             ufixed_low (uf1, '*', uf2));</q-m>
<a name="4733"><q-n>     4733  </q-n></a>  <q-m>-- uf1multuf2 &lt;= uf1 * uf2;  </q-m>
<a name="4734"><q-n>     4734  </q-n></a>  <q-w>function</q-w> ufixed_high (size_res  : UNRESOLVED_ufixed;
<a name="4735"><q-n>     4735  </q-n></a>                        operation : <q-t>CHARACTER</q-w> := 'X';
<a name="4736"><q-n>     4736  </q-n></a>                        size_res2 : UNRESOLVED_ufixed)
<a name="4737"><q-n>     4737  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="4738"><q-n>     4738  </q-n></a>  <q-w>begin</q-w>
<a name="4739"><q-n>     4739  </q-n></a>    <q-w>return</q-w> ufixed_high (left_index   =&gt; size_res'<q-a>high</q-w>,
<a name="4740"><q-n>     4740  </q-n></a>                        right_index  =&gt; size_res'<q-a>low</q-w>,
<a name="4741"><q-n>     4741  </q-n></a>                        operation    =&gt; operation,
<a name="4742"><q-n>     4742  </q-n></a>                        left_index2  =&gt; size_res2'<q-a>high</q-w>,
<a name="4743"><q-n>     4743  </q-n></a>                        right_index2 =&gt; size_res2'<q-a>low</q-w>);
<a name="4744"><q-n>     4744  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> ufixed_high;
<a name="4745"><q-n>     4745  </q-n></a>
<a name="4746"><q-n>     4746  </q-n></a>  <q-w>function</q-w> ufixed_low (size_res  : UNRESOLVED_ufixed;
<a name="4747"><q-n>     4747  </q-n></a>                       operation : <q-t>CHARACTER</q-w> := 'X';
<a name="4748"><q-n>     4748  </q-n></a>                       size_res2 : UNRESOLVED_ufixed)
<a name="4749"><q-n>     4749  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="4750"><q-n>     4750  </q-n></a>  <q-w>begin</q-w>
<a name="4751"><q-n>     4751  </q-n></a>    <q-w>return</q-w> ufixed_low (left_index   =&gt; size_res'<q-a>high</q-w>,
<a name="4752"><q-n>     4752  </q-n></a>                       right_index  =&gt; size_res'<q-a>low</q-w>,
<a name="4753"><q-n>     4753  </q-n></a>                       operation    =&gt; operation,
<a name="4754"><q-n>     4754  </q-n></a>                       left_index2  =&gt; size_res2'<q-a>high</q-w>,
<a name="4755"><q-n>     4755  </q-n></a>                       right_index2 =&gt; size_res2'<q-a>low</q-w>);
<a name="4756"><q-n>     4756  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> ufixed_low;
<a name="4757"><q-n>     4757  </q-n></a>
<a name="4758"><q-n>     4758  </q-n></a>  <q-w>function</q-w> sfixed_high (size_res  : UNRESOLVED_sfixed;
<a name="4759"><q-n>     4759  </q-n></a>                        operation : <q-t>CHARACTER</q-w> := 'X';
<a name="4760"><q-n>     4760  </q-n></a>                        size_res2 : UNRESOLVED_sfixed)
<a name="4761"><q-n>     4761  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="4762"><q-n>     4762  </q-n></a>  <q-w>begin</q-w>
<a name="4763"><q-n>     4763  </q-n></a>    <q-w>return</q-w> sfixed_high (left_index   =&gt; size_res'<q-a>high</q-w>,
<a name="4764"><q-n>     4764  </q-n></a>                        right_index  =&gt; size_res'<q-a>low</q-w>,
<a name="4765"><q-n>     4765  </q-n></a>                        operation    =&gt; operation,
<a name="4766"><q-n>     4766  </q-n></a>                        left_index2  =&gt; size_res2'<q-a>high</q-w>,
<a name="4767"><q-n>     4767  </q-n></a>                        right_index2 =&gt; size_res2'<q-a>low</q-w>);
<a name="4768"><q-n>     4768  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> sfixed_high;
<a name="4769"><q-n>     4769  </q-n></a>
<a name="4770"><q-n>     4770  </q-n></a>  <q-w>function</q-w> sfixed_low (size_res  : UNRESOLVED_sfixed;
<a name="4771"><q-n>     4771  </q-n></a>                       operation : <q-t>CHARACTER</q-w> := 'X';
<a name="4772"><q-n>     4772  </q-n></a>                       size_res2 : UNRESOLVED_sfixed)
<a name="4773"><q-n>     4773  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="4774"><q-n>     4774  </q-n></a>  <q-w>begin</q-w>
<a name="4775"><q-n>     4775  </q-n></a>    <q-w>return</q-w> sfixed_low (left_index   =&gt; size_res'<q-a>high</q-w>,
<a name="4776"><q-n>     4776  </q-n></a>                       right_index  =&gt; size_res'<q-a>low</q-w>,
<a name="4777"><q-n>     4777  </q-n></a>                       operation    =&gt; operation,
<a name="4778"><q-n>     4778  </q-n></a>                       left_index2  =&gt; size_res2'<q-a>high</q-w>,
<a name="4779"><q-n>     4779  </q-n></a>                       right_index2 =&gt; size_res2'<q-a>low</q-w>);
<a name="4780"><q-n>     4780  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> sfixed_low;
<a name="4781"><q-n>     4781  </q-n></a>
<a name="4782"><q-n>     4782  </q-n></a>  <q-m>-- purpose: returns a saturated number</q-m>
<a name="4783"><q-n>     4783  </q-n></a>  <q-w>function</q-w> saturate (
<a name="4784"><q-n>     4784  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="4785"><q-n>     4785  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="4786"><q-n>     4786  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="4787"><q-n>     4787  </q-n></a>    <q-w>constant</q-w> sat : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index) :=
<a name="4788"><q-n>     4788  </q-n></a>      (<q-w>others</q-w> =&gt; '1');
<a name="4789"><q-n>     4789  </q-n></a>  <q-w>begin</q-w>
<a name="4790"><q-n>     4790  </q-n></a>    <q-w>return</q-w> sat;
<a name="4791"><q-n>     4791  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> saturate;
<a name="4792"><q-n>     4792  </q-n></a>
<a name="4793"><q-n>     4793  </q-n></a>  <q-m>-- purpose: returns a saturated number</q-m>
<a name="4794"><q-n>     4794  </q-n></a>  <q-w>function</q-w> saturate (
<a name="4795"><q-n>     4795  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="4796"><q-n>     4796  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="4797"><q-n>     4797  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="4798"><q-n>     4798  </q-n></a>    <q-w>variable</q-w> sat : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index) :=
<a name="4799"><q-n>     4799  </q-n></a>      (<q-w>others</q-w> =&gt; '1');
<a name="4800"><q-n>     4800  </q-n></a>  <q-w>begin</q-w>
<a name="4801"><q-n>     4801  </q-n></a>    <q-m>-- saturate positive, to saturate negative, just do "not saturate()"</q-m>
<a name="4802"><q-n>     4802  </q-n></a>    sat (left_index) := '0';
<a name="4803"><q-n>     4803  </q-n></a>    <q-w>return</q-w> sat;
<a name="4804"><q-n>     4804  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> saturate;
<a name="4805"><q-n>     4805  </q-n></a>
<a name="4806"><q-n>     4806  </q-n></a>  <q-w>function</q-w> saturate (
<a name="4807"><q-n>     4807  </q-n></a>    size_res : UNRESOLVED_ufixed)       <q-m>-- only the size of this is used</q-m>
<a name="4808"><q-n>     4808  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="4809"><q-n>     4809  </q-n></a>  <q-w>begin</q-w>
<a name="4810"><q-n>     4810  </q-n></a>    <q-w>return</q-w> saturate (size_res'<q-a>high</q-w>, size_res'<q-a>low</q-w>);
<a name="4811"><q-n>     4811  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> saturate;
<a name="4812"><q-n>     4812  </q-n></a>
<a name="4813"><q-n>     4813  </q-n></a>  <q-w>function</q-w> saturate (
<a name="4814"><q-n>     4814  </q-n></a>    size_res : UNRESOLVED_sfixed)       <q-m>-- only the size of this is used</q-m>
<a name="4815"><q-n>     4815  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="4816"><q-n>     4816  </q-n></a>  <q-w>begin</q-w>
<a name="4817"><q-n>     4817  </q-n></a>    <q-w>return</q-w> saturate (size_res'<q-a>high</q-w>, size_res'<q-a>low</q-w>);
<a name="4818"><q-n>     4818  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> saturate;
<a name="4819"><q-n>     4819  </q-n></a>
<a name="4820"><q-n>     4820  </q-n></a>  <q-m>-- As a concession to those who use a graphical DSP environment,</q-m>
<a name="4821"><q-n>     4821  </q-n></a>  <q-m>-- these functions take parameters in those tools format and create</q-m>
<a name="4822"><q-n>     4822  </q-n></a>  <q-m>-- fixed point numbers.  These functions are designed to convert from</q-m>
<a name="4823"><q-n>     4823  </q-n></a>  <q-m>-- a std_logic_vector to the VHDL fixed point format using the conventions</q-m>
<a name="4824"><q-n>     4824  </q-n></a>  <q-m>-- of these packages.  In a pure VHDL environment you should use the</q-m>
<a name="4825"><q-n>     4825  </q-n></a>  <q-m>-- "to_ufixed" and "to_sfixed" routines.</q-m>
<a name="4826"><q-n>     4826  </q-n></a>  <q-m>-- Unsigned fixed point</q-m>
<a name="4827"><q-n>     4827  </q-n></a>  <q-w>function</q-w> to_UFix (
<a name="4828"><q-n>     4828  </q-n></a>    arg      : <q-t>STD_ULOGIC_VECTOR</q-w>;
<a name="4829"><q-n>     4829  </q-n></a>    width    : <q-t>NATURAL</q-w>;                 <q-m>-- width of vector</q-m>
<a name="4830"><q-n>     4830  </q-n></a>    fraction : <q-t>NATURAL</q-w>)                 <q-m>-- width of fraction</q-m>
<a name="4831"><q-n>     4831  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="4832"><q-n>     4832  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (width-fraction-1 <q-w>downto</q-w> -fraction);
<a name="4833"><q-n>     4833  </q-n></a>  <q-w>begin</q-w>
<a name="4834"><q-n>     4834  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> /= result'<q-a>length</q-w>) <q-w>then</q-w>
<a name="4835"><q-n>     4835  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4836"><q-n>     4836  </q-n></a>        &amp; <q-l>"TO_UFIX (STD_ULOGIC_VECTOR) "</q-l>
<a name="4837"><q-n>     4837  </q-n></a>        &amp; <q-l>"Vector lengths do not match.  Input length is "</q-l>
<a name="4838"><q-n>     4838  </q-n></a>        &amp; <q-t>INTEGER</q-w>'<q-a>image</q-w>(arg'<q-a>length</q-w>) &amp; <q-l>" and output will be "</q-l>
<a name="4839"><q-n>     4839  </q-n></a>        &amp; <q-t>INTEGER</q-w>'<q-a>image</q-w>(result'<q-a>length</q-w>) &amp; <q-l>" wide."</q-l>
<a name="4840"><q-n>     4840  </q-n></a>        <q-w>severity</q-w> error;
<a name="4841"><q-n>     4841  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="4842"><q-n>     4842  </q-n></a>    <q-w>else</q-w>
<a name="4843"><q-n>     4843  </q-n></a>      result := to_ufixed (arg, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="4844"><q-n>     4844  </q-n></a>      <q-w>return</q-w> result;
<a name="4845"><q-n>     4845  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4846"><q-n>     4846  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_UFix;
<a name="4847"><q-n>     4847  </q-n></a>
<a name="4848"><q-n>     4848  </q-n></a>  <q-m>-- signed fixed point</q-m>
<a name="4849"><q-n>     4849  </q-n></a>  <q-w>function</q-w> to_SFix (
<a name="4850"><q-n>     4850  </q-n></a>    arg      : <q-t>STD_ULOGIC_VECTOR</q-w>;
<a name="4851"><q-n>     4851  </q-n></a>    width    : <q-t>NATURAL</q-w>;                 <q-m>-- width of vector</q-m>
<a name="4852"><q-n>     4852  </q-n></a>    fraction : <q-t>NATURAL</q-w>)                 <q-m>-- width of fraction</q-m>
<a name="4853"><q-n>     4853  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="4854"><q-n>     4854  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (width-fraction-1 <q-w>downto</q-w> -fraction);
<a name="4855"><q-n>     4855  </q-n></a>  <q-w>begin</q-w>
<a name="4856"><q-n>     4856  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> /= result'<q-a>length</q-w>) <q-w>then</q-w>
<a name="4857"><q-n>     4857  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4858"><q-n>     4858  </q-n></a>        &amp; <q-l>"TO_SFIX (STD_ULOGIC_VECTOR) "</q-l>
<a name="4859"><q-n>     4859  </q-n></a>        &amp; <q-l>"Vector lengths do not match.  Input length is "</q-l>
<a name="4860"><q-n>     4860  </q-n></a>        &amp; <q-t>INTEGER</q-w>'<q-a>image</q-w>(arg'<q-a>length</q-w>) &amp; <q-l>" and output will be "</q-l>
<a name="4861"><q-n>     4861  </q-n></a>        &amp; <q-t>INTEGER</q-w>'<q-a>image</q-w>(result'<q-a>length</q-w>) &amp; <q-l>" wide."</q-l>
<a name="4862"><q-n>     4862  </q-n></a>        <q-w>severity</q-w> error;
<a name="4863"><q-n>     4863  </q-n></a>      <q-w>return</q-w> NASF;
<a name="4864"><q-n>     4864  </q-n></a>    <q-w>else</q-w>
<a name="4865"><q-n>     4865  </q-n></a>      result := to_sfixed (arg, result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="4866"><q-n>     4866  </q-n></a>      <q-w>return</q-w> result;
<a name="4867"><q-n>     4867  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4868"><q-n>     4868  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_SFix;
<a name="4869"><q-n>     4869  </q-n></a>
<a name="4870"><q-n>     4870  </q-n></a>  <q-m>-- finding the bounds of a number.  These functions can be used like this:</q-m>
<a name="4871"><q-n>     4871  </q-n></a>  <q-m>-- signal xxx : ufixed (7 downto -3);</q-m>
<a name="4872"><q-n>     4872  </q-n></a>  <q-m>-- -- Which is the same as "ufixed (UFix_high (11,3) downto UFix_low(11,3))"</q-m>
<a name="4873"><q-n>     4873  </q-n></a>  <q-m>-- signal yyy : ufixed (UFix_high (11, 3, "+", 11, 3)</q-m>
<a name="4874"><q-n>     4874  </q-n></a>  <q-m>--               downto UFix_low(11, 3, "+", 11, 3));</q-m>
<a name="4875"><q-n>     4875  </q-n></a>  <q-m>-- Where "11" is the width of xxx (xxx'length),</q-m>
<a name="4876"><q-n>     4876  </q-n></a>  <q-m>-- and 3 is the lower bound (abs (xxx'low))</q-m>
<a name="4877"><q-n>     4877  </q-n></a>  <q-m>-- In a pure VHDL environment use "ufixed_high" and "ufixed_low"</q-m>
<a name="4878"><q-n>     4878  </q-n></a>  <q-w>function</q-w> ufix_high (
<a name="4879"><q-n>     4879  </q-n></a>    width, fraction   : <q-t>NATURAL</q-w>;
<a name="4880"><q-n>     4880  </q-n></a>    operation         : <q-t>CHARACTER</q-w> := 'X';
<a name="4881"><q-n>     4881  </q-n></a>    width2, fraction2 : <q-t>NATURAL</q-w>   := 0)
<a name="4882"><q-n>     4882  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="4883"><q-n>     4883  </q-n></a>  <q-w>begin</q-w>
<a name="4884"><q-n>     4884  </q-n></a>    <q-w>return</q-w> ufixed_high (left_index   =&gt; width - 1 - fraction,
<a name="4885"><q-n>     4885  </q-n></a>                        right_index  =&gt; -fraction,
<a name="4886"><q-n>     4886  </q-n></a>                        operation    =&gt; operation,
<a name="4887"><q-n>     4887  </q-n></a>                        left_index2  =&gt; width2 - 1 - fraction2,
<a name="4888"><q-n>     4888  </q-n></a>                        right_index2 =&gt; -fraction2);
<a name="4889"><q-n>     4889  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> ufix_high;
<a name="4890"><q-n>     4890  </q-n></a>
<a name="4891"><q-n>     4891  </q-n></a>  <q-w>function</q-w> ufix_low (
<a name="4892"><q-n>     4892  </q-n></a>    width, fraction   : <q-t>NATURAL</q-w>;
<a name="4893"><q-n>     4893  </q-n></a>    operation         : <q-t>CHARACTER</q-w> := 'X';
<a name="4894"><q-n>     4894  </q-n></a>    width2, fraction2 : <q-t>NATURAL</q-w>   := 0)
<a name="4895"><q-n>     4895  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="4896"><q-n>     4896  </q-n></a>  <q-w>begin</q-w>
<a name="4897"><q-n>     4897  </q-n></a>    <q-w>return</q-w> ufixed_low (left_index   =&gt; width - 1 - fraction,
<a name="4898"><q-n>     4898  </q-n></a>                       right_index  =&gt; -fraction,
<a name="4899"><q-n>     4899  </q-n></a>                       operation    =&gt; operation,
<a name="4900"><q-n>     4900  </q-n></a>                       left_index2  =&gt; width2 - 1 - fraction2,
<a name="4901"><q-n>     4901  </q-n></a>                       right_index2 =&gt; -fraction2);
<a name="4902"><q-n>     4902  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> ufix_low;
<a name="4903"><q-n>     4903  </q-n></a>
<a name="4904"><q-n>     4904  </q-n></a>  <q-w>function</q-w> sfix_high (
<a name="4905"><q-n>     4905  </q-n></a>    width, fraction   : <q-t>NATURAL</q-w>;
<a name="4906"><q-n>     4906  </q-n></a>    operation         : <q-t>CHARACTER</q-w> := 'X';
<a name="4907"><q-n>     4907  </q-n></a>    width2, fraction2 : <q-t>NATURAL</q-w>   := 0)
<a name="4908"><q-n>     4908  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="4909"><q-n>     4909  </q-n></a>  <q-w>begin</q-w>
<a name="4910"><q-n>     4910  </q-n></a>    <q-w>return</q-w> sfixed_high (left_index   =&gt; width - fraction,
<a name="4911"><q-n>     4911  </q-n></a>                        right_index  =&gt; -fraction,
<a name="4912"><q-n>     4912  </q-n></a>                        operation    =&gt; operation,
<a name="4913"><q-n>     4913  </q-n></a>                        left_index2  =&gt; width2 - fraction2,
<a name="4914"><q-n>     4914  </q-n></a>                        right_index2 =&gt; -fraction2);
<a name="4915"><q-n>     4915  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> sfix_high;
<a name="4916"><q-n>     4916  </q-n></a>
<a name="4917"><q-n>     4917  </q-n></a>  <q-w>function</q-w> sfix_low (
<a name="4918"><q-n>     4918  </q-n></a>    width, fraction   : <q-t>NATURAL</q-w>;
<a name="4919"><q-n>     4919  </q-n></a>    operation         : <q-t>CHARACTER</q-w> := 'X';
<a name="4920"><q-n>     4920  </q-n></a>    width2, fraction2 : <q-t>NATURAL</q-w>   := 0)
<a name="4921"><q-n>     4921  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="4922"><q-n>     4922  </q-n></a>  <q-w>begin</q-w>
<a name="4923"><q-n>     4923  </q-n></a>    <q-w>return</q-w> sfixed_low (left_index   =&gt; width - fraction,
<a name="4924"><q-n>     4924  </q-n></a>                       right_index  =&gt; -fraction,
<a name="4925"><q-n>     4925  </q-n></a>                       operation    =&gt; operation,
<a name="4926"><q-n>     4926  </q-n></a>                       left_index2  =&gt; width2 - fraction2,
<a name="4927"><q-n>     4927  </q-n></a>                       right_index2 =&gt; -fraction2);
<a name="4928"><q-n>     4928  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> sfix_low;
<a name="4929"><q-n>     4929  </q-n></a>
<a name="4930"><q-n>     4930  </q-n></a>  <q-w>function</q-w> to_unsigned (
<a name="4931"><q-n>     4931  </q-n></a>    arg                     : UNRESOLVED_ufixed;  <q-m>-- ufixed point input</q-m>
<a name="4932"><q-n>     4932  </q-n></a>    <q-w>constant</q-w> size           : <q-t>NATURAL</q-w>;            <q-m>-- length of output</q-m>
<a name="4933"><q-n>     4933  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="4934"><q-n>     4934  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="4935"><q-n>     4935  </q-n></a>    <q-w>return</q-w> <q-t>UNSIGNED</q-w> <q-w>is</q-w>
<a name="4936"><q-n>     4936  </q-n></a>  <q-w>begin</q-w>
<a name="4937"><q-n>     4937  </q-n></a>    <q-w>return</q-w> to_uns(resize (arg            =&gt; arg,
<a name="4938"><q-n>     4938  </q-n></a>                          left_index     =&gt; size-1,
<a name="4939"><q-n>     4939  </q-n></a>                          right_index    =&gt; 0,
<a name="4940"><q-n>     4940  </q-n></a>                          round_style    =&gt; round_style,
<a name="4941"><q-n>     4941  </q-n></a>                          overflow_style =&gt; overflow_style));
<a name="4942"><q-n>     4942  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_unsigned;
<a name="4943"><q-n>     4943  </q-n></a>
<a name="4944"><q-n>     4944  </q-n></a>  <q-w>function</q-w> to_unsigned (
<a name="4945"><q-n>     4945  </q-n></a>    arg                     : UNRESOLVED_ufixed;    <q-m>-- ufixed point input</q-m>
<a name="4946"><q-n>     4946  </q-n></a>    size_res                : <q-t>UNSIGNED</q-w>;  <q-m>-- length of output</q-m>
<a name="4947"><q-n>     4947  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="4948"><q-n>     4948  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="4949"><q-n>     4949  </q-n></a>    <q-w>return</q-w> <q-t>UNSIGNED</q-w> <q-w>is</q-w>
<a name="4950"><q-n>     4950  </q-n></a>  <q-w>begin</q-w>
<a name="4951"><q-n>     4951  </q-n></a>    <q-w>return</q-w> to_unsigned (arg            =&gt; arg,
<a name="4952"><q-n>     4952  </q-n></a>                        size           =&gt; size_res'<q-a>length</q-w>,
<a name="4953"><q-n>     4953  </q-n></a>                        round_style    =&gt; round_style,
<a name="4954"><q-n>     4954  </q-n></a>                        overflow_style =&gt; overflow_style);
<a name="4955"><q-n>     4955  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_unsigned;
<a name="4956"><q-n>     4956  </q-n></a>
<a name="4957"><q-n>     4957  </q-n></a>  <q-w>function</q-w> to_signed (
<a name="4958"><q-n>     4958  </q-n></a>    arg                     : UNRESOLVED_sfixed;  <q-m>-- sfixed point input</q-m>
<a name="4959"><q-n>     4959  </q-n></a>    <q-w>constant</q-w> size           : <q-t>NATURAL</q-w>;            <q-m>-- length of output</q-m>
<a name="4960"><q-n>     4960  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="4961"><q-n>     4961  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="4962"><q-n>     4962  </q-n></a>    <q-w>return</q-w> <q-t>SIGNED</q-w> <q-w>is</q-w>
<a name="4963"><q-n>     4963  </q-n></a>  <q-w>begin</q-w>
<a name="4964"><q-n>     4964  </q-n></a>    <q-w>return</q-w> to_s(resize (arg            =&gt; arg,
<a name="4965"><q-n>     4965  </q-n></a>                        left_index     =&gt; size-1,
<a name="4966"><q-n>     4966  </q-n></a>                        right_index    =&gt; 0,
<a name="4967"><q-n>     4967  </q-n></a>                        round_style    =&gt; round_style,
<a name="4968"><q-n>     4968  </q-n></a>                        overflow_style =&gt; overflow_style));
<a name="4969"><q-n>     4969  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_signed;
<a name="4970"><q-n>     4970  </q-n></a>
<a name="4971"><q-n>     4971  </q-n></a>  <q-w>function</q-w> to_signed (
<a name="4972"><q-n>     4972  </q-n></a>    arg                     : UNRESOLVED_sfixed;  <q-m>-- sfixed point input</q-m>
<a name="4973"><q-n>     4973  </q-n></a>    size_res                : <q-t>SIGNED</q-w>;  <q-m>-- used for length of output</q-m>
<a name="4974"><q-n>     4974  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="4975"><q-n>     4975  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="4976"><q-n>     4976  </q-n></a>    <q-w>return</q-w> <q-t>SIGNED</q-w> <q-w>is</q-w>
<a name="4977"><q-n>     4977  </q-n></a>  <q-w>begin</q-w>
<a name="4978"><q-n>     4978  </q-n></a>    <q-w>return</q-w> to_signed (arg            =&gt; arg,
<a name="4979"><q-n>     4979  </q-n></a>                      size           =&gt; size_res'<q-a>length</q-w>,
<a name="4980"><q-n>     4980  </q-n></a>                      round_style    =&gt; round_style,
<a name="4981"><q-n>     4981  </q-n></a>                      overflow_style =&gt; overflow_style);
<a name="4982"><q-n>     4982  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_signed;
<a name="4983"><q-n>     4983  </q-n></a>  
<a name="4984"><q-n>     4984  </q-n></a>  <q-w>function</q-w> to_real (
<a name="4985"><q-n>     4985  </q-n></a>    arg : UNRESOLVED_ufixed)            <q-m>-- ufixed point input</q-m>
<a name="4986"><q-n>     4986  </q-n></a>    <q-w>return</q-w> <q-t>REAL</q-w> <q-w>is</q-w>
<a name="4987"><q-n>     4987  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w> := arg'<q-a>high</q-w>;
<a name="4988"><q-n>     4988  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w> := arg'<q-a>low</q-w>;
<a name="4989"><q-n>     4989  </q-n></a>    <q-w>variable</q-w> result      : <q-t>REAL</q-w>;        <q-m>-- result</q-m>
<a name="4990"><q-n>     4990  </q-n></a>    <q-w>variable</q-w> arg_int     : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="4991"><q-n>     4991  </q-n></a>  <q-w>begin</q-w>
<a name="4992"><q-n>     4992  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="4993"><q-n>     4993  </q-n></a>      <q-w>return</q-w> 0.0;
<a name="4994"><q-n>     4994  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="4995"><q-n>     4995  </q-n></a>    arg_int := to_x01(cleanvec(arg));
<a name="4996"><q-n>     4996  </q-n></a>    <q-w>if</q-w> (Is_X(arg_int)) <q-w>then</q-w>
<a name="4997"><q-n>     4997  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="4998"><q-n>     4998  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="4999"><q-n>     4999  </q-n></a>        &amp; <q-l>"TO_REAL (ufixed): metavalue detected, returning 0.0"</q-l>
<a name="5000"><q-n>     5000  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="5001"><q-n>     5001  </q-n></a>      <q-w>return</q-w> 0.0;
<a name="5002"><q-n>     5002  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5003"><q-n>     5003  </q-n></a>    result := 0.0;
<a name="5004"><q-n>     5004  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> arg_int'<q-w>range</q-w> <q-w>loop</q-w>
<a name="5005"><q-n>     5005  </q-n></a>      <q-w>if</q-w> (arg_int(i) = '1') <q-w>then</q-w>
<a name="5006"><q-n>     5006  </q-n></a>        result := result + (2.0**i);
<a name="5007"><q-n>     5007  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="5008"><q-n>     5008  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="5009"><q-n>     5009  </q-n></a>    <q-w>return</q-w> result;
<a name="5010"><q-n>     5010  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_real;
<a name="5011"><q-n>     5011  </q-n></a>
<a name="5012"><q-n>     5012  </q-n></a>  <q-w>function</q-w> to_real (
<a name="5013"><q-n>     5013  </q-n></a>    arg : UNRESOLVED_sfixed)            <q-m>-- ufixed point input</q-m>
<a name="5014"><q-n>     5014  </q-n></a>    <q-w>return</q-w> <q-t>REAL</q-w> <q-w>is</q-w>
<a name="5015"><q-n>     5015  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w> := arg'<q-a>high</q-w>;
<a name="5016"><q-n>     5016  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w> := arg'<q-a>low</q-w>;
<a name="5017"><q-n>     5017  </q-n></a>    <q-w>variable</q-w> result      : <q-t>REAL</q-w>;        <q-m>-- result</q-m>
<a name="5018"><q-n>     5018  </q-n></a>    <q-w>variable</q-w> arg_int     : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="5019"><q-n>     5019  </q-n></a>    <q-m>-- unsigned version of argument</q-m>
<a name="5020"><q-n>     5020  </q-n></a>    <q-w>variable</q-w> arg_uns     : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="5021"><q-n>     5021  </q-n></a>    <q-m>-- absolute of argument</q-m>
<a name="5022"><q-n>     5022  </q-n></a>  <q-w>begin</q-w>
<a name="5023"><q-n>     5023  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5024"><q-n>     5024  </q-n></a>      <q-w>return</q-w> 0.0;
<a name="5025"><q-n>     5025  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5026"><q-n>     5026  </q-n></a>    arg_int := to_x01(cleanvec(arg));
<a name="5027"><q-n>     5027  </q-n></a>    <q-w>if</q-w> (Is_X(arg_int)) <q-w>then</q-w>
<a name="5028"><q-n>     5028  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="5029"><q-n>     5029  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="5030"><q-n>     5030  </q-n></a>        &amp; <q-l>"TO_REAL (sfixed): metavalue detected, returning 0.0"</q-l>
<a name="5031"><q-n>     5031  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="5032"><q-n>     5032  </q-n></a>      <q-w>return</q-w> 0.0;
<a name="5033"><q-n>     5033  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5034"><q-n>     5034  </q-n></a>    arg_uns := to_ufixed (arg_int);
<a name="5035"><q-n>     5035  </q-n></a>    result  := to_real (arg_uns);
<a name="5036"><q-n>     5036  </q-n></a>    <q-w>if</q-w> (arg_int(arg_int'<q-a>high</q-w>) = '1') <q-w>then</q-w>
<a name="5037"><q-n>     5037  </q-n></a>      result := -result;
<a name="5038"><q-n>     5038  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5039"><q-n>     5039  </q-n></a>    <q-w>return</q-w> result;
<a name="5040"><q-n>     5040  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_real;
<a name="5041"><q-n>     5041  </q-n></a>
<a name="5042"><q-n>     5042  </q-n></a>  <q-w>function</q-w> to_integer (
<a name="5043"><q-n>     5043  </q-n></a>    arg                     : UNRESOLVED_ufixed;  <q-m>-- fixed point input</q-m>
<a name="5044"><q-n>     5044  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="5045"><q-n>     5045  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="5046"><q-n>     5046  </q-n></a>    <q-w>return</q-w> <q-t>NATURAL</q-w> <q-w>is</q-w>
<a name="5047"><q-n>     5047  </q-n></a>    <q-w>constant</q-w> left_index : <q-t>INTEGER</q-w> := arg'<q-a>high</q-w>;
<a name="5048"><q-n>     5048  </q-n></a>    <q-w>variable</q-w> arg_uns    : <q-t>UNSIGNED</q-w> (left_index+1 <q-w>downto</q-w> 0)
<a name="5049"><q-n>     5049  </q-n></a>      := (<q-w>others</q-w> =&gt; '0');
<a name="5050"><q-n>     5050  </q-n></a>  <q-w>begin</q-w>
<a name="5051"><q-n>     5051  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5052"><q-n>     5052  </q-n></a>      <q-w>return</q-w> 0;
<a name="5053"><q-n>     5053  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5054"><q-n>     5054  </q-n></a>    <q-w>if</q-w> (Is_X (arg)) <q-w>then</q-w>
<a name="5055"><q-n>     5055  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="5056"><q-n>     5056  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="5057"><q-n>     5057  </q-n></a>        &amp; <q-l>"TO_INTEGER (ufixed): metavalue detected, returning 0"</q-l>
<a name="5058"><q-n>     5058  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="5059"><q-n>     5059  </q-n></a>      <q-w>return</q-w> 0;
<a name="5060"><q-n>     5060  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5061"><q-n>     5061  </q-n></a>    <q-w>if</q-w> (left_index &lt; -1) <q-w>then</q-w>
<a name="5062"><q-n>     5062  </q-n></a>      <q-w>return</q-w> 0;
<a name="5063"><q-n>     5063  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5064"><q-n>     5064  </q-n></a>    arg_uns := to_uns(resize (arg            =&gt; arg,
<a name="5065"><q-n>     5065  </q-n></a>                              left_index     =&gt; arg_uns'<q-a>high</q-w>,
<a name="5066"><q-n>     5066  </q-n></a>                              right_index    =&gt; 0,
<a name="5067"><q-n>     5067  </q-n></a>                              round_style    =&gt; round_style,
<a name="5068"><q-n>     5068  </q-n></a>                              overflow_style =&gt; overflow_style));
<a name="5069"><q-n>     5069  </q-n></a>    <q-w>return</q-w> to_integer (arg_uns);
<a name="5070"><q-n>     5070  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_integer;
<a name="5071"><q-n>     5071  </q-n></a>
<a name="5072"><q-n>     5072  </q-n></a>  <q-w>function</q-w> to_integer (
<a name="5073"><q-n>     5073  </q-n></a>    arg                     : UNRESOLVED_sfixed;  <q-m>-- fixed point input</q-m>
<a name="5074"><q-n>     5074  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="5075"><q-n>     5075  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="5076"><q-n>     5076  </q-n></a>    <q-w>return</q-w> <q-t>INTEGER</q-w> <q-w>is</q-w>
<a name="5077"><q-n>     5077  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w> := arg'<q-a>high</q-w>;
<a name="5078"><q-n>     5078  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w> := arg'<q-a>low</q-w>;
<a name="5079"><q-n>     5079  </q-n></a>    <q-w>variable</q-w> arg_s       : <q-t>SIGNED</q-w> (left_index+1 <q-w>downto</q-w> 0);
<a name="5080"><q-n>     5080  </q-n></a>  <q-w>begin</q-w>
<a name="5081"><q-n>     5081  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5082"><q-n>     5082  </q-n></a>      <q-w>return</q-w> 0;
<a name="5083"><q-n>     5083  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5084"><q-n>     5084  </q-n></a>    <q-w>if</q-w> (Is_X (arg)) <q-w>then</q-w>
<a name="5085"><q-n>     5085  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="5086"><q-n>     5086  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="5087"><q-n>     5087  </q-n></a>        &amp; <q-l>"TO_INTEGER (sfixed): metavalue detected, returning 0"</q-l>
<a name="5088"><q-n>     5088  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="5089"><q-n>     5089  </q-n></a>      <q-w>return</q-w> 0;
<a name="5090"><q-n>     5090  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5091"><q-n>     5091  </q-n></a>    <q-w>if</q-w> (left_index &lt; -1) <q-w>then</q-w>
<a name="5092"><q-n>     5092  </q-n></a>      <q-w>return</q-w> 0;
<a name="5093"><q-n>     5093  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5094"><q-n>     5094  </q-n></a>    arg_s := to_s(resize (arg            =&gt; arg,
<a name="5095"><q-n>     5095  </q-n></a>                          left_index     =&gt; arg_s'<q-a>high</q-w>,
<a name="5096"><q-n>     5096  </q-n></a>                          right_index    =&gt; 0,
<a name="5097"><q-n>     5097  </q-n></a>                          round_style    =&gt; round_style,
<a name="5098"><q-n>     5098  </q-n></a>                          overflow_style =&gt; overflow_style));
<a name="5099"><q-n>     5099  </q-n></a>    <q-w>return</q-w> to_integer (arg_s);
<a name="5100"><q-n>     5100  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_integer;
<a name="5101"><q-n>     5101  </q-n></a>
<a name="5102"><q-n>     5102  </q-n></a>  <q-w>function</q-w> to_01 (
<a name="5103"><q-n>     5103  </q-n></a>    s             : UNRESOLVED_ufixed;              <q-m>-- ufixed point input</q-m>
<a name="5104"><q-n>     5104  </q-n></a>    <q-w>constant</q-w> XMAP : <q-t>STD_ULOGIC</q-w> := '0')              <q-m>-- Map x to</q-m>
<a name="5105"><q-n>     5105  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5106"><q-n>     5106  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (s'<q-w>range</q-w>);  <q-m>-- result</q-m>
<a name="5107"><q-n>     5107  </q-n></a>  <q-w>begin</q-w>
<a name="5108"><q-n>     5108  </q-n></a>    <q-w>if</q-w> (s'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5109"><q-n>     5109  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="5110"><q-n>     5110  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="5111"><q-n>     5111  </q-n></a>        &amp; <q-l>"TO_01(ufixed): null detected, returning NULL"</q-l>
<a name="5112"><q-n>     5112  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="5113"><q-n>     5113  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="5114"><q-n>     5114  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5115"><q-n>     5115  </q-n></a>    <q-w>return</q-w> to_fixed (to_01(to_uns(s), XMAP), s'<q-a>high</q-w>, s'<q-a>low</q-w>);
<a name="5116"><q-n>     5116  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_01;
<a name="5117"><q-n>     5117  </q-n></a>
<a name="5118"><q-n>     5118  </q-n></a>  <q-w>function</q-w> to_01 (
<a name="5119"><q-n>     5119  </q-n></a>    s             : UNRESOLVED_sfixed;  <q-m>-- sfixed point input</q-m>
<a name="5120"><q-n>     5120  </q-n></a>    <q-w>constant</q-w> XMAP : <q-t>STD_ULOGIC</q-w> := '0')  <q-m>-- Map x to</q-m>
<a name="5121"><q-n>     5121  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5122"><q-n>     5122  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (s'<q-w>range</q-w>);
<a name="5123"><q-n>     5123  </q-n></a>  <q-w>begin</q-w>
<a name="5124"><q-n>     5124  </q-n></a>    <q-w>if</q-w> (s'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5125"><q-n>     5125  </q-n></a>      <q-w>assert</q-w> NO_WARNING
<a name="5126"><q-n>     5126  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="5127"><q-n>     5127  </q-n></a>        &amp; <q-l>"TO_01(sfixed): null detected, returning NULL"</q-l>
<a name="5128"><q-n>     5128  </q-n></a>        <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="5129"><q-n>     5129  </q-n></a>      <q-w>return</q-w> NASF;
<a name="5130"><q-n>     5130  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5131"><q-n>     5131  </q-n></a>    <q-w>return</q-w> to_fixed (to_01(to_s(s), XMAP), s'<q-a>high</q-w>, s'<q-a>low</q-w>);
<a name="5132"><q-n>     5132  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_01;
<a name="5133"><q-n>     5133  </q-n></a>
<a name="5134"><q-n>     5134  </q-n></a>  <q-w>function</q-w> Is_X (
<a name="5135"><q-n>     5135  </q-n></a>    arg : UNRESOLVED_ufixed)
<a name="5136"><q-n>     5136  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="5137"><q-n>     5137  </q-n></a>    <q-w>variable</q-w> argslv : <q-t>STD_ULOGIC_VECTOR</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- slv</q-m>
<a name="5138"><q-n>     5138  </q-n></a>  <q-w>begin</q-w>
<a name="5139"><q-n>     5139  </q-n></a>    argslv := to_sulv(arg);
<a name="5140"><q-n>     5140  </q-n></a>    <q-w>return</q-w> Is_X (argslv);
<a name="5141"><q-n>     5141  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> Is_X;
<a name="5142"><q-n>     5142  </q-n></a>  
<a name="5143"><q-n>     5143  </q-n></a>  <q-w>function</q-w> Is_X (
<a name="5144"><q-n>     5144  </q-n></a>    arg : UNRESOLVED_sfixed)
<a name="5145"><q-n>     5145  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="5146"><q-n>     5146  </q-n></a>    <q-w>variable</q-w> argslv : <q-t>STD_ULOGIC_VECTOR</q-w> (arg'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);  <q-m>-- slv</q-m>
<a name="5147"><q-n>     5147  </q-n></a>  <q-w>begin</q-w>
<a name="5148"><q-n>     5148  </q-n></a>    argslv := to_sulv(arg);
<a name="5149"><q-n>     5149  </q-n></a>    <q-w>return</q-w> Is_X (argslv);
<a name="5150"><q-n>     5150  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> Is_X;
<a name="5151"><q-n>     5151  </q-n></a>
<a name="5152"><q-n>     5152  </q-n></a>  <q-w>function</q-w> To_X01 (
<a name="5153"><q-n>     5153  </q-n></a>    arg : UNRESOLVED_ufixed)
<a name="5154"><q-n>     5154  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5155"><q-n>     5155  </q-n></a>  <q-w>begin</q-w>
<a name="5156"><q-n>     5156  </q-n></a>    <q-w>return</q-w> to_ufixed (To_X01(to_sulv(arg)), arg'<q-a>high</q-w>, arg'<q-a>low</q-w>);
<a name="5157"><q-n>     5157  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> To_X01;
<a name="5158"><q-n>     5158  </q-n></a>
<a name="5159"><q-n>     5159  </q-n></a>  <q-w>function</q-w> to_X01 (
<a name="5160"><q-n>     5160  </q-n></a>    arg : UNRESOLVED_sfixed)
<a name="5161"><q-n>     5161  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5162"><q-n>     5162  </q-n></a>  <q-w>begin</q-w>
<a name="5163"><q-n>     5163  </q-n></a>    <q-w>return</q-w> to_sfixed (To_X01(to_sulv(arg)), arg'<q-a>high</q-w>, arg'<q-a>low</q-w>);
<a name="5164"><q-n>     5164  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> To_X01;
<a name="5165"><q-n>     5165  </q-n></a>
<a name="5166"><q-n>     5166  </q-n></a>  <q-w>function</q-w> To_X01Z (
<a name="5167"><q-n>     5167  </q-n></a>    arg : UNRESOLVED_ufixed)
<a name="5168"><q-n>     5168  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5169"><q-n>     5169  </q-n></a>  <q-w>begin</q-w>
<a name="5170"><q-n>     5170  </q-n></a>    <q-w>return</q-w> to_ufixed (To_X01Z(to_sulv(arg)), arg'<q-a>high</q-w>, arg'<q-a>low</q-w>);
<a name="5171"><q-n>     5171  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> To_X01Z;
<a name="5172"><q-n>     5172  </q-n></a>
<a name="5173"><q-n>     5173  </q-n></a>  <q-w>function</q-w> to_X01Z (
<a name="5174"><q-n>     5174  </q-n></a>    arg : UNRESOLVED_sfixed)
<a name="5175"><q-n>     5175  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5176"><q-n>     5176  </q-n></a>  <q-w>begin</q-w>
<a name="5177"><q-n>     5177  </q-n></a>    <q-w>return</q-w> to_sfixed (To_X01Z(to_sulv(arg)), arg'<q-a>high</q-w>, arg'<q-a>low</q-w>);
<a name="5178"><q-n>     5178  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> To_X01Z;
<a name="5179"><q-n>     5179  </q-n></a>
<a name="5180"><q-n>     5180  </q-n></a>  <q-w>function</q-w> To_UX01 (
<a name="5181"><q-n>     5181  </q-n></a>    arg : UNRESOLVED_ufixed)
<a name="5182"><q-n>     5182  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5183"><q-n>     5183  </q-n></a>  <q-w>begin</q-w>
<a name="5184"><q-n>     5184  </q-n></a>    <q-w>return</q-w> to_ufixed (To_UX01(to_sulv(arg)), arg'<q-a>high</q-w>, arg'<q-a>low</q-w>);
<a name="5185"><q-n>     5185  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> To_UX01;
<a name="5186"><q-n>     5186  </q-n></a>
<a name="5187"><q-n>     5187  </q-n></a>  <q-w>function</q-w> to_UX01 (
<a name="5188"><q-n>     5188  </q-n></a>    arg : UNRESOLVED_sfixed)
<a name="5189"><q-n>     5189  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5190"><q-n>     5190  </q-n></a>  <q-w>begin</q-w>
<a name="5191"><q-n>     5191  </q-n></a>    <q-w>return</q-w> to_sfixed (To_UX01(to_sulv(arg)), arg'<q-a>high</q-w>, arg'<q-a>low</q-w>);
<a name="5192"><q-n>     5192  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> To_UX01;
<a name="5193"><q-n>     5193  </q-n></a>  
<a name="5194"><q-n>     5194  </q-n></a>  <q-w>function</q-w> resize (
<a name="5195"><q-n>     5195  </q-n></a>    arg                     : UNRESOLVED_ufixed;            <q-m>-- input</q-m>
<a name="5196"><q-n>     5196  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- integer portion</q-m>
<a name="5197"><q-n>     5197  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>;  <q-m>-- size of fraction</q-m>
<a name="5198"><q-n>     5198  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="5199"><q-n>     5199  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="5200"><q-n>     5200  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5201"><q-n>     5201  </q-n></a>    <q-w>constant</q-w> arghigh : <q-t>INTEGER</q-w> := maximum (arg'<q-a>high</q-w>, arg'<q-a>low</q-w>);
<a name="5202"><q-n>     5202  </q-n></a>    <q-w>constant</q-w> arglow  : <q-t>INTEGER</q-w> := mine (arg'<q-a>high</q-w>, arg'<q-a>low</q-w>);
<a name="5203"><q-n>     5203  </q-n></a>    <q-w>variable</q-w> invec   : UNRESOLVED_ufixed (arghigh <q-w>downto</q-w> arglow);
<a name="5204"><q-n>     5204  </q-n></a>    <q-w>variable</q-w> result  : UNRESOLVED_ufixed(left_index <q-w>downto</q-w> right_index) :=
<a name="5205"><q-n>     5205  </q-n></a>      (<q-w>others</q-w> =&gt; '0');
<a name="5206"><q-n>     5206  </q-n></a>    <q-w>variable</q-w> needs_rounding : <q-t>BOOLEAN</q-w> := false;
<a name="5207"><q-n>     5207  </q-n></a>  <q-w>begin</q-w>  <q-m>-- resize</q-m>
<a name="5208"><q-n>     5208  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (result'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5209"><q-n>     5209  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="5210"><q-n>     5210  </q-n></a>    <q-w>elsif</q-w> (invec'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5211"><q-n>     5211  </q-n></a>      <q-w>return</q-w> result;                    <q-m>-- string literal value</q-m>
<a name="5212"><q-n>     5212  </q-n></a>    <q-w>else</q-w>
<a name="5213"><q-n>     5213  </q-n></a>      invec := cleanvec(arg);
<a name="5214"><q-n>     5214  </q-n></a>      <q-w>if</q-w> (right_index &gt; arghigh) <q-w>then</q-w>   <q-m>-- return top zeros</q-m>
<a name="5215"><q-n>     5215  </q-n></a>        needs_rounding := (round_style = fixed_round) <q-w>and</q-w>
<a name="5216"><q-n>     5216  </q-n></a>                          (right_index = arghigh+1);
<a name="5217"><q-n>     5217  </q-n></a>      <q-w>elsif</q-w> (left_index &lt; arglow) <q-w>then</q-w>  <q-m>-- return overflow</q-m>
<a name="5218"><q-n>     5218  </q-n></a>        <q-w>if</q-w> (overflow_style = fixed_saturate) <q-w>and</q-w>
<a name="5219"><q-n>     5219  </q-n></a>          (or_reduce(to_sulv(invec)) = '1') <q-w>then</q-w>
<a name="5220"><q-n>     5220  </q-n></a>          result := saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);     <q-m>-- saturate</q-m>
<a name="5221"><q-n>     5221  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="5222"><q-n>     5222  </q-n></a>      <q-w>elsif</q-w> (arghigh &gt; left_index) <q-w>then</q-w>
<a name="5223"><q-n>     5223  </q-n></a>        <q-m>-- wrap or saturate?</q-m>
<a name="5224"><q-n>     5224  </q-n></a>        <q-w>if</q-w> (overflow_style = fixed_saturate <q-w>and</q-w>
<a name="5225"><q-n>     5225  </q-n></a>            or_reduce (to_sulv(invec(arghigh <q-w>downto</q-w> left_index+1))) = '1')
<a name="5226"><q-n>     5226  </q-n></a>        <q-w>then</q-w>
<a name="5227"><q-n>     5227  </q-n></a>          result := saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);     <q-m>-- saturate</q-m>
<a name="5228"><q-n>     5228  </q-n></a>        <q-w>else</q-w>
<a name="5229"><q-n>     5229  </q-n></a>          <q-w>if</q-w> (arglow &gt;= right_index) <q-w>then</q-w>
<a name="5230"><q-n>     5230  </q-n></a>            result (left_index <q-w>downto</q-w> arglow) :=
<a name="5231"><q-n>     5231  </q-n></a>              invec(left_index <q-w>downto</q-w> arglow);
<a name="5232"><q-n>     5232  </q-n></a>          <q-w>else</q-w>
<a name="5233"><q-n>     5233  </q-n></a>            result (left_index <q-w>downto</q-w> right_index) :=
<a name="5234"><q-n>     5234  </q-n></a>              invec (left_index <q-w>downto</q-w> right_index);
<a name="5235"><q-n>     5235  </q-n></a>            needs_rounding := (round_style = fixed_round);  <q-m>-- round</q-m>
<a name="5236"><q-n>     5236  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="5237"><q-n>     5237  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="5238"><q-n>     5238  </q-n></a>      <q-w>else</q-w>                              <q-m>-- arghigh &lt;= integer width</q-m>
<a name="5239"><q-n>     5239  </q-n></a>        <q-w>if</q-w> (arglow &gt;= right_index) <q-w>then</q-w>
<a name="5240"><q-n>     5240  </q-n></a>          result (arghigh <q-w>downto</q-w> arglow) := invec;
<a name="5241"><q-n>     5241  </q-n></a>        <q-w>else</q-w>
<a name="5242"><q-n>     5242  </q-n></a>          result (arghigh <q-w>downto</q-w> right_index) :=
<a name="5243"><q-n>     5243  </q-n></a>            invec (arghigh <q-w>downto</q-w> right_index);
<a name="5244"><q-n>     5244  </q-n></a>          needs_rounding := (round_style = fixed_round);    <q-m>-- round</q-m>
<a name="5245"><q-n>     5245  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="5246"><q-n>     5246  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="5247"><q-n>     5247  </q-n></a>      <q-m>-- Round result</q-m>
<a name="5248"><q-n>     5248  </q-n></a>      <q-w>if</q-w> needs_rounding <q-w>then</q-w>
<a name="5249"><q-n>     5249  </q-n></a>        result := round_fixed (arg            =&gt; result,
<a name="5250"><q-n>     5250  </q-n></a>                               remainder      =&gt; invec (right_index-1
<a name="5251"><q-n>     5251  </q-n></a>                                                        <q-w>downto</q-w> arglow),
<a name="5252"><q-n>     5252  </q-n></a>                               overflow_style =&gt; overflow_style);
<a name="5253"><q-n>     5253  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="5254"><q-n>     5254  </q-n></a>      <q-w>return</q-w> result;
<a name="5255"><q-n>     5255  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5256"><q-n>     5256  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> resize;
<a name="5257"><q-n>     5257  </q-n></a>
<a name="5258"><q-n>     5258  </q-n></a>  <q-w>function</q-w> resize (
<a name="5259"><q-n>     5259  </q-n></a>    arg                     : UNRESOLVED_sfixed;          <q-m>-- input</q-m>
<a name="5260"><q-n>     5260  </q-n></a>    <q-w>constant</q-w> left_index     : <q-t>INTEGER</q-w>;  <q-m>-- integer portion</q-m>
<a name="5261"><q-n>     5261  </q-n></a>    <q-w>constant</q-w> right_index    : <q-t>INTEGER</q-w>;  <q-m>-- size of fraction</q-m>
<a name="5262"><q-n>     5262  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="5263"><q-n>     5263  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="5264"><q-n>     5264  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5265"><q-n>     5265  </q-n></a>    <q-w>constant</q-w> arghigh : <q-t>INTEGER</q-w> := maximum (arg'<q-a>high</q-w>, arg'<q-a>low</q-w>);
<a name="5266"><q-n>     5266  </q-n></a>    <q-w>constant</q-w> arglow  : <q-t>INTEGER</q-w> := mine (arg'<q-a>high</q-w>, arg'<q-a>low</q-w>);
<a name="5267"><q-n>     5267  </q-n></a>    <q-w>variable</q-w> invec   : UNRESOLVED_sfixed (arghigh <q-w>downto</q-w> arglow);
<a name="5268"><q-n>     5268  </q-n></a>    <q-w>variable</q-w> result  : UNRESOLVED_sfixed(left_index <q-w>downto</q-w> right_index) :=
<a name="5269"><q-n>     5269  </q-n></a>      (<q-w>others</q-w> =&gt; '0');
<a name="5270"><q-n>     5270  </q-n></a>    <q-w>variable</q-w> reduced        : <q-t>STD_ULOGIC</q-w>;
<a name="5271"><q-n>     5271  </q-n></a>    <q-w>variable</q-w> needs_rounding : <q-t>BOOLEAN</q-w> := false;           <q-m>-- rounding</q-m>
<a name="5272"><q-n>     5272  </q-n></a>  <q-w>begin</q-w>  <q-m>-- resize</q-m>
<a name="5273"><q-n>     5273  </q-n></a>    <q-w>if</q-w> (arg'<q-a>length</q-w> &lt; 1) <q-w>or</q-w> (result'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5274"><q-n>     5274  </q-n></a>      <q-w>return</q-w> NASF;
<a name="5275"><q-n>     5275  </q-n></a>    <q-w>elsif</q-w> (invec'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5276"><q-n>     5276  </q-n></a>      <q-w>return</q-w> result;                    <q-m>-- string literal value</q-m>
<a name="5277"><q-n>     5277  </q-n></a>    <q-w>else</q-w>
<a name="5278"><q-n>     5278  </q-n></a>      invec := cleanvec(arg);
<a name="5279"><q-n>     5279  </q-n></a>      <q-w>if</q-w> (right_index &gt; arghigh) <q-w>then</q-w>   <q-m>-- return top zeros</q-m>
<a name="5280"><q-n>     5280  </q-n></a>        <q-w>if</q-w> (arg'<q-a>low</q-w> /= <q-t>INTEGER</q-w>'<q-a>low</q-w>) <q-w>then</q-w>  <q-m>-- check for a literal</q-m>
<a name="5281"><q-n>     5281  </q-n></a>          result := (<q-w>others</q-w> =&gt; arg(arghigh));             <q-m>-- sign extend</q-m>
<a name="5282"><q-n>     5282  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="5283"><q-n>     5283  </q-n></a>        needs_rounding := (round_style = fixed_round) <q-w>and</q-w>
<a name="5284"><q-n>     5284  </q-n></a>                          (right_index = arghigh+1);
<a name="5285"><q-n>     5285  </q-n></a>      <q-w>elsif</q-w> (left_index &lt; arglow) <q-w>then</q-w>  <q-m>-- return overflow</q-m>
<a name="5286"><q-n>     5286  </q-n></a>        <q-w>if</q-w> (overflow_style = fixed_saturate) <q-w>then</q-w>
<a name="5287"><q-n>     5287  </q-n></a>          reduced := or_reduce (to_sulv(invec));
<a name="5288"><q-n>     5288  </q-n></a>          <q-w>if</q-w> (reduced = '1') <q-w>then</q-w>
<a name="5289"><q-n>     5289  </q-n></a>            <q-w>if</q-w> (invec(arghigh) = '0') <q-w>then</q-w>
<a name="5290"><q-n>     5290  </q-n></a>              <q-m>-- saturate POSITIVE</q-m>
<a name="5291"><q-n>     5291  </q-n></a>              result := saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="5292"><q-n>     5292  </q-n></a>            <q-w>else</q-w>
<a name="5293"><q-n>     5293  </q-n></a>              <q-m>-- saturate negative</q-m>
<a name="5294"><q-n>     5294  </q-n></a>              result := <q-w>not</q-w> saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="5295"><q-n>     5295  </q-n></a>            <q-w>end</q-w> <q-w>if</q-w>;
<a name="5296"><q-n>     5296  </q-n></a>            <q-m>-- else return 0 (input was 0)</q-m>
<a name="5297"><q-n>     5297  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="5298"><q-n>     5298  </q-n></a>          <q-m>-- else return 0 (wrap)</q-m>
<a name="5299"><q-n>     5299  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="5300"><q-n>     5300  </q-n></a>      <q-w>elsif</q-w> (arghigh &gt; left_index) <q-w>then</q-w>
<a name="5301"><q-n>     5301  </q-n></a>        <q-w>if</q-w> (invec(arghigh) = '0') <q-w>then</q-w>
<a name="5302"><q-n>     5302  </q-n></a>          reduced := or_reduce (to_sulv(invec(arghigh-1 <q-w>downto</q-w>
<a name="5303"><q-n>     5303  </q-n></a>                                             left_index)));
<a name="5304"><q-n>     5304  </q-n></a>          <q-w>if</q-w> overflow_style = fixed_saturate <q-w>and</q-w> reduced = '1' <q-w>then</q-w>
<a name="5305"><q-n>     5305  </q-n></a>            <q-m>-- saturate positive</q-m>
<a name="5306"><q-n>     5306  </q-n></a>            result := saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="5307"><q-n>     5307  </q-n></a>          <q-w>else</q-w>
<a name="5308"><q-n>     5308  </q-n></a>            <q-w>if</q-w> (right_index &gt; arglow) <q-w>then</q-w>
<a name="5309"><q-n>     5309  </q-n></a>              result         := invec (left_index <q-w>downto</q-w> right_index);
<a name="5310"><q-n>     5310  </q-n></a>              needs_rounding := (round_style = fixed_round);
<a name="5311"><q-n>     5311  </q-n></a>            <q-w>else</q-w>
<a name="5312"><q-n>     5312  </q-n></a>              result (left_index <q-w>downto</q-w> arglow) :=
<a name="5313"><q-n>     5313  </q-n></a>                invec (left_index <q-w>downto</q-w> arglow);
<a name="5314"><q-n>     5314  </q-n></a>            <q-w>end</q-w> <q-w>if</q-w>;
<a name="5315"><q-n>     5315  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="5316"><q-n>     5316  </q-n></a>        <q-w>else</q-w>
<a name="5317"><q-n>     5317  </q-n></a>          reduced := and_reduce (to_sulv(invec(arghigh-1 <q-w>downto</q-w>
<a name="5318"><q-n>     5318  </q-n></a>                                              left_index)));
<a name="5319"><q-n>     5319  </q-n></a>          <q-w>if</q-w> overflow_style = fixed_saturate <q-w>and</q-w> reduced = '0' <q-w>then</q-w>
<a name="5320"><q-n>     5320  </q-n></a>            result := <q-w>not</q-w> saturate (result'<q-a>high</q-w>, result'<q-a>low</q-w>);
<a name="5321"><q-n>     5321  </q-n></a>          <q-w>else</q-w>
<a name="5322"><q-n>     5322  </q-n></a>            <q-w>if</q-w> (right_index &gt; arglow) <q-w>then</q-w>
<a name="5323"><q-n>     5323  </q-n></a>              result         := invec (left_index <q-w>downto</q-w> right_index);
<a name="5324"><q-n>     5324  </q-n></a>              needs_rounding := (round_style = fixed_round);
<a name="5325"><q-n>     5325  </q-n></a>            <q-w>else</q-w>
<a name="5326"><q-n>     5326  </q-n></a>              result (left_index <q-w>downto</q-w> arglow) :=
<a name="5327"><q-n>     5327  </q-n></a>                invec (left_index <q-w>downto</q-w> arglow);
<a name="5328"><q-n>     5328  </q-n></a>            <q-w>end</q-w> <q-w>if</q-w>;
<a name="5329"><q-n>     5329  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="5330"><q-n>     5330  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="5331"><q-n>     5331  </q-n></a>      <q-w>else</q-w>                              <q-m>-- arghigh &lt;= integer width</q-m>
<a name="5332"><q-n>     5332  </q-n></a>        <q-w>if</q-w> (arglow &gt;= right_index) <q-w>then</q-w>
<a name="5333"><q-n>     5333  </q-n></a>          result (arghigh <q-w>downto</q-w> arglow) := invec;
<a name="5334"><q-n>     5334  </q-n></a>        <q-w>else</q-w>
<a name="5335"><q-n>     5335  </q-n></a>          result (arghigh <q-w>downto</q-w> right_index) :=
<a name="5336"><q-n>     5336  </q-n></a>            invec (arghigh <q-w>downto</q-w> right_index);
<a name="5337"><q-n>     5337  </q-n></a>          needs_rounding := (round_style = fixed_round);  <q-m>-- round</q-m>
<a name="5338"><q-n>     5338  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="5339"><q-n>     5339  </q-n></a>        <q-w>if</q-w> (left_index &gt; arghigh) <q-w>then</q-w>  <q-m>-- sign extend</q-m>
<a name="5340"><q-n>     5340  </q-n></a>          result(left_index <q-w>downto</q-w> arghigh+1) := (<q-w>others</q-w> =&gt; invec(arghigh));
<a name="5341"><q-n>     5341  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="5342"><q-n>     5342  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="5343"><q-n>     5343  </q-n></a>      <q-m>-- Round result</q-m>
<a name="5344"><q-n>     5344  </q-n></a>      <q-w>if</q-w> (needs_rounding) <q-w>then</q-w>
<a name="5345"><q-n>     5345  </q-n></a>        result := round_fixed (arg            =&gt; result,
<a name="5346"><q-n>     5346  </q-n></a>                               remainder      =&gt; invec (right_index-1
<a name="5347"><q-n>     5347  </q-n></a>                                                        <q-w>downto</q-w> arglow),
<a name="5348"><q-n>     5348  </q-n></a>                               overflow_style =&gt; overflow_style);
<a name="5349"><q-n>     5349  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="5350"><q-n>     5350  </q-n></a>      <q-w>return</q-w> result;
<a name="5351"><q-n>     5351  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5352"><q-n>     5352  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> resize;
<a name="5353"><q-n>     5353  </q-n></a>
<a name="5354"><q-n>     5354  </q-n></a>  <q-m>-- size_res functions</q-m>
<a name="5355"><q-n>     5355  </q-n></a>  <q-m>-- These functions compute the size from a passed variable named "size_res"</q-m>
<a name="5356"><q-n>     5356  </q-n></a>  <q-m>-- The only part of this variable used it it's size, it is never passed</q-m>
<a name="5357"><q-n>     5357  </q-n></a>  <q-m>-- to a lower level routine.</q-m>
<a name="5358"><q-n>     5358  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="5359"><q-n>     5359  </q-n></a>    arg      : <q-t>STD_ULOGIC_VECTOR</q-w>;       <q-m>-- shifted vector</q-m>
<a name="5360"><q-n>     5360  </q-n></a>    size_res : UNRESOLVED_ufixed)       <q-m>-- for size only</q-m>
<a name="5361"><q-n>     5361  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5362"><q-n>     5362  </q-n></a>    <q-w>constant</q-w> fw     : <q-t>INTEGER</q-w> := mine (size_res'<q-a>low</q-w>, size_res'<q-a>low</q-w>);  <q-m>-- catch literals</q-m>
<a name="5363"><q-n>     5363  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (size_res'<q-a>left</q-w> <q-w>downto</q-w> fw);
<a name="5364"><q-n>     5364  </q-n></a>  <q-w>begin</q-w>
<a name="5365"><q-n>     5365  </q-n></a>    <q-w>if</q-w> (result'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> arg'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5366"><q-n>     5366  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="5367"><q-n>     5367  </q-n></a>    <q-w>else</q-w>
<a name="5368"><q-n>     5368  </q-n></a>      result := to_ufixed (arg         =&gt; arg,
<a name="5369"><q-n>     5369  </q-n></a>                           left_index  =&gt; size_res'<q-a>high</q-w>,
<a name="5370"><q-n>     5370  </q-n></a>                           right_index =&gt; size_res'<q-a>low</q-w>);
<a name="5371"><q-n>     5371  </q-n></a>      <q-w>return</q-w> result;
<a name="5372"><q-n>     5372  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5373"><q-n>     5373  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ufixed;
<a name="5374"><q-n>     5374  </q-n></a>
<a name="5375"><q-n>     5375  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="5376"><q-n>     5376  </q-n></a>    arg      : <q-t>STD_ULOGIC_VECTOR</q-w>;       <q-m>-- shifted vector</q-m>
<a name="5377"><q-n>     5377  </q-n></a>    size_res : UNRESOLVED_sfixed)       <q-m>-- for size only</q-m>
<a name="5378"><q-n>     5378  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5379"><q-n>     5379  </q-n></a>    <q-w>constant</q-w> fw     : <q-t>INTEGER</q-w> := mine (size_res'<q-a>low</q-w>, size_res'<q-a>low</q-w>);  <q-m>-- catch literals</q-m>
<a name="5380"><q-n>     5380  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (size_res'<q-a>left</q-w> <q-w>downto</q-w> fw);
<a name="5381"><q-n>     5381  </q-n></a>  <q-w>begin</q-w>
<a name="5382"><q-n>     5382  </q-n></a>    <q-w>if</q-w> (result'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> arg'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5383"><q-n>     5383  </q-n></a>      <q-w>return</q-w> NASF;
<a name="5384"><q-n>     5384  </q-n></a>    <q-w>else</q-w>
<a name="5385"><q-n>     5385  </q-n></a>      result := to_sfixed (arg         =&gt; arg,
<a name="5386"><q-n>     5386  </q-n></a>                           left_index  =&gt; size_res'<q-a>high</q-w>,
<a name="5387"><q-n>     5387  </q-n></a>                           right_index =&gt; size_res'<q-a>low</q-w>);
<a name="5388"><q-n>     5388  </q-n></a>      <q-w>return</q-w> result;
<a name="5389"><q-n>     5389  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5390"><q-n>     5390  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_sfixed;
<a name="5391"><q-n>     5391  </q-n></a>
<a name="5392"><q-n>     5392  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="5393"><q-n>     5393  </q-n></a>    arg                     : <q-t>NATURAL</q-w>;            <q-m>-- integer</q-m>
<a name="5394"><q-n>     5394  </q-n></a>    size_res                : UNRESOLVED_ufixed;  <q-m>-- for size only</q-m>
<a name="5395"><q-n>     5395  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="5396"><q-n>     5396  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="5397"><q-n>     5397  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5398"><q-n>     5398  </q-n></a>    <q-w>constant</q-w> fw     : <q-t>INTEGER</q-w> := mine (size_res'<q-a>low</q-w>, size_res'<q-a>low</q-w>);  <q-m>-- catch literals</q-m>
<a name="5399"><q-n>     5399  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (size_res'<q-a>left</q-w> <q-w>downto</q-w> fw);
<a name="5400"><q-n>     5400  </q-n></a>  <q-w>begin</q-w>
<a name="5401"><q-n>     5401  </q-n></a>    <q-w>if</q-w> (result'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5402"><q-n>     5402  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="5403"><q-n>     5403  </q-n></a>    <q-w>else</q-w>
<a name="5404"><q-n>     5404  </q-n></a>      result := to_ufixed (arg            =&gt; arg,
<a name="5405"><q-n>     5405  </q-n></a>                           left_index     =&gt; size_res'<q-a>high</q-w>,
<a name="5406"><q-n>     5406  </q-n></a>                           right_index    =&gt; size_res'<q-a>low</q-w>,
<a name="5407"><q-n>     5407  </q-n></a>                           round_style    =&gt; round_style,
<a name="5408"><q-n>     5408  </q-n></a>                           overflow_style =&gt; overflow_style);
<a name="5409"><q-n>     5409  </q-n></a>      <q-w>return</q-w> result;
<a name="5410"><q-n>     5410  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5411"><q-n>     5411  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ufixed;
<a name="5412"><q-n>     5412  </q-n></a>
<a name="5413"><q-n>     5413  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="5414"><q-n>     5414  </q-n></a>    arg                     : <q-t>INTEGER</q-w>;            <q-m>-- integer</q-m>
<a name="5415"><q-n>     5415  </q-n></a>    size_res                : UNRESOLVED_sfixed;  <q-m>-- for size only</q-m>
<a name="5416"><q-n>     5416  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="5417"><q-n>     5417  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="5418"><q-n>     5418  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5419"><q-n>     5419  </q-n></a>    <q-w>constant</q-w> fw     : <q-t>INTEGER</q-w> := mine (size_res'<q-a>low</q-w>, size_res'<q-a>low</q-w>);  <q-m>-- catch literals</q-m>
<a name="5420"><q-n>     5420  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (size_res'<q-a>left</q-w> <q-w>downto</q-w> fw);
<a name="5421"><q-n>     5421  </q-n></a>  <q-w>begin</q-w>
<a name="5422"><q-n>     5422  </q-n></a>    <q-w>if</q-w> (result'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5423"><q-n>     5423  </q-n></a>      <q-w>return</q-w> NASF;
<a name="5424"><q-n>     5424  </q-n></a>    <q-w>else</q-w>
<a name="5425"><q-n>     5425  </q-n></a>      result := to_sfixed (arg            =&gt; arg,
<a name="5426"><q-n>     5426  </q-n></a>                           left_index     =&gt; size_res'<q-a>high</q-w>,
<a name="5427"><q-n>     5427  </q-n></a>                           right_index    =&gt; size_res'<q-a>low</q-w>,
<a name="5428"><q-n>     5428  </q-n></a>                           round_style    =&gt; round_style,
<a name="5429"><q-n>     5429  </q-n></a>                           overflow_style =&gt; overflow_style);
<a name="5430"><q-n>     5430  </q-n></a>      <q-w>return</q-w> result;
<a name="5431"><q-n>     5431  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5432"><q-n>     5432  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_sfixed;
<a name="5433"><q-n>     5433  </q-n></a>
<a name="5434"><q-n>     5434  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="5435"><q-n>     5435  </q-n></a>    arg                     : <q-t>REAL</q-w>;     <q-m>-- real</q-m>
<a name="5436"><q-n>     5436  </q-n></a>    size_res                : UNRESOLVED_ufixed;  <q-m>-- for size only</q-m>
<a name="5437"><q-n>     5437  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="5438"><q-n>     5438  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style;
<a name="5439"><q-n>     5439  </q-n></a>    <q-w>constant</q-w> guard_bits     : <q-t>NATURAL</q-w>                   := fixed_guard_bits)  <q-m>-- # of guard bits</q-m>
<a name="5440"><q-n>     5440  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5441"><q-n>     5441  </q-n></a>    <q-w>constant</q-w> fw     : <q-t>INTEGER</q-w> := mine (size_res'<q-a>low</q-w>, size_res'<q-a>low</q-w>);  <q-m>-- catch literals</q-m>
<a name="5442"><q-n>     5442  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (size_res'<q-a>left</q-w> <q-w>downto</q-w> fw);
<a name="5443"><q-n>     5443  </q-n></a>  <q-w>begin</q-w>
<a name="5444"><q-n>     5444  </q-n></a>    <q-w>if</q-w> (result'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5445"><q-n>     5445  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="5446"><q-n>     5446  </q-n></a>    <q-w>else</q-w>
<a name="5447"><q-n>     5447  </q-n></a>      result := to_ufixed (arg            =&gt; arg,
<a name="5448"><q-n>     5448  </q-n></a>                           left_index     =&gt; size_res'<q-a>high</q-w>,
<a name="5449"><q-n>     5449  </q-n></a>                           right_index    =&gt; size_res'<q-a>low</q-w>,
<a name="5450"><q-n>     5450  </q-n></a>                           guard_bits     =&gt; guard_bits,
<a name="5451"><q-n>     5451  </q-n></a>                           round_style    =&gt; round_style,
<a name="5452"><q-n>     5452  </q-n></a>                           overflow_style =&gt; overflow_style);
<a name="5453"><q-n>     5453  </q-n></a>      <q-w>return</q-w> result;
<a name="5454"><q-n>     5454  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5455"><q-n>     5455  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ufixed;
<a name="5456"><q-n>     5456  </q-n></a>
<a name="5457"><q-n>     5457  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="5458"><q-n>     5458  </q-n></a>    arg                     : <q-t>REAL</q-w>;     <q-m>-- real</q-m>
<a name="5459"><q-n>     5459  </q-n></a>    size_res                : UNRESOLVED_sfixed;  <q-m>-- for size only</q-m>
<a name="5460"><q-n>     5460  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="5461"><q-n>     5461  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style;
<a name="5462"><q-n>     5462  </q-n></a>    <q-w>constant</q-w> guard_bits     : <q-t>NATURAL</q-w>                   := fixed_guard_bits)  <q-m>-- # of guard bits</q-m>
<a name="5463"><q-n>     5463  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5464"><q-n>     5464  </q-n></a>    <q-w>constant</q-w> fw     : <q-t>INTEGER</q-w> := mine (size_res'<q-a>low</q-w>, size_res'<q-a>low</q-w>);  <q-m>-- catch literals</q-m>
<a name="5465"><q-n>     5465  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (size_res'<q-a>left</q-w> <q-w>downto</q-w> fw);
<a name="5466"><q-n>     5466  </q-n></a>  <q-w>begin</q-w>
<a name="5467"><q-n>     5467  </q-n></a>    <q-w>if</q-w> (result'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5468"><q-n>     5468  </q-n></a>      <q-w>return</q-w> NASF;
<a name="5469"><q-n>     5469  </q-n></a>    <q-w>else</q-w>
<a name="5470"><q-n>     5470  </q-n></a>      result := to_sfixed (arg            =&gt; arg,
<a name="5471"><q-n>     5471  </q-n></a>                           left_index     =&gt; size_res'<q-a>high</q-w>,
<a name="5472"><q-n>     5472  </q-n></a>                           right_index    =&gt; size_res'<q-a>low</q-w>,
<a name="5473"><q-n>     5473  </q-n></a>                           guard_bits     =&gt; guard_bits,
<a name="5474"><q-n>     5474  </q-n></a>                           round_style    =&gt; round_style,
<a name="5475"><q-n>     5475  </q-n></a>                           overflow_style =&gt; overflow_style);
<a name="5476"><q-n>     5476  </q-n></a>      <q-w>return</q-w> result;
<a name="5477"><q-n>     5477  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5478"><q-n>     5478  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_sfixed;
<a name="5479"><q-n>     5479  </q-n></a>
<a name="5480"><q-n>     5480  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="5481"><q-n>     5481  </q-n></a>    arg                     : <q-t>UNSIGNED</q-w>;  <q-m>-- unsigned</q-m>
<a name="5482"><q-n>     5482  </q-n></a>    size_res                : UNRESOLVED_ufixed;    <q-m>-- for size only</q-m>
<a name="5483"><q-n>     5483  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="5484"><q-n>     5484  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="5485"><q-n>     5485  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5486"><q-n>     5486  </q-n></a>    <q-w>constant</q-w> fw     : <q-t>INTEGER</q-w> := mine (size_res'<q-a>low</q-w>, size_res'<q-a>low</q-w>);  <q-m>-- catch literals</q-m>
<a name="5487"><q-n>     5487  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (size_res'<q-a>left</q-w> <q-w>downto</q-w> fw);
<a name="5488"><q-n>     5488  </q-n></a>  <q-w>begin</q-w>
<a name="5489"><q-n>     5489  </q-n></a>    <q-w>if</q-w> (result'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> arg'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5490"><q-n>     5490  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="5491"><q-n>     5491  </q-n></a>    <q-w>else</q-w>
<a name="5492"><q-n>     5492  </q-n></a>      result := to_ufixed (arg            =&gt; arg,
<a name="5493"><q-n>     5493  </q-n></a>                           left_index     =&gt; size_res'<q-a>high</q-w>,
<a name="5494"><q-n>     5494  </q-n></a>                           right_index    =&gt; size_res'<q-a>low</q-w>,
<a name="5495"><q-n>     5495  </q-n></a>                           round_style    =&gt; round_style,
<a name="5496"><q-n>     5496  </q-n></a>                           overflow_style =&gt; overflow_style);
<a name="5497"><q-n>     5497  </q-n></a>      <q-w>return</q-w> result;
<a name="5498"><q-n>     5498  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5499"><q-n>     5499  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ufixed;
<a name="5500"><q-n>     5500  </q-n></a>  
<a name="5501"><q-n>     5501  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="5502"><q-n>     5502  </q-n></a>    arg                     : <q-t>SIGNED</q-w>;  <q-m>-- signed</q-m>
<a name="5503"><q-n>     5503  </q-n></a>    size_res                : UNRESOLVED_sfixed;  <q-m>-- for size only</q-m>
<a name="5504"><q-n>     5504  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="5505"><q-n>     5505  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="5506"><q-n>     5506  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5507"><q-n>     5507  </q-n></a>    <q-w>constant</q-w> fw     : <q-t>INTEGER</q-w> := mine (size_res'<q-a>low</q-w>, size_res'<q-a>low</q-w>);  <q-m>-- catch literals</q-m>
<a name="5508"><q-n>     5508  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (size_res'<q-a>left</q-w> <q-w>downto</q-w> fw);
<a name="5509"><q-n>     5509  </q-n></a>  <q-w>begin</q-w>
<a name="5510"><q-n>     5510  </q-n></a>    <q-w>if</q-w> (result'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> arg'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5511"><q-n>     5511  </q-n></a>      <q-w>return</q-w> NASF;
<a name="5512"><q-n>     5512  </q-n></a>    <q-w>else</q-w>
<a name="5513"><q-n>     5513  </q-n></a>      result := to_sfixed (arg            =&gt; arg,
<a name="5514"><q-n>     5514  </q-n></a>                           left_index     =&gt; size_res'<q-a>high</q-w>,
<a name="5515"><q-n>     5515  </q-n></a>                           right_index    =&gt; size_res'<q-a>low</q-w>,
<a name="5516"><q-n>     5516  </q-n></a>                           round_style    =&gt; round_style,
<a name="5517"><q-n>     5517  </q-n></a>                           overflow_style =&gt; overflow_style);
<a name="5518"><q-n>     5518  </q-n></a>      <q-w>return</q-w> result;
<a name="5519"><q-n>     5519  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5520"><q-n>     5520  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_sfixed;
<a name="5521"><q-n>     5521  </q-n></a>
<a name="5522"><q-n>     5522  </q-n></a>  <q-w>function</q-w> resize (
<a name="5523"><q-n>     5523  </q-n></a>    arg                     : UNRESOLVED_ufixed;  <q-m>-- input</q-m>
<a name="5524"><q-n>     5524  </q-n></a>    size_res                : UNRESOLVED_ufixed;  <q-m>-- for size only</q-m>
<a name="5525"><q-n>     5525  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="5526"><q-n>     5526  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="5527"><q-n>     5527  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5528"><q-n>     5528  </q-n></a>    <q-w>constant</q-w> fw     : <q-t>INTEGER</q-w> := mine (size_res'<q-a>low</q-w>, size_res'<q-a>low</q-w>);  <q-m>-- catch literals</q-m>
<a name="5529"><q-n>     5529  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (size_res'<q-a>high</q-w> <q-w>downto</q-w> fw);
<a name="5530"><q-n>     5530  </q-n></a>  <q-w>begin</q-w>
<a name="5531"><q-n>     5531  </q-n></a>    <q-w>if</q-w> (result'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> arg'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5532"><q-n>     5532  </q-n></a>      <q-w>return</q-w> NAUF;
<a name="5533"><q-n>     5533  </q-n></a>    <q-w>else</q-w>
<a name="5534"><q-n>     5534  </q-n></a>      result := resize (arg            =&gt; arg,
<a name="5535"><q-n>     5535  </q-n></a>                        left_index     =&gt; size_res'<q-a>high</q-w>,
<a name="5536"><q-n>     5536  </q-n></a>                        right_index    =&gt; size_res'<q-a>low</q-w>,
<a name="5537"><q-n>     5537  </q-n></a>                        round_style    =&gt; round_style,
<a name="5538"><q-n>     5538  </q-n></a>                        overflow_style =&gt; overflow_style);
<a name="5539"><q-n>     5539  </q-n></a>      <q-w>return</q-w> result;
<a name="5540"><q-n>     5540  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5541"><q-n>     5541  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> resize;
<a name="5542"><q-n>     5542  </q-n></a>
<a name="5543"><q-n>     5543  </q-n></a>  <q-w>function</q-w> resize (
<a name="5544"><q-n>     5544  </q-n></a>    arg                     : UNRESOLVED_sfixed;  <q-m>-- input</q-m>
<a name="5545"><q-n>     5545  </q-n></a>    size_res                : UNRESOLVED_sfixed;  <q-m>-- for size only</q-m>
<a name="5546"><q-n>     5546  </q-n></a>    <q-w>constant</q-w> overflow_style : fixed_overflow_style_type := fixed_overflow_style;
<a name="5547"><q-n>     5547  </q-n></a>    <q-w>constant</q-w> round_style    : fixed_round_style_type    := fixed_round_style)
<a name="5548"><q-n>     5548  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5549"><q-n>     5549  </q-n></a>    <q-w>constant</q-w> fw     : <q-t>INTEGER</q-w> := mine (size_res'<q-a>low</q-w>, size_res'<q-a>low</q-w>);  <q-m>-- catch literals</q-m>
<a name="5550"><q-n>     5550  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (size_res'<q-a>high</q-w> <q-w>downto</q-w> fw);
<a name="5551"><q-n>     5551  </q-n></a>  <q-w>begin</q-w>
<a name="5552"><q-n>     5552  </q-n></a>    <q-w>if</q-w> (result'<q-a>length</q-w> &lt; 1 <q-w>or</q-w> arg'<q-a>length</q-w> &lt; 1) <q-w>then</q-w>
<a name="5553"><q-n>     5553  </q-n></a>      <q-w>return</q-w> NASF;
<a name="5554"><q-n>     5554  </q-n></a>    <q-w>else</q-w>
<a name="5555"><q-n>     5555  </q-n></a>      result := resize (arg            =&gt; arg,
<a name="5556"><q-n>     5556  </q-n></a>                        left_index     =&gt; size_res'<q-a>high</q-w>,
<a name="5557"><q-n>     5557  </q-n></a>                        right_index    =&gt; size_res'<q-a>low</q-w>,
<a name="5558"><q-n>     5558  </q-n></a>                        round_style    =&gt; round_style,
<a name="5559"><q-n>     5559  </q-n></a>                        overflow_style =&gt; overflow_style);
<a name="5560"><q-n>     5560  </q-n></a>      <q-w>return</q-w> result;
<a name="5561"><q-n>     5561  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="5562"><q-n>     5562  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> resize;
<a name="5563"><q-n>     5563  </q-n></a>
<a name="5564"><q-n>     5564  </q-n></a>  <q-m>-- Overloaded math functions for real</q-m>
<a name="5565"><q-n>     5565  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (
<a name="5566"><q-n>     5566  </q-n></a>    l : UNRESOLVED_ufixed;              <q-m>-- fixed point input</q-m>
<a name="5567"><q-n>     5567  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="5568"><q-n>     5568  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5569"><q-n>     5569  </q-n></a>  <q-w>begin</q-w>
<a name="5570"><q-n>     5570  </q-n></a>    <q-w>return</q-w> (l + to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5571"><q-n>     5571  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"+"</q-l>;
<a name="5572"><q-n>     5572  </q-n></a>
<a name="5573"><q-n>     5573  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (
<a name="5574"><q-n>     5574  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="5575"><q-n>     5575  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="5576"><q-n>     5576  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5577"><q-n>     5577  </q-n></a>  <q-w>begin</q-w>
<a name="5578"><q-n>     5578  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) + r);
<a name="5579"><q-n>     5579  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"+"</q-l>;
<a name="5580"><q-n>     5580  </q-n></a>
<a name="5581"><q-n>     5581  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (
<a name="5582"><q-n>     5582  </q-n></a>    l : UNRESOLVED_sfixed;              <q-m>-- fixed point input</q-m>
<a name="5583"><q-n>     5583  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="5584"><q-n>     5584  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5585"><q-n>     5585  </q-n></a>  <q-w>begin</q-w>
<a name="5586"><q-n>     5586  </q-n></a>    <q-w>return</q-w> (l + to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5587"><q-n>     5587  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"+"</q-l>;
<a name="5588"><q-n>     5588  </q-n></a>
<a name="5589"><q-n>     5589  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (
<a name="5590"><q-n>     5590  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="5591"><q-n>     5591  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="5592"><q-n>     5592  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5593"><q-n>     5593  </q-n></a>  <q-w>begin</q-w>
<a name="5594"><q-n>     5594  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) + r);
<a name="5595"><q-n>     5595  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"+"</q-l>;
<a name="5596"><q-n>     5596  </q-n></a>
<a name="5597"><q-n>     5597  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (
<a name="5598"><q-n>     5598  </q-n></a>    l : UNRESOLVED_ufixed;              <q-m>-- fixed point input</q-m>
<a name="5599"><q-n>     5599  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="5600"><q-n>     5600  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5601"><q-n>     5601  </q-n></a>  <q-w>begin</q-w>
<a name="5602"><q-n>     5602  </q-n></a>    <q-w>return</q-w> (l - to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5603"><q-n>     5603  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"-"</q-l>;
<a name="5604"><q-n>     5604  </q-n></a>
<a name="5605"><q-n>     5605  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (
<a name="5606"><q-n>     5606  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="5607"><q-n>     5607  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="5608"><q-n>     5608  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5609"><q-n>     5609  </q-n></a>  <q-w>begin</q-w>
<a name="5610"><q-n>     5610  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) - r);
<a name="5611"><q-n>     5611  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"-"</q-l>;
<a name="5612"><q-n>     5612  </q-n></a>
<a name="5613"><q-n>     5613  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (
<a name="5614"><q-n>     5614  </q-n></a>    l : UNRESOLVED_sfixed;              <q-m>-- fixed point input</q-m>
<a name="5615"><q-n>     5615  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="5616"><q-n>     5616  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5617"><q-n>     5617  </q-n></a>  <q-w>begin</q-w>
<a name="5618"><q-n>     5618  </q-n></a>    <q-w>return</q-w> (l - to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5619"><q-n>     5619  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"-"</q-l>;
<a name="5620"><q-n>     5620  </q-n></a>
<a name="5621"><q-n>     5621  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (
<a name="5622"><q-n>     5622  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="5623"><q-n>     5623  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="5624"><q-n>     5624  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5625"><q-n>     5625  </q-n></a>  <q-w>begin</q-w>
<a name="5626"><q-n>     5626  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) - r);
<a name="5627"><q-n>     5627  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"-"</q-l>;
<a name="5628"><q-n>     5628  </q-n></a>
<a name="5629"><q-n>     5629  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (
<a name="5630"><q-n>     5630  </q-n></a>    l : UNRESOLVED_ufixed;              <q-m>-- fixed point input</q-m>
<a name="5631"><q-n>     5631  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="5632"><q-n>     5632  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5633"><q-n>     5633  </q-n></a>  <q-w>begin</q-w>
<a name="5634"><q-n>     5634  </q-n></a>    <q-w>return</q-w> (l * to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5635"><q-n>     5635  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"*"</q-l>;
<a name="5636"><q-n>     5636  </q-n></a>
<a name="5637"><q-n>     5637  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (
<a name="5638"><q-n>     5638  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="5639"><q-n>     5639  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="5640"><q-n>     5640  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5641"><q-n>     5641  </q-n></a>  <q-w>begin</q-w>
<a name="5642"><q-n>     5642  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) * r);
<a name="5643"><q-n>     5643  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"*"</q-l>;
<a name="5644"><q-n>     5644  </q-n></a>
<a name="5645"><q-n>     5645  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (
<a name="5646"><q-n>     5646  </q-n></a>    l : UNRESOLVED_sfixed;              <q-m>-- fixed point input</q-m>
<a name="5647"><q-n>     5647  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="5648"><q-n>     5648  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5649"><q-n>     5649  </q-n></a>  <q-w>begin</q-w>
<a name="5650"><q-n>     5650  </q-n></a>    <q-w>return</q-w> (l * to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5651"><q-n>     5651  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"*"</q-l>;
<a name="5652"><q-n>     5652  </q-n></a>
<a name="5653"><q-n>     5653  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (
<a name="5654"><q-n>     5654  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="5655"><q-n>     5655  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="5656"><q-n>     5656  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5657"><q-n>     5657  </q-n></a>  <q-w>begin</q-w>
<a name="5658"><q-n>     5658  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) * r);
<a name="5659"><q-n>     5659  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"*"</q-l>;
<a name="5660"><q-n>     5660  </q-n></a>
<a name="5661"><q-n>     5661  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (
<a name="5662"><q-n>     5662  </q-n></a>    l : UNRESOLVED_ufixed;              <q-m>-- fixed point input</q-m>
<a name="5663"><q-n>     5663  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="5664"><q-n>     5664  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5665"><q-n>     5665  </q-n></a>  <q-w>begin</q-w>
<a name="5666"><q-n>     5666  </q-n></a>    <q-w>return</q-w> (l / to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5667"><q-n>     5667  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/"</q-l>;
<a name="5668"><q-n>     5668  </q-n></a>
<a name="5669"><q-n>     5669  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (
<a name="5670"><q-n>     5670  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="5671"><q-n>     5671  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="5672"><q-n>     5672  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5673"><q-n>     5673  </q-n></a>  <q-w>begin</q-w>
<a name="5674"><q-n>     5674  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) / r);
<a name="5675"><q-n>     5675  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/"</q-l>;
<a name="5676"><q-n>     5676  </q-n></a>
<a name="5677"><q-n>     5677  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (
<a name="5678"><q-n>     5678  </q-n></a>    l : UNRESOLVED_sfixed;              <q-m>-- fixed point input</q-m>
<a name="5679"><q-n>     5679  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="5680"><q-n>     5680  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5681"><q-n>     5681  </q-n></a>  <q-w>begin</q-w>
<a name="5682"><q-n>     5682  </q-n></a>    <q-w>return</q-w> (l / to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5683"><q-n>     5683  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/"</q-l>;
<a name="5684"><q-n>     5684  </q-n></a>
<a name="5685"><q-n>     5685  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (
<a name="5686"><q-n>     5686  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="5687"><q-n>     5687  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="5688"><q-n>     5688  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5689"><q-n>     5689  </q-n></a>  <q-w>begin</q-w>
<a name="5690"><q-n>     5690  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) / r);
<a name="5691"><q-n>     5691  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/"</q-l>;
<a name="5692"><q-n>     5692  </q-n></a>
<a name="5693"><q-n>     5693  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (
<a name="5694"><q-n>     5694  </q-n></a>    l : UNRESOLVED_ufixed;              <q-m>-- fixed point input</q-m>
<a name="5695"><q-n>     5695  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="5696"><q-n>     5696  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5697"><q-n>     5697  </q-n></a>  <q-w>begin</q-w>
<a name="5698"><q-n>     5698  </q-n></a>    <q-w>return</q-w> (l <q-w>rem</q-w> to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5699"><q-n>     5699  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"rem"</q-l>;
<a name="5700"><q-n>     5700  </q-n></a>
<a name="5701"><q-n>     5701  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (
<a name="5702"><q-n>     5702  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="5703"><q-n>     5703  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="5704"><q-n>     5704  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5705"><q-n>     5705  </q-n></a>  <q-w>begin</q-w>
<a name="5706"><q-n>     5706  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) <q-w>rem</q-w> r);
<a name="5707"><q-n>     5707  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"rem"</q-l>;
<a name="5708"><q-n>     5708  </q-n></a>
<a name="5709"><q-n>     5709  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (
<a name="5710"><q-n>     5710  </q-n></a>    l : UNRESOLVED_sfixed;              <q-m>-- fixed point input</q-m>
<a name="5711"><q-n>     5711  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="5712"><q-n>     5712  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5713"><q-n>     5713  </q-n></a>  <q-w>begin</q-w>
<a name="5714"><q-n>     5714  </q-n></a>    <q-w>return</q-w> (l <q-w>rem</q-w> to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5715"><q-n>     5715  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"rem"</q-l>;
<a name="5716"><q-n>     5716  </q-n></a>
<a name="5717"><q-n>     5717  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (
<a name="5718"><q-n>     5718  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="5719"><q-n>     5719  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="5720"><q-n>     5720  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5721"><q-n>     5721  </q-n></a>  <q-w>begin</q-w>
<a name="5722"><q-n>     5722  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) <q-w>rem</q-w> r);
<a name="5723"><q-n>     5723  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"rem"</q-l>;
<a name="5724"><q-n>     5724  </q-n></a>
<a name="5725"><q-n>     5725  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (
<a name="5726"><q-n>     5726  </q-n></a>    l : UNRESOLVED_ufixed;              <q-m>-- fixed point input</q-m>
<a name="5727"><q-n>     5727  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="5728"><q-n>     5728  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5729"><q-n>     5729  </q-n></a>  <q-w>begin</q-w>
<a name="5730"><q-n>     5730  </q-n></a>    <q-w>return</q-w> (l <q-w>mod</q-w> to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5731"><q-n>     5731  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"mod"</q-l>;
<a name="5732"><q-n>     5732  </q-n></a>
<a name="5733"><q-n>     5733  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (
<a name="5734"><q-n>     5734  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="5735"><q-n>     5735  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="5736"><q-n>     5736  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5737"><q-n>     5737  </q-n></a>  <q-w>begin</q-w>
<a name="5738"><q-n>     5738  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) <q-w>mod</q-w> r);
<a name="5739"><q-n>     5739  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"mod"</q-l>;
<a name="5740"><q-n>     5740  </q-n></a>
<a name="5741"><q-n>     5741  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (
<a name="5742"><q-n>     5742  </q-n></a>    l : UNRESOLVED_sfixed;              <q-m>-- fixed point input</q-m>
<a name="5743"><q-n>     5743  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="5744"><q-n>     5744  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5745"><q-n>     5745  </q-n></a>  <q-w>begin</q-w>
<a name="5746"><q-n>     5746  </q-n></a>    <q-w>return</q-w> (l <q-w>mod</q-w> to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5747"><q-n>     5747  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"mod"</q-l>;
<a name="5748"><q-n>     5748  </q-n></a>
<a name="5749"><q-n>     5749  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (
<a name="5750"><q-n>     5750  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="5751"><q-n>     5751  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="5752"><q-n>     5752  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5753"><q-n>     5753  </q-n></a>  <q-w>begin</q-w>
<a name="5754"><q-n>     5754  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) <q-w>mod</q-w> r);
<a name="5755"><q-n>     5755  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"mod"</q-l>;
<a name="5756"><q-n>     5756  </q-n></a>
<a name="5757"><q-n>     5757  </q-n></a>  <q-m>-- Overloaded math functions for integers</q-m>
<a name="5758"><q-n>     5758  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (
<a name="5759"><q-n>     5759  </q-n></a>    l : UNRESOLVED_ufixed;              <q-m>-- fixed point input</q-m>
<a name="5760"><q-n>     5760  </q-n></a>    r : <q-t>NATURAL</q-w>)
<a name="5761"><q-n>     5761  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5762"><q-n>     5762  </q-n></a>  <q-w>begin</q-w>
<a name="5763"><q-n>     5763  </q-n></a>    <q-w>return</q-w> (l + to_ufixed (r, l'<q-a>high</q-w>, 0));
<a name="5764"><q-n>     5764  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"+"</q-l>;
<a name="5765"><q-n>     5765  </q-n></a>
<a name="5766"><q-n>     5766  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (
<a name="5767"><q-n>     5767  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="5768"><q-n>     5768  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="5769"><q-n>     5769  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5770"><q-n>     5770  </q-n></a>  <q-w>begin</q-w>
<a name="5771"><q-n>     5771  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, 0) + r);
<a name="5772"><q-n>     5772  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"+"</q-l>;
<a name="5773"><q-n>     5773  </q-n></a>
<a name="5774"><q-n>     5774  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (
<a name="5775"><q-n>     5775  </q-n></a>    l : UNRESOLVED_sfixed;              <q-m>-- fixed point input</q-m>
<a name="5776"><q-n>     5776  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="5777"><q-n>     5777  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5778"><q-n>     5778  </q-n></a>  <q-w>begin</q-w>
<a name="5779"><q-n>     5779  </q-n></a>    <q-w>return</q-w> (l + to_sfixed (r, l'<q-a>high</q-w>, 0));
<a name="5780"><q-n>     5780  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"+"</q-l>;
<a name="5781"><q-n>     5781  </q-n></a>
<a name="5782"><q-n>     5782  </q-n></a>  <q-w>function</q-w> <q-l>"+"</q-l> (
<a name="5783"><q-n>     5783  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="5784"><q-n>     5784  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="5785"><q-n>     5785  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5786"><q-n>     5786  </q-n></a>  <q-w>begin</q-w>
<a name="5787"><q-n>     5787  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, 0) + r);
<a name="5788"><q-n>     5788  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"+"</q-l>;
<a name="5789"><q-n>     5789  </q-n></a>
<a name="5790"><q-n>     5790  </q-n></a>  <q-m>-- Overloaded functions</q-m>
<a name="5791"><q-n>     5791  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (
<a name="5792"><q-n>     5792  </q-n></a>    l : UNRESOLVED_ufixed;              <q-m>-- fixed point input</q-m>
<a name="5793"><q-n>     5793  </q-n></a>    r : <q-t>NATURAL</q-w>)
<a name="5794"><q-n>     5794  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5795"><q-n>     5795  </q-n></a>  <q-w>begin</q-w>
<a name="5796"><q-n>     5796  </q-n></a>    <q-w>return</q-w> (l - to_ufixed (r, l'<q-a>high</q-w>, 0));
<a name="5797"><q-n>     5797  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"-"</q-l>;
<a name="5798"><q-n>     5798  </q-n></a>
<a name="5799"><q-n>     5799  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (
<a name="5800"><q-n>     5800  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="5801"><q-n>     5801  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="5802"><q-n>     5802  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5803"><q-n>     5803  </q-n></a>  <q-w>begin</q-w>
<a name="5804"><q-n>     5804  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, 0) - r);
<a name="5805"><q-n>     5805  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"-"</q-l>;
<a name="5806"><q-n>     5806  </q-n></a>
<a name="5807"><q-n>     5807  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (
<a name="5808"><q-n>     5808  </q-n></a>    l : UNRESOLVED_sfixed;              <q-m>-- fixed point input</q-m>
<a name="5809"><q-n>     5809  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="5810"><q-n>     5810  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5811"><q-n>     5811  </q-n></a>  <q-w>begin</q-w>
<a name="5812"><q-n>     5812  </q-n></a>    <q-w>return</q-w> (l - to_sfixed (r, l'<q-a>high</q-w>, 0));
<a name="5813"><q-n>     5813  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"-"</q-l>;
<a name="5814"><q-n>     5814  </q-n></a>
<a name="5815"><q-n>     5815  </q-n></a>  <q-w>function</q-w> <q-l>"-"</q-l> (
<a name="5816"><q-n>     5816  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="5817"><q-n>     5817  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="5818"><q-n>     5818  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5819"><q-n>     5819  </q-n></a>  <q-w>begin</q-w>
<a name="5820"><q-n>     5820  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, 0) - r);
<a name="5821"><q-n>     5821  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"-"</q-l>;
<a name="5822"><q-n>     5822  </q-n></a>
<a name="5823"><q-n>     5823  </q-n></a>  <q-m>-- Overloaded functions</q-m>
<a name="5824"><q-n>     5824  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (
<a name="5825"><q-n>     5825  </q-n></a>    l : UNRESOLVED_ufixed;              <q-m>-- fixed point input</q-m>
<a name="5826"><q-n>     5826  </q-n></a>    r : <q-t>NATURAL</q-w>)
<a name="5827"><q-n>     5827  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5828"><q-n>     5828  </q-n></a>  <q-w>begin</q-w>
<a name="5829"><q-n>     5829  </q-n></a>    <q-w>return</q-w> (l * to_ufixed (r, l'<q-a>high</q-w>, 0));
<a name="5830"><q-n>     5830  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"*"</q-l>;
<a name="5831"><q-n>     5831  </q-n></a>
<a name="5832"><q-n>     5832  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (
<a name="5833"><q-n>     5833  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="5834"><q-n>     5834  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="5835"><q-n>     5835  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5836"><q-n>     5836  </q-n></a>  <q-w>begin</q-w>
<a name="5837"><q-n>     5837  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, 0) * r);
<a name="5838"><q-n>     5838  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"*"</q-l>;
<a name="5839"><q-n>     5839  </q-n></a>
<a name="5840"><q-n>     5840  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (
<a name="5841"><q-n>     5841  </q-n></a>    l : UNRESOLVED_sfixed;              <q-m>-- fixed point input</q-m>
<a name="5842"><q-n>     5842  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="5843"><q-n>     5843  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5844"><q-n>     5844  </q-n></a>  <q-w>begin</q-w>
<a name="5845"><q-n>     5845  </q-n></a>    <q-w>return</q-w> (l * to_sfixed (r, l'<q-a>high</q-w>, 0));
<a name="5846"><q-n>     5846  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"*"</q-l>;
<a name="5847"><q-n>     5847  </q-n></a>
<a name="5848"><q-n>     5848  </q-n></a>  <q-w>function</q-w> <q-l>"*"</q-l> (
<a name="5849"><q-n>     5849  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="5850"><q-n>     5850  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="5851"><q-n>     5851  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5852"><q-n>     5852  </q-n></a>  <q-w>begin</q-w>
<a name="5853"><q-n>     5853  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, 0) * r);
<a name="5854"><q-n>     5854  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"*"</q-l>;
<a name="5855"><q-n>     5855  </q-n></a>
<a name="5856"><q-n>     5856  </q-n></a>  <q-m>-- Overloaded functions</q-m>
<a name="5857"><q-n>     5857  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (
<a name="5858"><q-n>     5858  </q-n></a>    l : UNRESOLVED_ufixed;              <q-m>-- fixed point input</q-m>
<a name="5859"><q-n>     5859  </q-n></a>    r : <q-t>NATURAL</q-w>)
<a name="5860"><q-n>     5860  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5861"><q-n>     5861  </q-n></a>  <q-w>begin</q-w>
<a name="5862"><q-n>     5862  </q-n></a>    <q-w>return</q-w> (l / to_ufixed (r, l'<q-a>high</q-w>, 0));
<a name="5863"><q-n>     5863  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/"</q-l>;
<a name="5864"><q-n>     5864  </q-n></a>
<a name="5865"><q-n>     5865  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (
<a name="5866"><q-n>     5866  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="5867"><q-n>     5867  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="5868"><q-n>     5868  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5869"><q-n>     5869  </q-n></a>  <q-w>begin</q-w>
<a name="5870"><q-n>     5870  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, 0) / r);
<a name="5871"><q-n>     5871  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/"</q-l>;
<a name="5872"><q-n>     5872  </q-n></a>
<a name="5873"><q-n>     5873  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (
<a name="5874"><q-n>     5874  </q-n></a>    l : UNRESOLVED_sfixed;              <q-m>-- fixed point input</q-m>
<a name="5875"><q-n>     5875  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="5876"><q-n>     5876  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5877"><q-n>     5877  </q-n></a>  <q-w>begin</q-w>
<a name="5878"><q-n>     5878  </q-n></a>    <q-w>return</q-w> (l / to_sfixed (r, l'<q-a>high</q-w>, 0));
<a name="5879"><q-n>     5879  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/"</q-l>;
<a name="5880"><q-n>     5880  </q-n></a>
<a name="5881"><q-n>     5881  </q-n></a>  <q-w>function</q-w> <q-l>"/"</q-l> (
<a name="5882"><q-n>     5882  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="5883"><q-n>     5883  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="5884"><q-n>     5884  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5885"><q-n>     5885  </q-n></a>  <q-w>begin</q-w>
<a name="5886"><q-n>     5886  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, 0) / r);
<a name="5887"><q-n>     5887  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/"</q-l>;
<a name="5888"><q-n>     5888  </q-n></a>
<a name="5889"><q-n>     5889  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (
<a name="5890"><q-n>     5890  </q-n></a>    l : UNRESOLVED_ufixed;              <q-m>-- fixed point input</q-m>
<a name="5891"><q-n>     5891  </q-n></a>    r : <q-t>NATURAL</q-w>)
<a name="5892"><q-n>     5892  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5893"><q-n>     5893  </q-n></a>  <q-w>begin</q-w>
<a name="5894"><q-n>     5894  </q-n></a>    <q-w>return</q-w> (l <q-w>rem</q-w> to_ufixed (r, l'<q-a>high</q-w>, 0));
<a name="5895"><q-n>     5895  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"rem"</q-l>;
<a name="5896"><q-n>     5896  </q-n></a>
<a name="5897"><q-n>     5897  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (
<a name="5898"><q-n>     5898  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="5899"><q-n>     5899  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="5900"><q-n>     5900  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5901"><q-n>     5901  </q-n></a>  <q-w>begin</q-w>
<a name="5902"><q-n>     5902  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, 0) <q-w>rem</q-w> r);
<a name="5903"><q-n>     5903  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"rem"</q-l>;
<a name="5904"><q-n>     5904  </q-n></a>
<a name="5905"><q-n>     5905  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (
<a name="5906"><q-n>     5906  </q-n></a>    l : UNRESOLVED_sfixed;              <q-m>-- fixed point input</q-m>
<a name="5907"><q-n>     5907  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="5908"><q-n>     5908  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5909"><q-n>     5909  </q-n></a>  <q-w>begin</q-w>
<a name="5910"><q-n>     5910  </q-n></a>    <q-w>return</q-w> (l <q-w>rem</q-w> to_sfixed (r, l'<q-a>high</q-w>, 0));
<a name="5911"><q-n>     5911  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"rem"</q-l>;
<a name="5912"><q-n>     5912  </q-n></a>
<a name="5913"><q-n>     5913  </q-n></a>  <q-w>function</q-w> <q-l>"rem"</q-l> (
<a name="5914"><q-n>     5914  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="5915"><q-n>     5915  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="5916"><q-n>     5916  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5917"><q-n>     5917  </q-n></a>  <q-w>begin</q-w>
<a name="5918"><q-n>     5918  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, 0) <q-w>rem</q-w> r);
<a name="5919"><q-n>     5919  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"rem"</q-l>;
<a name="5920"><q-n>     5920  </q-n></a>
<a name="5921"><q-n>     5921  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (
<a name="5922"><q-n>     5922  </q-n></a>    l : UNRESOLVED_ufixed;              <q-m>-- fixed point input</q-m>
<a name="5923"><q-n>     5923  </q-n></a>    r : <q-t>NATURAL</q-w>)
<a name="5924"><q-n>     5924  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5925"><q-n>     5925  </q-n></a>  <q-w>begin</q-w>
<a name="5926"><q-n>     5926  </q-n></a>    <q-w>return</q-w> (l <q-w>mod</q-w> to_ufixed (r, l'<q-a>high</q-w>, 0));
<a name="5927"><q-n>     5927  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"mod"</q-l>;
<a name="5928"><q-n>     5928  </q-n></a>
<a name="5929"><q-n>     5929  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (
<a name="5930"><q-n>     5930  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="5931"><q-n>     5931  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="5932"><q-n>     5932  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="5933"><q-n>     5933  </q-n></a>  <q-w>begin</q-w>
<a name="5934"><q-n>     5934  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, 0) <q-w>mod</q-w> r);
<a name="5935"><q-n>     5935  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"mod"</q-l>;
<a name="5936"><q-n>     5936  </q-n></a>
<a name="5937"><q-n>     5937  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (
<a name="5938"><q-n>     5938  </q-n></a>    l : UNRESOLVED_sfixed;              <q-m>-- fixed point input</q-m>
<a name="5939"><q-n>     5939  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="5940"><q-n>     5940  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5941"><q-n>     5941  </q-n></a>  <q-w>begin</q-w>
<a name="5942"><q-n>     5942  </q-n></a>    <q-w>return</q-w> (l <q-w>mod</q-w> to_sfixed (r, l'<q-a>high</q-w>, 0));
<a name="5943"><q-n>     5943  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"mod"</q-l>;
<a name="5944"><q-n>     5944  </q-n></a>
<a name="5945"><q-n>     5945  </q-n></a>  <q-w>function</q-w> <q-l>"mod"</q-l> (
<a name="5946"><q-n>     5946  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="5947"><q-n>     5947  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="5948"><q-n>     5948  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="5949"><q-n>     5949  </q-n></a>  <q-w>begin</q-w>
<a name="5950"><q-n>     5950  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, 0) <q-w>mod</q-w> r);
<a name="5951"><q-n>     5951  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"mod"</q-l>;
<a name="5952"><q-n>     5952  </q-n></a>
<a name="5953"><q-n>     5953  </q-n></a>  <q-m>-- overloaded ufixed compare functions with integer</q-m>
<a name="5954"><q-n>     5954  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l> (
<a name="5955"><q-n>     5955  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="5956"><q-n>     5956  </q-n></a>    r : <q-t>NATURAL</q-w>)                        <q-m>-- fixed point input</q-m>
<a name="5957"><q-n>     5957  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="5958"><q-n>     5958  </q-n></a>  <q-w>begin</q-w>
<a name="5959"><q-n>     5959  </q-n></a>    <q-w>return</q-w> (l = to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5960"><q-n>     5960  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"="</q-l>;
<a name="5961"><q-n>     5961  </q-n></a>
<a name="5962"><q-n>     5962  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (
<a name="5963"><q-n>     5963  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="5964"><q-n>     5964  </q-n></a>    r : <q-t>NATURAL</q-w>)                        <q-m>-- fixed point input</q-m>
<a name="5965"><q-n>     5965  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="5966"><q-n>     5966  </q-n></a>  <q-w>begin</q-w>
<a name="5967"><q-n>     5967  </q-n></a>    <q-w>return</q-w> (l /= to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5968"><q-n>     5968  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/="</q-l>;
<a name="5969"><q-n>     5969  </q-n></a>
<a name="5970"><q-n>     5970  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (
<a name="5971"><q-n>     5971  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="5972"><q-n>     5972  </q-n></a>    r : <q-t>NATURAL</q-w>)                        <q-m>-- fixed point input</q-m>
<a name="5973"><q-n>     5973  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="5974"><q-n>     5974  </q-n></a>  <q-w>begin</q-w>
<a name="5975"><q-n>     5975  </q-n></a>    <q-w>return</q-w> (l &gt;= to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5976"><q-n>     5976  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;="</q-l>;
<a name="5977"><q-n>     5977  </q-n></a>
<a name="5978"><q-n>     5978  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (
<a name="5979"><q-n>     5979  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="5980"><q-n>     5980  </q-n></a>    r : <q-t>NATURAL</q-w>)                        <q-m>-- fixed point input</q-m>
<a name="5981"><q-n>     5981  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="5982"><q-n>     5982  </q-n></a>  <q-w>begin</q-w>
<a name="5983"><q-n>     5983  </q-n></a>    <q-w>return</q-w> (l &lt;= to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5984"><q-n>     5984  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;="</q-l>;
<a name="5985"><q-n>     5985  </q-n></a>
<a name="5986"><q-n>     5986  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l> (
<a name="5987"><q-n>     5987  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="5988"><q-n>     5988  </q-n></a>    r : <q-t>NATURAL</q-w>)                        <q-m>-- fixed point input</q-m>
<a name="5989"><q-n>     5989  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="5990"><q-n>     5990  </q-n></a>  <q-w>begin</q-w>
<a name="5991"><q-n>     5991  </q-n></a>    <q-w>return</q-w> (l &gt; to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="5992"><q-n>     5992  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;"</q-l>;
<a name="5993"><q-n>     5993  </q-n></a>
<a name="5994"><q-n>     5994  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l> (
<a name="5995"><q-n>     5995  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="5996"><q-n>     5996  </q-n></a>    r : <q-t>NATURAL</q-w>)                        <q-m>-- fixed point input</q-m>
<a name="5997"><q-n>     5997  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="5998"><q-n>     5998  </q-n></a>  <q-w>begin</q-w>
<a name="5999"><q-n>     5999  </q-n></a>    <q-w>return</q-w> (l &lt; to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6000"><q-n>     6000  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;"</q-l>;
<a name="6001"><q-n>     6001  </q-n></a>
<a name="6002"><q-n>     6002  </q-n></a>  <q-w>function</q-w> \?=\ (
<a name="6003"><q-n>     6003  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6004"><q-n>     6004  </q-n></a>    r : <q-t>NATURAL</q-w>)                        <q-m>-- fixed point input</q-m>
<a name="6005"><q-n>     6005  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6006"><q-n>     6006  </q-n></a>  <q-w>begin</q-w>
<a name="6007"><q-n>     6007  </q-n></a>    <q-w>return</q-w> \?=\ (l,  to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6008"><q-n>     6008  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?=\;
<a name="6009"><q-n>     6009  </q-n></a>
<a name="6010"><q-n>     6010  </q-n></a>  <q-w>function</q-w> \?/=\ (
<a name="6011"><q-n>     6011  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6012"><q-n>     6012  </q-n></a>    r : <q-t>NATURAL</q-w>)                        <q-m>-- fixed point input</q-m>
<a name="6013"><q-n>     6013  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6014"><q-n>     6014  </q-n></a>  <q-w>begin</q-w>
<a name="6015"><q-n>     6015  </q-n></a>    <q-w>return</q-w> \?/=\ (l,  to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6016"><q-n>     6016  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?/=\;
<a name="6017"><q-n>     6017  </q-n></a>
<a name="6018"><q-n>     6018  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (
<a name="6019"><q-n>     6019  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6020"><q-n>     6020  </q-n></a>    r : <q-t>NATURAL</q-w>)                        <q-m>-- fixed point input</q-m>
<a name="6021"><q-n>     6021  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6022"><q-n>     6022  </q-n></a>  <q-w>begin</q-w>
<a name="6023"><q-n>     6023  </q-n></a>    <q-w>return</q-w> \?&gt;=\ (l,  to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6024"><q-n>     6024  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;=\;
<a name="6025"><q-n>     6025  </q-n></a>
<a name="6026"><q-n>     6026  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (
<a name="6027"><q-n>     6027  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6028"><q-n>     6028  </q-n></a>    r : <q-t>NATURAL</q-w>)                        <q-m>-- fixed point input</q-m>
<a name="6029"><q-n>     6029  </q-n></a>                 <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6030"><q-n>     6030  </q-n></a>  <q-w>begin</q-w>
<a name="6031"><q-n>     6031  </q-n></a>    <q-w>return</q-w> \?&lt;=\ (l,  to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6032"><q-n>     6032  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;=\;
<a name="6033"><q-n>     6033  </q-n></a>
<a name="6034"><q-n>     6034  </q-n></a>  <q-w>function</q-w> \?&gt;\ (
<a name="6035"><q-n>     6035  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6036"><q-n>     6036  </q-n></a>    r : <q-t>NATURAL</q-w>)                        <q-m>-- fixed point input</q-m>
<a name="6037"><q-n>     6037  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6038"><q-n>     6038  </q-n></a>  <q-w>begin</q-w>
<a name="6039"><q-n>     6039  </q-n></a>    <q-w>return</q-w> \?&gt;\ (l,  to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6040"><q-n>     6040  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;\;
<a name="6041"><q-n>     6041  </q-n></a>
<a name="6042"><q-n>     6042  </q-n></a>  <q-w>function</q-w> \?&lt;\ (
<a name="6043"><q-n>     6043  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6044"><q-n>     6044  </q-n></a>    r : <q-t>NATURAL</q-w>)                        <q-m>-- fixed point input</q-m>
<a name="6045"><q-n>     6045  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6046"><q-n>     6046  </q-n></a>  <q-w>begin</q-w>
<a name="6047"><q-n>     6047  </q-n></a>    <q-w>return</q-w> \?&lt;\ (l,  to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6048"><q-n>     6048  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;\;
<a name="6049"><q-n>     6049  </q-n></a>
<a name="6050"><q-n>     6050  </q-n></a>  <q-w>function</q-w> maximum (
<a name="6051"><q-n>     6051  </q-n></a>    l : UNRESOLVED_ufixed;              <q-m>-- fixed point input</q-m>
<a name="6052"><q-n>     6052  </q-n></a>    r : <q-t>NATURAL</q-w>)
<a name="6053"><q-n>     6053  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="6054"><q-n>     6054  </q-n></a>  <q-w>begin</q-w>
<a name="6055"><q-n>     6055  </q-n></a>    <q-w>return</q-w> maximum (l, to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6056"><q-n>     6056  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> maximum;
<a name="6057"><q-n>     6057  </q-n></a>
<a name="6058"><q-n>     6058  </q-n></a>  <q-w>function</q-w> minimum (
<a name="6059"><q-n>     6059  </q-n></a>    l : UNRESOLVED_ufixed;              <q-m>-- fixed point input</q-m>
<a name="6060"><q-n>     6060  </q-n></a>    r : <q-t>NATURAL</q-w>)
<a name="6061"><q-n>     6061  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="6062"><q-n>     6062  </q-n></a>  <q-w>begin</q-w>
<a name="6063"><q-n>     6063  </q-n></a>    <q-w>return</q-w> minimum (l, to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6064"><q-n>     6064  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> minimum;
<a name="6065"><q-n>     6065  </q-n></a>
<a name="6066"><q-n>     6066  </q-n></a>  <q-m>-- NATURAL to ufixed</q-m>
<a name="6067"><q-n>     6067  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l> (
<a name="6068"><q-n>     6068  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="6069"><q-n>     6069  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6070"><q-n>     6070  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6071"><q-n>     6071  </q-n></a>  <q-w>begin</q-w>
<a name="6072"><q-n>     6072  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) = r);
<a name="6073"><q-n>     6073  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"="</q-l>;
<a name="6074"><q-n>     6074  </q-n></a>
<a name="6075"><q-n>     6075  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (
<a name="6076"><q-n>     6076  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="6077"><q-n>     6077  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6078"><q-n>     6078  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6079"><q-n>     6079  </q-n></a>  <q-w>begin</q-w>
<a name="6080"><q-n>     6080  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) /= r);
<a name="6081"><q-n>     6081  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/="</q-l>;
<a name="6082"><q-n>     6082  </q-n></a>
<a name="6083"><q-n>     6083  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (
<a name="6084"><q-n>     6084  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="6085"><q-n>     6085  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6086"><q-n>     6086  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6087"><q-n>     6087  </q-n></a>  <q-w>begin</q-w>
<a name="6088"><q-n>     6088  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &gt;= r);
<a name="6089"><q-n>     6089  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;="</q-l>;
<a name="6090"><q-n>     6090  </q-n></a>
<a name="6091"><q-n>     6091  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (
<a name="6092"><q-n>     6092  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="6093"><q-n>     6093  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6094"><q-n>     6094  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6095"><q-n>     6095  </q-n></a>  <q-w>begin</q-w>
<a name="6096"><q-n>     6096  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &lt;= r);
<a name="6097"><q-n>     6097  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;="</q-l>;
<a name="6098"><q-n>     6098  </q-n></a>
<a name="6099"><q-n>     6099  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l> (
<a name="6100"><q-n>     6100  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="6101"><q-n>     6101  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6102"><q-n>     6102  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6103"><q-n>     6103  </q-n></a>  <q-w>begin</q-w>
<a name="6104"><q-n>     6104  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &gt; r);
<a name="6105"><q-n>     6105  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;"</q-l>;
<a name="6106"><q-n>     6106  </q-n></a>
<a name="6107"><q-n>     6107  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l> (
<a name="6108"><q-n>     6108  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="6109"><q-n>     6109  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6110"><q-n>     6110  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6111"><q-n>     6111  </q-n></a>  <q-w>begin</q-w>
<a name="6112"><q-n>     6112  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &lt; r);
<a name="6113"><q-n>     6113  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;"</q-l>;
<a name="6114"><q-n>     6114  </q-n></a>
<a name="6115"><q-n>     6115  </q-n></a>  <q-w>function</q-w> \?=\ (
<a name="6116"><q-n>     6116  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="6117"><q-n>     6117  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6118"><q-n>     6118  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6119"><q-n>     6119  </q-n></a>  <q-w>begin</q-w>
<a name="6120"><q-n>     6120  </q-n></a>    <q-w>return</q-w> \?=\ (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6121"><q-n>     6121  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?=\;
<a name="6122"><q-n>     6122  </q-n></a>
<a name="6123"><q-n>     6123  </q-n></a>  <q-w>function</q-w> \?/=\ (
<a name="6124"><q-n>     6124  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="6125"><q-n>     6125  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6126"><q-n>     6126  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6127"><q-n>     6127  </q-n></a>  <q-w>begin</q-w>
<a name="6128"><q-n>     6128  </q-n></a>    <q-w>return</q-w> \?/=\ (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6129"><q-n>     6129  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?/=\;
<a name="6130"><q-n>     6130  </q-n></a>
<a name="6131"><q-n>     6131  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (
<a name="6132"><q-n>     6132  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="6133"><q-n>     6133  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6134"><q-n>     6134  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6135"><q-n>     6135  </q-n></a>  <q-w>begin</q-w>
<a name="6136"><q-n>     6136  </q-n></a>    <q-w>return</q-w> \?&gt;=\ (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6137"><q-n>     6137  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;=\;
<a name="6138"><q-n>     6138  </q-n></a>
<a name="6139"><q-n>     6139  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (
<a name="6140"><q-n>     6140  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="6141"><q-n>     6141  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6142"><q-n>     6142  </q-n></a>                 <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6143"><q-n>     6143  </q-n></a>  <q-w>begin</q-w>
<a name="6144"><q-n>     6144  </q-n></a>    <q-w>return</q-w> \?&lt;=\ (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6145"><q-n>     6145  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;=\;
<a name="6146"><q-n>     6146  </q-n></a>
<a name="6147"><q-n>     6147  </q-n></a>  <q-w>function</q-w> \?&gt;\ (
<a name="6148"><q-n>     6148  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="6149"><q-n>     6149  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6150"><q-n>     6150  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6151"><q-n>     6151  </q-n></a>  <q-w>begin</q-w>
<a name="6152"><q-n>     6152  </q-n></a>    <q-w>return</q-w> \?&gt;\ (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6153"><q-n>     6153  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;\;
<a name="6154"><q-n>     6154  </q-n></a>
<a name="6155"><q-n>     6155  </q-n></a>  <q-w>function</q-w> \?&lt;\ (
<a name="6156"><q-n>     6156  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="6157"><q-n>     6157  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6158"><q-n>     6158  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6159"><q-n>     6159  </q-n></a>  <q-w>begin</q-w>
<a name="6160"><q-n>     6160  </q-n></a>    <q-w>return</q-w> \?&lt;\ (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6161"><q-n>     6161  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;\;
<a name="6162"><q-n>     6162  </q-n></a>
<a name="6163"><q-n>     6163  </q-n></a>  <q-w>function</q-w> maximum (
<a name="6164"><q-n>     6164  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="6165"><q-n>     6165  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6166"><q-n>     6166  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="6167"><q-n>     6167  </q-n></a>  <q-w>begin</q-w>
<a name="6168"><q-n>     6168  </q-n></a>    <q-w>return</q-w> maximum (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6169"><q-n>     6169  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> maximum;
<a name="6170"><q-n>     6170  </q-n></a>
<a name="6171"><q-n>     6171  </q-n></a>  <q-w>function</q-w> minimum (
<a name="6172"><q-n>     6172  </q-n></a>    l : <q-t>NATURAL</q-w>;
<a name="6173"><q-n>     6173  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6174"><q-n>     6174  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="6175"><q-n>     6175  </q-n></a>  <q-w>begin</q-w>
<a name="6176"><q-n>     6176  </q-n></a>    <q-w>return</q-w> minimum (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6177"><q-n>     6177  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> minimum;
<a name="6178"><q-n>     6178  </q-n></a>
<a name="6179"><q-n>     6179  </q-n></a>  <q-m>-- overloaded ufixed compare functions with real</q-m>
<a name="6180"><q-n>     6180  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l> (
<a name="6181"><q-n>     6181  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6182"><q-n>     6182  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6183"><q-n>     6183  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6184"><q-n>     6184  </q-n></a>  <q-w>begin</q-w>
<a name="6185"><q-n>     6185  </q-n></a>    <q-w>return</q-w> (l = to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6186"><q-n>     6186  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"="</q-l>;
<a name="6187"><q-n>     6187  </q-n></a>
<a name="6188"><q-n>     6188  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (
<a name="6189"><q-n>     6189  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6190"><q-n>     6190  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6191"><q-n>     6191  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6192"><q-n>     6192  </q-n></a>  <q-w>begin</q-w>
<a name="6193"><q-n>     6193  </q-n></a>    <q-w>return</q-w> (l /= to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6194"><q-n>     6194  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/="</q-l>;
<a name="6195"><q-n>     6195  </q-n></a>
<a name="6196"><q-n>     6196  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (
<a name="6197"><q-n>     6197  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6198"><q-n>     6198  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6199"><q-n>     6199  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6200"><q-n>     6200  </q-n></a>  <q-w>begin</q-w>
<a name="6201"><q-n>     6201  </q-n></a>    <q-w>return</q-w> (l &gt;= to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6202"><q-n>     6202  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;="</q-l>;
<a name="6203"><q-n>     6203  </q-n></a>
<a name="6204"><q-n>     6204  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (
<a name="6205"><q-n>     6205  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6206"><q-n>     6206  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6207"><q-n>     6207  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6208"><q-n>     6208  </q-n></a>  <q-w>begin</q-w>
<a name="6209"><q-n>     6209  </q-n></a>    <q-w>return</q-w> (l &lt;= to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6210"><q-n>     6210  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;="</q-l>;
<a name="6211"><q-n>     6211  </q-n></a>
<a name="6212"><q-n>     6212  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l> (
<a name="6213"><q-n>     6213  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6214"><q-n>     6214  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6215"><q-n>     6215  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6216"><q-n>     6216  </q-n></a>  <q-w>begin</q-w>
<a name="6217"><q-n>     6217  </q-n></a>    <q-w>return</q-w> (l &gt; to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6218"><q-n>     6218  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;"</q-l>;
<a name="6219"><q-n>     6219  </q-n></a>
<a name="6220"><q-n>     6220  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l> (
<a name="6221"><q-n>     6221  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6222"><q-n>     6222  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6223"><q-n>     6223  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6224"><q-n>     6224  </q-n></a>  <q-w>begin</q-w>
<a name="6225"><q-n>     6225  </q-n></a>    <q-w>return</q-w> (l &lt; to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6226"><q-n>     6226  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;"</q-l>;
<a name="6227"><q-n>     6227  </q-n></a>
<a name="6228"><q-n>     6228  </q-n></a>  <q-w>function</q-w> \?=\ (
<a name="6229"><q-n>     6229  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6230"><q-n>     6230  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6231"><q-n>     6231  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6232"><q-n>     6232  </q-n></a>  <q-w>begin</q-w>
<a name="6233"><q-n>     6233  </q-n></a>    <q-w>return</q-w> \?=\ (l,  to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6234"><q-n>     6234  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?=\;
<a name="6235"><q-n>     6235  </q-n></a>
<a name="6236"><q-n>     6236  </q-n></a>  <q-w>function</q-w> \?/=\ (
<a name="6237"><q-n>     6237  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6238"><q-n>     6238  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6239"><q-n>     6239  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6240"><q-n>     6240  </q-n></a>  <q-w>begin</q-w>
<a name="6241"><q-n>     6241  </q-n></a>    <q-w>return</q-w> \?/=\ (l,  to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6242"><q-n>     6242  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?/=\;
<a name="6243"><q-n>     6243  </q-n></a>
<a name="6244"><q-n>     6244  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (
<a name="6245"><q-n>     6245  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6246"><q-n>     6246  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6247"><q-n>     6247  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6248"><q-n>     6248  </q-n></a>  <q-w>begin</q-w>
<a name="6249"><q-n>     6249  </q-n></a>    <q-w>return</q-w> \?&gt;=\ (l,  to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6250"><q-n>     6250  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;=\;
<a name="6251"><q-n>     6251  </q-n></a>
<a name="6252"><q-n>     6252  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (
<a name="6253"><q-n>     6253  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6254"><q-n>     6254  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6255"><q-n>     6255  </q-n></a>                 <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6256"><q-n>     6256  </q-n></a>  <q-w>begin</q-w>
<a name="6257"><q-n>     6257  </q-n></a>    <q-w>return</q-w> \?&lt;=\ (l,  to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6258"><q-n>     6258  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;=\;
<a name="6259"><q-n>     6259  </q-n></a>
<a name="6260"><q-n>     6260  </q-n></a>  <q-w>function</q-w> \?&gt;\ (
<a name="6261"><q-n>     6261  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6262"><q-n>     6262  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6263"><q-n>     6263  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6264"><q-n>     6264  </q-n></a>  <q-w>begin</q-w>
<a name="6265"><q-n>     6265  </q-n></a>    <q-w>return</q-w> \?&gt;\ (l,  to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6266"><q-n>     6266  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;\;
<a name="6267"><q-n>     6267  </q-n></a>
<a name="6268"><q-n>     6268  </q-n></a>  <q-w>function</q-w> \?&lt;\ (
<a name="6269"><q-n>     6269  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6270"><q-n>     6270  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6271"><q-n>     6271  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6272"><q-n>     6272  </q-n></a>  <q-w>begin</q-w>
<a name="6273"><q-n>     6273  </q-n></a>    <q-w>return</q-w> \?&lt;\ (l,  to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6274"><q-n>     6274  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;\;
<a name="6275"><q-n>     6275  </q-n></a>
<a name="6276"><q-n>     6276  </q-n></a>  <q-w>function</q-w> maximum (
<a name="6277"><q-n>     6277  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6278"><q-n>     6278  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6279"><q-n>     6279  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="6280"><q-n>     6280  </q-n></a>  <q-w>begin</q-w>
<a name="6281"><q-n>     6281  </q-n></a>    <q-w>return</q-w> maximum (l, to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6282"><q-n>     6282  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> maximum;
<a name="6283"><q-n>     6283  </q-n></a>
<a name="6284"><q-n>     6284  </q-n></a>  <q-w>function</q-w> minimum (
<a name="6285"><q-n>     6285  </q-n></a>    l : UNRESOLVED_ufixed;
<a name="6286"><q-n>     6286  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6287"><q-n>     6287  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="6288"><q-n>     6288  </q-n></a>  <q-w>begin</q-w>
<a name="6289"><q-n>     6289  </q-n></a>    <q-w>return</q-w> minimum (l, to_ufixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6290"><q-n>     6290  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> minimum;
<a name="6291"><q-n>     6291  </q-n></a>
<a name="6292"><q-n>     6292  </q-n></a>  <q-m>-- real and ufixed</q-m>
<a name="6293"><q-n>     6293  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l> (
<a name="6294"><q-n>     6294  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6295"><q-n>     6295  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6296"><q-n>     6296  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6297"><q-n>     6297  </q-n></a>  <q-w>begin</q-w>
<a name="6298"><q-n>     6298  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) = r);
<a name="6299"><q-n>     6299  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"="</q-l>;
<a name="6300"><q-n>     6300  </q-n></a>
<a name="6301"><q-n>     6301  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (
<a name="6302"><q-n>     6302  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6303"><q-n>     6303  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6304"><q-n>     6304  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6305"><q-n>     6305  </q-n></a>  <q-w>begin</q-w>
<a name="6306"><q-n>     6306  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) /= r);
<a name="6307"><q-n>     6307  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/="</q-l>;
<a name="6308"><q-n>     6308  </q-n></a>
<a name="6309"><q-n>     6309  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (
<a name="6310"><q-n>     6310  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6311"><q-n>     6311  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6312"><q-n>     6312  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6313"><q-n>     6313  </q-n></a>  <q-w>begin</q-w>
<a name="6314"><q-n>     6314  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &gt;= r);
<a name="6315"><q-n>     6315  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;="</q-l>;
<a name="6316"><q-n>     6316  </q-n></a>
<a name="6317"><q-n>     6317  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (
<a name="6318"><q-n>     6318  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6319"><q-n>     6319  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6320"><q-n>     6320  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6321"><q-n>     6321  </q-n></a>  <q-w>begin</q-w>
<a name="6322"><q-n>     6322  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &lt;= r);
<a name="6323"><q-n>     6323  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;="</q-l>;
<a name="6324"><q-n>     6324  </q-n></a>
<a name="6325"><q-n>     6325  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l> (
<a name="6326"><q-n>     6326  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6327"><q-n>     6327  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6328"><q-n>     6328  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6329"><q-n>     6329  </q-n></a>  <q-w>begin</q-w>
<a name="6330"><q-n>     6330  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &gt; r);
<a name="6331"><q-n>     6331  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;"</q-l>;
<a name="6332"><q-n>     6332  </q-n></a>
<a name="6333"><q-n>     6333  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l> (
<a name="6334"><q-n>     6334  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6335"><q-n>     6335  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6336"><q-n>     6336  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6337"><q-n>     6337  </q-n></a>  <q-w>begin</q-w>
<a name="6338"><q-n>     6338  </q-n></a>    <q-w>return</q-w> (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &lt; r);
<a name="6339"><q-n>     6339  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;"</q-l>;
<a name="6340"><q-n>     6340  </q-n></a>
<a name="6341"><q-n>     6341  </q-n></a>  <q-w>function</q-w> \?=\ (
<a name="6342"><q-n>     6342  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6343"><q-n>     6343  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6344"><q-n>     6344  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6345"><q-n>     6345  </q-n></a>  <q-w>begin</q-w>
<a name="6346"><q-n>     6346  </q-n></a>    <q-w>return</q-w> \?=\ (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6347"><q-n>     6347  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?=\;
<a name="6348"><q-n>     6348  </q-n></a>
<a name="6349"><q-n>     6349  </q-n></a>  <q-w>function</q-w> \?/=\ (
<a name="6350"><q-n>     6350  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6351"><q-n>     6351  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6352"><q-n>     6352  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6353"><q-n>     6353  </q-n></a>  <q-w>begin</q-w>
<a name="6354"><q-n>     6354  </q-n></a>    <q-w>return</q-w> \?/=\ (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6355"><q-n>     6355  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?/=\;
<a name="6356"><q-n>     6356  </q-n></a>
<a name="6357"><q-n>     6357  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (
<a name="6358"><q-n>     6358  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6359"><q-n>     6359  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6360"><q-n>     6360  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6361"><q-n>     6361  </q-n></a>  <q-w>begin</q-w>
<a name="6362"><q-n>     6362  </q-n></a>    <q-w>return</q-w> \?&gt;=\ (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6363"><q-n>     6363  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;=\;
<a name="6364"><q-n>     6364  </q-n></a>
<a name="6365"><q-n>     6365  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (
<a name="6366"><q-n>     6366  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6367"><q-n>     6367  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6368"><q-n>     6368  </q-n></a>                 <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6369"><q-n>     6369  </q-n></a>  <q-w>begin</q-w>
<a name="6370"><q-n>     6370  </q-n></a>    <q-w>return</q-w> \?&lt;=\ (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6371"><q-n>     6371  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;=\;
<a name="6372"><q-n>     6372  </q-n></a>
<a name="6373"><q-n>     6373  </q-n></a>  <q-w>function</q-w> \?&gt;\ (
<a name="6374"><q-n>     6374  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6375"><q-n>     6375  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6376"><q-n>     6376  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6377"><q-n>     6377  </q-n></a>  <q-w>begin</q-w>
<a name="6378"><q-n>     6378  </q-n></a>    <q-w>return</q-w> \?&gt;\ (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6379"><q-n>     6379  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;\;
<a name="6380"><q-n>     6380  </q-n></a>
<a name="6381"><q-n>     6381  </q-n></a>  <q-w>function</q-w> \?&lt;\ (
<a name="6382"><q-n>     6382  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6383"><q-n>     6383  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6384"><q-n>     6384  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6385"><q-n>     6385  </q-n></a>  <q-w>begin</q-w>
<a name="6386"><q-n>     6386  </q-n></a>    <q-w>return</q-w> \?&lt;\ (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6387"><q-n>     6387  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;\;
<a name="6388"><q-n>     6388  </q-n></a>  
<a name="6389"><q-n>     6389  </q-n></a>  <q-w>function</q-w> maximum (
<a name="6390"><q-n>     6390  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6391"><q-n>     6391  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6392"><q-n>     6392  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="6393"><q-n>     6393  </q-n></a>  <q-w>begin</q-w>
<a name="6394"><q-n>     6394  </q-n></a>    <q-w>return</q-w> maximum (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6395"><q-n>     6395  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> maximum;
<a name="6396"><q-n>     6396  </q-n></a>
<a name="6397"><q-n>     6397  </q-n></a>  <q-w>function</q-w> minimum (
<a name="6398"><q-n>     6398  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6399"><q-n>     6399  </q-n></a>    r : UNRESOLVED_ufixed)              <q-m>-- fixed point input</q-m>
<a name="6400"><q-n>     6400  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="6401"><q-n>     6401  </q-n></a>  <q-w>begin</q-w>
<a name="6402"><q-n>     6402  </q-n></a>    <q-w>return</q-w> minimum (to_ufixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6403"><q-n>     6403  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> minimum;
<a name="6404"><q-n>     6404  </q-n></a>
<a name="6405"><q-n>     6405  </q-n></a>  <q-m>-- overloaded sfixed compare functions with integer</q-m>
<a name="6406"><q-n>     6406  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l> (
<a name="6407"><q-n>     6407  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6408"><q-n>     6408  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="6409"><q-n>     6409  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6410"><q-n>     6410  </q-n></a>  <q-w>begin</q-w>
<a name="6411"><q-n>     6411  </q-n></a>    <q-w>return</q-w> (l = to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6412"><q-n>     6412  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"="</q-l>;
<a name="6413"><q-n>     6413  </q-n></a>
<a name="6414"><q-n>     6414  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (
<a name="6415"><q-n>     6415  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6416"><q-n>     6416  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="6417"><q-n>     6417  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6418"><q-n>     6418  </q-n></a>  <q-w>begin</q-w>
<a name="6419"><q-n>     6419  </q-n></a>    <q-w>return</q-w> (l /= to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6420"><q-n>     6420  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/="</q-l>;
<a name="6421"><q-n>     6421  </q-n></a>
<a name="6422"><q-n>     6422  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (
<a name="6423"><q-n>     6423  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6424"><q-n>     6424  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="6425"><q-n>     6425  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6426"><q-n>     6426  </q-n></a>  <q-w>begin</q-w>
<a name="6427"><q-n>     6427  </q-n></a>    <q-w>return</q-w> (l &gt;= to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6428"><q-n>     6428  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;="</q-l>;
<a name="6429"><q-n>     6429  </q-n></a>
<a name="6430"><q-n>     6430  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (
<a name="6431"><q-n>     6431  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6432"><q-n>     6432  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="6433"><q-n>     6433  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6434"><q-n>     6434  </q-n></a>  <q-w>begin</q-w>
<a name="6435"><q-n>     6435  </q-n></a>    <q-w>return</q-w> (l &lt;= to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6436"><q-n>     6436  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;="</q-l>;
<a name="6437"><q-n>     6437  </q-n></a>
<a name="6438"><q-n>     6438  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l> (
<a name="6439"><q-n>     6439  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6440"><q-n>     6440  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="6441"><q-n>     6441  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6442"><q-n>     6442  </q-n></a>  <q-w>begin</q-w>
<a name="6443"><q-n>     6443  </q-n></a>    <q-w>return</q-w> (l &gt; to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6444"><q-n>     6444  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;"</q-l>;
<a name="6445"><q-n>     6445  </q-n></a>
<a name="6446"><q-n>     6446  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l> (
<a name="6447"><q-n>     6447  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6448"><q-n>     6448  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="6449"><q-n>     6449  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6450"><q-n>     6450  </q-n></a>  <q-w>begin</q-w>
<a name="6451"><q-n>     6451  </q-n></a>    <q-w>return</q-w> (l &lt; to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6452"><q-n>     6452  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;"</q-l>;
<a name="6453"><q-n>     6453  </q-n></a>
<a name="6454"><q-n>     6454  </q-n></a>  <q-w>function</q-w> \?=\ (
<a name="6455"><q-n>     6455  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6456"><q-n>     6456  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="6457"><q-n>     6457  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6458"><q-n>     6458  </q-n></a>  <q-w>begin</q-w>
<a name="6459"><q-n>     6459  </q-n></a>    <q-w>return</q-w> \?=\ (l,  to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6460"><q-n>     6460  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?=\;
<a name="6461"><q-n>     6461  </q-n></a>
<a name="6462"><q-n>     6462  </q-n></a>  <q-w>function</q-w> \?/=\ (
<a name="6463"><q-n>     6463  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6464"><q-n>     6464  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="6465"><q-n>     6465  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6466"><q-n>     6466  </q-n></a>  <q-w>begin</q-w>
<a name="6467"><q-n>     6467  </q-n></a>    <q-w>return</q-w> \?/=\ (l,  to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6468"><q-n>     6468  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?/=\;
<a name="6469"><q-n>     6469  </q-n></a>
<a name="6470"><q-n>     6470  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (
<a name="6471"><q-n>     6471  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6472"><q-n>     6472  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="6473"><q-n>     6473  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6474"><q-n>     6474  </q-n></a>  <q-w>begin</q-w>
<a name="6475"><q-n>     6475  </q-n></a>    <q-w>return</q-w> \?&gt;=\ (l,  to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6476"><q-n>     6476  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;=\;
<a name="6477"><q-n>     6477  </q-n></a>
<a name="6478"><q-n>     6478  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (
<a name="6479"><q-n>     6479  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6480"><q-n>     6480  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="6481"><q-n>     6481  </q-n></a>                 <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6482"><q-n>     6482  </q-n></a>  <q-w>begin</q-w>
<a name="6483"><q-n>     6483  </q-n></a>    <q-w>return</q-w> \?&lt;=\ (l,  to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6484"><q-n>     6484  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;=\;
<a name="6485"><q-n>     6485  </q-n></a>
<a name="6486"><q-n>     6486  </q-n></a>  <q-w>function</q-w> \?&gt;\ (
<a name="6487"><q-n>     6487  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6488"><q-n>     6488  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="6489"><q-n>     6489  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6490"><q-n>     6490  </q-n></a>  <q-w>begin</q-w>
<a name="6491"><q-n>     6491  </q-n></a>    <q-w>return</q-w> \?&gt;\ (l,  to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6492"><q-n>     6492  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;\;
<a name="6493"><q-n>     6493  </q-n></a>
<a name="6494"><q-n>     6494  </q-n></a>  <q-w>function</q-w> \?&lt;\ (
<a name="6495"><q-n>     6495  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6496"><q-n>     6496  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="6497"><q-n>     6497  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6498"><q-n>     6498  </q-n></a>  <q-w>begin</q-w>
<a name="6499"><q-n>     6499  </q-n></a>    <q-w>return</q-w> \?&lt;\ (l,  to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6500"><q-n>     6500  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;\;
<a name="6501"><q-n>     6501  </q-n></a>
<a name="6502"><q-n>     6502  </q-n></a>  <q-w>function</q-w> maximum (
<a name="6503"><q-n>     6503  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6504"><q-n>     6504  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="6505"><q-n>     6505  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="6506"><q-n>     6506  </q-n></a>  <q-w>begin</q-w>
<a name="6507"><q-n>     6507  </q-n></a>    <q-w>return</q-w> maximum (l, to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6508"><q-n>     6508  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> maximum;
<a name="6509"><q-n>     6509  </q-n></a>
<a name="6510"><q-n>     6510  </q-n></a>  <q-w>function</q-w> minimum (
<a name="6511"><q-n>     6511  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6512"><q-n>     6512  </q-n></a>    r : <q-t>INTEGER</q-w>)
<a name="6513"><q-n>     6513  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="6514"><q-n>     6514  </q-n></a>  <q-w>begin</q-w>
<a name="6515"><q-n>     6515  </q-n></a>    <q-w>return</q-w> minimum (l, to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6516"><q-n>     6516  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> minimum;
<a name="6517"><q-n>     6517  </q-n></a>
<a name="6518"><q-n>     6518  </q-n></a>  <q-m>-- integer and sfixed</q-m>
<a name="6519"><q-n>     6519  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l> (
<a name="6520"><q-n>     6520  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="6521"><q-n>     6521  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6522"><q-n>     6522  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6523"><q-n>     6523  </q-n></a>  <q-w>begin</q-w>
<a name="6524"><q-n>     6524  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) = r);
<a name="6525"><q-n>     6525  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"="</q-l>;
<a name="6526"><q-n>     6526  </q-n></a>
<a name="6527"><q-n>     6527  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (
<a name="6528"><q-n>     6528  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="6529"><q-n>     6529  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6530"><q-n>     6530  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6531"><q-n>     6531  </q-n></a>  <q-w>begin</q-w>
<a name="6532"><q-n>     6532  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) /= r);
<a name="6533"><q-n>     6533  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/="</q-l>;
<a name="6534"><q-n>     6534  </q-n></a>
<a name="6535"><q-n>     6535  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (
<a name="6536"><q-n>     6536  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="6537"><q-n>     6537  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6538"><q-n>     6538  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6539"><q-n>     6539  </q-n></a>  <q-w>begin</q-w>
<a name="6540"><q-n>     6540  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &gt;= r);
<a name="6541"><q-n>     6541  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;="</q-l>;
<a name="6542"><q-n>     6542  </q-n></a>
<a name="6543"><q-n>     6543  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (
<a name="6544"><q-n>     6544  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="6545"><q-n>     6545  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6546"><q-n>     6546  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6547"><q-n>     6547  </q-n></a>  <q-w>begin</q-w>
<a name="6548"><q-n>     6548  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &lt;= r);
<a name="6549"><q-n>     6549  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;="</q-l>;
<a name="6550"><q-n>     6550  </q-n></a>
<a name="6551"><q-n>     6551  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l> (
<a name="6552"><q-n>     6552  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="6553"><q-n>     6553  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6554"><q-n>     6554  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6555"><q-n>     6555  </q-n></a>  <q-w>begin</q-w>
<a name="6556"><q-n>     6556  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &gt; r);
<a name="6557"><q-n>     6557  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;"</q-l>;
<a name="6558"><q-n>     6558  </q-n></a>
<a name="6559"><q-n>     6559  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l> (
<a name="6560"><q-n>     6560  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="6561"><q-n>     6561  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6562"><q-n>     6562  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6563"><q-n>     6563  </q-n></a>  <q-w>begin</q-w>
<a name="6564"><q-n>     6564  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &lt; r);
<a name="6565"><q-n>     6565  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;"</q-l>;
<a name="6566"><q-n>     6566  </q-n></a>
<a name="6567"><q-n>     6567  </q-n></a>  <q-w>function</q-w> \?=\ (
<a name="6568"><q-n>     6568  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="6569"><q-n>     6569  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6570"><q-n>     6570  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6571"><q-n>     6571  </q-n></a>  <q-w>begin</q-w>
<a name="6572"><q-n>     6572  </q-n></a>    <q-w>return</q-w> \?=\ (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6573"><q-n>     6573  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?=\;
<a name="6574"><q-n>     6574  </q-n></a>
<a name="6575"><q-n>     6575  </q-n></a>  <q-w>function</q-w> \?/=\ (
<a name="6576"><q-n>     6576  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="6577"><q-n>     6577  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6578"><q-n>     6578  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6579"><q-n>     6579  </q-n></a>  <q-w>begin</q-w>
<a name="6580"><q-n>     6580  </q-n></a>    <q-w>return</q-w> \?/=\ (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6581"><q-n>     6581  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?/=\;
<a name="6582"><q-n>     6582  </q-n></a>
<a name="6583"><q-n>     6583  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (
<a name="6584"><q-n>     6584  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="6585"><q-n>     6585  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6586"><q-n>     6586  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6587"><q-n>     6587  </q-n></a>  <q-w>begin</q-w>
<a name="6588"><q-n>     6588  </q-n></a>    <q-w>return</q-w> \?&gt;=\ (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6589"><q-n>     6589  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;=\;
<a name="6590"><q-n>     6590  </q-n></a>
<a name="6591"><q-n>     6591  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (
<a name="6592"><q-n>     6592  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="6593"><q-n>     6593  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6594"><q-n>     6594  </q-n></a>                 <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6595"><q-n>     6595  </q-n></a>  <q-w>begin</q-w>
<a name="6596"><q-n>     6596  </q-n></a>    <q-w>return</q-w> \?&lt;=\ (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6597"><q-n>     6597  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;=\;
<a name="6598"><q-n>     6598  </q-n></a>
<a name="6599"><q-n>     6599  </q-n></a>  <q-w>function</q-w> \?&gt;\ (
<a name="6600"><q-n>     6600  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="6601"><q-n>     6601  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6602"><q-n>     6602  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6603"><q-n>     6603  </q-n></a>  <q-w>begin</q-w>
<a name="6604"><q-n>     6604  </q-n></a>    <q-w>return</q-w> \?&gt;\ (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6605"><q-n>     6605  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;\;
<a name="6606"><q-n>     6606  </q-n></a>
<a name="6607"><q-n>     6607  </q-n></a>  <q-w>function</q-w> \?&lt;\ (
<a name="6608"><q-n>     6608  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="6609"><q-n>     6609  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6610"><q-n>     6610  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6611"><q-n>     6611  </q-n></a>  <q-w>begin</q-w>
<a name="6612"><q-n>     6612  </q-n></a>    <q-w>return</q-w> \?&lt;\ (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6613"><q-n>     6613  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;\;
<a name="6614"><q-n>     6614  </q-n></a>
<a name="6615"><q-n>     6615  </q-n></a>  <q-w>function</q-w> maximum (
<a name="6616"><q-n>     6616  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="6617"><q-n>     6617  </q-n></a>    r : UNRESOLVED_sfixed)
<a name="6618"><q-n>     6618  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="6619"><q-n>     6619  </q-n></a>  <q-w>begin</q-w>
<a name="6620"><q-n>     6620  </q-n></a>    <q-w>return</q-w> maximum (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6621"><q-n>     6621  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> maximum;
<a name="6622"><q-n>     6622  </q-n></a>
<a name="6623"><q-n>     6623  </q-n></a>  <q-w>function</q-w> minimum (
<a name="6624"><q-n>     6624  </q-n></a>    l : <q-t>INTEGER</q-w>;
<a name="6625"><q-n>     6625  </q-n></a>    r : UNRESOLVED_sfixed)
<a name="6626"><q-n>     6626  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="6627"><q-n>     6627  </q-n></a>  <q-w>begin</q-w>
<a name="6628"><q-n>     6628  </q-n></a>    <q-w>return</q-w> minimum (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6629"><q-n>     6629  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> minimum;
<a name="6630"><q-n>     6630  </q-n></a>
<a name="6631"><q-n>     6631  </q-n></a>  <q-m>-- overloaded sfixed compare functions with real</q-m>
<a name="6632"><q-n>     6632  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l> (
<a name="6633"><q-n>     6633  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6634"><q-n>     6634  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6635"><q-n>     6635  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6636"><q-n>     6636  </q-n></a>  <q-w>begin</q-w>
<a name="6637"><q-n>     6637  </q-n></a>    <q-w>return</q-w> (l = to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6638"><q-n>     6638  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"="</q-l>;
<a name="6639"><q-n>     6639  </q-n></a>
<a name="6640"><q-n>     6640  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (
<a name="6641"><q-n>     6641  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6642"><q-n>     6642  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6643"><q-n>     6643  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6644"><q-n>     6644  </q-n></a>  <q-w>begin</q-w>
<a name="6645"><q-n>     6645  </q-n></a>    <q-w>return</q-w> (l /= to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6646"><q-n>     6646  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/="</q-l>;
<a name="6647"><q-n>     6647  </q-n></a>
<a name="6648"><q-n>     6648  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (
<a name="6649"><q-n>     6649  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6650"><q-n>     6650  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6651"><q-n>     6651  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6652"><q-n>     6652  </q-n></a>  <q-w>begin</q-w>
<a name="6653"><q-n>     6653  </q-n></a>    <q-w>return</q-w> (l &gt;= to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6654"><q-n>     6654  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;="</q-l>;
<a name="6655"><q-n>     6655  </q-n></a>
<a name="6656"><q-n>     6656  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (
<a name="6657"><q-n>     6657  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6658"><q-n>     6658  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6659"><q-n>     6659  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6660"><q-n>     6660  </q-n></a>  <q-w>begin</q-w>
<a name="6661"><q-n>     6661  </q-n></a>    <q-w>return</q-w> (l &lt;= to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6662"><q-n>     6662  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;="</q-l>;
<a name="6663"><q-n>     6663  </q-n></a>
<a name="6664"><q-n>     6664  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l> (
<a name="6665"><q-n>     6665  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6666"><q-n>     6666  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6667"><q-n>     6667  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6668"><q-n>     6668  </q-n></a>  <q-w>begin</q-w>
<a name="6669"><q-n>     6669  </q-n></a>    <q-w>return</q-w> (l &gt; to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6670"><q-n>     6670  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;"</q-l>;
<a name="6671"><q-n>     6671  </q-n></a>
<a name="6672"><q-n>     6672  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l> (
<a name="6673"><q-n>     6673  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6674"><q-n>     6674  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6675"><q-n>     6675  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6676"><q-n>     6676  </q-n></a>  <q-w>begin</q-w>
<a name="6677"><q-n>     6677  </q-n></a>    <q-w>return</q-w> (l &lt; to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6678"><q-n>     6678  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;"</q-l>;
<a name="6679"><q-n>     6679  </q-n></a>
<a name="6680"><q-n>     6680  </q-n></a>  <q-w>function</q-w> \?=\ (
<a name="6681"><q-n>     6681  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6682"><q-n>     6682  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6683"><q-n>     6683  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6684"><q-n>     6684  </q-n></a>  <q-w>begin</q-w>
<a name="6685"><q-n>     6685  </q-n></a>    <q-w>return</q-w> \?=\ (l,  to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6686"><q-n>     6686  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?=\;
<a name="6687"><q-n>     6687  </q-n></a>
<a name="6688"><q-n>     6688  </q-n></a>  <q-w>function</q-w> \?/=\ (
<a name="6689"><q-n>     6689  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6690"><q-n>     6690  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6691"><q-n>     6691  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6692"><q-n>     6692  </q-n></a>  <q-w>begin</q-w>
<a name="6693"><q-n>     6693  </q-n></a>    <q-w>return</q-w> \?/=\ (l,  to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6694"><q-n>     6694  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?/=\;
<a name="6695"><q-n>     6695  </q-n></a>
<a name="6696"><q-n>     6696  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (
<a name="6697"><q-n>     6697  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6698"><q-n>     6698  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6699"><q-n>     6699  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6700"><q-n>     6700  </q-n></a>  <q-w>begin</q-w>
<a name="6701"><q-n>     6701  </q-n></a>    <q-w>return</q-w> \?&gt;=\ (l,  to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6702"><q-n>     6702  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;=\;
<a name="6703"><q-n>     6703  </q-n></a>
<a name="6704"><q-n>     6704  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (
<a name="6705"><q-n>     6705  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6706"><q-n>     6706  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6707"><q-n>     6707  </q-n></a>                 <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6708"><q-n>     6708  </q-n></a>  <q-w>begin</q-w>
<a name="6709"><q-n>     6709  </q-n></a>    <q-w>return</q-w> \?&lt;=\ (l,  to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6710"><q-n>     6710  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;=\;
<a name="6711"><q-n>     6711  </q-n></a>
<a name="6712"><q-n>     6712  </q-n></a>  <q-w>function</q-w> \?&gt;\ (
<a name="6713"><q-n>     6713  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6714"><q-n>     6714  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6715"><q-n>     6715  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6716"><q-n>     6716  </q-n></a>  <q-w>begin</q-w>
<a name="6717"><q-n>     6717  </q-n></a>    <q-w>return</q-w> \?&gt;\ (l,  to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6718"><q-n>     6718  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;\;
<a name="6719"><q-n>     6719  </q-n></a>
<a name="6720"><q-n>     6720  </q-n></a>  <q-w>function</q-w> \?&lt;\ (
<a name="6721"><q-n>     6721  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6722"><q-n>     6722  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6723"><q-n>     6723  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6724"><q-n>     6724  </q-n></a>  <q-w>begin</q-w>
<a name="6725"><q-n>     6725  </q-n></a>    <q-w>return</q-w> \?&lt;\ (l,  to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6726"><q-n>     6726  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;\;
<a name="6727"><q-n>     6727  </q-n></a>
<a name="6728"><q-n>     6728  </q-n></a>  <q-w>function</q-w> maximum (
<a name="6729"><q-n>     6729  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6730"><q-n>     6730  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6731"><q-n>     6731  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="6732"><q-n>     6732  </q-n></a>  <q-w>begin</q-w>
<a name="6733"><q-n>     6733  </q-n></a>    <q-w>return</q-w> maximum (l, to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6734"><q-n>     6734  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> maximum;
<a name="6735"><q-n>     6735  </q-n></a>
<a name="6736"><q-n>     6736  </q-n></a>  <q-w>function</q-w> minimum (
<a name="6737"><q-n>     6737  </q-n></a>    l : UNRESOLVED_sfixed;
<a name="6738"><q-n>     6738  </q-n></a>    r : <q-t>REAL</q-w>)
<a name="6739"><q-n>     6739  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="6740"><q-n>     6740  </q-n></a>  <q-w>begin</q-w>
<a name="6741"><q-n>     6741  </q-n></a>    <q-w>return</q-w> minimum (l, to_sfixed (r, l'<q-a>high</q-w>, l'<q-a>low</q-w>));
<a name="6742"><q-n>     6742  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> minimum;
<a name="6743"><q-n>     6743  </q-n></a>
<a name="6744"><q-n>     6744  </q-n></a>  <q-m>-- REAL and sfixed</q-m>
<a name="6745"><q-n>     6745  </q-n></a>  <q-w>function</q-w> <q-l>"="</q-l> (
<a name="6746"><q-n>     6746  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6747"><q-n>     6747  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6748"><q-n>     6748  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6749"><q-n>     6749  </q-n></a>  <q-w>begin</q-w>
<a name="6750"><q-n>     6750  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) = r);
<a name="6751"><q-n>     6751  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"="</q-l>;
<a name="6752"><q-n>     6752  </q-n></a>
<a name="6753"><q-n>     6753  </q-n></a>  <q-w>function</q-w> <q-l>"/="</q-l> (
<a name="6754"><q-n>     6754  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6755"><q-n>     6755  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6756"><q-n>     6756  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6757"><q-n>     6757  </q-n></a>  <q-w>begin</q-w>
<a name="6758"><q-n>     6758  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) /= r);
<a name="6759"><q-n>     6759  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"/="</q-l>;
<a name="6760"><q-n>     6760  </q-n></a>
<a name="6761"><q-n>     6761  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;="</q-l> (
<a name="6762"><q-n>     6762  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6763"><q-n>     6763  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6764"><q-n>     6764  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6765"><q-n>     6765  </q-n></a>  <q-w>begin</q-w>
<a name="6766"><q-n>     6766  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &gt;= r);
<a name="6767"><q-n>     6767  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;="</q-l>;
<a name="6768"><q-n>     6768  </q-n></a>
<a name="6769"><q-n>     6769  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;="</q-l> (
<a name="6770"><q-n>     6770  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6771"><q-n>     6771  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6772"><q-n>     6772  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6773"><q-n>     6773  </q-n></a>  <q-w>begin</q-w>
<a name="6774"><q-n>     6774  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &lt;= r);
<a name="6775"><q-n>     6775  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;="</q-l>;
<a name="6776"><q-n>     6776  </q-n></a>
<a name="6777"><q-n>     6777  </q-n></a>  <q-w>function</q-w> <q-l>"&gt;"</q-l> (
<a name="6778"><q-n>     6778  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6779"><q-n>     6779  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6780"><q-n>     6780  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6781"><q-n>     6781  </q-n></a>  <q-w>begin</q-w>
<a name="6782"><q-n>     6782  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &gt; r);
<a name="6783"><q-n>     6783  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&gt;"</q-l>;
<a name="6784"><q-n>     6784  </q-n></a>
<a name="6785"><q-n>     6785  </q-n></a>  <q-w>function</q-w> <q-l>"&lt;"</q-l> (
<a name="6786"><q-n>     6786  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6787"><q-n>     6787  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6788"><q-n>     6788  </q-n></a>    <q-w>return</q-w> <q-t>BOOLEAN</q-w> <q-w>is</q-w>
<a name="6789"><q-n>     6789  </q-n></a>  <q-w>begin</q-w>
<a name="6790"><q-n>     6790  </q-n></a>    <q-w>return</q-w> (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>) &lt; r);
<a name="6791"><q-n>     6791  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> <q-l>"&lt;"</q-l>;
<a name="6792"><q-n>     6792  </q-n></a>
<a name="6793"><q-n>     6793  </q-n></a>  <q-w>function</q-w> \?=\ (
<a name="6794"><q-n>     6794  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6795"><q-n>     6795  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6796"><q-n>     6796  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6797"><q-n>     6797  </q-n></a>  <q-w>begin</q-w>
<a name="6798"><q-n>     6798  </q-n></a>    <q-w>return</q-w> \?=\ (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6799"><q-n>     6799  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?=\;
<a name="6800"><q-n>     6800  </q-n></a>
<a name="6801"><q-n>     6801  </q-n></a>  <q-w>function</q-w> \?/=\ (
<a name="6802"><q-n>     6802  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6803"><q-n>     6803  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6804"><q-n>     6804  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6805"><q-n>     6805  </q-n></a>  <q-w>begin</q-w>
<a name="6806"><q-n>     6806  </q-n></a>    <q-w>return</q-w> \?/=\ (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6807"><q-n>     6807  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?/=\;
<a name="6808"><q-n>     6808  </q-n></a>
<a name="6809"><q-n>     6809  </q-n></a>  <q-w>function</q-w> \?&gt;=\ (
<a name="6810"><q-n>     6810  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6811"><q-n>     6811  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6812"><q-n>     6812  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6813"><q-n>     6813  </q-n></a>  <q-w>begin</q-w>
<a name="6814"><q-n>     6814  </q-n></a>    <q-w>return</q-w> \?&gt;=\ (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6815"><q-n>     6815  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;=\;
<a name="6816"><q-n>     6816  </q-n></a>
<a name="6817"><q-n>     6817  </q-n></a>  <q-w>function</q-w> \?&lt;=\ (
<a name="6818"><q-n>     6818  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6819"><q-n>     6819  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6820"><q-n>     6820  </q-n></a>                 <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6821"><q-n>     6821  </q-n></a>  <q-w>begin</q-w>
<a name="6822"><q-n>     6822  </q-n></a>    <q-w>return</q-w> \?&lt;=\ (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6823"><q-n>     6823  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;=\;
<a name="6824"><q-n>     6824  </q-n></a>
<a name="6825"><q-n>     6825  </q-n></a>  <q-w>function</q-w> \?&gt;\ (
<a name="6826"><q-n>     6826  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6827"><q-n>     6827  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6828"><q-n>     6828  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6829"><q-n>     6829  </q-n></a>  <q-w>begin</q-w>
<a name="6830"><q-n>     6830  </q-n></a>    <q-w>return</q-w> \?&gt;\ (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6831"><q-n>     6831  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&gt;\;
<a name="6832"><q-n>     6832  </q-n></a>
<a name="6833"><q-n>     6833  </q-n></a>  <q-w>function</q-w> \?&lt;\ (
<a name="6834"><q-n>     6834  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6835"><q-n>     6835  </q-n></a>    r : UNRESOLVED_sfixed)              <q-m>-- fixed point input</q-m>
<a name="6836"><q-n>     6836  </q-n></a>    <q-w>return</q-w> <q-t>STD_ULOGIC</q-w> <q-w>is</q-w>
<a name="6837"><q-n>     6837  </q-n></a>  <q-w>begin</q-w>
<a name="6838"><q-n>     6838  </q-n></a>    <q-w>return</q-w> \?&lt;\ (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6839"><q-n>     6839  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> \?&lt;\;
<a name="6840"><q-n>     6840  </q-n></a>
<a name="6841"><q-n>     6841  </q-n></a>  <q-w>function</q-w> maximum (
<a name="6842"><q-n>     6842  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6843"><q-n>     6843  </q-n></a>    r : UNRESOLVED_sfixed)
<a name="6844"><q-n>     6844  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="6845"><q-n>     6845  </q-n></a>  <q-w>begin</q-w>
<a name="6846"><q-n>     6846  </q-n></a>    <q-w>return</q-w> maximum (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6847"><q-n>     6847  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> maximum;
<a name="6848"><q-n>     6848  </q-n></a>
<a name="6849"><q-n>     6849  </q-n></a>  <q-w>function</q-w> minimum (
<a name="6850"><q-n>     6850  </q-n></a>    l : <q-t>REAL</q-w>;
<a name="6851"><q-n>     6851  </q-n></a>    r : UNRESOLVED_sfixed)
<a name="6852"><q-n>     6852  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="6853"><q-n>     6853  </q-n></a>  <q-w>begin</q-w>
<a name="6854"><q-n>     6854  </q-n></a>    <q-w>return</q-w> minimum (to_sfixed (l, r'<q-a>high</q-w>, r'<q-a>low</q-w>), r);
<a name="6855"><q-n>     6855  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> minimum;
<a name="6856"><q-n>     6856  </q-n></a><q-m>-- rtl_synthesis off</q-m>
<a name="6857"><q-n>     6857  </q-n></a><q-m>-- pragma synthesis_off</q-m>
<a name="6858"><q-n>     6858  </q-n></a>  <q-m>-- copied from std_logic_textio</q-m>
<a name="6859"><q-n>     6859  </q-n></a>  <q-w>type</q-w> MVL9plus <q-w>is</q-w> ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-', error);
<a name="6860"><q-n>     6860  </q-n></a>  <q-w>type</q-w> char_indexed_by_MVL9 <q-w>is</q-w> <q-w>array</q-w> (<q-t>STD_ULOGIC</q-w>) <q-w>of</q-w> <q-t>CHARACTER</q-w>;
<a name="6861"><q-n>     6861  </q-n></a>  <q-w>type</q-w> MVL9_indexed_by_char <q-w>is</q-w> <q-w>array</q-w> (<q-t>CHARACTER</q-w>) <q-w>of</q-w> <q-t>STD_ULOGIC</q-w>;
<a name="6862"><q-n>     6862  </q-n></a>  <q-w>type</q-w> MVL9plus_indexed_by_char <q-w>is</q-w> <q-w>array</q-w> (<q-t>CHARACTER</q-w>) <q-w>of</q-w> MVL9plus;
<a name="6863"><q-n>     6863  </q-n></a>
<a name="6864"><q-n>     6864  </q-n></a>  <q-w>constant</q-w> MVL9_to_char : char_indexed_by_MVL9 := <q-l>"UX01ZWLH-"</q-l>;
<a name="6865"><q-n>     6865  </q-n></a>  <q-w>constant</q-w> char_to_MVL9 : MVL9_indexed_by_char :=
<a name="6866"><q-n>     6866  </q-n></a>    ('U' =&gt; 'U', 'X' =&gt; 'X', '0' =&gt; '0', '1' =&gt; '1', 'Z' =&gt; 'Z',
<a name="6867"><q-n>     6867  </q-n></a>     'W' =&gt; 'W', 'L' =&gt; 'L', 'H' =&gt; 'H', '-' =&gt; '-', <q-w>others</q-w> =&gt; 'U');
<a name="6868"><q-n>     6868  </q-n></a>  <q-w>constant</q-w> char_to_MVL9plus : MVL9plus_indexed_by_char :=
<a name="6869"><q-n>     6869  </q-n></a>    ('U' =&gt; 'U', 'X' =&gt; 'X', '0' =&gt; '0', '1' =&gt; '1', 'Z' =&gt; 'Z',
<a name="6870"><q-n>     6870  </q-n></a>     'W' =&gt; 'W', 'L' =&gt; 'L', 'H' =&gt; 'H', '-' =&gt; '-', <q-w>others</q-w> =&gt; error);
<a name="6871"><q-n>     6871  </q-n></a>  <q-w>constant</q-w> NBSP : <q-t>CHARACTER</q-w>      := <q-t>CHARACTER</q-w>'<q-a>val</q-w>(160);  <q-m>-- space character</q-m>
<a name="6872"><q-n>     6872  </q-n></a>  <q-w>constant</q-w> NUS  : <q-t>STRING</q-w>(2 <q-w>to</q-w> 1) := (<q-w>others</q-w> =&gt; ' ');
<a name="6873"><q-n>     6873  </q-n></a>
<a name="6874"><q-n>     6874  </q-n></a>  <q-m>-- %%% Replicated Textio functions</q-m>
<a name="6875"><q-n>     6875  </q-n></a>  <q-w>procedure</q-w> Char2TriBits (C           :     <q-t>CHARACTER</q-w>;
<a name="6876"><q-n>     6876  </q-n></a>                          RESULT      : <q-a>out</q-w> <q-t>STD_ULOGIC_VECTOR</q-w>(2 <q-w>downto</q-w> 0);
<a name="6877"><q-n>     6877  </q-n></a>                          GOOD        : <q-a>out</q-w> <q-t>BOOLEAN</q-w>;
<a name="6878"><q-n>     6878  </q-n></a>                          ISSUE_ERROR : <q-a>in</q-w>  <q-t>BOOLEAN</q-w>) <q-w>is</q-w>
<a name="6879"><q-n>     6879  </q-n></a>  <q-w>begin</q-w>
<a name="6880"><q-n>     6880  </q-n></a>    <q-w>case</q-w> c <q-w>is</q-w>
<a name="6881"><q-n>     6881  </q-n></a>      <q-w>when</q-w> '0' =&gt; result := o<q-l>"0"</q-l>; good := true;
<a name="6882"><q-n>     6882  </q-n></a>      <q-w>when</q-w> '1' =&gt; result := o<q-l>"1"</q-l>; good := true;
<a name="6883"><q-n>     6883  </q-n></a>      <q-w>when</q-w> '2' =&gt; result := o<q-l>"2"</q-l>; good := true;
<a name="6884"><q-n>     6884  </q-n></a>      <q-w>when</q-w> '3' =&gt; result := o<q-l>"3"</q-l>; good := true;
<a name="6885"><q-n>     6885  </q-n></a>      <q-w>when</q-w> '4' =&gt; result := o<q-l>"4"</q-l>; good := true;
<a name="6886"><q-n>     6886  </q-n></a>      <q-w>when</q-w> '5' =&gt; result := o<q-l>"5"</q-l>; good := true;
<a name="6887"><q-n>     6887  </q-n></a>      <q-w>when</q-w> '6' =&gt; result := o<q-l>"6"</q-l>; good := true;
<a name="6888"><q-n>     6888  </q-n></a>      <q-w>when</q-w> '7' =&gt; result := o<q-l>"7"</q-l>; good := true;
<a name="6889"><q-n>     6889  </q-n></a>      <q-w>when</q-w> 'Z' =&gt; result := <q-l>"ZZZ"</q-l>; good := true;
<a name="6890"><q-n>     6890  </q-n></a>      <q-w>when</q-w> 'X' =&gt; result := <q-l>"XXX"</q-l>; good := true;
<a name="6891"><q-n>     6891  </q-n></a>      <q-w>when</q-w> <q-w>others</q-w> =&gt;
<a name="6892"><q-n>     6892  </q-n></a>        <q-w>assert</q-w> <q-w>not</q-w> ISSUE_ERROR
<a name="6893"><q-n>     6893  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="6894"><q-n>     6894  </q-n></a>          &amp; <q-l>"OREAD Error: Read a '"</q-l> &amp; c &amp;
<a name="6895"><q-n>     6895  </q-n></a>          <q-l>"', expected an Octal character (0-7)."</q-l>
<a name="6896"><q-n>     6896  </q-n></a>          <q-w>severity</q-w> error;
<a name="6897"><q-n>     6897  </q-n></a>        result := <q-l>"UUU"</q-l>;
<a name="6898"><q-n>     6898  </q-n></a>        good   := false;
<a name="6899"><q-n>     6899  </q-n></a>    <q-w>end</q-w> <q-w>case</q-w>;
<a name="6900"><q-n>     6900  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> Char2TriBits;
<a name="6901"><q-n>     6901  </q-n></a>  <q-m>-- Hex Read and Write procedures for STD_ULOGIC_VECTOR.</q-m>
<a name="6902"><q-n>     6902  </q-n></a>  <q-m>-- Modified from the original to be more forgiving.</q-m>
<a name="6903"><q-n>     6903  </q-n></a>
<a name="6904"><q-n>     6904  </q-n></a>  <q-w>procedure</q-w> Char2QuadBits (C           :     <q-t>CHARACTER</q-w>;
<a name="6905"><q-n>     6905  </q-n></a>                           RESULT      : <q-a>out</q-w> <q-t>STD_ULOGIC_VECTOR</q-w>(3 <q-w>downto</q-w> 0);
<a name="6906"><q-n>     6906  </q-n></a>                           GOOD        : <q-a>out</q-w> <q-t>BOOLEAN</q-w>;
<a name="6907"><q-n>     6907  </q-n></a>                           ISSUE_ERROR : <q-a>in</q-w>  <q-t>BOOLEAN</q-w>) <q-w>is</q-w>
<a name="6908"><q-n>     6908  </q-n></a>  <q-w>begin</q-w>
<a name="6909"><q-n>     6909  </q-n></a>    <q-w>case</q-w> c <q-w>is</q-w>
<a name="6910"><q-n>     6910  </q-n></a>      <q-w>when</q-w> '0'       =&gt; result := x<q-l>"0"</q-l>; good := true;
<a name="6911"><q-n>     6911  </q-n></a>      <q-w>when</q-w> '1'       =&gt; result := x<q-l>"1"</q-l>; good := true;
<a name="6912"><q-n>     6912  </q-n></a>      <q-w>when</q-w> '2'       =&gt; result := x<q-l>"2"</q-l>; good := true;
<a name="6913"><q-n>     6913  </q-n></a>      <q-w>when</q-w> '3'       =&gt; result := x<q-l>"3"</q-l>; good := true;
<a name="6914"><q-n>     6914  </q-n></a>      <q-w>when</q-w> '4'       =&gt; result := x<q-l>"4"</q-l>; good := true;
<a name="6915"><q-n>     6915  </q-n></a>      <q-w>when</q-w> '5'       =&gt; result := x<q-l>"5"</q-l>; good := true;
<a name="6916"><q-n>     6916  </q-n></a>      <q-w>when</q-w> '6'       =&gt; result := x<q-l>"6"</q-l>; good := true;
<a name="6917"><q-n>     6917  </q-n></a>      <q-w>when</q-w> '7'       =&gt; result := x<q-l>"7"</q-l>; good := true;
<a name="6918"><q-n>     6918  </q-n></a>      <q-w>when</q-w> '8'       =&gt; result := x<q-l>"8"</q-l>; good := true;
<a name="6919"><q-n>     6919  </q-n></a>      <q-w>when</q-w> '9'       =&gt; result := x<q-l>"9"</q-l>; good := true;
<a name="6920"><q-n>     6920  </q-n></a>      <q-w>when</q-w> 'A' | 'a' =&gt; result := x<q-l>"A"</q-l>; good := true;
<a name="6921"><q-n>     6921  </q-n></a>      <q-w>when</q-w> 'B' | 'b' =&gt; result := x<q-l>"B"</q-l>; good := true;
<a name="6922"><q-n>     6922  </q-n></a>      <q-w>when</q-w> 'C' | 'c' =&gt; result := x<q-l>"C"</q-l>; good := true;
<a name="6923"><q-n>     6923  </q-n></a>      <q-w>when</q-w> 'D' | 'd' =&gt; result := x<q-l>"D"</q-l>; good := true;
<a name="6924"><q-n>     6924  </q-n></a>      <q-w>when</q-w> 'E' | 'e' =&gt; result := x<q-l>"E"</q-l>; good := true;
<a name="6925"><q-n>     6925  </q-n></a>      <q-w>when</q-w> 'F' | 'f' =&gt; result := x<q-l>"F"</q-l>; good := true;
<a name="6926"><q-n>     6926  </q-n></a>      <q-w>when</q-w> 'Z'       =&gt; result := <q-l>"ZZZZ"</q-l>; good := true;
<a name="6927"><q-n>     6927  </q-n></a>      <q-w>when</q-w> 'X'       =&gt; result := <q-l>"XXXX"</q-l>; good := true;
<a name="6928"><q-n>     6928  </q-n></a>      <q-w>when</q-w> <q-w>others</q-w> =&gt;
<a name="6929"><q-n>     6929  </q-n></a>        <q-w>assert</q-w> <q-w>not</q-w> ISSUE_ERROR
<a name="6930"><q-n>     6930  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="6931"><q-n>     6931  </q-n></a>          &amp; <q-l>"HREAD Error: Read a '"</q-l> &amp; c &amp;
<a name="6932"><q-n>     6932  </q-n></a>          <q-l>"', expected a Hex character (0-F)."</q-l>
<a name="6933"><q-n>     6933  </q-n></a>          <q-w>severity</q-w> error;
<a name="6934"><q-n>     6934  </q-n></a>        result := <q-l>"UUUU"</q-l>;
<a name="6935"><q-n>     6935  </q-n></a>        good   := false;
<a name="6936"><q-n>     6936  </q-n></a>    <q-w>end</q-w> <q-w>case</q-w>;
<a name="6937"><q-n>     6937  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> Char2QuadBits;
<a name="6938"><q-n>     6938  </q-n></a>
<a name="6939"><q-n>     6939  </q-n></a>  <q-m>-- purpose: Skips white space</q-m>
<a name="6940"><q-n>     6940  </q-n></a>  <q-w>procedure</q-w> skip_whitespace (
<a name="6941"><q-n>     6941  </q-n></a>    L : <q-a>inout</q-w> <q-t>LINE</q-w>) <q-w>is</q-w>
<a name="6942"><q-n>     6942  </q-n></a>    <q-w>variable</q-w> readOk : <q-t>BOOLEAN</q-w>;
<a name="6943"><q-n>     6943  </q-n></a>    <q-w>variable</q-w> c : <q-t>CHARACTER</q-w>;
<a name="6944"><q-n>     6944  </q-n></a>  <q-w>begin</q-w>
<a name="6945"><q-n>     6945  </q-n></a>    <q-w>while</q-w> L /= <q-w>null</q-w> <q-w>and</q-w> L.<q-w>all</q-w>'<q-a>length</q-w> /= 0 <q-w>loop</q-w>
<a name="6946"><q-n>     6946  </q-n></a>      <q-w>if</q-w> (L.<q-w>all</q-w>(1) = ' ' <q-w>or</q-w> L.<q-w>all</q-w>(1) = NBSP <q-w>or</q-w> L.<q-w>all</q-w>(1) = HT) <q-w>then</q-w>
<a name="6947"><q-n>     6947  </q-n></a>        read (l, c, readOk);
<a name="6948"><q-n>     6948  </q-n></a>      <q-w>else</q-w>
<a name="6949"><q-n>     6949  </q-n></a>        <q-w>exit</q-w>;
<a name="6950"><q-n>     6950  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="6951"><q-n>     6951  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="6952"><q-n>     6952  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> skip_whitespace;
<a name="6953"><q-n>     6953  </q-n></a>
<a name="6954"><q-n>     6954  </q-n></a>  <q-w>function</q-w> to_ostring (<q-a>value</q-w>     : <q-t>STD_ULOGIC_VECTOR</q-w>) <q-w>return</q-w> <q-t>STRING</q-w> <q-w>is</q-w>
<a name="6955"><q-n>     6955  </q-n></a>    <q-w>constant</q-w> ne     : <q-t>INTEGER</q-w> := (<q-a>value</q-w>'<q-a>length</q-w>+2)/3;
<a name="6956"><q-n>     6956  </q-n></a>    <q-w>variable</q-w> pad    : <q-t>STD_ULOGIC_VECTOR</q-w>(0 <q-w>to</q-w> (ne*3 - <q-a>value</q-w>'<q-a>length</q-w>) - 1);
<a name="6957"><q-n>     6957  </q-n></a>    <q-w>variable</q-w> ivalue : <q-t>STD_ULOGIC_VECTOR</q-w>(0 <q-w>to</q-w> ne*3 - 1);
<a name="6958"><q-n>     6958  </q-n></a>    <q-w>variable</q-w> result : <q-t>STRING</q-w>(1 <q-w>to</q-w> ne);
<a name="6959"><q-n>     6959  </q-n></a>    <q-w>variable</q-w> tri    : <q-t>STD_ULOGIC_VECTOR</q-w>(0 <q-w>to</q-w> 2);
<a name="6960"><q-n>     6960  </q-n></a>  <q-w>begin</q-w>
<a name="6961"><q-n>     6961  </q-n></a>    <q-w>if</q-w> <q-a>value</q-w>'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="6962"><q-n>     6962  </q-n></a>      <q-w>return</q-w> NUS;
<a name="6963"><q-n>     6963  </q-n></a>    <q-w>else</q-w>
<a name="6964"><q-n>     6964  </q-n></a>      <q-w>if</q-w> <q-a>value</q-w> (<q-a>value</q-w>'<q-a>left</q-w>) = 'Z' <q-w>then</q-w>
<a name="6965"><q-n>     6965  </q-n></a>        pad := (<q-w>others</q-w> =&gt; 'Z');
<a name="6966"><q-n>     6966  </q-n></a>      <q-w>else</q-w>
<a name="6967"><q-n>     6967  </q-n></a>        pad := (<q-w>others</q-w> =&gt; '0');
<a name="6968"><q-n>     6968  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="6969"><q-n>     6969  </q-n></a>      ivalue := pad &amp; <q-a>value</q-w>;
<a name="6970"><q-n>     6970  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> 0 <q-w>to</q-w> ne-1 <q-w>loop</q-w>
<a name="6971"><q-n>     6971  </q-n></a>        tri := To_X01Z(ivalue(3*i <q-w>to</q-w> 3*i+2));
<a name="6972"><q-n>     6972  </q-n></a>        <q-w>case</q-w> tri <q-w>is</q-w>
<a name="6973"><q-n>     6973  </q-n></a>          <q-w>when</q-w> o<q-l>"0"</q-l>   =&gt; result(i+1) := '0';
<a name="6974"><q-n>     6974  </q-n></a>          <q-w>when</q-w> o<q-l>"1"</q-l>   =&gt; result(i+1) := '1';
<a name="6975"><q-n>     6975  </q-n></a>          <q-w>when</q-w> o<q-l>"2"</q-l>   =&gt; result(i+1) := '2';
<a name="6976"><q-n>     6976  </q-n></a>          <q-w>when</q-w> o<q-l>"3"</q-l>   =&gt; result(i+1) := '3';
<a name="6977"><q-n>     6977  </q-n></a>          <q-w>when</q-w> o<q-l>"4"</q-l>   =&gt; result(i+1) := '4';
<a name="6978"><q-n>     6978  </q-n></a>          <q-w>when</q-w> o<q-l>"5"</q-l>   =&gt; result(i+1) := '5';
<a name="6979"><q-n>     6979  </q-n></a>          <q-w>when</q-w> o<q-l>"6"</q-l>   =&gt; result(i+1) := '6';
<a name="6980"><q-n>     6980  </q-n></a>          <q-w>when</q-w> o<q-l>"7"</q-l>   =&gt; result(i+1) := '7';
<a name="6981"><q-n>     6981  </q-n></a>          <q-w>when</q-w> <q-l>"ZZZ"</q-l>  =&gt; result(i+1) := 'Z';
<a name="6982"><q-n>     6982  </q-n></a>          <q-w>when</q-w> <q-w>others</q-w> =&gt; result(i+1) := 'X';
<a name="6983"><q-n>     6983  </q-n></a>        <q-w>end</q-w> <q-w>case</q-w>;
<a name="6984"><q-n>     6984  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="6985"><q-n>     6985  </q-n></a>      <q-w>return</q-w> result;
<a name="6986"><q-n>     6986  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="6987"><q-n>     6987  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ostring;
<a name="6988"><q-n>     6988  </q-n></a>  <q-m>-------------------------------------------------------------------   </q-m>
<a name="6989"><q-n>     6989  </q-n></a>  <q-w>function</q-w> to_hstring (<q-a>value</q-w>     : <q-t>STD_ULOGIC_VECTOR</q-w>) <q-w>return</q-w> <q-t>STRING</q-w> <q-w>is</q-w>
<a name="6990"><q-n>     6990  </q-n></a>    <q-w>constant</q-w> ne     : <q-t>INTEGER</q-w> := (<q-a>value</q-w>'<q-a>length</q-w>+3)/4;
<a name="6991"><q-n>     6991  </q-n></a>    <q-w>variable</q-w> pad    : <q-t>STD_ULOGIC_VECTOR</q-w>(0 <q-w>to</q-w> (ne*4 - <q-a>value</q-w>'<q-a>length</q-w>) - 1);
<a name="6992"><q-n>     6992  </q-n></a>    <q-w>variable</q-w> ivalue : <q-t>STD_ULOGIC_VECTOR</q-w>(0 <q-w>to</q-w> ne*4 - 1);
<a name="6993"><q-n>     6993  </q-n></a>    <q-w>variable</q-w> result : <q-t>STRING</q-w>(1 <q-w>to</q-w> ne);
<a name="6994"><q-n>     6994  </q-n></a>    <q-w>variable</q-w> quad   : <q-t>STD_ULOGIC_VECTOR</q-w>(0 <q-w>to</q-w> 3);
<a name="6995"><q-n>     6995  </q-n></a>  <q-w>begin</q-w>
<a name="6996"><q-n>     6996  </q-n></a>    <q-w>if</q-w> <q-a>value</q-w>'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="6997"><q-n>     6997  </q-n></a>      <q-w>return</q-w> NUS;
<a name="6998"><q-n>     6998  </q-n></a>    <q-w>else</q-w>
<a name="6999"><q-n>     6999  </q-n></a>      <q-w>if</q-w> <q-a>value</q-w> (<q-a>value</q-w>'<q-a>left</q-w>) = 'Z' <q-w>then</q-w>
<a name="7000"><q-n>     7000  </q-n></a>        pad := (<q-w>others</q-w> =&gt; 'Z');
<a name="7001"><q-n>     7001  </q-n></a>      <q-w>else</q-w>
<a name="7002"><q-n>     7002  </q-n></a>        pad := (<q-w>others</q-w> =&gt; '0');
<a name="7003"><q-n>     7003  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="7004"><q-n>     7004  </q-n></a>      ivalue := pad &amp; <q-a>value</q-w>;
<a name="7005"><q-n>     7005  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> 0 <q-w>to</q-w> ne-1 <q-w>loop</q-w>
<a name="7006"><q-n>     7006  </q-n></a>        quad := To_X01Z(ivalue(4*i <q-w>to</q-w> 4*i+3));
<a name="7007"><q-n>     7007  </q-n></a>        <q-w>case</q-w> quad <q-w>is</q-w>
<a name="7008"><q-n>     7008  </q-n></a>          <q-w>when</q-w> x<q-l>"0"</q-l>   =&gt; result(i+1) := '0';
<a name="7009"><q-n>     7009  </q-n></a>          <q-w>when</q-w> x<q-l>"1"</q-l>   =&gt; result(i+1) := '1';
<a name="7010"><q-n>     7010  </q-n></a>          <q-w>when</q-w> x<q-l>"2"</q-l>   =&gt; result(i+1) := '2';
<a name="7011"><q-n>     7011  </q-n></a>          <q-w>when</q-w> x<q-l>"3"</q-l>   =&gt; result(i+1) := '3';
<a name="7012"><q-n>     7012  </q-n></a>          <q-w>when</q-w> x<q-l>"4"</q-l>   =&gt; result(i+1) := '4';
<a name="7013"><q-n>     7013  </q-n></a>          <q-w>when</q-w> x<q-l>"5"</q-l>   =&gt; result(i+1) := '5';
<a name="7014"><q-n>     7014  </q-n></a>          <q-w>when</q-w> x<q-l>"6"</q-l>   =&gt; result(i+1) := '6';
<a name="7015"><q-n>     7015  </q-n></a>          <q-w>when</q-w> x<q-l>"7"</q-l>   =&gt; result(i+1) := '7';
<a name="7016"><q-n>     7016  </q-n></a>          <q-w>when</q-w> x<q-l>"8"</q-l>   =&gt; result(i+1) := '8';
<a name="7017"><q-n>     7017  </q-n></a>          <q-w>when</q-w> x<q-l>"9"</q-l>   =&gt; result(i+1) := '9';
<a name="7018"><q-n>     7018  </q-n></a>          <q-w>when</q-w> x<q-l>"A"</q-l>   =&gt; result(i+1) := 'A';
<a name="7019"><q-n>     7019  </q-n></a>          <q-w>when</q-w> x<q-l>"B"</q-l>   =&gt; result(i+1) := 'B';
<a name="7020"><q-n>     7020  </q-n></a>          <q-w>when</q-w> x<q-l>"C"</q-l>   =&gt; result(i+1) := 'C';
<a name="7021"><q-n>     7021  </q-n></a>          <q-w>when</q-w> x<q-l>"D"</q-l>   =&gt; result(i+1) := 'D';
<a name="7022"><q-n>     7022  </q-n></a>          <q-w>when</q-w> x<q-l>"E"</q-l>   =&gt; result(i+1) := 'E';
<a name="7023"><q-n>     7023  </q-n></a>          <q-w>when</q-w> x<q-l>"F"</q-l>   =&gt; result(i+1) := 'F';
<a name="7024"><q-n>     7024  </q-n></a>          <q-w>when</q-w> <q-l>"ZZZZ"</q-l> =&gt; result(i+1) := 'Z';
<a name="7025"><q-n>     7025  </q-n></a>          <q-w>when</q-w> <q-w>others</q-w> =&gt; result(i+1) := 'X';
<a name="7026"><q-n>     7026  </q-n></a>        <q-w>end</q-w> <q-w>case</q-w>;
<a name="7027"><q-n>     7027  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="7028"><q-n>     7028  </q-n></a>      <q-w>return</q-w> result;
<a name="7029"><q-n>     7029  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7030"><q-n>     7030  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_hstring;
<a name="7031"><q-n>     7031  </q-n></a>
<a name="7032"><q-n>     7032  </q-n></a>
<a name="7033"><q-n>     7033  </q-n></a><q-m>-- %%% END replicated textio functions</q-m>
<a name="7034"><q-n>     7034  </q-n></a>  
<a name="7035"><q-n>     7035  </q-n></a>  <q-m>-- purpose: writes fixed point into a line</q-m>
<a name="7036"><q-n>     7036  </q-n></a>  <q-w>procedure</q-w> write (
<a name="7037"><q-n>     7037  </q-n></a>    L         : <q-a>inout</q-w> <q-t>LINE</q-w>;               <q-m>-- input line</q-m>
<a name="7038"><q-n>     7038  </q-n></a>    <q-a>VALUE</q-w>     : <q-a>in</q-w>    UNRESOLVED_ufixed;  <q-m>-- fixed point input</q-m>
<a name="7039"><q-n>     7039  </q-n></a>    JUSTIFIED : <q-a>in</q-w>    SIDE  := <q-a>right</q-w>;
<a name="7040"><q-n>     7040  </q-n></a>    FIELD     : <q-a>in</q-w>    WIDTH := 0) <q-w>is</q-w>
<a name="7041"><q-n>     7041  </q-n></a>    <q-w>variable</q-w> s     : <q-t>STRING</q-w>(1 <q-w>to</q-w> <q-a>value</q-w>'<q-a>length</q-w> +1) := (<q-w>others</q-w> =&gt; ' ');
<a name="7042"><q-n>     7042  </q-n></a>    <q-w>variable</q-w> sindx : <q-t>INTEGER</q-w>;
<a name="7043"><q-n>     7043  </q-n></a>  <q-w>begin</q-w>  <q-m>-- function write   Example: 0011.1100</q-m>
<a name="7044"><q-n>     7044  </q-n></a>    sindx := 1;
<a name="7045"><q-n>     7045  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> <q-a>value</q-w>'<q-a>high</q-w> <q-w>downto</q-w> <q-a>value</q-w>'<q-a>low</q-w> <q-w>loop</q-w>
<a name="7046"><q-n>     7046  </q-n></a>      <q-w>if</q-w> i = -1 <q-w>then</q-w>
<a name="7047"><q-n>     7047  </q-n></a>        s(sindx) := '.';
<a name="7048"><q-n>     7048  </q-n></a>        sindx    := sindx + 1;
<a name="7049"><q-n>     7049  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="7050"><q-n>     7050  </q-n></a>      s(sindx) := MVL9_to_char(<q-t>STD_ULOGIC</q-w>(<q-a>value</q-w>(i)));
<a name="7051"><q-n>     7051  </q-n></a>      sindx    := sindx + 1;
<a name="7052"><q-n>     7052  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="7053"><q-n>     7053  </q-n></a>    write(l, s, justified, field);
<a name="7054"><q-n>     7054  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> write;
<a name="7055"><q-n>     7055  </q-n></a>
<a name="7056"><q-n>     7056  </q-n></a>  <q-m>-- purpose: writes fixed point into a line</q-m>
<a name="7057"><q-n>     7057  </q-n></a>  <q-w>procedure</q-w> write (
<a name="7058"><q-n>     7058  </q-n></a>    L         : <q-a>inout</q-w> <q-t>LINE</q-w>;               <q-m>-- input line</q-m>
<a name="7059"><q-n>     7059  </q-n></a>    <q-a>VALUE</q-w>     : <q-a>in</q-w>    UNRESOLVED_sfixed;  <q-m>-- fixed point input</q-m>
<a name="7060"><q-n>     7060  </q-n></a>    JUSTIFIED : <q-a>in</q-w>    SIDE  := <q-a>right</q-w>;
<a name="7061"><q-n>     7061  </q-n></a>    FIELD     : <q-a>in</q-w>    WIDTH := 0) <q-w>is</q-w>
<a name="7062"><q-n>     7062  </q-n></a>    <q-w>variable</q-w> s     : <q-t>STRING</q-w>(1 <q-w>to</q-w> <q-a>value</q-w>'<q-a>length</q-w> +1);
<a name="7063"><q-n>     7063  </q-n></a>    <q-w>variable</q-w> sindx : <q-t>INTEGER</q-w>;
<a name="7064"><q-n>     7064  </q-n></a>  <q-w>begin</q-w>  <q-m>-- function write   Example: 0011.1100</q-m>
<a name="7065"><q-n>     7065  </q-n></a>    sindx := 1;
<a name="7066"><q-n>     7066  </q-n></a>    <q-w>for</q-w> i <q-a>in</q-w> <q-a>value</q-w>'<q-a>high</q-w> <q-w>downto</q-w> <q-a>value</q-w>'<q-a>low</q-w> <q-w>loop</q-w>
<a name="7067"><q-n>     7067  </q-n></a>      <q-w>if</q-w> i = -1 <q-w>then</q-w>
<a name="7068"><q-n>     7068  </q-n></a>        s(sindx) := '.';
<a name="7069"><q-n>     7069  </q-n></a>        sindx    := sindx + 1;
<a name="7070"><q-n>     7070  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="7071"><q-n>     7071  </q-n></a>      s(sindx) := MVL9_to_char(<q-t>STD_ULOGIC</q-w>(<q-a>value</q-w>(i)));
<a name="7072"><q-n>     7072  </q-n></a>      sindx    := sindx + 1;
<a name="7073"><q-n>     7073  </q-n></a>    <q-w>end</q-w> <q-w>loop</q-w>;
<a name="7074"><q-n>     7074  </q-n></a>    write(l, s, justified, field);
<a name="7075"><q-n>     7075  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> write;
<a name="7076"><q-n>     7076  </q-n></a>
<a name="7077"><q-n>     7077  </q-n></a>  <q-w>procedure</q-w> READ(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="7078"><q-n>     7078  </q-n></a>                 <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_ufixed) <q-w>is</q-w>
<a name="7079"><q-n>     7079  </q-n></a>    <q-m>-- Possible data:  00000.0000000</q-m>
<a name="7080"><q-n>     7080  </q-n></a>    <q-m>--                 000000000000</q-m>
<a name="7081"><q-n>     7081  </q-n></a>    <q-w>variable</q-w> c      : <q-t>CHARACTER</q-w>;
<a name="7082"><q-n>     7082  </q-n></a>    <q-w>variable</q-w> readOk : <q-t>BOOLEAN</q-w>;
<a name="7083"><q-n>     7083  </q-n></a>    <q-w>variable</q-w> i      : <q-t>INTEGER</q-w>;          <q-m>-- index variable</q-m>
<a name="7084"><q-n>     7084  </q-n></a>    <q-w>variable</q-w> mv : ufixed (<q-a>VALUE</q-w>'<q-w>range</q-w>);
<a name="7085"><q-n>     7085  </q-n></a>    <q-w>variable</q-w> lastu  : <q-t>BOOLEAN</q-w> := false;       <q-m>-- last character was an "_"</q-m>
<a name="7086"><q-n>     7086  </q-n></a>    <q-w>variable</q-w> founddot : <q-t>BOOLEAN</q-w> := false;  <q-m>-- found a "."</q-m>
<a name="7087"><q-n>     7087  </q-n></a>  <q-w>begin</q-w>  <q-m>-- READ</q-m>
<a name="7088"><q-n>     7088  </q-n></a>    <q-a>VALUE</q-w> := (<q-a>VALUE</q-w>'<q-w>range</q-w> =&gt; 'U');
<a name="7089"><q-n>     7089  </q-n></a>    Skip_whitespace (L);
<a name="7090"><q-n>     7090  </q-n></a>    <q-w>if</q-w> <q-a>VALUE</q-w>'<q-a>length</q-w> &gt; 0 <q-w>then</q-w>            <q-m>-- non Null input string</q-m>
<a name="7091"><q-n>     7091  </q-n></a>      read (l, c, readOk);
<a name="7092"><q-n>     7092  </q-n></a>      i := <q-a>value</q-w>'<q-a>high</q-w>;
<a name="7093"><q-n>     7093  </q-n></a>      <q-w>while</q-w> i &gt;= <q-a>VALUE</q-w>'<q-a>low</q-w> <q-w>loop</q-w>
<a name="7094"><q-n>     7094  </q-n></a>        <q-w>if</q-w> readOk = false <q-w>then</q-w>              <q-m>-- Bail out if there was a bad read</q-m>
<a name="7095"><q-n>     7095  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"READ(ufixed) "</q-l>
<a name="7096"><q-n>     7096  </q-n></a>            &amp; <q-l>"End of string encountered"</q-l>
<a name="7097"><q-n>     7097  </q-n></a>            <q-w>severity</q-w> error;
<a name="7098"><q-n>     7098  </q-n></a>          <q-w>return</q-w>;
<a name="7099"><q-n>     7099  </q-n></a>        <q-w>elsif</q-w> c = '_' <q-w>then</q-w>
<a name="7100"><q-n>     7100  </q-n></a>          <q-w>if</q-w> i = <q-a>value</q-w>'<q-a>high</q-w> <q-w>then</q-w>
<a name="7101"><q-n>     7101  </q-n></a>            <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"READ(ufixed) "</q-l>
<a name="7102"><q-n>     7102  </q-n></a>              &amp; <q-l>"String begins with an "</q-l><q-l>"_"</q-l><q-l>""</q-l> <q-w>severity</q-w> error;
<a name="7103"><q-n>     7103  </q-n></a>            <q-w>return</q-w>;
<a name="7104"><q-n>     7104  </q-n></a>          <q-w>elsif</q-w> lastu <q-w>then</q-w>
<a name="7105"><q-n>     7105  </q-n></a>            <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"READ(ufixed) "</q-l>
<a name="7106"><q-n>     7106  </q-n></a>              &amp; <q-l>"Two underscores detected in input string "</q-l><q-l>"__"</q-l><q-l>""</q-l>
<a name="7107"><q-n>     7107  </q-n></a>              <q-w>severity</q-w> error;
<a name="7108"><q-n>     7108  </q-n></a>            <q-w>return</q-w>;
<a name="7109"><q-n>     7109  </q-n></a>          <q-w>else</q-w>
<a name="7110"><q-n>     7110  </q-n></a>            lastu := true;
<a name="7111"><q-n>     7111  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7112"><q-n>     7112  </q-n></a>        <q-w>elsif</q-w> c = '.' <q-w>then</q-w>                <q-m>-- binary point</q-m>
<a name="7113"><q-n>     7113  </q-n></a>          <q-w>if</q-w> founddot <q-w>then</q-w>
<a name="7114"><q-n>     7114  </q-n></a>            <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"READ(ufixed) "</q-l>
<a name="7115"><q-n>     7115  </q-n></a>              &amp; <q-l>"Two binary points found in input string"</q-l> <q-w>severity</q-w> error;
<a name="7116"><q-n>     7116  </q-n></a>            <q-w>return</q-w>;
<a name="7117"><q-n>     7117  </q-n></a>          <q-w>elsif</q-w> i /= -1 <q-w>then</q-w>                 <q-m>-- Seperator in the wrong spot</q-m>
<a name="7118"><q-n>     7118  </q-n></a>            <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"READ(ufixed) "</q-l>
<a name="7119"><q-n>     7119  </q-n></a>              &amp; <q-l>"Decimal point does not match number format "</q-l>
<a name="7120"><q-n>     7120  </q-n></a>              <q-w>severity</q-w> error;
<a name="7121"><q-n>     7121  </q-n></a>            <q-w>return</q-w>;
<a name="7122"><q-n>     7122  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7123"><q-n>     7123  </q-n></a>          founddot := true;
<a name="7124"><q-n>     7124  </q-n></a>          lastu := false;
<a name="7125"><q-n>     7125  </q-n></a>        <q-w>elsif</q-w> c = ' ' <q-w>or</q-w> c = NBSP <q-w>or</q-w> c = HT <q-w>then</q-w>  <q-m>-- reading done.</q-m>
<a name="7126"><q-n>     7126  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"READ(ufixed) "</q-l>
<a name="7127"><q-n>     7127  </q-n></a>            &amp; <q-l>"Short read, Space encounted in input string"</q-l>
<a name="7128"><q-n>     7128  </q-n></a>            <q-w>severity</q-w> error;
<a name="7129"><q-n>     7129  </q-n></a>          <q-w>return</q-w>;
<a name="7130"><q-n>     7130  </q-n></a>        <q-w>elsif</q-w> char_to_MVL9plus(c) = error <q-w>then</q-w>
<a name="7131"><q-n>     7131  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"READ(ufixed) "</q-l>
<a name="7132"><q-n>     7132  </q-n></a>            &amp; <q-l>"Character '"</q-l> &amp;
<a name="7133"><q-n>     7133  </q-n></a>            c &amp; <q-l>"' read, expected STD_ULOGIC literal."</q-l>
<a name="7134"><q-n>     7134  </q-n></a>            <q-w>severity</q-w> error;
<a name="7135"><q-n>     7135  </q-n></a>          <q-w>return</q-w>;
<a name="7136"><q-n>     7136  </q-n></a>        <q-w>else</q-w>
<a name="7137"><q-n>     7137  </q-n></a>          mv(i) := char_to_MVL9(c);
<a name="7138"><q-n>     7138  </q-n></a>          i := i - 1;
<a name="7139"><q-n>     7139  </q-n></a>          <q-w>if</q-w> i &lt; mv'<q-a>low</q-w> <q-w>then</q-w>
<a name="7140"><q-n>     7140  </q-n></a>            <q-a>VALUE</q-w> := mv;
<a name="7141"><q-n>     7141  </q-n></a>            <q-w>return</q-w>;
<a name="7142"><q-n>     7142  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7143"><q-n>     7143  </q-n></a>          lastu := false;
<a name="7144"><q-n>     7144  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7145"><q-n>     7145  </q-n></a>        read(L, c, readOk);
<a name="7146"><q-n>     7146  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="7147"><q-n>     7147  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7148"><q-n>     7148  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> READ;
<a name="7149"><q-n>     7149  </q-n></a>
<a name="7150"><q-n>     7150  </q-n></a>  <q-w>procedure</q-w> READ(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="7151"><q-n>     7151  </q-n></a>                 <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_ufixed;
<a name="7152"><q-n>     7152  </q-n></a>                 GOOD  : <q-a>out</q-w>   <q-t>BOOLEAN</q-w>) <q-w>is</q-w>
<a name="7153"><q-n>     7153  </q-n></a>    <q-m>-- Possible data:  00000.0000000</q-m>
<a name="7154"><q-n>     7154  </q-n></a>    <q-m>--                 000000000000</q-m>
<a name="7155"><q-n>     7155  </q-n></a>    <q-w>variable</q-w> c      : <q-t>CHARACTER</q-w>;
<a name="7156"><q-n>     7156  </q-n></a>    <q-w>variable</q-w> readOk : <q-t>BOOLEAN</q-w>;
<a name="7157"><q-n>     7157  </q-n></a>    <q-w>variable</q-w> mv : ufixed (<q-a>VALUE</q-w>'<q-w>range</q-w>);
<a name="7158"><q-n>     7158  </q-n></a>    <q-w>variable</q-w> i      : <q-t>INTEGER</q-w>;          <q-m>-- index variable</q-m>
<a name="7159"><q-n>     7159  </q-n></a>    <q-w>variable</q-w> lastu  : <q-t>BOOLEAN</q-w> := false;       <q-m>-- last character was an "_"</q-m>
<a name="7160"><q-n>     7160  </q-n></a>    <q-w>variable</q-w> founddot : <q-t>BOOLEAN</q-w> := false;  <q-m>-- found a "."</q-m>
<a name="7161"><q-n>     7161  </q-n></a>  <q-w>begin</q-w>  <q-m>-- READ</q-m>
<a name="7162"><q-n>     7162  </q-n></a>    <q-a>VALUE</q-w> := (<q-a>VALUE</q-w>'<q-w>range</q-w> =&gt; 'U');
<a name="7163"><q-n>     7163  </q-n></a>    Skip_whitespace (L);
<a name="7164"><q-n>     7164  </q-n></a>    <q-w>if</q-w> <q-a>VALUE</q-w>'<q-a>length</q-w> &gt; 0 <q-w>then</q-w>
<a name="7165"><q-n>     7165  </q-n></a>      read (l, c, readOk);
<a name="7166"><q-n>     7166  </q-n></a>      i := <q-a>value</q-w>'<q-a>high</q-w>;
<a name="7167"><q-n>     7167  </q-n></a>      GOOD := false;
<a name="7168"><q-n>     7168  </q-n></a>      <q-w>while</q-w> i &gt;= <q-a>VALUE</q-w>'<q-a>low</q-w> <q-w>loop</q-w>
<a name="7169"><q-n>     7169  </q-n></a>        <q-w>if</q-w> <q-w>not</q-w> readOk <q-w>then</q-w>     <q-m>-- Bail out if there was a bad read</q-m>
<a name="7170"><q-n>     7170  </q-n></a>          <q-w>return</q-w>;
<a name="7171"><q-n>     7171  </q-n></a>        <q-w>elsif</q-w> c = '_' <q-w>then</q-w>
<a name="7172"><q-n>     7172  </q-n></a>          <q-w>if</q-w> i = <q-a>value</q-w>'<q-a>high</q-w> <q-w>then</q-w>          <q-m>-- Begins with an "_"</q-m>
<a name="7173"><q-n>     7173  </q-n></a>            <q-w>return</q-w>;
<a name="7174"><q-n>     7174  </q-n></a>          <q-w>elsif</q-w> lastu <q-w>then</q-w>               <q-m>-- "__" detected</q-m>
<a name="7175"><q-n>     7175  </q-n></a>            <q-w>return</q-w>;
<a name="7176"><q-n>     7176  </q-n></a>          <q-w>else</q-w>
<a name="7177"><q-n>     7177  </q-n></a>            lastu := true;
<a name="7178"><q-n>     7178  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7179"><q-n>     7179  </q-n></a>        <q-w>elsif</q-w> c = '.' <q-w>then</q-w>                <q-m>-- binary point</q-m>
<a name="7180"><q-n>     7180  </q-n></a>          <q-w>if</q-w> founddot <q-w>then</q-w>
<a name="7181"><q-n>     7181  </q-n></a>            <q-w>return</q-w>;
<a name="7182"><q-n>     7182  </q-n></a>          <q-w>elsif</q-w> i /= -1 <q-w>then</q-w>                 <q-m>-- Seperator in the wrong spot</q-m>
<a name="7183"><q-n>     7183  </q-n></a>            <q-w>return</q-w>;
<a name="7184"><q-n>     7184  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7185"><q-n>     7185  </q-n></a>          founddot := true;
<a name="7186"><q-n>     7186  </q-n></a>          lastu := false;
<a name="7187"><q-n>     7187  </q-n></a>        <q-w>elsif</q-w> (char_to_MVL9plus(c) = error) <q-w>then</q-w>   <q-m>-- Illegal character/short read</q-m>
<a name="7188"><q-n>     7188  </q-n></a>          <q-w>return</q-w>;
<a name="7189"><q-n>     7189  </q-n></a>        <q-w>else</q-w>
<a name="7190"><q-n>     7190  </q-n></a>          mv(i) := char_to_MVL9(c);
<a name="7191"><q-n>     7191  </q-n></a>          i := i - 1;
<a name="7192"><q-n>     7192  </q-n></a>          <q-w>if</q-w> i &lt; mv'<q-a>low</q-w> <q-w>then</q-w>             <q-m>-- reading done</q-m>
<a name="7193"><q-n>     7193  </q-n></a>            GOOD := true;
<a name="7194"><q-n>     7194  </q-n></a>            <q-a>VALUE</q-w> := mv;
<a name="7195"><q-n>     7195  </q-n></a>            <q-w>return</q-w>;
<a name="7196"><q-n>     7196  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7197"><q-n>     7197  </q-n></a>          lastu := false;
<a name="7198"><q-n>     7198  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7199"><q-n>     7199  </q-n></a>        read(L, c, readOk);
<a name="7200"><q-n>     7200  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="7201"><q-n>     7201  </q-n></a>    <q-w>else</q-w>
<a name="7202"><q-n>     7202  </q-n></a>      GOOD := true;                   <q-m>-- read into a null array</q-m>
<a name="7203"><q-n>     7203  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7204"><q-n>     7204  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> READ;
<a name="7205"><q-n>     7205  </q-n></a>
<a name="7206"><q-n>     7206  </q-n></a>  <q-w>procedure</q-w> READ(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="7207"><q-n>     7207  </q-n></a>                 <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_sfixed) <q-w>is</q-w>
<a name="7208"><q-n>     7208  </q-n></a>    <q-w>variable</q-w> c      : <q-t>CHARACTER</q-w>;
<a name="7209"><q-n>     7209  </q-n></a>    <q-w>variable</q-w> readOk : <q-t>BOOLEAN</q-w>;
<a name="7210"><q-n>     7210  </q-n></a>    <q-w>variable</q-w> i      : <q-t>INTEGER</q-w>;          <q-m>-- index variable</q-m>
<a name="7211"><q-n>     7211  </q-n></a>    <q-w>variable</q-w> mv : sfixed (<q-a>VALUE</q-w>'<q-w>range</q-w>);
<a name="7212"><q-n>     7212  </q-n></a>    <q-w>variable</q-w> lastu  : <q-t>BOOLEAN</q-w> := false;       <q-m>-- last character was an "_"</q-m>
<a name="7213"><q-n>     7213  </q-n></a>    <q-w>variable</q-w> founddot : <q-t>BOOLEAN</q-w> := false;  <q-m>-- found a "."</q-m>
<a name="7214"><q-n>     7214  </q-n></a>  <q-w>begin</q-w>  <q-m>-- READ</q-m>
<a name="7215"><q-n>     7215  </q-n></a>    <q-a>VALUE</q-w> := (<q-a>VALUE</q-w>'<q-w>range</q-w> =&gt; 'U');
<a name="7216"><q-n>     7216  </q-n></a>    Skip_whitespace (L);
<a name="7217"><q-n>     7217  </q-n></a>    <q-w>if</q-w> <q-a>VALUE</q-w>'<q-a>length</q-w> &gt; 0 <q-w>then</q-w>            <q-m>-- non Null input string</q-m>
<a name="7218"><q-n>     7218  </q-n></a>      read (l, c, readOk);
<a name="7219"><q-n>     7219  </q-n></a>      i := <q-a>value</q-w>'<q-a>high</q-w>;
<a name="7220"><q-n>     7220  </q-n></a>      <q-w>while</q-w> i &gt;= <q-a>VALUE</q-w>'<q-a>low</q-w> <q-w>loop</q-w>
<a name="7221"><q-n>     7221  </q-n></a>        <q-w>if</q-w> readOk = false <q-w>then</q-w>              <q-m>-- Bail out if there was a bad read</q-m>
<a name="7222"><q-n>     7222  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"READ(sfixed) "</q-l>
<a name="7223"><q-n>     7223  </q-n></a>            &amp; <q-l>"End of string encountered"</q-l>
<a name="7224"><q-n>     7224  </q-n></a>            <q-w>severity</q-w> error;
<a name="7225"><q-n>     7225  </q-n></a>          <q-w>return</q-w>;
<a name="7226"><q-n>     7226  </q-n></a>        <q-w>elsif</q-w> c = '_' <q-w>then</q-w>
<a name="7227"><q-n>     7227  </q-n></a>          <q-w>if</q-w> i = <q-a>value</q-w>'<q-a>high</q-w> <q-w>then</q-w>
<a name="7228"><q-n>     7228  </q-n></a>            <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"READ(sfixed) "</q-l>
<a name="7229"><q-n>     7229  </q-n></a>              &amp; <q-l>"String begins with an "</q-l><q-l>"_"</q-l><q-l>""</q-l> <q-w>severity</q-w> error;
<a name="7230"><q-n>     7230  </q-n></a>            <q-w>return</q-w>;
<a name="7231"><q-n>     7231  </q-n></a>          <q-w>elsif</q-w> lastu <q-w>then</q-w>
<a name="7232"><q-n>     7232  </q-n></a>            <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"READ(sfixed) "</q-l>
<a name="7233"><q-n>     7233  </q-n></a>              &amp; <q-l>"Two underscores detected in input string "</q-l><q-l>"__"</q-l><q-l>""</q-l>
<a name="7234"><q-n>     7234  </q-n></a>              <q-w>severity</q-w> error;
<a name="7235"><q-n>     7235  </q-n></a>            <q-w>return</q-w>;
<a name="7236"><q-n>     7236  </q-n></a>          <q-w>else</q-w>
<a name="7237"><q-n>     7237  </q-n></a>            lastu := true;
<a name="7238"><q-n>     7238  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7239"><q-n>     7239  </q-n></a>        <q-w>elsif</q-w> c = '.' <q-w>then</q-w>                <q-m>-- binary point</q-m>
<a name="7240"><q-n>     7240  </q-n></a>          <q-w>if</q-w> founddot <q-w>then</q-w>
<a name="7241"><q-n>     7241  </q-n></a>            <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"READ(sfixed) "</q-l>
<a name="7242"><q-n>     7242  </q-n></a>              &amp; <q-l>"Two binary points found in input string"</q-l> <q-w>severity</q-w> error;
<a name="7243"><q-n>     7243  </q-n></a>            <q-w>return</q-w>;
<a name="7244"><q-n>     7244  </q-n></a>          <q-w>elsif</q-w> i /= -1 <q-w>then</q-w>                 <q-m>-- Seperator in the wrong spot</q-m>
<a name="7245"><q-n>     7245  </q-n></a>            <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"READ(sfixed) "</q-l>
<a name="7246"><q-n>     7246  </q-n></a>              &amp; <q-l>"Decimal point does not match number format "</q-l>
<a name="7247"><q-n>     7247  </q-n></a>              <q-w>severity</q-w> error;
<a name="7248"><q-n>     7248  </q-n></a>            <q-w>return</q-w>;
<a name="7249"><q-n>     7249  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7250"><q-n>     7250  </q-n></a>          founddot := true;
<a name="7251"><q-n>     7251  </q-n></a>          lastu := false;
<a name="7252"><q-n>     7252  </q-n></a>        <q-w>elsif</q-w> c = ' ' <q-w>or</q-w> c = NBSP <q-w>or</q-w> c = HT <q-w>then</q-w>  <q-m>-- reading done.</q-m>
<a name="7253"><q-n>     7253  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"READ(sfixed) "</q-l>
<a name="7254"><q-n>     7254  </q-n></a>            &amp; <q-l>"Short read, Space encounted in input string"</q-l>
<a name="7255"><q-n>     7255  </q-n></a>            <q-w>severity</q-w> error;
<a name="7256"><q-n>     7256  </q-n></a>          <q-w>return</q-w>;
<a name="7257"><q-n>     7257  </q-n></a>        <q-w>elsif</q-w> char_to_MVL9plus(c) = error <q-w>then</q-w>
<a name="7258"><q-n>     7258  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w> &amp; <q-l>"READ(sfixed) "</q-l>
<a name="7259"><q-n>     7259  </q-n></a>            &amp; <q-l>"Character '"</q-l> &amp;
<a name="7260"><q-n>     7260  </q-n></a>            c &amp; <q-l>"' read, expected STD_ULOGIC literal."</q-l>
<a name="7261"><q-n>     7261  </q-n></a>            <q-w>severity</q-w> error;
<a name="7262"><q-n>     7262  </q-n></a>          <q-w>return</q-w>;
<a name="7263"><q-n>     7263  </q-n></a>        <q-w>else</q-w>
<a name="7264"><q-n>     7264  </q-n></a>          mv(i) := char_to_MVL9(c);
<a name="7265"><q-n>     7265  </q-n></a>          i := i - 1;
<a name="7266"><q-n>     7266  </q-n></a>          <q-w>if</q-w> i &lt; mv'<q-a>low</q-w> <q-w>then</q-w>
<a name="7267"><q-n>     7267  </q-n></a>            <q-a>VALUE</q-w> := mv;
<a name="7268"><q-n>     7268  </q-n></a>            <q-w>return</q-w>;
<a name="7269"><q-n>     7269  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7270"><q-n>     7270  </q-n></a>          lastu := false;
<a name="7271"><q-n>     7271  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7272"><q-n>     7272  </q-n></a>        read(L, c, readOk);
<a name="7273"><q-n>     7273  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="7274"><q-n>     7274  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7275"><q-n>     7275  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> READ;
<a name="7276"><q-n>     7276  </q-n></a>
<a name="7277"><q-n>     7277  </q-n></a>  <q-w>procedure</q-w> READ(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="7278"><q-n>     7278  </q-n></a>                 <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_sfixed;
<a name="7279"><q-n>     7279  </q-n></a>                 GOOD  : <q-a>out</q-w>   <q-t>BOOLEAN</q-w>) <q-w>is</q-w>
<a name="7280"><q-n>     7280  </q-n></a>    <q-w>variable</q-w> value_ufixed : UNRESOLVED_ufixed (<q-a>VALUE</q-w>'<q-w>range</q-w>);
<a name="7281"><q-n>     7281  </q-n></a>  <q-w>begin</q-w>  <q-m>-- READ</q-m>
<a name="7282"><q-n>     7282  </q-n></a>    READ (L =&gt; L, <q-a>VALUE</q-w> =&gt; value_ufixed, GOOD =&gt; GOOD);
<a name="7283"><q-n>     7283  </q-n></a>    <q-a>VALUE</q-w> := UNRESOLVED_sfixed (value_ufixed);
<a name="7284"><q-n>     7284  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> READ;
<a name="7285"><q-n>     7285  </q-n></a>
<a name="7286"><q-n>     7286  </q-n></a>  <q-m>-- octal read and write</q-m>
<a name="7287"><q-n>     7287  </q-n></a>  <q-w>procedure</q-w> owrite (
<a name="7288"><q-n>     7288  </q-n></a>    L         : <q-a>inout</q-w> <q-t>LINE</q-w>;               <q-m>-- input line</q-m>
<a name="7289"><q-n>     7289  </q-n></a>    <q-a>VALUE</q-w>     : <q-a>in</q-w>    UNRESOLVED_ufixed;  <q-m>-- fixed point input</q-m>
<a name="7290"><q-n>     7290  </q-n></a>    JUSTIFIED : <q-a>in</q-w>    SIDE  := <q-a>right</q-w>;
<a name="7291"><q-n>     7291  </q-n></a>    FIELD     : <q-a>in</q-w>    WIDTH := 0) <q-w>is</q-w>
<a name="7292"><q-n>     7292  </q-n></a>  <q-w>begin</q-w>  <q-m>-- Example 03.30</q-m>
<a name="7293"><q-n>     7293  </q-n></a>    write (L         =&gt; L,
<a name="7294"><q-n>     7294  </q-n></a>           <q-a>VALUE</q-w>     =&gt; to_ostring (<q-a>VALUE</q-w>),
<a name="7295"><q-n>     7295  </q-n></a>           JUSTIFIED =&gt; JUSTIFIED,
<a name="7296"><q-n>     7296  </q-n></a>           FIELD     =&gt; FIELD);
<a name="7297"><q-n>     7297  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> owrite;
<a name="7298"><q-n>     7298  </q-n></a>
<a name="7299"><q-n>     7299  </q-n></a>  <q-w>procedure</q-w> owrite (
<a name="7300"><q-n>     7300  </q-n></a>    L         : <q-a>inout</q-w> <q-t>LINE</q-w>;               <q-m>-- input line</q-m>
<a name="7301"><q-n>     7301  </q-n></a>    <q-a>VALUE</q-w>     : <q-a>in</q-w>    UNRESOLVED_sfixed;  <q-m>-- fixed point input</q-m>
<a name="7302"><q-n>     7302  </q-n></a>    JUSTIFIED : <q-a>in</q-w>    SIDE  := <q-a>right</q-w>;
<a name="7303"><q-n>     7303  </q-n></a>    FIELD     : <q-a>in</q-w>    WIDTH := 0) <q-w>is</q-w>
<a name="7304"><q-n>     7304  </q-n></a>  <q-w>begin</q-w>  <q-m>-- Example 03.30</q-m>
<a name="7305"><q-n>     7305  </q-n></a>    write (L         =&gt; L,
<a name="7306"><q-n>     7306  </q-n></a>           <q-a>VALUE</q-w>     =&gt; to_ostring (<q-a>VALUE</q-w>),
<a name="7307"><q-n>     7307  </q-n></a>           JUSTIFIED =&gt; JUSTIFIED,
<a name="7308"><q-n>     7308  </q-n></a>           FIELD     =&gt; FIELD);
<a name="7309"><q-n>     7309  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> owrite;
<a name="7310"><q-n>     7310  </q-n></a>
<a name="7311"><q-n>     7311  </q-n></a>  <q-m>-- purpose: Routines common to the OREAD routines</q-m>
<a name="7312"><q-n>     7312  </q-n></a>  <q-w>procedure</q-w> OREAD_common (
<a name="7313"><q-n>     7313  </q-n></a>    L                : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="7314"><q-n>     7314  </q-n></a>    slv              : <q-a>out</q-w>   <q-t>STD_ULOGIC_VECTOR</q-w>;
<a name="7315"><q-n>     7315  </q-n></a>    igood            : <q-a>out</q-w>   <q-t>BOOLEAN</q-w>;
<a name="7316"><q-n>     7316  </q-n></a>    idex             : <q-a>out</q-w> <q-t>INTEGER</q-w>;
<a name="7317"><q-n>     7317  </q-n></a>    <q-w>constant</q-w> bpoint : <q-a>in</q-w> <q-t>INTEGER</q-w>;       <q-m>-- binary point</q-m>
<a name="7318"><q-n>     7318  </q-n></a>    <q-w>constant</q-w> message : <q-a>in</q-w>    <q-t>BOOLEAN</q-w>;
<a name="7319"><q-n>     7319  </q-n></a>    <q-w>constant</q-w> smath   : <q-a>in</q-w>    <q-t>BOOLEAN</q-w>) <q-w>is</q-w>
<a name="7320"><q-n>     7320  </q-n></a>
<a name="7321"><q-n>     7321  </q-n></a>    <q-m>-- purpose: error message routine</q-m>
<a name="7322"><q-n>     7322  </q-n></a>    <q-w>procedure</q-w> errmes (
<a name="7323"><q-n>     7323  </q-n></a>      <q-w>constant</q-w> mess : <q-a>in</q-w> <q-t>STRING</q-w>) <q-w>is</q-w>     <q-m>-- error message</q-m>
<a name="7324"><q-n>     7324  </q-n></a>    <q-w>begin</q-w>
<a name="7325"><q-n>     7325  </q-n></a>      <q-w>if</q-w> message <q-w>then</q-w>
<a name="7326"><q-n>     7326  </q-n></a>        <q-w>if</q-w> smath <q-w>then</q-w>
<a name="7327"><q-n>     7327  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="7328"><q-n>     7328  </q-n></a>            &amp; <q-l>"OREAD(sfixed) "</q-l>
<a name="7329"><q-n>     7329  </q-n></a>            &amp; mess
<a name="7330"><q-n>     7330  </q-n></a>            <q-w>severity</q-w> error;
<a name="7331"><q-n>     7331  </q-n></a>        <q-w>else</q-w>
<a name="7332"><q-n>     7332  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="7333"><q-n>     7333  </q-n></a>            &amp; <q-l>"OREAD(ufixed) "</q-l>
<a name="7334"><q-n>     7334  </q-n></a>            &amp; mess
<a name="7335"><q-n>     7335  </q-n></a>            <q-w>severity</q-w> error;
<a name="7336"><q-n>     7336  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7337"><q-n>     7337  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="7338"><q-n>     7338  </q-n></a>    <q-w>end</q-w> <q-w>procedure</q-w> errmes;
<a name="7339"><q-n>     7339  </q-n></a>    <q-w>variable</q-w> xgood : <q-t>BOOLEAN</q-w>;
<a name="7340"><q-n>     7340  </q-n></a>    <q-w>variable</q-w> nybble : <q-t>STD_ULOGIC_VECTOR</q-w> (2 <q-w>downto</q-w> 0);        <q-m>-- 3 bits</q-m>
<a name="7341"><q-n>     7341  </q-n></a>    <q-w>variable</q-w> c : <q-t>CHARACTER</q-w>;
<a name="7342"><q-n>     7342  </q-n></a>    <q-w>variable</q-w> i : <q-t>INTEGER</q-w>;
<a name="7343"><q-n>     7343  </q-n></a>    <q-w>variable</q-w> lastu  : <q-t>BOOLEAN</q-w> := false;       <q-m>-- last character was an "_"</q-m>
<a name="7344"><q-n>     7344  </q-n></a>    <q-w>variable</q-w> founddot : <q-t>BOOLEAN</q-w> := false;  <q-m>-- found a dot.</q-m>
<a name="7345"><q-n>     7345  </q-n></a>  <q-w>begin</q-w>
<a name="7346"><q-n>     7346  </q-n></a>    Skip_whitespace (L);
<a name="7347"><q-n>     7347  </q-n></a>    <q-w>if</q-w> slv'<q-a>length</q-w> &gt; 0 <q-w>then</q-w>
<a name="7348"><q-n>     7348  </q-n></a>      i := slv'<q-a>high</q-w>;
<a name="7349"><q-n>     7349  </q-n></a>      read (l, c, xgood);
<a name="7350"><q-n>     7350  </q-n></a>      <q-w>while</q-w> i &gt; 0 <q-w>loop</q-w>
<a name="7351"><q-n>     7351  </q-n></a>        <q-w>if</q-w> xgood = false <q-w>then</q-w>
<a name="7352"><q-n>     7352  </q-n></a>          errmes (<q-l>"Error: end of string encountered"</q-l>);
<a name="7353"><q-n>     7353  </q-n></a>          <q-w>exit</q-w>;
<a name="7354"><q-n>     7354  </q-n></a>        <q-w>elsif</q-w> c = '_' <q-w>then</q-w>
<a name="7355"><q-n>     7355  </q-n></a>          <q-w>if</q-w> i = slv'<q-a>length</q-w> <q-w>then</q-w>
<a name="7356"><q-n>     7356  </q-n></a>            errmes (<q-l>"Error: String begins with an "</q-l><q-l>"_"</q-l><q-l>""</q-l>);
<a name="7357"><q-n>     7357  </q-n></a>            xgood := false;
<a name="7358"><q-n>     7358  </q-n></a>            <q-w>exit</q-w>;
<a name="7359"><q-n>     7359  </q-n></a>          <q-w>elsif</q-w> lastu <q-w>then</q-w>
<a name="7360"><q-n>     7360  </q-n></a>            errmes (<q-l>"Error: Two underscores detected in input string "</q-l><q-l>"__"</q-l><q-l>""</q-l>);
<a name="7361"><q-n>     7361  </q-n></a>            xgood := false;
<a name="7362"><q-n>     7362  </q-n></a>            <q-w>exit</q-w>;
<a name="7363"><q-n>     7363  </q-n></a>          <q-w>else</q-w>
<a name="7364"><q-n>     7364  </q-n></a>            lastu := true;
<a name="7365"><q-n>     7365  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7366"><q-n>     7366  </q-n></a>        <q-w>elsif</q-w> (c = '.') <q-w>then</q-w>
<a name="7367"><q-n>     7367  </q-n></a>          <q-w>if</q-w> (i + 1 /= bpoint) <q-w>then</q-w>
<a name="7368"><q-n>     7368  </q-n></a>            errmes (<q-l>"encountered "</q-l><q-l>"."</q-l><q-l>" at wrong index"</q-l>);
<a name="7369"><q-n>     7369  </q-n></a>            xgood := false;
<a name="7370"><q-n>     7370  </q-n></a>            <q-w>exit</q-w>;
<a name="7371"><q-n>     7371  </q-n></a>          <q-w>elsif</q-w> i = slv'<q-a>length</q-w> <q-w>then</q-w>
<a name="7372"><q-n>     7372  </q-n></a>            errmes (<q-l>"encounted a "</q-l><q-l>"."</q-l><q-l>" at the beginning of the line"</q-l>);
<a name="7373"><q-n>     7373  </q-n></a>            xgood := false;
<a name="7374"><q-n>     7374  </q-n></a>            <q-w>exit</q-w>;
<a name="7375"><q-n>     7375  </q-n></a>          <q-w>elsif</q-w> founddot <q-w>then</q-w>
<a name="7376"><q-n>     7376  </q-n></a>            errmes (<q-l>"Two "</q-l><q-l>"."</q-l><q-l>" encounted in input string"</q-l>);
<a name="7377"><q-n>     7377  </q-n></a>            xgood := false;
<a name="7378"><q-n>     7378  </q-n></a>            <q-w>exit</q-w>;
<a name="7379"><q-n>     7379  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7380"><q-n>     7380  </q-n></a>          founddot := true;
<a name="7381"><q-n>     7381  </q-n></a>          lastu := false;
<a name="7382"><q-n>     7382  </q-n></a>        <q-w>else</q-w>
<a name="7383"><q-n>     7383  </q-n></a>          Char2triBits(c, nybble, xgood, message);
<a name="7384"><q-n>     7384  </q-n></a>          <q-w>if</q-w> <q-w>not</q-w> xgood <q-w>then</q-w>
<a name="7385"><q-n>     7385  </q-n></a>            <q-w>exit</q-w>;
<a name="7386"><q-n>     7386  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7387"><q-n>     7387  </q-n></a>          slv (i <q-w>downto</q-w> i-2) := nybble;
<a name="7388"><q-n>     7388  </q-n></a>          i := i - 3;
<a name="7389"><q-n>     7389  </q-n></a>          lastu := false;
<a name="7390"><q-n>     7390  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;     
<a name="7391"><q-n>     7391  </q-n></a>        <q-w>if</q-w> i &gt; 0 <q-w>then</q-w>
<a name="7392"><q-n>     7392  </q-n></a>          read (L, c, xgood);
<a name="7393"><q-n>     7393  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7394"><q-n>     7394  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="7395"><q-n>     7395  </q-n></a>      idex := i;
<a name="7396"><q-n>     7396  </q-n></a>      igood := xgood;
<a name="7397"><q-n>     7397  </q-n></a>    <q-w>else</q-w>
<a name="7398"><q-n>     7398  </q-n></a>      igood := true;                  <q-m>-- read into a null array</q-m>
<a name="7399"><q-n>     7399  </q-n></a>      idex := -1;
<a name="7400"><q-n>     7400  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7401"><q-n>     7401  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> OREAD_common;
<a name="7402"><q-n>     7402  </q-n></a>
<a name="7403"><q-n>     7403  </q-n></a>  <q-m>-- Note that for Octal and Hex read, you can not start with a ".",</q-m>
<a name="7404"><q-n>     7404  </q-n></a>  <q-m>-- the read is for numbers formatted "A.BC".  These routines go to</q-m>
<a name="7405"><q-n>     7405  </q-n></a>  <q-m>-- the nearest bounds, so "F.E" will fit into an sfixed (2 downto -3).</q-m>
<a name="7406"><q-n>     7406  </q-n></a>  <q-w>procedure</q-w> OREAD (L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="7407"><q-n>     7407  </q-n></a>                   <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_ufixed) <q-w>is</q-w>
<a name="7408"><q-n>     7408  </q-n></a>    <q-w>constant</q-w> hbv    : <q-t>INTEGER</q-w> := (((maximum(3, (<q-a>VALUE</q-w>'<q-a>high</q-w>+1))+2)/3)*3)-1;
<a name="7409"><q-n>     7409  </q-n></a>    <q-w>constant</q-w> lbv    : <q-t>INTEGER</q-w> := ((mine(0, <q-a>VALUE</q-w>'<q-a>low</q-w>)-2)/3)*3;
<a name="7410"><q-n>     7410  </q-n></a>    <q-w>variable</q-w> slv    : <q-t>STD_ULOGIC_VECTOR</q-w> (hbv-lbv <q-w>downto</q-w> 0);  <q-m>-- high bits</q-m>
<a name="7411"><q-n>     7411  </q-n></a>    <q-w>variable</q-w> valuex : UNRESOLVED_ufixed (hbv <q-w>downto</q-w> lbv);
<a name="7412"><q-n>     7412  </q-n></a>    <q-w>variable</q-w> igood  : <q-t>BOOLEAN</q-w>;
<a name="7413"><q-n>     7413  </q-n></a>    <q-w>variable</q-w> i      : <q-t>INTEGER</q-w>;
<a name="7414"><q-n>     7414  </q-n></a>  <q-w>begin</q-w>
<a name="7415"><q-n>     7415  </q-n></a>    <q-a>VALUE</q-w> := (<q-a>VALUE</q-w>'<q-w>range</q-w> =&gt; 'U');
<a name="7416"><q-n>     7416  </q-n></a>    OREAD_common ( L =&gt; L,
<a name="7417"><q-n>     7417  </q-n></a>                   slv =&gt; slv,
<a name="7418"><q-n>     7418  </q-n></a>                   igood =&gt; igood,
<a name="7419"><q-n>     7419  </q-n></a>                   idex =&gt; i,
<a name="7420"><q-n>     7420  </q-n></a>                   bpoint =&gt; -lbv,
<a name="7421"><q-n>     7421  </q-n></a>                   message =&gt; true,
<a name="7422"><q-n>     7422  </q-n></a>                   smath =&gt; false);
<a name="7423"><q-n>     7423  </q-n></a>    <q-w>if</q-w> igood <q-w>then</q-w>                       <q-m>-- We did not get another error</q-m>
<a name="7424"><q-n>     7424  </q-n></a>      <q-w>if</q-w> <q-w>not</q-w> ((i = -1) <q-w>and</q-w>               <q-m>-- We read everything, and high bits 0</q-m>
<a name="7425"><q-n>     7425  </q-n></a>              (or_reduce (slv(hbv-lbv <q-w>downto</q-w> <q-a>VALUE</q-w>'<q-a>high</q-w>+1-lbv)) = '0')) <q-w>then</q-w>
<a name="7426"><q-n>     7426  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="7427"><q-n>     7427  </q-n></a>          &amp; <q-l>"OREAD(ufixed): Vector truncated."</q-l>
<a name="7428"><q-n>     7428  </q-n></a>          <q-w>severity</q-w> error;
<a name="7429"><q-n>     7429  </q-n></a>      <q-w>else</q-w>
<a name="7430"><q-n>     7430  </q-n></a>        <q-w>if</q-w> (or_reduce (slv(<q-a>VALUE</q-w>'<q-a>low</q-w>-lbv-1 <q-w>downto</q-w> 0)) = '1') <q-w>then</q-w>
<a name="7431"><q-n>     7431  </q-n></a>          <q-w>assert</q-w> NO_WARNING
<a name="7432"><q-n>     7432  </q-n></a>            <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="7433"><q-n>     7433  </q-n></a>            &amp; <q-l>"OREAD(ufixed): Vector truncated"</q-l>
<a name="7434"><q-n>     7434  </q-n></a>            <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="7435"><q-n>     7435  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7436"><q-n>     7436  </q-n></a>        valuex := to_ufixed (slv, hbv, lbv);
<a name="7437"><q-n>     7437  </q-n></a>        <q-a>VALUE</q-w>  := valuex (<q-a>VALUE</q-w>'<q-w>range</q-w>);
<a name="7438"><q-n>     7438  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="7439"><q-n>     7439  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7440"><q-n>     7440  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> OREAD;
<a name="7441"><q-n>     7441  </q-n></a>
<a name="7442"><q-n>     7442  </q-n></a>  <q-w>procedure</q-w> OREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="7443"><q-n>     7443  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_ufixed;
<a name="7444"><q-n>     7444  </q-n></a>                  GOOD  : <q-a>out</q-w>   <q-t>BOOLEAN</q-w>) <q-w>is</q-w>
<a name="7445"><q-n>     7445  </q-n></a>    <q-w>constant</q-w> hbv    : <q-t>INTEGER</q-w> := (((maximum(3, (<q-a>VALUE</q-w>'<q-a>high</q-w>+1))+2)/3)*3)-1;
<a name="7446"><q-n>     7446  </q-n></a>    <q-w>constant</q-w> lbv    : <q-t>INTEGER</q-w> := ((mine(0, <q-a>VALUE</q-w>'<q-a>low</q-w>)-2)/3)*3;
<a name="7447"><q-n>     7447  </q-n></a>    <q-w>variable</q-w> slv    : <q-t>STD_ULOGIC_VECTOR</q-w> (hbv-lbv <q-w>downto</q-w> 0);  <q-m>-- high bits</q-m>
<a name="7448"><q-n>     7448  </q-n></a>    <q-w>variable</q-w> valuex : UNRESOLVED_ufixed (hbv <q-w>downto</q-w> lbv);
<a name="7449"><q-n>     7449  </q-n></a>    <q-w>variable</q-w> igood  : <q-t>BOOLEAN</q-w>;
<a name="7450"><q-n>     7450  </q-n></a>    <q-w>variable</q-w> i      : <q-t>INTEGER</q-w>;
<a name="7451"><q-n>     7451  </q-n></a>  <q-w>begin</q-w>
<a name="7452"><q-n>     7452  </q-n></a>    <q-a>VALUE</q-w> := (<q-a>VALUE</q-w>'<q-w>range</q-w> =&gt; 'U');
<a name="7453"><q-n>     7453  </q-n></a>    OREAD_common ( L =&gt; L,
<a name="7454"><q-n>     7454  </q-n></a>                   slv =&gt; slv,
<a name="7455"><q-n>     7455  </q-n></a>                   igood =&gt; igood,
<a name="7456"><q-n>     7456  </q-n></a>                   idex =&gt; i,
<a name="7457"><q-n>     7457  </q-n></a>                   bpoint =&gt; -lbv,
<a name="7458"><q-n>     7458  </q-n></a>                   message =&gt; false,
<a name="7459"><q-n>     7459  </q-n></a>                   smath =&gt; false);
<a name="7460"><q-n>     7460  </q-n></a>    <q-w>if</q-w> (igood <q-w>and</q-w>                   <q-m>-- We did not get another error</q-m>
<a name="7461"><q-n>     7461  </q-n></a>        (i = -1) <q-w>and</q-w>                <q-m>-- We read everything, and high bits 0</q-m>
<a name="7462"><q-n>     7462  </q-n></a>        (or_reduce (slv(hbv-lbv <q-w>downto</q-w> <q-a>VALUE</q-w>'<q-a>high</q-w>+1-lbv)) = '0')) <q-w>then</q-w>
<a name="7463"><q-n>     7463  </q-n></a>      valuex := to_ufixed (slv, hbv, lbv);
<a name="7464"><q-n>     7464  </q-n></a>      <q-a>VALUE</q-w>  := valuex (<q-a>VALUE</q-w>'<q-w>range</q-w>);
<a name="7465"><q-n>     7465  </q-n></a>      good := true;
<a name="7466"><q-n>     7466  </q-n></a>    <q-w>else</q-w>
<a name="7467"><q-n>     7467  </q-n></a>      good := false;
<a name="7468"><q-n>     7468  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7469"><q-n>     7469  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> OREAD;
<a name="7470"><q-n>     7470  </q-n></a>
<a name="7471"><q-n>     7471  </q-n></a>  <q-w>procedure</q-w> OREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="7472"><q-n>     7472  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_sfixed) <q-w>is</q-w>
<a name="7473"><q-n>     7473  </q-n></a>    <q-w>constant</q-w> hbv    : <q-t>INTEGER</q-w> := (((maximum(3, (<q-a>VALUE</q-w>'<q-a>high</q-w>+1))+2)/3)*3)-1;
<a name="7474"><q-n>     7474  </q-n></a>    <q-w>constant</q-w> lbv    : <q-t>INTEGER</q-w> := ((mine(0, <q-a>VALUE</q-w>'<q-a>low</q-w>)-2)/3)*3;
<a name="7475"><q-n>     7475  </q-n></a>    <q-w>variable</q-w> slv    : <q-t>STD_ULOGIC_VECTOR</q-w> (hbv-lbv <q-w>downto</q-w> 0);  <q-m>-- high bits</q-m>
<a name="7476"><q-n>     7476  </q-n></a>    <q-w>variable</q-w> valuex : UNRESOLVED_sfixed (hbv <q-w>downto</q-w> lbv);
<a name="7477"><q-n>     7477  </q-n></a>    <q-w>variable</q-w> igood  : <q-t>BOOLEAN</q-w>;
<a name="7478"><q-n>     7478  </q-n></a>    <q-w>variable</q-w> i      : <q-t>INTEGER</q-w>;
<a name="7479"><q-n>     7479  </q-n></a>  <q-w>begin</q-w>
<a name="7480"><q-n>     7480  </q-n></a>    <q-a>VALUE</q-w> := (<q-a>VALUE</q-w>'<q-w>range</q-w> =&gt; 'U');
<a name="7481"><q-n>     7481  </q-n></a>    OREAD_common ( L =&gt; L,
<a name="7482"><q-n>     7482  </q-n></a>                   slv =&gt; slv,
<a name="7483"><q-n>     7483  </q-n></a>                   igood =&gt; igood,
<a name="7484"><q-n>     7484  </q-n></a>                   idex =&gt; i,
<a name="7485"><q-n>     7485  </q-n></a>                   bpoint =&gt; -lbv,
<a name="7486"><q-n>     7486  </q-n></a>                   message =&gt; true,
<a name="7487"><q-n>     7487  </q-n></a>                   smath =&gt; true);
<a name="7488"><q-n>     7488  </q-n></a>    <q-w>if</q-w> igood <q-w>then</q-w>                       <q-m>-- We did not get another error</q-m>
<a name="7489"><q-n>     7489  </q-n></a>      <q-w>if</q-w> <q-w>not</q-w> ((i = -1) <q-w>and</q-w>               <q-m>-- We read everything</q-m>
<a name="7490"><q-n>     7490  </q-n></a>              ((slv(<q-a>VALUE</q-w>'<q-a>high</q-w>-lbv) = '0' <q-w>and</q-w>      <q-m>-- sign bits = extra bits</q-m>
<a name="7491"><q-n>     7491  </q-n></a>                or_reduce (slv(hbv-lbv <q-w>downto</q-w> <q-a>VALUE</q-w>'<q-a>high</q-w>+1-lbv)) = '0') <q-w>or</q-w>
<a name="7492"><q-n>     7492  </q-n></a>               (slv(<q-a>VALUE</q-w>'<q-a>high</q-w>-lbv) = '1' <q-w>and</q-w>
<a name="7493"><q-n>     7493  </q-n></a>                and_reduce (slv(hbv-lbv <q-w>downto</q-w> <q-a>VALUE</q-w>'<q-a>high</q-w>+1-lbv)) = '1'))) <q-w>then</q-w>
<a name="7494"><q-n>     7494  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="7495"><q-n>     7495  </q-n></a>          &amp; <q-l>"OREAD(sfixed): Vector truncated."</q-l>
<a name="7496"><q-n>     7496  </q-n></a>          <q-w>severity</q-w> error;
<a name="7497"><q-n>     7497  </q-n></a>      <q-w>else</q-w>
<a name="7498"><q-n>     7498  </q-n></a>        <q-w>if</q-w> (or_reduce (slv(<q-a>VALUE</q-w>'<q-a>low</q-w>-lbv-1 <q-w>downto</q-w> 0)) = '1') <q-w>then</q-w>
<a name="7499"><q-n>     7499  </q-n></a>          <q-w>assert</q-w> NO_WARNING
<a name="7500"><q-n>     7500  </q-n></a>            <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="7501"><q-n>     7501  </q-n></a>            &amp; <q-l>"OREAD(sfixed): Vector truncated"</q-l>
<a name="7502"><q-n>     7502  </q-n></a>            <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="7503"><q-n>     7503  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7504"><q-n>     7504  </q-n></a>        valuex := to_sfixed (slv, hbv, lbv);
<a name="7505"><q-n>     7505  </q-n></a>        <q-a>VALUE</q-w>  := valuex (<q-a>VALUE</q-w>'<q-w>range</q-w>);
<a name="7506"><q-n>     7506  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="7507"><q-n>     7507  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7508"><q-n>     7508  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> OREAD;
<a name="7509"><q-n>     7509  </q-n></a>
<a name="7510"><q-n>     7510  </q-n></a>  <q-w>procedure</q-w> OREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="7511"><q-n>     7511  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_sfixed;
<a name="7512"><q-n>     7512  </q-n></a>                  GOOD  : <q-a>out</q-w>   <q-t>BOOLEAN</q-w>) <q-w>is</q-w>
<a name="7513"><q-n>     7513  </q-n></a>    <q-w>constant</q-w> hbv    : <q-t>INTEGER</q-w> := (((maximum(3, (<q-a>VALUE</q-w>'<q-a>high</q-w>+1))+2)/3)*3)-1;
<a name="7514"><q-n>     7514  </q-n></a>    <q-w>constant</q-w> lbv    : <q-t>INTEGER</q-w> := ((mine(0, <q-a>VALUE</q-w>'<q-a>low</q-w>)-2)/3)*3;
<a name="7515"><q-n>     7515  </q-n></a>    <q-w>variable</q-w> slv    : <q-t>STD_ULOGIC_VECTOR</q-w> (hbv-lbv <q-w>downto</q-w> 0);  <q-m>-- high bits</q-m>
<a name="7516"><q-n>     7516  </q-n></a>    <q-w>variable</q-w> valuex : UNRESOLVED_sfixed (hbv <q-w>downto</q-w> lbv);
<a name="7517"><q-n>     7517  </q-n></a>    <q-w>variable</q-w> igood  : <q-t>BOOLEAN</q-w>;
<a name="7518"><q-n>     7518  </q-n></a>    <q-w>variable</q-w> i      : <q-t>INTEGER</q-w>;
<a name="7519"><q-n>     7519  </q-n></a>  <q-w>begin</q-w>
<a name="7520"><q-n>     7520  </q-n></a>    <q-a>VALUE</q-w> := (<q-a>VALUE</q-w>'<q-w>range</q-w> =&gt; 'U');
<a name="7521"><q-n>     7521  </q-n></a>    OREAD_common ( L =&gt; L,
<a name="7522"><q-n>     7522  </q-n></a>                   slv =&gt; slv,
<a name="7523"><q-n>     7523  </q-n></a>                   igood =&gt; igood,
<a name="7524"><q-n>     7524  </q-n></a>                   idex =&gt; i,
<a name="7525"><q-n>     7525  </q-n></a>                   bpoint =&gt; -lbv,
<a name="7526"><q-n>     7526  </q-n></a>                   message =&gt; false,
<a name="7527"><q-n>     7527  </q-n></a>                   smath =&gt; true);
<a name="7528"><q-n>     7528  </q-n></a>    <q-w>if</q-w> (igood                       <q-m>-- We did not get another error</q-m>
<a name="7529"><q-n>     7529  </q-n></a>        <q-w>and</q-w> (i = -1)                <q-m>-- We read everything</q-m>
<a name="7530"><q-n>     7530  </q-n></a>        <q-w>and</q-w> ((slv(<q-a>VALUE</q-w>'<q-a>high</q-w>-lbv) = '0' <q-w>and</q-w>  <q-m>-- sign bits = extra bits</q-m>
<a name="7531"><q-n>     7531  </q-n></a>              or_reduce (slv(hbv-lbv <q-w>downto</q-w> <q-a>VALUE</q-w>'<q-a>high</q-w>+1-lbv)) = '0') <q-w>or</q-w>
<a name="7532"><q-n>     7532  </q-n></a>             (slv(<q-a>VALUE</q-w>'<q-a>high</q-w>-lbv) = '1' <q-w>and</q-w>
<a name="7533"><q-n>     7533  </q-n></a>              and_reduce (slv(hbv-lbv <q-w>downto</q-w> <q-a>VALUE</q-w>'<q-a>high</q-w>+1-lbv)) = '1'))) <q-w>then</q-w>
<a name="7534"><q-n>     7534  </q-n></a>      valuex := to_sfixed (slv, hbv, lbv);
<a name="7535"><q-n>     7535  </q-n></a>      <q-a>VALUE</q-w>  := valuex (<q-a>VALUE</q-w>'<q-w>range</q-w>);
<a name="7536"><q-n>     7536  </q-n></a>      good := true;
<a name="7537"><q-n>     7537  </q-n></a>    <q-w>else</q-w>
<a name="7538"><q-n>     7538  </q-n></a>      good := false;
<a name="7539"><q-n>     7539  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7540"><q-n>     7540  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> OREAD;
<a name="7541"><q-n>     7541  </q-n></a>
<a name="7542"><q-n>     7542  </q-n></a>  <q-m>-- hex read and write</q-m>
<a name="7543"><q-n>     7543  </q-n></a>  <q-w>procedure</q-w> hwrite (
<a name="7544"><q-n>     7544  </q-n></a>    L         : <q-a>inout</q-w> <q-t>LINE</q-w>;               <q-m>-- input line</q-m>
<a name="7545"><q-n>     7545  </q-n></a>    <q-a>VALUE</q-w>     : <q-a>in</q-w>    UNRESOLVED_ufixed;  <q-m>-- fixed point input</q-m>
<a name="7546"><q-n>     7546  </q-n></a>    JUSTIFIED : <q-a>in</q-w>    SIDE  := <q-a>right</q-w>;
<a name="7547"><q-n>     7547  </q-n></a>    FIELD     : <q-a>in</q-w>    WIDTH := 0) <q-w>is</q-w>
<a name="7548"><q-n>     7548  </q-n></a>  <q-w>begin</q-w>  <q-m>-- Example 03.30</q-m>
<a name="7549"><q-n>     7549  </q-n></a>    write (L         =&gt; L,
<a name="7550"><q-n>     7550  </q-n></a>           <q-a>VALUE</q-w>     =&gt; to_hstring (<q-a>VALUE</q-w>),
<a name="7551"><q-n>     7551  </q-n></a>           JUSTIFIED =&gt; JUSTIFIED,
<a name="7552"><q-n>     7552  </q-n></a>           FIELD     =&gt; FIELD);
<a name="7553"><q-n>     7553  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> hwrite;
<a name="7554"><q-n>     7554  </q-n></a>
<a name="7555"><q-n>     7555  </q-n></a>  <q-m>-- purpose: writes fixed point into a line</q-m>
<a name="7556"><q-n>     7556  </q-n></a>  <q-w>procedure</q-w> hwrite (
<a name="7557"><q-n>     7557  </q-n></a>    L         : <q-a>inout</q-w> <q-t>LINE</q-w>;               <q-m>-- input line</q-m>
<a name="7558"><q-n>     7558  </q-n></a>    <q-a>VALUE</q-w>     : <q-a>in</q-w>    UNRESOLVED_sfixed;  <q-m>-- fixed point input</q-m>
<a name="7559"><q-n>     7559  </q-n></a>    JUSTIFIED : <q-a>in</q-w>    SIDE  := <q-a>right</q-w>;
<a name="7560"><q-n>     7560  </q-n></a>    FIELD     : <q-a>in</q-w>    WIDTH := 0) <q-w>is</q-w>
<a name="7561"><q-n>     7561  </q-n></a>  <q-w>begin</q-w>  <q-m>-- Example 03.30</q-m>
<a name="7562"><q-n>     7562  </q-n></a>    write (L         =&gt; L,
<a name="7563"><q-n>     7563  </q-n></a>           <q-a>VALUE</q-w>     =&gt; to_hstring (<q-a>VALUE</q-w>),
<a name="7564"><q-n>     7564  </q-n></a>           JUSTIFIED =&gt; JUSTIFIED,
<a name="7565"><q-n>     7565  </q-n></a>           FIELD     =&gt; FIELD);
<a name="7566"><q-n>     7566  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> hwrite;
<a name="7567"><q-n>     7567  </q-n></a>
<a name="7568"><q-n>     7568  </q-n></a>  <q-m>-- purpose: Routines common to the OREAD routines</q-m>
<a name="7569"><q-n>     7569  </q-n></a>  <q-w>procedure</q-w> HREAD_common (
<a name="7570"><q-n>     7570  </q-n></a>    L                : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="7571"><q-n>     7571  </q-n></a>    slv              : <q-a>out</q-w>   <q-t>STD_ULOGIC_VECTOR</q-w>;
<a name="7572"><q-n>     7572  </q-n></a>    igood            : <q-a>out</q-w>   <q-t>BOOLEAN</q-w>;
<a name="7573"><q-n>     7573  </q-n></a>    idex             : <q-a>out</q-w> <q-t>INTEGER</q-w>;
<a name="7574"><q-n>     7574  </q-n></a>    <q-w>constant</q-w> bpoint : <q-a>in</q-w> <q-t>INTEGER</q-w>;       <q-m>-- binary point</q-m>
<a name="7575"><q-n>     7575  </q-n></a>    <q-w>constant</q-w> message : <q-a>in</q-w>    <q-t>BOOLEAN</q-w>;
<a name="7576"><q-n>     7576  </q-n></a>    <q-w>constant</q-w> smath   : <q-a>in</q-w>    <q-t>BOOLEAN</q-w>) <q-w>is</q-w>
<a name="7577"><q-n>     7577  </q-n></a>
<a name="7578"><q-n>     7578  </q-n></a>    <q-m>-- purpose: error message routine</q-m>
<a name="7579"><q-n>     7579  </q-n></a>    <q-w>procedure</q-w> errmes (
<a name="7580"><q-n>     7580  </q-n></a>      <q-w>constant</q-w> mess : <q-a>in</q-w> <q-t>STRING</q-w>) <q-w>is</q-w>     <q-m>-- error message</q-m>
<a name="7581"><q-n>     7581  </q-n></a>    <q-w>begin</q-w>
<a name="7582"><q-n>     7582  </q-n></a>      <q-w>if</q-w> message <q-w>then</q-w>
<a name="7583"><q-n>     7583  </q-n></a>        <q-w>if</q-w> smath <q-w>then</q-w>
<a name="7584"><q-n>     7584  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="7585"><q-n>     7585  </q-n></a>            &amp; <q-l>"HREAD(sfixed) "</q-l>
<a name="7586"><q-n>     7586  </q-n></a>            &amp; mess
<a name="7587"><q-n>     7587  </q-n></a>            <q-w>severity</q-w> error;
<a name="7588"><q-n>     7588  </q-n></a>        <q-w>else</q-w>
<a name="7589"><q-n>     7589  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="7590"><q-n>     7590  </q-n></a>            &amp; <q-l>"HREAD(ufixed) "</q-l>
<a name="7591"><q-n>     7591  </q-n></a>            &amp; mess
<a name="7592"><q-n>     7592  </q-n></a>            <q-w>severity</q-w> error;
<a name="7593"><q-n>     7593  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7594"><q-n>     7594  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="7595"><q-n>     7595  </q-n></a>    <q-w>end</q-w> <q-w>procedure</q-w> errmes;
<a name="7596"><q-n>     7596  </q-n></a>    <q-w>variable</q-w> xgood : <q-t>BOOLEAN</q-w>;
<a name="7597"><q-n>     7597  </q-n></a>    <q-w>variable</q-w> nybble : <q-t>STD_ULOGIC_VECTOR</q-w> (3 <q-w>downto</q-w> 0);        <q-m>-- 4 bits</q-m>
<a name="7598"><q-n>     7598  </q-n></a>    <q-w>variable</q-w> c : <q-t>CHARACTER</q-w>;
<a name="7599"><q-n>     7599  </q-n></a>    <q-w>variable</q-w> i : <q-t>INTEGER</q-w>;
<a name="7600"><q-n>     7600  </q-n></a>    <q-w>variable</q-w> lastu  : <q-t>BOOLEAN</q-w> := false;       <q-m>-- last character was an "_"</q-m>
<a name="7601"><q-n>     7601  </q-n></a>    <q-w>variable</q-w> founddot : <q-t>BOOLEAN</q-w> := false;  <q-m>-- found a dot.</q-m>
<a name="7602"><q-n>     7602  </q-n></a>  <q-w>begin</q-w>
<a name="7603"><q-n>     7603  </q-n></a>    Skip_whitespace (L);   
<a name="7604"><q-n>     7604  </q-n></a>    <q-w>if</q-w> slv'<q-a>length</q-w> &gt; 0 <q-w>then</q-w>
<a name="7605"><q-n>     7605  </q-n></a>      i := slv'<q-a>high</q-w>;
<a name="7606"><q-n>     7606  </q-n></a>      read (l, c, xgood);
<a name="7607"><q-n>     7607  </q-n></a>      <q-w>while</q-w> i &gt; 0 <q-w>loop</q-w>
<a name="7608"><q-n>     7608  </q-n></a>        <q-w>if</q-w> xgood = false <q-w>then</q-w>
<a name="7609"><q-n>     7609  </q-n></a>          errmes (<q-l>"Error: end of string encountered"</q-l>);
<a name="7610"><q-n>     7610  </q-n></a>          <q-w>exit</q-w>;
<a name="7611"><q-n>     7611  </q-n></a>        <q-w>elsif</q-w> c = '_' <q-w>then</q-w>
<a name="7612"><q-n>     7612  </q-n></a>          <q-w>if</q-w> i = slv'<q-a>length</q-w> <q-w>then</q-w>
<a name="7613"><q-n>     7613  </q-n></a>            errmes (<q-l>"Error: String begins with an "</q-l><q-l>"_"</q-l><q-l>""</q-l>);
<a name="7614"><q-n>     7614  </q-n></a>            xgood := false;
<a name="7615"><q-n>     7615  </q-n></a>            <q-w>exit</q-w>;
<a name="7616"><q-n>     7616  </q-n></a>          <q-w>elsif</q-w> lastu <q-w>then</q-w>
<a name="7617"><q-n>     7617  </q-n></a>            errmes (<q-l>"Error: Two underscores detected in input string "</q-l><q-l>"__"</q-l><q-l>""</q-l>);
<a name="7618"><q-n>     7618  </q-n></a>            xgood := false;
<a name="7619"><q-n>     7619  </q-n></a>            <q-w>exit</q-w>;
<a name="7620"><q-n>     7620  </q-n></a>          <q-w>else</q-w>
<a name="7621"><q-n>     7621  </q-n></a>            lastu := true;
<a name="7622"><q-n>     7622  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7623"><q-n>     7623  </q-n></a>        <q-w>elsif</q-w> (c = '.') <q-w>then</q-w>
<a name="7624"><q-n>     7624  </q-n></a>          <q-w>if</q-w> (i + 1 /= bpoint) <q-w>then</q-w>
<a name="7625"><q-n>     7625  </q-n></a>            errmes (<q-l>"encountered "</q-l><q-l>"."</q-l><q-l>" at wrong index"</q-l>);
<a name="7626"><q-n>     7626  </q-n></a>            xgood := false;
<a name="7627"><q-n>     7627  </q-n></a>            <q-w>exit</q-w>;
<a name="7628"><q-n>     7628  </q-n></a>          <q-w>elsif</q-w> i = slv'<q-a>length</q-w> <q-w>then</q-w>
<a name="7629"><q-n>     7629  </q-n></a>            errmes (<q-l>"encounted a "</q-l><q-l>"."</q-l><q-l>" at the beginning of the line"</q-l>);
<a name="7630"><q-n>     7630  </q-n></a>            xgood := false;
<a name="7631"><q-n>     7631  </q-n></a>            <q-w>exit</q-w>;
<a name="7632"><q-n>     7632  </q-n></a>          <q-w>elsif</q-w> founddot <q-w>then</q-w>
<a name="7633"><q-n>     7633  </q-n></a>            errmes (<q-l>"Two "</q-l><q-l>"."</q-l><q-l>" encounted in input string"</q-l>);
<a name="7634"><q-n>     7634  </q-n></a>            xgood := false;
<a name="7635"><q-n>     7635  </q-n></a>            <q-w>exit</q-w>;
<a name="7636"><q-n>     7636  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7637"><q-n>     7637  </q-n></a>          founddot := true;
<a name="7638"><q-n>     7638  </q-n></a>          lastu := false;
<a name="7639"><q-n>     7639  </q-n></a>        <q-w>else</q-w>
<a name="7640"><q-n>     7640  </q-n></a>          Char2QuadBits(c, nybble, xgood, message);
<a name="7641"><q-n>     7641  </q-n></a>          <q-w>if</q-w> <q-w>not</q-w> xgood <q-w>then</q-w>
<a name="7642"><q-n>     7642  </q-n></a>            <q-w>exit</q-w>;
<a name="7643"><q-n>     7643  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7644"><q-n>     7644  </q-n></a>          slv (i <q-w>downto</q-w> i-3) := nybble;
<a name="7645"><q-n>     7645  </q-n></a>          i := i - 4;
<a name="7646"><q-n>     7646  </q-n></a>          lastu := false;
<a name="7647"><q-n>     7647  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;     
<a name="7648"><q-n>     7648  </q-n></a>        <q-w>if</q-w> i &gt; 0 <q-w>then</q-w>
<a name="7649"><q-n>     7649  </q-n></a>          read (L, c, xgood);
<a name="7650"><q-n>     7650  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7651"><q-n>     7651  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="7652"><q-n>     7652  </q-n></a>      idex := i;
<a name="7653"><q-n>     7653  </q-n></a>      igood := xgood;
<a name="7654"><q-n>     7654  </q-n></a>    <q-w>else</q-w>
<a name="7655"><q-n>     7655  </q-n></a>      idex := -1;
<a name="7656"><q-n>     7656  </q-n></a>      igood := true;                    <q-m>-- read null string</q-m>
<a name="7657"><q-n>     7657  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7658"><q-n>     7658  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> HREAD_common;
<a name="7659"><q-n>     7659  </q-n></a>
<a name="7660"><q-n>     7660  </q-n></a>  <q-w>procedure</q-w> HREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="7661"><q-n>     7661  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_ufixed) <q-w>is</q-w>
<a name="7662"><q-n>     7662  </q-n></a>    <q-w>constant</q-w> hbv    : <q-t>INTEGER</q-w> := (((maximum(4, (<q-a>VALUE</q-w>'<q-a>high</q-w>+1))+3)/4)*4)-1;
<a name="7663"><q-n>     7663  </q-n></a>    <q-w>constant</q-w> lbv    : <q-t>INTEGER</q-w> := ((mine(0, <q-a>VALUE</q-w>'<q-a>low</q-w>)-3)/4)*4;
<a name="7664"><q-n>     7664  </q-n></a>    <q-w>variable</q-w> slv    : <q-t>STD_ULOGIC_VECTOR</q-w> (hbv-lbv <q-w>downto</q-w> 0);  <q-m>-- high bits</q-m>
<a name="7665"><q-n>     7665  </q-n></a>    <q-w>variable</q-w> valuex : UNRESOLVED_ufixed (hbv <q-w>downto</q-w> lbv);
<a name="7666"><q-n>     7666  </q-n></a>    <q-w>variable</q-w> igood  : <q-t>BOOLEAN</q-w>;
<a name="7667"><q-n>     7667  </q-n></a>    <q-w>variable</q-w> i      : <q-t>INTEGER</q-w>;
<a name="7668"><q-n>     7668  </q-n></a>  <q-w>begin</q-w>
<a name="7669"><q-n>     7669  </q-n></a>    <q-a>VALUE</q-w> := (<q-a>VALUE</q-w>'<q-w>range</q-w> =&gt; 'U');
<a name="7670"><q-n>     7670  </q-n></a>    HREAD_common ( L =&gt; L,
<a name="7671"><q-n>     7671  </q-n></a>                   slv =&gt; slv,
<a name="7672"><q-n>     7672  </q-n></a>                   igood =&gt; igood,
<a name="7673"><q-n>     7673  </q-n></a>                   idex =&gt; i,
<a name="7674"><q-n>     7674  </q-n></a>                   bpoint =&gt; -lbv,
<a name="7675"><q-n>     7675  </q-n></a>                   message =&gt; false,
<a name="7676"><q-n>     7676  </q-n></a>                   smath =&gt; false);
<a name="7677"><q-n>     7677  </q-n></a>    <q-w>if</q-w> igood <q-w>then</q-w>
<a name="7678"><q-n>     7678  </q-n></a>      <q-w>if</q-w> <q-w>not</q-w> ((i = -1) <q-w>and</q-w>               <q-m>-- We read everything, and high bits 0</q-m>
<a name="7679"><q-n>     7679  </q-n></a>              (or_reduce (slv(hbv-lbv <q-w>downto</q-w> <q-a>VALUE</q-w>'<q-a>high</q-w>+1-lbv)) = '0')) <q-w>then</q-w>
<a name="7680"><q-n>     7680  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="7681"><q-n>     7681  </q-n></a>          &amp; <q-l>"HREAD(ufixed): Vector truncated."</q-l>
<a name="7682"><q-n>     7682  </q-n></a>          <q-w>severity</q-w> error;
<a name="7683"><q-n>     7683  </q-n></a>      <q-w>else</q-w>
<a name="7684"><q-n>     7684  </q-n></a>        <q-w>if</q-w> (or_reduce (slv(<q-a>VALUE</q-w>'<q-a>low</q-w>-lbv-1 <q-w>downto</q-w> 0)) = '1') <q-w>then</q-w>
<a name="7685"><q-n>     7685  </q-n></a>          <q-w>assert</q-w> NO_WARNING
<a name="7686"><q-n>     7686  </q-n></a>            <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="7687"><q-n>     7687  </q-n></a>            &amp; <q-l>"HREAD(ufixed): Vector truncated"</q-l>
<a name="7688"><q-n>     7688  </q-n></a>            <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="7689"><q-n>     7689  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7690"><q-n>     7690  </q-n></a>        valuex := to_ufixed (slv, hbv, lbv);
<a name="7691"><q-n>     7691  </q-n></a>        <q-a>VALUE</q-w>  := valuex (<q-a>VALUE</q-w>'<q-w>range</q-w>);
<a name="7692"><q-n>     7692  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="7693"><q-n>     7693  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7694"><q-n>     7694  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> HREAD;
<a name="7695"><q-n>     7695  </q-n></a>
<a name="7696"><q-n>     7696  </q-n></a>  <q-w>procedure</q-w> HREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="7697"><q-n>     7697  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_ufixed;
<a name="7698"><q-n>     7698  </q-n></a>                  GOOD  : <q-a>out</q-w>   <q-t>BOOLEAN</q-w>) <q-w>is</q-w>
<a name="7699"><q-n>     7699  </q-n></a>    <q-w>constant</q-w> hbv    : <q-t>INTEGER</q-w> := (((maximum(4, (<q-a>VALUE</q-w>'<q-a>high</q-w>+1))+3)/4)*4)-1;
<a name="7700"><q-n>     7700  </q-n></a>    <q-w>constant</q-w> lbv    : <q-t>INTEGER</q-w> := ((mine(0, <q-a>VALUE</q-w>'<q-a>low</q-w>)-3)/4)*4;
<a name="7701"><q-n>     7701  </q-n></a>    <q-w>variable</q-w> slv    : <q-t>STD_ULOGIC_VECTOR</q-w> (hbv-lbv <q-w>downto</q-w> 0);  <q-m>-- high bits</q-m>
<a name="7702"><q-n>     7702  </q-n></a>    <q-w>variable</q-w> valuex : UNRESOLVED_ufixed (hbv <q-w>downto</q-w> lbv);
<a name="7703"><q-n>     7703  </q-n></a>    <q-w>variable</q-w> igood  : <q-t>BOOLEAN</q-w>;
<a name="7704"><q-n>     7704  </q-n></a>    <q-w>variable</q-w> i      : <q-t>INTEGER</q-w>;
<a name="7705"><q-n>     7705  </q-n></a>  <q-w>begin</q-w>
<a name="7706"><q-n>     7706  </q-n></a>    <q-a>VALUE</q-w> := (<q-a>VALUE</q-w>'<q-w>range</q-w> =&gt; 'U');
<a name="7707"><q-n>     7707  </q-n></a>    HREAD_common ( L =&gt; L,
<a name="7708"><q-n>     7708  </q-n></a>                   slv =&gt; slv,
<a name="7709"><q-n>     7709  </q-n></a>                   igood =&gt; igood,
<a name="7710"><q-n>     7710  </q-n></a>                   idex =&gt; i,
<a name="7711"><q-n>     7711  </q-n></a>                   bpoint =&gt; -lbv,
<a name="7712"><q-n>     7712  </q-n></a>                   message =&gt; false,
<a name="7713"><q-n>     7713  </q-n></a>                   smath =&gt; false);
<a name="7714"><q-n>     7714  </q-n></a>    <q-w>if</q-w> (igood <q-w>and</q-w>                   <q-m>-- We did not get another error</q-m>
<a name="7715"><q-n>     7715  </q-n></a>        (i = -1) <q-w>and</q-w>                <q-m>-- We read everything, and high bits 0</q-m>
<a name="7716"><q-n>     7716  </q-n></a>        (or_reduce (slv(hbv-lbv <q-w>downto</q-w> <q-a>VALUE</q-w>'<q-a>high</q-w>+1-lbv)) = '0')) <q-w>then</q-w>
<a name="7717"><q-n>     7717  </q-n></a>      valuex := to_ufixed (slv, hbv, lbv);
<a name="7718"><q-n>     7718  </q-n></a>      <q-a>VALUE</q-w>  := valuex (<q-a>VALUE</q-w>'<q-w>range</q-w>);
<a name="7719"><q-n>     7719  </q-n></a>      good := true;
<a name="7720"><q-n>     7720  </q-n></a>    <q-w>else</q-w>
<a name="7721"><q-n>     7721  </q-n></a>      good := false;
<a name="7722"><q-n>     7722  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7723"><q-n>     7723  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> HREAD;
<a name="7724"><q-n>     7724  </q-n></a>
<a name="7725"><q-n>     7725  </q-n></a>  <q-w>procedure</q-w> HREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="7726"><q-n>     7726  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_sfixed) <q-w>is</q-w>
<a name="7727"><q-n>     7727  </q-n></a>    <q-w>constant</q-w> hbv    : <q-t>INTEGER</q-w> := (((maximum(4, (<q-a>VALUE</q-w>'<q-a>high</q-w>+1))+3)/4)*4)-1;
<a name="7728"><q-n>     7728  </q-n></a>    <q-w>constant</q-w> lbv    : <q-t>INTEGER</q-w> := ((mine(0, <q-a>VALUE</q-w>'<q-a>low</q-w>)-3)/4)*4;
<a name="7729"><q-n>     7729  </q-n></a>    <q-w>variable</q-w> slv    : <q-t>STD_ULOGIC_VECTOR</q-w> (hbv-lbv <q-w>downto</q-w> 0);  <q-m>-- high bits</q-m>
<a name="7730"><q-n>     7730  </q-n></a>    <q-w>variable</q-w> valuex : UNRESOLVED_sfixed (hbv <q-w>downto</q-w> lbv);
<a name="7731"><q-n>     7731  </q-n></a>    <q-w>variable</q-w> igood  : <q-t>BOOLEAN</q-w>;
<a name="7732"><q-n>     7732  </q-n></a>    <q-w>variable</q-w> i      : <q-t>INTEGER</q-w>;
<a name="7733"><q-n>     7733  </q-n></a>  <q-w>begin</q-w>
<a name="7734"><q-n>     7734  </q-n></a>    <q-a>VALUE</q-w> := (<q-a>VALUE</q-w>'<q-w>range</q-w> =&gt; 'U');
<a name="7735"><q-n>     7735  </q-n></a>    HREAD_common ( L =&gt; L,
<a name="7736"><q-n>     7736  </q-n></a>                   slv =&gt; slv,
<a name="7737"><q-n>     7737  </q-n></a>                   igood =&gt; igood,
<a name="7738"><q-n>     7738  </q-n></a>                   idex =&gt; i,
<a name="7739"><q-n>     7739  </q-n></a>                   bpoint =&gt; -lbv,
<a name="7740"><q-n>     7740  </q-n></a>                   message =&gt; true,
<a name="7741"><q-n>     7741  </q-n></a>                   smath =&gt; true);
<a name="7742"><q-n>     7742  </q-n></a>    <q-w>if</q-w> igood <q-w>then</q-w>                       <q-m>-- We did not get another error</q-m>
<a name="7743"><q-n>     7743  </q-n></a>      <q-w>if</q-w> <q-w>not</q-w> ((i = -1)                   <q-m>-- We read everything</q-m>
<a name="7744"><q-n>     7744  </q-n></a>              <q-w>and</q-w> ((slv(<q-a>VALUE</q-w>'<q-a>high</q-w>-lbv) = '0' <q-w>and</q-w>  <q-m>-- sign bits = extra bits</q-m>
<a name="7745"><q-n>     7745  </q-n></a>                    or_reduce (slv(hbv-lbv <q-w>downto</q-w> <q-a>VALUE</q-w>'<q-a>high</q-w>+1-lbv)) = '0') <q-w>or</q-w>
<a name="7746"><q-n>     7746  </q-n></a>                   (slv(<q-a>VALUE</q-w>'<q-a>high</q-w>-lbv) = '1' <q-w>and</q-w>
<a name="7747"><q-n>     7747  </q-n></a>                    and_reduce (slv(hbv-lbv <q-w>downto</q-w> <q-a>VALUE</q-w>'<q-a>high</q-w>+1-lbv)) = '1'))) <q-w>then</q-w>
<a name="7748"><q-n>     7748  </q-n></a>        <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="7749"><q-n>     7749  </q-n></a>          &amp; <q-l>"HREAD(sfixed): Vector truncated."</q-l>
<a name="7750"><q-n>     7750  </q-n></a>          <q-w>severity</q-w> error;
<a name="7751"><q-n>     7751  </q-n></a>      <q-w>else</q-w>
<a name="7752"><q-n>     7752  </q-n></a>        <q-w>if</q-w> (or_reduce (slv(<q-a>VALUE</q-w>'<q-a>low</q-w>-lbv-1 <q-w>downto</q-w> 0)) = '1') <q-w>then</q-w>
<a name="7753"><q-n>     7753  </q-n></a>          <q-w>assert</q-w> NO_WARNING
<a name="7754"><q-n>     7754  </q-n></a>            <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="7755"><q-n>     7755  </q-n></a>            &amp; <q-l>"HREAD(sfixed): Vector truncated"</q-l>
<a name="7756"><q-n>     7756  </q-n></a>            <q-w>severity</q-w> <q-w>warning</q-w>;
<a name="7757"><q-n>     7757  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7758"><q-n>     7758  </q-n></a>        valuex := to_sfixed (slv, hbv, lbv);
<a name="7759"><q-n>     7759  </q-n></a>        <q-a>VALUE</q-w>  := valuex (<q-a>VALUE</q-w>'<q-w>range</q-w>);
<a name="7760"><q-n>     7760  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="7761"><q-n>     7761  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7762"><q-n>     7762  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> HREAD;
<a name="7763"><q-n>     7763  </q-n></a>
<a name="7764"><q-n>     7764  </q-n></a>  <q-w>procedure</q-w> HREAD(L     : <q-a>inout</q-w> <q-t>LINE</q-w>;
<a name="7765"><q-n>     7765  </q-n></a>                  <q-a>VALUE</q-w> : <q-a>out</q-w>   UNRESOLVED_sfixed;
<a name="7766"><q-n>     7766  </q-n></a>                  GOOD  : <q-a>out</q-w>   <q-t>BOOLEAN</q-w>) <q-w>is</q-w>
<a name="7767"><q-n>     7767  </q-n></a>    <q-w>constant</q-w> hbv    : <q-t>INTEGER</q-w> := (((maximum(4, (<q-a>VALUE</q-w>'<q-a>high</q-w>+1))+3)/4)*4)-1;
<a name="7768"><q-n>     7768  </q-n></a>    <q-w>constant</q-w> lbv    : <q-t>INTEGER</q-w> := ((mine(0, <q-a>VALUE</q-w>'<q-a>low</q-w>)-3)/4)*4;
<a name="7769"><q-n>     7769  </q-n></a>    <q-w>variable</q-w> slv    : <q-t>STD_ULOGIC_VECTOR</q-w> (hbv-lbv <q-w>downto</q-w> 0);  <q-m>-- high bits</q-m>
<a name="7770"><q-n>     7770  </q-n></a>    <q-w>variable</q-w> valuex : UNRESOLVED_sfixed (hbv <q-w>downto</q-w> lbv);
<a name="7771"><q-n>     7771  </q-n></a>    <q-w>variable</q-w> igood  : <q-t>BOOLEAN</q-w>;
<a name="7772"><q-n>     7772  </q-n></a>    <q-w>variable</q-w> i      : <q-t>INTEGER</q-w>;
<a name="7773"><q-n>     7773  </q-n></a>  <q-w>begin</q-w>
<a name="7774"><q-n>     7774  </q-n></a>    <q-a>VALUE</q-w> := (<q-a>VALUE</q-w>'<q-w>range</q-w> =&gt; 'U');
<a name="7775"><q-n>     7775  </q-n></a>    HREAD_common ( L =&gt; L,
<a name="7776"><q-n>     7776  </q-n></a>                   slv =&gt; slv,
<a name="7777"><q-n>     7777  </q-n></a>                   igood =&gt; igood,
<a name="7778"><q-n>     7778  </q-n></a>                   idex =&gt; i,
<a name="7779"><q-n>     7779  </q-n></a>                   bpoint =&gt; -lbv,
<a name="7780"><q-n>     7780  </q-n></a>                   message =&gt; false,
<a name="7781"><q-n>     7781  </q-n></a>                   smath =&gt; true);
<a name="7782"><q-n>     7782  </q-n></a>    <q-w>if</q-w> (igood <q-w>and</q-w>                   <q-m>-- We did not get another error</q-m>
<a name="7783"><q-n>     7783  </q-n></a>        (i = -1) <q-w>and</q-w>                <q-m>-- We read everything</q-m>
<a name="7784"><q-n>     7784  </q-n></a>        ((slv(<q-a>VALUE</q-w>'<q-a>high</q-w>-lbv) = '0' <q-w>and</q-w>  <q-m>-- sign bits = extra bits</q-m>
<a name="7785"><q-n>     7785  </q-n></a>          or_reduce (slv(hbv-lbv <q-w>downto</q-w> <q-a>VALUE</q-w>'<q-a>high</q-w>+1-lbv)) = '0') <q-w>or</q-w>
<a name="7786"><q-n>     7786  </q-n></a>         (slv(<q-a>VALUE</q-w>'<q-a>high</q-w>-lbv) = '1' <q-w>and</q-w>
<a name="7787"><q-n>     7787  </q-n></a>          and_reduce (slv(hbv-lbv <q-w>downto</q-w> <q-a>VALUE</q-w>'<q-a>high</q-w>+1-lbv)) = '1'))) <q-w>then</q-w>
<a name="7788"><q-n>     7788  </q-n></a>      valuex := to_sfixed (slv, hbv, lbv);
<a name="7789"><q-n>     7789  </q-n></a>      <q-a>VALUE</q-w>  := valuex (<q-a>VALUE</q-w>'<q-w>range</q-w>);
<a name="7790"><q-n>     7790  </q-n></a>      good := true;
<a name="7791"><q-n>     7791  </q-n></a>    <q-w>else</q-w>
<a name="7792"><q-n>     7792  </q-n></a>      good := false;
<a name="7793"><q-n>     7793  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7794"><q-n>     7794  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> HREAD;
<a name="7795"><q-n>     7795  </q-n></a>
<a name="7796"><q-n>     7796  </q-n></a>  <q-w>function</q-w> to_string (<q-a>value</q-w> : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STRING</q-w> <q-w>is</q-w>
<a name="7797"><q-n>     7797  </q-n></a>    <q-w>variable</q-w> s     : <q-t>STRING</q-w>(1 <q-w>to</q-w> <q-a>value</q-w>'<q-a>length</q-w> +1) := (<q-w>others</q-w> =&gt; ' ');
<a name="7798"><q-n>     7798  </q-n></a>    <q-w>variable</q-w> subval : UNRESOLVED_ufixed (<q-a>value</q-w>'<q-a>high</q-w> <q-w>downto</q-w> -1);
<a name="7799"><q-n>     7799  </q-n></a>    <q-w>variable</q-w> sindx : <q-t>INTEGER</q-w>;
<a name="7800"><q-n>     7800  </q-n></a>  <q-w>begin</q-w>
<a name="7801"><q-n>     7801  </q-n></a>    <q-w>if</q-w> <q-a>value</q-w>'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="7802"><q-n>     7802  </q-n></a>      <q-w>return</q-w> NUS;
<a name="7803"><q-n>     7803  </q-n></a>    <q-w>else</q-w>
<a name="7804"><q-n>     7804  </q-n></a>      <q-w>if</q-w> <q-a>value</q-w>'<q-a>high</q-w> &lt; 0 <q-w>then</q-w>
<a name="7805"><q-n>     7805  </q-n></a>        <q-w>if</q-w> <q-a>value</q-w>(<q-a>value</q-w>'<q-a>high</q-w>) = 'Z' <q-w>then</q-w>
<a name="7806"><q-n>     7806  </q-n></a>          <q-w>return</q-w> to_string (resize (sfixed(<q-a>value</q-w>), 0, <q-a>value</q-w>'<q-a>low</q-w>));
<a name="7807"><q-n>     7807  </q-n></a>        <q-w>else</q-w>
<a name="7808"><q-n>     7808  </q-n></a>          <q-w>return</q-w> to_string (resize (<q-a>value</q-w>, 0, <q-a>value</q-w>'<q-a>low</q-w>));
<a name="7809"><q-n>     7809  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7810"><q-n>     7810  </q-n></a>      <q-w>elsif</q-w> <q-a>value</q-w>'<q-a>low</q-w> &gt;= 0 <q-w>then</q-w>
<a name="7811"><q-n>     7811  </q-n></a>        <q-w>if</q-w> Is_X (<q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>)) <q-w>then</q-w>
<a name="7812"><q-n>     7812  </q-n></a>          subval := (<q-w>others</q-w> =&gt; <q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>));
<a name="7813"><q-n>     7813  </q-n></a>          subval (<q-a>value</q-w>'<q-w>range</q-w>) := <q-a>value</q-w>;
<a name="7814"><q-n>     7814  </q-n></a>          <q-w>return</q-w> to_string(subval);
<a name="7815"><q-n>     7815  </q-n></a>        <q-w>else</q-w>
<a name="7816"><q-n>     7816  </q-n></a>          <q-w>return</q-w> to_string (resize (<q-a>value</q-w>, <q-a>value</q-w>'<q-a>high</q-w>, -1));
<a name="7817"><q-n>     7817  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7818"><q-n>     7818  </q-n></a>      <q-w>else</q-w>
<a name="7819"><q-n>     7819  </q-n></a>        sindx := 1;
<a name="7820"><q-n>     7820  </q-n></a>        <q-w>for</q-w> i <q-a>in</q-w> <q-a>value</q-w>'<q-a>high</q-w> <q-w>downto</q-w> <q-a>value</q-w>'<q-a>low</q-w> <q-w>loop</q-w>
<a name="7821"><q-n>     7821  </q-n></a>          <q-w>if</q-w> i = -1 <q-w>then</q-w>
<a name="7822"><q-n>     7822  </q-n></a>            s(sindx) := '.';
<a name="7823"><q-n>     7823  </q-n></a>            sindx    := sindx + 1;
<a name="7824"><q-n>     7824  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7825"><q-n>     7825  </q-n></a>          s(sindx) := MVL9_to_char(<q-t>STD_ULOGIC</q-w>(<q-a>value</q-w>(i)));
<a name="7826"><q-n>     7826  </q-n></a>          sindx    := sindx + 1;
<a name="7827"><q-n>     7827  </q-n></a>        <q-w>end</q-w> <q-w>loop</q-w>;
<a name="7828"><q-n>     7828  </q-n></a>        <q-w>return</q-w> s;
<a name="7829"><q-n>     7829  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="7830"><q-n>     7830  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7831"><q-n>     7831  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_string;
<a name="7832"><q-n>     7832  </q-n></a>
<a name="7833"><q-n>     7833  </q-n></a>  <q-w>function</q-w> to_string (<q-a>value</q-w> : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STRING</q-w> <q-w>is</q-w>
<a name="7834"><q-n>     7834  </q-n></a>    <q-w>variable</q-w> s     : <q-t>STRING</q-w>(1 <q-w>to</q-w> <q-a>value</q-w>'<q-a>length</q-w> + 1) := (<q-w>others</q-w> =&gt; ' ');
<a name="7835"><q-n>     7835  </q-n></a>    <q-w>variable</q-w> subval : UNRESOLVED_sfixed (<q-a>value</q-w>'<q-a>high</q-w> <q-w>downto</q-w> -1);
<a name="7836"><q-n>     7836  </q-n></a>    <q-w>variable</q-w> sindx : <q-t>INTEGER</q-w>;
<a name="7837"><q-n>     7837  </q-n></a>  <q-w>begin</q-w>
<a name="7838"><q-n>     7838  </q-n></a>    <q-w>if</q-w> <q-a>value</q-w>'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="7839"><q-n>     7839  </q-n></a>      <q-w>return</q-w> NUS;
<a name="7840"><q-n>     7840  </q-n></a>    <q-w>else</q-w>
<a name="7841"><q-n>     7841  </q-n></a>      <q-w>if</q-w> <q-a>value</q-w>'<q-a>high</q-w> &lt; 0 <q-w>then</q-w>
<a name="7842"><q-n>     7842  </q-n></a>        <q-w>return</q-w> to_string (resize (<q-a>value</q-w>, 0, <q-a>value</q-w>'<q-a>low</q-w>));
<a name="7843"><q-n>     7843  </q-n></a>      <q-w>elsif</q-w> <q-a>value</q-w>'<q-a>low</q-w> &gt;= 0 <q-w>then</q-w>
<a name="7844"><q-n>     7844  </q-n></a>        <q-w>if</q-w> Is_X (<q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>)) <q-w>then</q-w>
<a name="7845"><q-n>     7845  </q-n></a>          subval := (<q-w>others</q-w> =&gt; <q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>));
<a name="7846"><q-n>     7846  </q-n></a>          subval (<q-a>value</q-w>'<q-w>range</q-w>) := <q-a>value</q-w>;
<a name="7847"><q-n>     7847  </q-n></a>          <q-w>return</q-w> to_string(subval);
<a name="7848"><q-n>     7848  </q-n></a>        <q-w>else</q-w>
<a name="7849"><q-n>     7849  </q-n></a>          <q-w>return</q-w> to_string (resize (<q-a>value</q-w>, <q-a>value</q-w>'<q-a>high</q-w>, -1));
<a name="7850"><q-n>     7850  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7851"><q-n>     7851  </q-n></a>      <q-w>else</q-w>
<a name="7852"><q-n>     7852  </q-n></a>        sindx := 1;
<a name="7853"><q-n>     7853  </q-n></a>        <q-w>for</q-w> i <q-a>in</q-w> <q-a>value</q-w>'<q-a>high</q-w> <q-w>downto</q-w> <q-a>value</q-w>'<q-a>low</q-w> <q-w>loop</q-w>
<a name="7854"><q-n>     7854  </q-n></a>          <q-w>if</q-w> i = -1 <q-w>then</q-w>
<a name="7855"><q-n>     7855  </q-n></a>            s(sindx) := '.';
<a name="7856"><q-n>     7856  </q-n></a>            sindx    := sindx + 1;
<a name="7857"><q-n>     7857  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="7858"><q-n>     7858  </q-n></a>          s(sindx) := MVL9_to_char(<q-t>STD_ULOGIC</q-w>(<q-a>value</q-w>(i)));
<a name="7859"><q-n>     7859  </q-n></a>          sindx    := sindx + 1;
<a name="7860"><q-n>     7860  </q-n></a>        <q-w>end</q-w> <q-w>loop</q-w>;
<a name="7861"><q-n>     7861  </q-n></a>        <q-w>return</q-w> s;
<a name="7862"><q-n>     7862  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="7863"><q-n>     7863  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7864"><q-n>     7864  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_string;
<a name="7865"><q-n>     7865  </q-n></a>
<a name="7866"><q-n>     7866  </q-n></a>  <q-w>function</q-w> to_ostring (<q-a>value</q-w> : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STRING</q-w> <q-w>is</q-w>
<a name="7867"><q-n>     7867  </q-n></a>    <q-w>constant</q-w> lne  : <q-t>INTEGER</q-w> := (-<q-a>VALUE</q-w>'<q-a>low</q-w>+2)/3;
<a name="7868"><q-n>     7868  </q-n></a>    <q-w>variable</q-w> subval : UNRESOLVED_ufixed (<q-a>value</q-w>'<q-a>high</q-w> <q-w>downto</q-w> -3);
<a name="7869"><q-n>     7869  </q-n></a>    <q-w>variable</q-w> lpad : <q-t>STD_ULOGIC_VECTOR</q-w> (0 <q-w>to</q-w> (lne*3 + <q-a>VALUE</q-w>'<q-a>low</q-w>) -1);
<a name="7870"><q-n>     7870  </q-n></a>    <q-w>variable</q-w> slv : <q-t>STD_ULOGIC_VECTOR</q-w> (<q-a>value</q-w>'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="7871"><q-n>     7871  </q-n></a>  <q-w>begin</q-w>
<a name="7872"><q-n>     7872  </q-n></a>    <q-w>if</q-w> <q-a>value</q-w>'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="7873"><q-n>     7873  </q-n></a>      <q-w>return</q-w> NUS;
<a name="7874"><q-n>     7874  </q-n></a>    <q-w>else</q-w>
<a name="7875"><q-n>     7875  </q-n></a>      <q-w>if</q-w> <q-a>value</q-w>'<q-a>high</q-w> &lt; 0 <q-w>then</q-w>
<a name="7876"><q-n>     7876  </q-n></a>        <q-w>if</q-w> <q-a>value</q-w>(<q-a>value</q-w>'<q-a>high</q-w>) = 'Z' <q-w>then</q-w>
<a name="7877"><q-n>     7877  </q-n></a>          <q-w>return</q-w> to_ostring (resize (sfixed(<q-a>value</q-w>), 2, <q-a>value</q-w>'<q-a>low</q-w>));
<a name="7878"><q-n>     7878  </q-n></a>        <q-w>else</q-w>
<a name="7879"><q-n>     7879  </q-n></a>          <q-w>return</q-w> to_ostring (resize (<q-a>value</q-w>, 2, <q-a>value</q-w>'<q-a>low</q-w>));
<a name="7880"><q-n>     7880  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7881"><q-n>     7881  </q-n></a>      <q-w>elsif</q-w> <q-a>value</q-w>'<q-a>low</q-w> &gt;= 0 <q-w>then</q-w>
<a name="7882"><q-n>     7882  </q-n></a>        <q-w>if</q-w> Is_X (<q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>)) <q-w>then</q-w>
<a name="7883"><q-n>     7883  </q-n></a>          subval := (<q-w>others</q-w> =&gt; <q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>));
<a name="7884"><q-n>     7884  </q-n></a>          subval (<q-a>value</q-w>'<q-w>range</q-w>) := <q-a>value</q-w>;
<a name="7885"><q-n>     7885  </q-n></a>          <q-w>return</q-w> to_ostring(subval);
<a name="7886"><q-n>     7886  </q-n></a>        <q-w>else</q-w>
<a name="7887"><q-n>     7887  </q-n></a>          <q-w>return</q-w> to_ostring (resize (<q-a>value</q-w>, <q-a>value</q-w>'<q-a>high</q-w>, -3));
<a name="7888"><q-n>     7888  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7889"><q-n>     7889  </q-n></a>      <q-w>else</q-w>
<a name="7890"><q-n>     7890  </q-n></a>        slv := to_sulv (<q-a>value</q-w>);
<a name="7891"><q-n>     7891  </q-n></a>        <q-w>if</q-w> Is_X (<q-a>value</q-w> (<q-a>value</q-w>'<q-a>low</q-w>)) <q-w>then</q-w>
<a name="7892"><q-n>     7892  </q-n></a>          lpad := (<q-w>others</q-w> =&gt; <q-a>value</q-w> (<q-a>value</q-w>'<q-a>low</q-w>));
<a name="7893"><q-n>     7893  </q-n></a>        <q-w>else</q-w>
<a name="7894"><q-n>     7894  </q-n></a>          lpad := (<q-w>others</q-w> =&gt; '0');
<a name="7895"><q-n>     7895  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7896"><q-n>     7896  </q-n></a>        <q-w>return</q-w> to_ostring(slv(slv'<q-a>high</q-w> <q-w>downto</q-w> slv'<q-a>high</q-w>-<q-a>VALUE</q-w>'<q-a>high</q-w>))
<a name="7897"><q-n>     7897  </q-n></a>          &amp; <q-l>"."</q-l>
<a name="7898"><q-n>     7898  </q-n></a>          &amp; to_ostring(slv(slv'<q-a>high</q-w>-<q-a>VALUE</q-w>'<q-a>high</q-w>-1 <q-w>downto</q-w> 0) &amp; lpad);
<a name="7899"><q-n>     7899  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="7900"><q-n>     7900  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7901"><q-n>     7901  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ostring;
<a name="7902"><q-n>     7902  </q-n></a>
<a name="7903"><q-n>     7903  </q-n></a>  <q-w>function</q-w> to_hstring (<q-a>value</q-w> : UNRESOLVED_ufixed) <q-w>return</q-w> <q-t>STRING</q-w> <q-w>is</q-w>
<a name="7904"><q-n>     7904  </q-n></a>    <q-w>constant</q-w> lne  : <q-t>INTEGER</q-w> := (-<q-a>VALUE</q-w>'<q-a>low</q-w>+3)/4;
<a name="7905"><q-n>     7905  </q-n></a>    <q-w>variable</q-w> subval : UNRESOLVED_ufixed (<q-a>value</q-w>'<q-a>high</q-w> <q-w>downto</q-w> -4);
<a name="7906"><q-n>     7906  </q-n></a>    <q-w>variable</q-w> lpad : <q-t>STD_ULOGIC_VECTOR</q-w> (0 <q-w>to</q-w> (lne*4 + <q-a>VALUE</q-w>'<q-a>low</q-w>) -1);
<a name="7907"><q-n>     7907  </q-n></a>    <q-w>variable</q-w> slv : <q-t>STD_ULOGIC_VECTOR</q-w> (<q-a>value</q-w>'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="7908"><q-n>     7908  </q-n></a>  <q-w>begin</q-w>
<a name="7909"><q-n>     7909  </q-n></a>    <q-w>if</q-w> <q-a>value</q-w>'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="7910"><q-n>     7910  </q-n></a>      <q-w>return</q-w> NUS;
<a name="7911"><q-n>     7911  </q-n></a>    <q-w>else</q-w>
<a name="7912"><q-n>     7912  </q-n></a>      <q-w>if</q-w> <q-a>value</q-w>'<q-a>high</q-w> &lt; 0 <q-w>then</q-w>
<a name="7913"><q-n>     7913  </q-n></a>        <q-w>if</q-w> <q-a>value</q-w>(<q-a>value</q-w>'<q-a>high</q-w>) = 'Z' <q-w>then</q-w>
<a name="7914"><q-n>     7914  </q-n></a>          <q-w>return</q-w> to_hstring (resize (sfixed(<q-a>value</q-w>), 3, <q-a>value</q-w>'<q-a>low</q-w>));
<a name="7915"><q-n>     7915  </q-n></a>        <q-w>else</q-w>
<a name="7916"><q-n>     7916  </q-n></a>          <q-w>return</q-w> to_hstring (resize (<q-a>value</q-w>, 3, <q-a>value</q-w>'<q-a>low</q-w>));
<a name="7917"><q-n>     7917  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7918"><q-n>     7918  </q-n></a>      <q-w>elsif</q-w> <q-a>value</q-w>'<q-a>low</q-w> &gt;= 0 <q-w>then</q-w>
<a name="7919"><q-n>     7919  </q-n></a>        <q-w>if</q-w> Is_X (<q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>)) <q-w>then</q-w>
<a name="7920"><q-n>     7920  </q-n></a>          subval := (<q-w>others</q-w> =&gt; <q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>));
<a name="7921"><q-n>     7921  </q-n></a>          subval (<q-a>value</q-w>'<q-w>range</q-w>) := <q-a>value</q-w>;
<a name="7922"><q-n>     7922  </q-n></a>          <q-w>return</q-w> to_hstring(subval);
<a name="7923"><q-n>     7923  </q-n></a>        <q-w>else</q-w>
<a name="7924"><q-n>     7924  </q-n></a>          <q-w>return</q-w> to_hstring (resize (<q-a>value</q-w>, <q-a>value</q-w>'<q-a>high</q-w>, -4));
<a name="7925"><q-n>     7925  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7926"><q-n>     7926  </q-n></a>      <q-w>else</q-w>
<a name="7927"><q-n>     7927  </q-n></a>        slv := to_sulv (<q-a>value</q-w>);
<a name="7928"><q-n>     7928  </q-n></a>        <q-w>if</q-w> Is_X (<q-a>value</q-w> (<q-a>value</q-w>'<q-a>low</q-w>)) <q-w>then</q-w>
<a name="7929"><q-n>     7929  </q-n></a>          lpad := (<q-w>others</q-w> =&gt; <q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>));
<a name="7930"><q-n>     7930  </q-n></a>        <q-w>else</q-w>
<a name="7931"><q-n>     7931  </q-n></a>          lpad := (<q-w>others</q-w> =&gt; '0');
<a name="7932"><q-n>     7932  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7933"><q-n>     7933  </q-n></a>        <q-w>return</q-w> to_hstring(slv(slv'<q-a>high</q-w> <q-w>downto</q-w> slv'<q-a>high</q-w>-<q-a>VALUE</q-w>'<q-a>high</q-w>))
<a name="7934"><q-n>     7934  </q-n></a>          &amp; <q-l>"."</q-l>
<a name="7935"><q-n>     7935  </q-n></a>          &amp; to_hstring(slv(slv'<q-a>high</q-w>-<q-a>VALUE</q-w>'<q-a>high</q-w>-1 <q-w>downto</q-w> 0)&amp;lpad);
<a name="7936"><q-n>     7936  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="7937"><q-n>     7937  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7938"><q-n>     7938  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_hstring;
<a name="7939"><q-n>     7939  </q-n></a>
<a name="7940"><q-n>     7940  </q-n></a>  <q-w>function</q-w> to_ostring (<q-a>value</q-w> : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STRING</q-w> <q-w>is</q-w>
<a name="7941"><q-n>     7941  </q-n></a>    <q-w>constant</q-w> ne   : <q-t>INTEGER</q-w> := ((<q-a>value</q-w>'<q-a>high</q-w>+1)+2)/3;
<a name="7942"><q-n>     7942  </q-n></a>    <q-w>variable</q-w> pad  : <q-t>STD_ULOGIC_VECTOR</q-w>(0 <q-w>to</q-w> (ne*3 - (<q-a>value</q-w>'<q-a>high</q-w>+1)) - 1);
<a name="7943"><q-n>     7943  </q-n></a>    <q-w>constant</q-w> lne  : <q-t>INTEGER</q-w> := (-<q-a>VALUE</q-w>'<q-a>low</q-w>+2)/3;
<a name="7944"><q-n>     7944  </q-n></a>    <q-w>variable</q-w> subval : UNRESOLVED_sfixed (<q-a>value</q-w>'<q-a>high</q-w> <q-w>downto</q-w> -3);
<a name="7945"><q-n>     7945  </q-n></a>    <q-w>variable</q-w> lpad : <q-t>STD_ULOGIC_VECTOR</q-w> (0 <q-w>to</q-w> (lne*3 + <q-a>VALUE</q-w>'<q-a>low</q-w>) -1);
<a name="7946"><q-n>     7946  </q-n></a>    <q-w>variable</q-w> slv  : <q-t>STD_ULOGIC_VECTOR</q-w> (<q-a>VALUE</q-w>'<q-a>high</q-w> - <q-a>VALUE</q-w>'<q-a>low</q-w> <q-w>downto</q-w> 0);
<a name="7947"><q-n>     7947  </q-n></a>  <q-w>begin</q-w>
<a name="7948"><q-n>     7948  </q-n></a>    <q-w>if</q-w> <q-a>value</q-w>'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="7949"><q-n>     7949  </q-n></a>      <q-w>return</q-w> NUS;
<a name="7950"><q-n>     7950  </q-n></a>    <q-w>else</q-w>
<a name="7951"><q-n>     7951  </q-n></a>      <q-w>if</q-w> <q-a>value</q-w>'<q-a>high</q-w> &lt; 0 <q-w>then</q-w>
<a name="7952"><q-n>     7952  </q-n></a>        <q-w>return</q-w> to_ostring (resize (<q-a>value</q-w>, 2, <q-a>value</q-w>'<q-a>low</q-w>));
<a name="7953"><q-n>     7953  </q-n></a>      <q-w>elsif</q-w> <q-a>value</q-w>'<q-a>low</q-w> &gt;= 0 <q-w>then</q-w>
<a name="7954"><q-n>     7954  </q-n></a>        <q-w>if</q-w> Is_X (<q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>)) <q-w>then</q-w>
<a name="7955"><q-n>     7955  </q-n></a>          subval := (<q-w>others</q-w> =&gt; <q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>));
<a name="7956"><q-n>     7956  </q-n></a>          subval (<q-a>value</q-w>'<q-w>range</q-w>) := <q-a>value</q-w>;
<a name="7957"><q-n>     7957  </q-n></a>          <q-w>return</q-w> to_ostring(subval);
<a name="7958"><q-n>     7958  </q-n></a>        <q-w>else</q-w>
<a name="7959"><q-n>     7959  </q-n></a>          <q-w>return</q-w> to_ostring (resize (<q-a>value</q-w>, <q-a>value</q-w>'<q-a>high</q-w>, -3));
<a name="7960"><q-n>     7960  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7961"><q-n>     7961  </q-n></a>      <q-w>else</q-w>
<a name="7962"><q-n>     7962  </q-n></a>        pad := (<q-w>others</q-w> =&gt; <q-a>value</q-w>(<q-a>value</q-w>'<q-a>high</q-w>));
<a name="7963"><q-n>     7963  </q-n></a>        slv := to_sulv (<q-a>value</q-w>);
<a name="7964"><q-n>     7964  </q-n></a>        <q-w>if</q-w> Is_X (<q-a>value</q-w> (<q-a>value</q-w>'<q-a>low</q-w>)) <q-w>then</q-w>
<a name="7965"><q-n>     7965  </q-n></a>          lpad := (<q-w>others</q-w> =&gt; <q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>));
<a name="7966"><q-n>     7966  </q-n></a>        <q-w>else</q-w>
<a name="7967"><q-n>     7967  </q-n></a>          lpad := (<q-w>others</q-w> =&gt; '0');
<a name="7968"><q-n>     7968  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7969"><q-n>     7969  </q-n></a>        <q-w>return</q-w> to_ostring(pad &amp; slv(slv'<q-a>high</q-w> <q-w>downto</q-w> slv'<q-a>high</q-w>-<q-a>VALUE</q-w>'<q-a>high</q-w>))
<a name="7970"><q-n>     7970  </q-n></a>          &amp; <q-l>"."</q-l>
<a name="7971"><q-n>     7971  </q-n></a>          &amp; to_ostring(slv(slv'<q-a>high</q-w>-<q-a>VALUE</q-w>'<q-a>high</q-w>-1 <q-w>downto</q-w> 0) &amp; lpad);
<a name="7972"><q-n>     7972  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="7973"><q-n>     7973  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="7974"><q-n>     7974  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ostring;
<a name="7975"><q-n>     7975  </q-n></a>
<a name="7976"><q-n>     7976  </q-n></a>  <q-w>function</q-w> to_hstring (<q-a>value</q-w> : UNRESOLVED_sfixed) <q-w>return</q-w> <q-t>STRING</q-w> <q-w>is</q-w>
<a name="7977"><q-n>     7977  </q-n></a>    <q-w>constant</q-w> ne   : <q-t>INTEGER</q-w> := ((<q-a>value</q-w>'<q-a>high</q-w>+1)+3)/4;
<a name="7978"><q-n>     7978  </q-n></a>    <q-w>variable</q-w> pad  : <q-t>STD_ULOGIC_VECTOR</q-w>(0 <q-w>to</q-w> (ne*4 - (<q-a>value</q-w>'<q-a>high</q-w>+1)) - 1);
<a name="7979"><q-n>     7979  </q-n></a>    <q-w>constant</q-w> lne  : <q-t>INTEGER</q-w> := (-<q-a>VALUE</q-w>'<q-a>low</q-w>+3)/4;
<a name="7980"><q-n>     7980  </q-n></a>    <q-w>variable</q-w> subval : UNRESOLVED_sfixed (<q-a>value</q-w>'<q-a>high</q-w> <q-w>downto</q-w> -4);
<a name="7981"><q-n>     7981  </q-n></a>    <q-w>variable</q-w> lpad : <q-t>STD_ULOGIC_VECTOR</q-w> (0 <q-w>to</q-w> (lne*4 + <q-a>VALUE</q-w>'<q-a>low</q-w>) -1);
<a name="7982"><q-n>     7982  </q-n></a>    <q-w>variable</q-w> slv  : <q-t>STD_ULOGIC_VECTOR</q-w> (<q-a>value</q-w>'<q-a>length</q-w>-1 <q-w>downto</q-w> 0);
<a name="7983"><q-n>     7983  </q-n></a>  <q-w>begin</q-w>
<a name="7984"><q-n>     7984  </q-n></a>    <q-w>if</q-w> <q-a>value</q-w>'<q-a>length</q-w> &lt; 1 <q-w>then</q-w>
<a name="7985"><q-n>     7985  </q-n></a>      <q-w>return</q-w> NUS;
<a name="7986"><q-n>     7986  </q-n></a>    <q-w>else</q-w>
<a name="7987"><q-n>     7987  </q-n></a>      <q-w>if</q-w> <q-a>value</q-w>'<q-a>high</q-w> &lt; 0 <q-w>then</q-w>
<a name="7988"><q-n>     7988  </q-n></a>        <q-w>return</q-w> to_hstring (resize (<q-a>value</q-w>, 3, <q-a>value</q-w>'<q-a>low</q-w>));
<a name="7989"><q-n>     7989  </q-n></a>      <q-w>elsif</q-w> <q-a>value</q-w>'<q-a>low</q-w> &gt;= 0 <q-w>then</q-w>
<a name="7990"><q-n>     7990  </q-n></a>        <q-w>if</q-w> Is_X (<q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>)) <q-w>then</q-w>
<a name="7991"><q-n>     7991  </q-n></a>          subval := (<q-w>others</q-w> =&gt; <q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>));
<a name="7992"><q-n>     7992  </q-n></a>          subval (<q-a>value</q-w>'<q-w>range</q-w>) := <q-a>value</q-w>;
<a name="7993"><q-n>     7993  </q-n></a>          <q-w>return</q-w> to_hstring(subval);
<a name="7994"><q-n>     7994  </q-n></a>        <q-w>else</q-w>
<a name="7995"><q-n>     7995  </q-n></a>          <q-w>return</q-w> to_hstring (resize (<q-a>value</q-w>, <q-a>value</q-w>'<q-a>high</q-w>, -4));
<a name="7996"><q-n>     7996  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="7997"><q-n>     7997  </q-n></a>      <q-w>else</q-w>
<a name="7998"><q-n>     7998  </q-n></a>        slv := to_sulv (<q-a>value</q-w>);
<a name="7999"><q-n>     7999  </q-n></a>        pad := (<q-w>others</q-w> =&gt; <q-a>value</q-w>(<q-a>value</q-w>'<q-a>high</q-w>));
<a name="8000"><q-n>     8000  </q-n></a>        <q-w>if</q-w> Is_X (<q-a>value</q-w> (<q-a>value</q-w>'<q-a>low</q-w>)) <q-w>then</q-w>
<a name="8001"><q-n>     8001  </q-n></a>          lpad := (<q-w>others</q-w> =&gt; <q-a>value</q-w>(<q-a>value</q-w>'<q-a>low</q-w>));
<a name="8002"><q-n>     8002  </q-n></a>        <q-w>else</q-w>
<a name="8003"><q-n>     8003  </q-n></a>          lpad := (<q-w>others</q-w> =&gt; '0');
<a name="8004"><q-n>     8004  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="8005"><q-n>     8005  </q-n></a>        <q-w>return</q-w> to_hstring(pad &amp; slv(slv'<q-a>high</q-w> <q-w>downto</q-w> slv'<q-a>high</q-w>-<q-a>VALUE</q-w>'<q-a>high</q-w>))
<a name="8006"><q-n>     8006  </q-n></a>          &amp; <q-l>"."</q-l>
<a name="8007"><q-n>     8007  </q-n></a>          &amp; to_hstring(slv(slv'<q-a>high</q-w>-<q-a>VALUE</q-w>'<q-a>high</q-w>-1 <q-w>downto</q-w> 0) &amp; lpad);
<a name="8008"><q-n>     8008  </q-n></a>      <q-w>end</q-w> <q-w>if</q-w>;
<a name="8009"><q-n>     8009  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="8010"><q-n>     8010  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_hstring;
<a name="8011"><q-n>     8011  </q-n></a>
<a name="8012"><q-n>     8012  </q-n></a>  <q-m>-- From string functions allow you to convert a string into a fixed</q-m>
<a name="8013"><q-n>     8013  </q-n></a>  <q-m>-- point number.  Example:</q-m>
<a name="8014"><q-n>     8014  </q-n></a>  <q-m>--  signal uf1 : ufixed (3 downto -3);</q-m>
<a name="8015"><q-n>     8015  </q-n></a>  <q-m>--  uf1 &lt;= from_string ("0110.100", uf1'high, uf1'low); -- 6.5</q-m>
<a name="8016"><q-n>     8016  </q-n></a>  <q-m>-- The "." is optional in this syntax, however it exist and is</q-m>
<a name="8017"><q-n>     8017  </q-n></a>  <q-m>-- in the wrong location an error is produced.  Overflow will</q-m>
<a name="8018"><q-n>     8018  </q-n></a>  <q-m>-- result in saturation.</q-m>
<a name="8019"><q-n>     8019  </q-n></a>
<a name="8020"><q-n>     8020  </q-n></a>  <q-w>function</q-w> from_string (
<a name="8021"><q-n>     8021  </q-n></a>    bstring              : <q-t>STRING</q-w>;      <q-m>-- binary string</q-m>
<a name="8022"><q-n>     8022  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="8023"><q-n>     8023  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="8024"><q-n>     8024  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="8025"><q-n>     8025  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="8026"><q-n>     8026  </q-n></a>    <q-w>variable</q-w> L      : <q-t>LINE</q-w>;
<a name="8027"><q-n>     8027  </q-n></a>    <q-w>variable</q-w> good   : <q-t>BOOLEAN</q-w>;
<a name="8028"><q-n>     8028  </q-n></a>  <q-w>begin</q-w>
<a name="8029"><q-n>     8029  </q-n></a>    L := <q-w>new</q-w> <q-t>STRING</q-w>'(bstring);
<a name="8030"><q-n>     8030  </q-n></a>    read (L, result, good);
<a name="8031"><q-n>     8031  </q-n></a>    deallocate (L);
<a name="8032"><q-n>     8032  </q-n></a>    <q-w>assert</q-w> (good)
<a name="8033"><q-n>     8033  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="8034"><q-n>     8034  </q-n></a>      &amp; <q-l>"from_string: Bad string "</q-l>&amp; bstring <q-w>severity</q-w> error;
<a name="8035"><q-n>     8035  </q-n></a>    <q-w>return</q-w> result;
<a name="8036"><q-n>     8036  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_string;
<a name="8037"><q-n>     8037  </q-n></a>
<a name="8038"><q-n>     8038  </q-n></a>  <q-m>-- Octal and hex conversions work as follows:</q-m>
<a name="8039"><q-n>     8039  </q-n></a>  <q-m>-- uf1 &lt;= from_hstring ("6.8", 3, -3); -- 6.5 (bottom zeros dropped)</q-m>
<a name="8040"><q-n>     8040  </q-n></a>  <q-m>-- uf1 &lt;= from_ostring ("06.4", 3, -3); -- 6.5 (top zeros dropped)</q-m>
<a name="8041"><q-n>     8041  </q-n></a>  <q-w>function</q-w> from_ostring (
<a name="8042"><q-n>     8042  </q-n></a>    ostring              : <q-t>STRING</q-w>;      <q-m>-- Octal string</q-m>
<a name="8043"><q-n>     8043  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="8044"><q-n>     8044  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="8045"><q-n>     8045  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="8046"><q-n>     8046  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="8047"><q-n>     8047  </q-n></a>    <q-w>variable</q-w> L      : <q-t>LINE</q-w>;
<a name="8048"><q-n>     8048  </q-n></a>    <q-w>variable</q-w> good   : <q-t>BOOLEAN</q-w>;
<a name="8049"><q-n>     8049  </q-n></a>  <q-w>begin</q-w>
<a name="8050"><q-n>     8050  </q-n></a>    L := <q-w>new</q-w> <q-t>STRING</q-w>'(ostring);
<a name="8051"><q-n>     8051  </q-n></a>    oread (L, result, good);
<a name="8052"><q-n>     8052  </q-n></a>    deallocate (L);
<a name="8053"><q-n>     8053  </q-n></a>    <q-w>assert</q-w> (good)
<a name="8054"><q-n>     8054  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="8055"><q-n>     8055  </q-n></a>      &amp; <q-l>"from_ostring: Bad string "</q-l>&amp; ostring <q-w>severity</q-w> error;
<a name="8056"><q-n>     8056  </q-n></a>    <q-w>return</q-w> result;
<a name="8057"><q-n>     8057  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_ostring;
<a name="8058"><q-n>     8058  </q-n></a>
<a name="8059"><q-n>     8059  </q-n></a>  <q-w>function</q-w> from_hstring (
<a name="8060"><q-n>     8060  </q-n></a>    hstring              : <q-t>STRING</q-w>;      <q-m>-- hex string</q-m>
<a name="8061"><q-n>     8061  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="8062"><q-n>     8062  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="8063"><q-n>     8063  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="8064"><q-n>     8064  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_ufixed (left_index <q-w>downto</q-w> right_index);
<a name="8065"><q-n>     8065  </q-n></a>    <q-w>variable</q-w> L      : <q-t>LINE</q-w>;
<a name="8066"><q-n>     8066  </q-n></a>    <q-w>variable</q-w> good   : <q-t>BOOLEAN</q-w>;
<a name="8067"><q-n>     8067  </q-n></a>  <q-w>begin</q-w>
<a name="8068"><q-n>     8068  </q-n></a>    L := <q-w>new</q-w> <q-t>STRING</q-w>'(hstring);
<a name="8069"><q-n>     8069  </q-n></a>    hread (L, result, good);
<a name="8070"><q-n>     8070  </q-n></a>    deallocate (L);
<a name="8071"><q-n>     8071  </q-n></a>    <q-w>assert</q-w> (good)
<a name="8072"><q-n>     8072  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="8073"><q-n>     8073  </q-n></a>      &amp; <q-l>"from_hstring: Bad string "</q-l>&amp; hstring <q-w>severity</q-w> error;
<a name="8074"><q-n>     8074  </q-n></a>    <q-w>return</q-w> result;
<a name="8075"><q-n>     8075  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_hstring;
<a name="8076"><q-n>     8076  </q-n></a>  
<a name="8077"><q-n>     8077  </q-n></a>  <q-w>function</q-w> from_string (
<a name="8078"><q-n>     8078  </q-n></a>    bstring              : <q-t>STRING</q-w>;      <q-m>-- binary string</q-m>
<a name="8079"><q-n>     8079  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="8080"><q-n>     8080  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="8081"><q-n>     8081  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="8082"><q-n>     8082  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="8083"><q-n>     8083  </q-n></a>    <q-w>variable</q-w> L      : <q-t>LINE</q-w>;
<a name="8084"><q-n>     8084  </q-n></a>    <q-w>variable</q-w> good   : <q-t>BOOLEAN</q-w>;
<a name="8085"><q-n>     8085  </q-n></a>  <q-w>begin</q-w>
<a name="8086"><q-n>     8086  </q-n></a>    L := <q-w>new</q-w> <q-t>STRING</q-w>'(bstring);
<a name="8087"><q-n>     8087  </q-n></a>    read (L, result, good);
<a name="8088"><q-n>     8088  </q-n></a>    deallocate (L);
<a name="8089"><q-n>     8089  </q-n></a>    <q-w>assert</q-w> (good)
<a name="8090"><q-n>     8090  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="8091"><q-n>     8091  </q-n></a>      &amp; <q-l>"from_string: Bad string "</q-l>&amp; bstring <q-w>severity</q-w> error;
<a name="8092"><q-n>     8092  </q-n></a>    <q-w>return</q-w> result;
<a name="8093"><q-n>     8093  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_string;
<a name="8094"><q-n>     8094  </q-n></a>
<a name="8095"><q-n>     8095  </q-n></a>  <q-w>function</q-w> from_ostring (
<a name="8096"><q-n>     8096  </q-n></a>    ostring              : <q-t>STRING</q-w>;      <q-m>-- Octal string</q-m>
<a name="8097"><q-n>     8097  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="8098"><q-n>     8098  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="8099"><q-n>     8099  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="8100"><q-n>     8100  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="8101"><q-n>     8101  </q-n></a>    <q-w>variable</q-w> L      : <q-t>LINE</q-w>;
<a name="8102"><q-n>     8102  </q-n></a>    <q-w>variable</q-w> good   : <q-t>BOOLEAN</q-w>;
<a name="8103"><q-n>     8103  </q-n></a>  <q-w>begin</q-w>
<a name="8104"><q-n>     8104  </q-n></a>    L := <q-w>new</q-w> <q-t>STRING</q-w>'(ostring);
<a name="8105"><q-n>     8105  </q-n></a>    oread (L, result, good);
<a name="8106"><q-n>     8106  </q-n></a>    deallocate (L);
<a name="8107"><q-n>     8107  </q-n></a>    <q-w>assert</q-w> (good)
<a name="8108"><q-n>     8108  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="8109"><q-n>     8109  </q-n></a>      &amp; <q-l>"from_ostring: Bad string "</q-l>&amp; ostring <q-w>severity</q-w> error;
<a name="8110"><q-n>     8110  </q-n></a>    <q-w>return</q-w> result;
<a name="8111"><q-n>     8111  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_ostring;
<a name="8112"><q-n>     8112  </q-n></a>
<a name="8113"><q-n>     8113  </q-n></a>  <q-w>function</q-w> from_hstring (
<a name="8114"><q-n>     8114  </q-n></a>    hstring              : <q-t>STRING</q-w>;      <q-m>-- hex string</q-m>
<a name="8115"><q-n>     8115  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="8116"><q-n>     8116  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="8117"><q-n>     8117  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="8118"><q-n>     8118  </q-n></a>    <q-w>variable</q-w> result : UNRESOLVED_sfixed (left_index <q-w>downto</q-w> right_index);
<a name="8119"><q-n>     8119  </q-n></a>    <q-w>variable</q-w> L      : <q-t>LINE</q-w>;
<a name="8120"><q-n>     8120  </q-n></a>    <q-w>variable</q-w> good   : <q-t>BOOLEAN</q-w>;
<a name="8121"><q-n>     8121  </q-n></a>  <q-w>begin</q-w>
<a name="8122"><q-n>     8122  </q-n></a>    L := <q-w>new</q-w> <q-t>STRING</q-w>'(hstring);
<a name="8123"><q-n>     8123  </q-n></a>    hread (L, result, good);
<a name="8124"><q-n>     8124  </q-n></a>    deallocate (L);
<a name="8125"><q-n>     8125  </q-n></a>    <q-w>assert</q-w> (good)
<a name="8126"><q-n>     8126  </q-n></a>      <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="8127"><q-n>     8127  </q-n></a>      &amp; <q-l>"from_hstring: Bad string "</q-l>&amp; hstring <q-w>severity</q-w> error;
<a name="8128"><q-n>     8128  </q-n></a>    <q-w>return</q-w> result;
<a name="8129"><q-n>     8129  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_hstring;
<a name="8130"><q-n>     8130  </q-n></a>
<a name="8131"><q-n>     8131  </q-n></a>  <q-m>-- Same as above, "size_res" is used for it's range only.</q-m>
<a name="8132"><q-n>     8132  </q-n></a>  <q-w>function</q-w> from_string (
<a name="8133"><q-n>     8133  </q-n></a>    bstring  : <q-t>STRING</q-w>;                  <q-m>-- binary string</q-m>
<a name="8134"><q-n>     8134  </q-n></a>    size_res : UNRESOLVED_ufixed)
<a name="8135"><q-n>     8135  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="8136"><q-n>     8136  </q-n></a>  <q-w>begin</q-w>
<a name="8137"><q-n>     8137  </q-n></a>    <q-w>return</q-w> from_string (bstring, size_res'<q-a>high</q-w>, size_res'<q-a>low</q-w>);
<a name="8138"><q-n>     8138  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_string;
<a name="8139"><q-n>     8139  </q-n></a>
<a name="8140"><q-n>     8140  </q-n></a>  <q-w>function</q-w> from_ostring (
<a name="8141"><q-n>     8141  </q-n></a>    ostring  : <q-t>STRING</q-w>;                  <q-m>-- Octal string</q-m>
<a name="8142"><q-n>     8142  </q-n></a>    size_res : UNRESOLVED_ufixed)
<a name="8143"><q-n>     8143  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="8144"><q-n>     8144  </q-n></a>  <q-w>begin</q-w>
<a name="8145"><q-n>     8145  </q-n></a>    <q-w>return</q-w> from_ostring (ostring, size_res'<q-a>high</q-w>, size_res'<q-a>low</q-w>);
<a name="8146"><q-n>     8146  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_ostring;
<a name="8147"><q-n>     8147  </q-n></a>
<a name="8148"><q-n>     8148  </q-n></a>  <q-w>function</q-w> from_hstring (
<a name="8149"><q-n>     8149  </q-n></a>    hstring  : <q-t>STRING</q-w>;                  <q-m>-- hex string</q-m>
<a name="8150"><q-n>     8150  </q-n></a>    size_res : UNRESOLVED_ufixed)
<a name="8151"><q-n>     8151  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="8152"><q-n>     8152  </q-n></a>  <q-w>begin</q-w>
<a name="8153"><q-n>     8153  </q-n></a>    <q-w>return</q-w> from_hstring(hstring, size_res'<q-a>high</q-w>, size_res'<q-a>low</q-w>);
<a name="8154"><q-n>     8154  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_hstring;
<a name="8155"><q-n>     8155  </q-n></a>
<a name="8156"><q-n>     8156  </q-n></a>  <q-w>function</q-w> from_string (
<a name="8157"><q-n>     8157  </q-n></a>    bstring  : <q-t>STRING</q-w>;                  <q-m>-- binary string</q-m>
<a name="8158"><q-n>     8158  </q-n></a>    size_res : UNRESOLVED_sfixed)
<a name="8159"><q-n>     8159  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="8160"><q-n>     8160  </q-n></a>  <q-w>begin</q-w>
<a name="8161"><q-n>     8161  </q-n></a>    <q-w>return</q-w> from_string (bstring, size_res'<q-a>high</q-w>, size_res'<q-a>low</q-w>);
<a name="8162"><q-n>     8162  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_string;
<a name="8163"><q-n>     8163  </q-n></a>
<a name="8164"><q-n>     8164  </q-n></a>  <q-w>function</q-w> from_ostring (
<a name="8165"><q-n>     8165  </q-n></a>    ostring  : <q-t>STRING</q-w>;                  <q-m>-- Octal string</q-m>
<a name="8166"><q-n>     8166  </q-n></a>    size_res : UNRESOLVED_sfixed)
<a name="8167"><q-n>     8167  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="8168"><q-n>     8168  </q-n></a>  <q-w>begin</q-w>
<a name="8169"><q-n>     8169  </q-n></a>    <q-w>return</q-w> from_ostring (ostring, size_res'<q-a>high</q-w>, size_res'<q-a>low</q-w>);
<a name="8170"><q-n>     8170  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_ostring;
<a name="8171"><q-n>     8171  </q-n></a>
<a name="8172"><q-n>     8172  </q-n></a>  <q-w>function</q-w> from_hstring (
<a name="8173"><q-n>     8173  </q-n></a>    hstring  : <q-t>STRING</q-w>;                  <q-m>-- hex string</q-m>
<a name="8174"><q-n>     8174  </q-n></a>    size_res : UNRESOLVED_sfixed)
<a name="8175"><q-n>     8175  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="8176"><q-n>     8176  </q-n></a>  <q-w>begin</q-w>
<a name="8177"><q-n>     8177  </q-n></a>    <q-w>return</q-w> from_hstring (hstring, size_res'<q-a>high</q-w>, size_res'<q-a>low</q-w>);
<a name="8178"><q-n>     8178  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_hstring;
<a name="8179"><q-n>     8179  </q-n></a>
<a name="8180"><q-n>     8180  </q-n></a>  <q-m>-- purpose: Calculate the string boundaries</q-m>
<a name="8181"><q-n>     8181  </q-n></a>  <q-w>procedure</q-w> calculate_string_boundry (
<a name="8182"><q-n>     8182  </q-n></a>    arg         : <q-a>in</q-w>  <q-t>STRING</q-w>;           <q-m>-- input string</q-m>
<a name="8183"><q-n>     8183  </q-n></a>    left_index  : <q-a>out</q-w> <q-t>INTEGER</q-w>;          <q-m>-- left</q-m>
<a name="8184"><q-n>     8184  </q-n></a>    right_index : <q-a>out</q-w> <q-t>INTEGER</q-w>) <q-w>is</q-w>       <q-m>-- right</q-m>
<a name="8185"><q-n>     8185  </q-n></a>    <q-m>-- examples "10001.111" would return +4, -3</q-m>
<a name="8186"><q-n>     8186  </q-n></a>    <q-m>-- "07X.44" would return +2, -2 (then the octal routine would multiply)</q-m>
<a name="8187"><q-n>     8187  </q-n></a>    <q-m>-- "A_B_._C" would return +1, -1 (then the hex routine would multiply)</q-m>
<a name="8188"><q-n>     8188  </q-n></a>    <q-w>alias</q-w> xarg : <q-t>STRING</q-w> (arg'<q-a>length</q-w> <q-w>downto</q-w> 1) <q-w>is</q-w> arg;  <q-m>-- make it downto range</q-m>
<a name="8189"><q-n>     8189  </q-n></a>    <q-w>variable</q-w> l, r : <q-t>INTEGER</q-w>;            <q-m>-- internal indexes</q-m>
<a name="8190"><q-n>     8190  </q-n></a>    <q-w>variable</q-w> founddot : <q-t>BOOLEAN</q-w> := false;
<a name="8191"><q-n>     8191  </q-n></a>  <q-w>begin</q-w>
<a name="8192"><q-n>     8192  </q-n></a>    <q-w>if</q-w> arg'<q-a>length</q-w> &gt; 0 <q-w>then</q-w>
<a name="8193"><q-n>     8193  </q-n></a>      l := xarg'<q-a>high</q-w> - 1;
<a name="8194"><q-n>     8194  </q-n></a>      r := 0;
<a name="8195"><q-n>     8195  </q-n></a>      <q-w>for</q-w> i <q-a>in</q-w> xarg'<q-w>range</q-w> <q-w>loop</q-w>
<a name="8196"><q-n>     8196  </q-n></a>        <q-w>if</q-w> xarg(i) = '_' <q-w>then</q-w>
<a name="8197"><q-n>     8197  </q-n></a>          <q-w>if</q-w> r = 0 <q-w>then</q-w>
<a name="8198"><q-n>     8198  </q-n></a>            l := l - 1;
<a name="8199"><q-n>     8199  </q-n></a>          <q-w>else</q-w>
<a name="8200"><q-n>     8200  </q-n></a>            r := r + 1;
<a name="8201"><q-n>     8201  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="8202"><q-n>     8202  </q-n></a>        <q-w>elsif</q-w> xarg(i) = ' ' <q-w>or</q-w> xarg(i) = NBSP <q-w>or</q-w> xarg(i) = HT <q-w>then</q-w>
<a name="8203"><q-n>     8203  </q-n></a>          <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="8204"><q-n>     8204  </q-n></a>            &amp; <q-l>"Found a space in the input STRING "</q-l> &amp; xarg
<a name="8205"><q-n>     8205  </q-n></a>            <q-w>severity</q-w> error;
<a name="8206"><q-n>     8206  </q-n></a>        <q-w>elsif</q-w> xarg(i) = '.' <q-w>then</q-w>
<a name="8207"><q-n>     8207  </q-n></a>          <q-w>if</q-w> founddot <q-w>then</q-w>
<a name="8208"><q-n>     8208  </q-n></a>            <q-w>report</q-w> fixed_pkg'<q-a>instance_name</q-w>
<a name="8209"><q-n>     8209  </q-n></a>              &amp; <q-l>"Found two binary points in input string "</q-l> &amp; xarg
<a name="8210"><q-n>     8210  </q-n></a>              <q-w>severity</q-w> error;
<a name="8211"><q-n>     8211  </q-n></a>          <q-w>else</q-w>
<a name="8212"><q-n>     8212  </q-n></a>            l := l - i;
<a name="8213"><q-n>     8213  </q-n></a>            r := -i + 1;
<a name="8214"><q-n>     8214  </q-n></a>            founddot := true;
<a name="8215"><q-n>     8215  </q-n></a>          <q-w>end</q-w> <q-w>if</q-w>;
<a name="8216"><q-n>     8216  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="8217"><q-n>     8217  </q-n></a>      <q-w>end</q-w> <q-w>loop</q-w>;
<a name="8218"><q-n>     8218  </q-n></a>      left_index := l;
<a name="8219"><q-n>     8219  </q-n></a>      right_index := r;
<a name="8220"><q-n>     8220  </q-n></a>    <q-w>else</q-w>
<a name="8221"><q-n>     8221  </q-n></a>      left_index := 0;
<a name="8222"><q-n>     8222  </q-n></a>      right_index := 0;
<a name="8223"><q-n>     8223  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="8224"><q-n>     8224  </q-n></a>  <q-w>end</q-w> <q-w>procedure</q-w> calculate_string_boundry;
<a name="8225"><q-n>     8225  </q-n></a>
<a name="8226"><q-n>     8226  </q-n></a>  <q-m>-- Direct conversion functions.  Example:</q-m>
<a name="8227"><q-n>     8227  </q-n></a>  <q-m>--  signal uf1 : ufixed (3 downto -3);</q-m>
<a name="8228"><q-n>     8228  </q-n></a>  <q-m>--  uf1 &lt;= from_string ("0110.100"); -- 6.5</q-m>
<a name="8229"><q-n>     8229  </q-n></a>  <q-m>-- In this case the "." is not optional, and the size of</q-m>
<a name="8230"><q-n>     8230  </q-n></a>  <q-m>-- the output must match exactly.</q-m>
<a name="8231"><q-n>     8231  </q-n></a>  <q-w>function</q-w> from_string (
<a name="8232"><q-n>     8232  </q-n></a>    bstring : <q-t>STRING</q-w>)                      <q-m>-- binary string</q-m>
<a name="8233"><q-n>     8233  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="8234"><q-n>     8234  </q-n></a>    <q-w>variable</q-w> left_index, right_index : <q-t>INTEGER</q-w>;
<a name="8235"><q-n>     8235  </q-n></a>  <q-w>begin</q-w>
<a name="8236"><q-n>     8236  </q-n></a>    calculate_string_boundry (bstring, left_index, right_index);
<a name="8237"><q-n>     8237  </q-n></a>    <q-w>return</q-w> from_string (bstring, left_index, right_index);
<a name="8238"><q-n>     8238  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_string;
<a name="8239"><q-n>     8239  </q-n></a>
<a name="8240"><q-n>     8240  </q-n></a>  <q-m>-- Direct octal and hex conversion functions.  In this case</q-m>
<a name="8241"><q-n>     8241  </q-n></a>  <q-m>-- the string lengths must match.  Example:</q-m>
<a name="8242"><q-n>     8242  </q-n></a>  <q-m>-- signal sf1 := sfixed (5 downto -3);</q-m>
<a name="8243"><q-n>     8243  </q-n></a>  <q-m>-- sf1 &lt;= from_ostring ("71.4") -- -6.5</q-m>
<a name="8244"><q-n>     8244  </q-n></a>  <q-w>function</q-w> from_ostring (
<a name="8245"><q-n>     8245  </q-n></a>    ostring : <q-t>STRING</q-w>)                      <q-m>-- Octal string</q-m>
<a name="8246"><q-n>     8246  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="8247"><q-n>     8247  </q-n></a>    <q-w>variable</q-w> left_index, right_index : <q-t>INTEGER</q-w>;
<a name="8248"><q-n>     8248  </q-n></a>  <q-w>begin</q-w>
<a name="8249"><q-n>     8249  </q-n></a>    calculate_string_boundry (ostring, left_index, right_index);
<a name="8250"><q-n>     8250  </q-n></a>    <q-w>return</q-w> from_ostring (ostring, ((left_index+1)*3)-1, right_index*3);
<a name="8251"><q-n>     8251  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_ostring;
<a name="8252"><q-n>     8252  </q-n></a>
<a name="8253"><q-n>     8253  </q-n></a>  <q-w>function</q-w> from_hstring (
<a name="8254"><q-n>     8254  </q-n></a>    hstring : <q-t>STRING</q-w>)                      <q-m>-- hex string</q-m>
<a name="8255"><q-n>     8255  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="8256"><q-n>     8256  </q-n></a>    <q-w>variable</q-w> left_index, right_index : <q-t>INTEGER</q-w>;
<a name="8257"><q-n>     8257  </q-n></a>  <q-w>begin</q-w>
<a name="8258"><q-n>     8258  </q-n></a>    calculate_string_boundry (hstring, left_index, right_index);
<a name="8259"><q-n>     8259  </q-n></a>    <q-w>return</q-w> from_hstring (hstring, ((left_index+1)*4)-1, right_index*4);
<a name="8260"><q-n>     8260  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_hstring;
<a name="8261"><q-n>     8261  </q-n></a>
<a name="8262"><q-n>     8262  </q-n></a>  <q-w>function</q-w> from_string (
<a name="8263"><q-n>     8263  </q-n></a>    bstring : <q-t>STRING</q-w>)                      <q-m>-- binary string</q-m>
<a name="8264"><q-n>     8264  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="8265"><q-n>     8265  </q-n></a>    <q-w>variable</q-w> left_index, right_index : <q-t>INTEGER</q-w>;
<a name="8266"><q-n>     8266  </q-n></a>  <q-w>begin</q-w>
<a name="8267"><q-n>     8267  </q-n></a>    calculate_string_boundry (bstring, left_index, right_index);
<a name="8268"><q-n>     8268  </q-n></a>    <q-w>return</q-w> from_string (bstring, left_index, right_index);
<a name="8269"><q-n>     8269  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_string;
<a name="8270"><q-n>     8270  </q-n></a>
<a name="8271"><q-n>     8271  </q-n></a>  <q-w>function</q-w> from_ostring (
<a name="8272"><q-n>     8272  </q-n></a>    ostring : <q-t>STRING</q-w>)                      <q-m>-- Octal string</q-m>
<a name="8273"><q-n>     8273  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="8274"><q-n>     8274  </q-n></a>    <q-w>variable</q-w> left_index, right_index : <q-t>INTEGER</q-w>;
<a name="8275"><q-n>     8275  </q-n></a>  <q-w>begin</q-w>
<a name="8276"><q-n>     8276  </q-n></a>    calculate_string_boundry (ostring, left_index, right_index);
<a name="8277"><q-n>     8277  </q-n></a>    <q-w>return</q-w> from_ostring (ostring, ((left_index+1)*3)-1, right_index*3);
<a name="8278"><q-n>     8278  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_ostring;
<a name="8279"><q-n>     8279  </q-n></a>
<a name="8280"><q-n>     8280  </q-n></a>  <q-w>function</q-w> from_hstring (
<a name="8281"><q-n>     8281  </q-n></a>    hstring : <q-t>STRING</q-w>)                      <q-m>-- hex string</q-m>
<a name="8282"><q-n>     8282  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="8283"><q-n>     8283  </q-n></a>    <q-w>variable</q-w> left_index, right_index : <q-t>INTEGER</q-w>;
<a name="8284"><q-n>     8284  </q-n></a>  <q-w>begin</q-w>
<a name="8285"><q-n>     8285  </q-n></a>    calculate_string_boundry (hstring, left_index, right_index);
<a name="8286"><q-n>     8286  </q-n></a>    <q-w>return</q-w> from_hstring (hstring, ((left_index+1)*4)-1, right_index*4);
<a name="8287"><q-n>     8287  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> from_hstring;
<a name="8288"><q-n>     8288  </q-n></a><q-m>-- pragma synthesis_on</q-m>
<a name="8289"><q-n>     8289  </q-n></a><q-m>-- rtl_synthesis on</q-m>
<a name="8290"><q-n>     8290  </q-n></a>  <q-m>-- IN VHDL-2006 std_logic_vector is a subtype of std_ulogic_vector, so these</q-m>
<a name="8291"><q-n>     8291  </q-n></a>  <q-m>-- extra functions are needed for compatability.</q-m>
<a name="8292"><q-n>     8292  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="8293"><q-n>     8293  </q-n></a>    arg                  : <q-t>STD_LOGIC_VECTOR</q-w>;  <q-m>-- shifted vector</q-m>
<a name="8294"><q-n>     8294  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="8295"><q-n>     8295  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="8296"><q-n>     8296  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="8297"><q-n>     8297  </q-n></a>  <q-w>begin</q-w>
<a name="8298"><q-n>     8298  </q-n></a>    <q-w>return</q-w> to_ufixed (
<a name="8299"><q-n>     8299  </q-n></a>      arg =&gt; to_stdulogicvector (arg),
<a name="8300"><q-n>     8300  </q-n></a>      left_index =&gt; left_index,
<a name="8301"><q-n>     8301  </q-n></a>      right_index =&gt; right_index);
<a name="8302"><q-n>     8302  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ufixed;
<a name="8303"><q-n>     8303  </q-n></a>
<a name="8304"><q-n>     8304  </q-n></a>  <q-w>function</q-w> to_ufixed (
<a name="8305"><q-n>     8305  </q-n></a>    arg      : <q-t>STD_LOGIC_VECTOR</q-w>;       <q-m>-- shifted vector</q-m>
<a name="8306"><q-n>     8306  </q-n></a>    size_res : UNRESOLVED_ufixed)       <q-m>-- for size only</q-m>
<a name="8307"><q-n>     8307  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="8308"><q-n>     8308  </q-n></a>  <q-w>begin</q-w>
<a name="8309"><q-n>     8309  </q-n></a>    <q-w>return</q-w> to_ufixed (
<a name="8310"><q-n>     8310  </q-n></a>      arg =&gt; to_stdulogicvector (arg),
<a name="8311"><q-n>     8311  </q-n></a>      size_res =&gt; size_res);
<a name="8312"><q-n>     8312  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_ufixed;
<a name="8313"><q-n>     8313  </q-n></a>
<a name="8314"><q-n>     8314  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="8315"><q-n>     8315  </q-n></a>    arg                  : <q-t>STD_LOGIC_VECTOR</q-w>;  <q-m>-- shifted vector</q-m>
<a name="8316"><q-n>     8316  </q-n></a>    <q-w>constant</q-w> left_index  : <q-t>INTEGER</q-w>;
<a name="8317"><q-n>     8317  </q-n></a>    <q-w>constant</q-w> right_index : <q-t>INTEGER</q-w>)
<a name="8318"><q-n>     8318  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="8319"><q-n>     8319  </q-n></a>  <q-w>begin</q-w>
<a name="8320"><q-n>     8320  </q-n></a>    <q-w>return</q-w> to_sfixed (
<a name="8321"><q-n>     8321  </q-n></a>      arg =&gt; to_stdulogicvector (arg),
<a name="8322"><q-n>     8322  </q-n></a>      left_index =&gt; left_index,
<a name="8323"><q-n>     8323  </q-n></a>      right_index =&gt; right_index);
<a name="8324"><q-n>     8324  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_sfixed;
<a name="8325"><q-n>     8325  </q-n></a>
<a name="8326"><q-n>     8326  </q-n></a>  <q-w>function</q-w> to_sfixed (
<a name="8327"><q-n>     8327  </q-n></a>    arg      : <q-t>STD_LOGIC_VECTOR</q-w>;       <q-m>-- shifted vector</q-m>
<a name="8328"><q-n>     8328  </q-n></a>    size_res : UNRESOLVED_sfixed)       <q-m>-- for size only</q-m>
<a name="8329"><q-n>     8329  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="8330"><q-n>     8330  </q-n></a>  <q-w>begin</q-w>
<a name="8331"><q-n>     8331  </q-n></a>    <q-w>return</q-w> to_sfixed (
<a name="8332"><q-n>     8332  </q-n></a>      arg =&gt; to_stdulogicvector (arg),
<a name="8333"><q-n>     8333  </q-n></a>      size_res =&gt; size_res);
<a name="8334"><q-n>     8334  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_sfixed;
<a name="8335"><q-n>     8335  </q-n></a>
<a name="8336"><q-n>     8336  </q-n></a>  <q-m>-- unsigned fixed point</q-m>
<a name="8337"><q-n>     8337  </q-n></a>  <q-w>function</q-w> to_UFix (
<a name="8338"><q-n>     8338  </q-n></a>    arg      : <q-t>STD_LOGIC_VECTOR</q-w>;
<a name="8339"><q-n>     8339  </q-n></a>    width    : <q-t>NATURAL</q-w>;                 <q-m>-- width of vector</q-m>
<a name="8340"><q-n>     8340  </q-n></a>    fraction : <q-t>NATURAL</q-w>)                 <q-m>-- width of fraction</q-m>
<a name="8341"><q-n>     8341  </q-n></a>    <q-w>return</q-w> UNRESOLVED_ufixed <q-w>is</q-w>
<a name="8342"><q-n>     8342  </q-n></a>  <q-w>begin</q-w>
<a name="8343"><q-n>     8343  </q-n></a>    <q-w>return</q-w> to_UFix (
<a name="8344"><q-n>     8344  </q-n></a>      arg =&gt; to_stdulogicvector (arg),
<a name="8345"><q-n>     8345  </q-n></a>      width =&gt; width,
<a name="8346"><q-n>     8346  </q-n></a>      fraction =&gt; fraction);
<a name="8347"><q-n>     8347  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_UFix;
<a name="8348"><q-n>     8348  </q-n></a>
<a name="8349"><q-n>     8349  </q-n></a>  <q-m>-- signed fixed point</q-m>
<a name="8350"><q-n>     8350  </q-n></a>  <q-w>function</q-w> to_SFix (
<a name="8351"><q-n>     8351  </q-n></a>    arg      : <q-t>STD_LOGIC_VECTOR</q-w>;
<a name="8352"><q-n>     8352  </q-n></a>    width    : <q-t>NATURAL</q-w>;                 <q-m>-- width of vector</q-m>
<a name="8353"><q-n>     8353  </q-n></a>    fraction : <q-t>NATURAL</q-w>)                 <q-m>-- width of fraction</q-m>
<a name="8354"><q-n>     8354  </q-n></a>    <q-w>return</q-w> UNRESOLVED_sfixed <q-w>is</q-w>
<a name="8355"><q-n>     8355  </q-n></a>  <q-w>begin</q-w>
<a name="8356"><q-n>     8356  </q-n></a>    <q-w>return</q-w> to_SFix (
<a name="8357"><q-n>     8357  </q-n></a>      arg =&gt; to_stdulogicvector (arg),
<a name="8358"><q-n>     8358  </q-n></a>      width =&gt; width,
<a name="8359"><q-n>     8359  </q-n></a>      fraction =&gt; fraction);
<a name="8360"><q-n>     8360  </q-n></a>  <q-w>end</q-w> <q-w>function</q-w> to_SFix;
<a name="8361"><q-n>     8361  </q-n></a>
<a name="8362"><q-n>     8362  </q-n></a><q-w>end</q-w> <q-w>package</q-w> <q-w>body</q-w> fixed_pkg;
</pre>
</tt>

  
</body>
</html>
