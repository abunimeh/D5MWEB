
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>interface</q-w> axi4s_if(<q-w>input</q-w> <q-w>bit</q-w> ACLK,ARESET_N);
<a name="2"><q-n>     2  </q-n></a>    <q-w>parameter</q-w> DATA_BYTES = 16;
<a name="3"><q-n>     3  </q-n></a>	<q-w>logic</q-w> TVALID;	<q-m>// Master valid</q-m>
<a name="4"><q-n>     4  </q-n></a>	<q-w>logic</q-w> TLAST;	<q-m>// Master TLAST</q-m>
<a name="5"><q-n>     5  </q-n></a>	<q-w>logic</q-w> TREADY;	<q-m>// Slave ready</q-m>
<a name="6"><q-n>     6  </q-n></a>	<q-w>logic</q-w> [DATA_BYTES-1:0] TDATA;	<q-m>//-- Master data</q-m>
<a name="7"><q-n>     7  </q-n></a>	<q-w>logic</q-w> TUSER;	<q-m>//-- Master sideband signals</q-m>
<a name="8"><q-n>     8  </q-n></a>	<q-m>//--</q-m>
<a name="9"><q-n>     9  </q-n></a>    <q-m>//--DEBUG signals</q-m>
<a name="10"><q-n>     10  </q-n></a>    <q-m>//--</q-m>
<a name="11"><q-n>     11  </q-n></a>	<q-m>//logic [DATA_BYTES/16-1:0] DEBUG_VALIDS;		//-- contains the AX-VALID Flags</q-m>
<a name="12"><q-n>     12  </q-n></a>	<q-m>//logic [DATA_BYTES/16-1:0] DEBUG_HEADERS;	//-- contains the AX-HEADER Flags</q-m>
<a name="13"><q-n>     13  </q-n></a>	<q-m>//logic [DATA_BYTES/16-1:0] DEBUG_TAILS;		//-- contains the AX-TAIL Flags</q-m>
<a name="14"><q-n>     14  </q-n></a>	<q-m>////-- assigning the debug signals to TUSER</q-m>
<a name="15"><q-n>     15  </q-n></a>	<q-m>//assign DEBUG_VALIDS     = (DATA_BYTES /16)-1: (DATA_BYTES /16);</q-m>
<a name="16"><q-n>     16  </q-n></a>	<q-m>//assign DEBUG_HEADERS    = (DATA_BYTES /16)-1: (DATA_BYTES /16);</q-m>
<a name="17"><q-n>     17  </q-n></a>	<q-m>//assign DEBUG_TAILS      = (DATA_BYTES /16)-1: (DATA_BYTES /16);</q-m>
<a name="18"><q-n>     18  </q-n></a>	<q-m>//--</q-m>
<a name="19"><q-n>     19  </q-n></a>	<q-m>//-- Interface Coverage</q-m>
<a name="20"><q-n>     20  </q-n></a>	<q-m>//--</q-m>
<a name="21"><q-n>     21  </q-n></a>	<q-w>covergroup</q-w> axi4_cg @ (<q-a>posedge</q-w> ACLK);
<a name="22"><q-n>     22  </q-n></a>		option.per_instance = 1;
<a name="23"><q-n>     23  </q-n></a>		T_VALID : <q-w>coverpoint</q-w> TVALID;
<a name="24"><q-n>     24  </q-n></a>		T_READY : <q-w>coverpoint</q-w> TREADY;
<a name="25"><q-n>     25  </q-n></a>		<q-m>//-- cover the amount of consecutive AXI4 transactions</q-m>
<a name="26"><q-n>     26  </q-n></a>		CONSECUTIVE_TRANSACTIONS: <q-w>coverpoint</q-w> {TVALID , TREADY}{
<a name="27"><q-n>     27  </q-n></a>			<q-w>bins</q-w> transactions_single	= (0,1,2 =&gt;3			=&gt; 0,1,2);
<a name="28"><q-n>     28  </q-n></a>			<q-w>bins</q-w> transactions_1_5[] 	= (0,1,2 =&gt;3[*2:10] 	=&gt; 0,1,2);
<a name="29"><q-n>     29  </q-n></a>			<q-w>bins</q-w> transactions_11_50[] 	= (0,1,2 =&gt;3[*11:50]	=&gt; 0,1,2);
<a name="30"><q-n>     30  </q-n></a>			<q-w>bins</q-w> transactions_huge 		= (0,1,2 =&gt;3[*51:100000]=&gt; 0,1,2);
<a name="31"><q-n>     31  </q-n></a>		}
<a name="32"><q-n>     32  </q-n></a>		<q-m>//-- cover the waiting time after TVALID is set until TREADY in clock cycles</q-m>
<a name="33"><q-n>     33  </q-n></a>		TRANSACTION_WAITING: <q-w>coverpoint</q-w> {TVALID , TREADY}{
<a name="34"><q-n>     34  </q-n></a>			<q-w>bins</q-w> zero_waiting_time		= (0,1				=&gt; 3);
<a name="35"><q-n>     35  </q-n></a>			<q-w>bins</q-w> low_waiting_time[]		= (2[*1:5]			=&gt; 3);
<a name="36"><q-n>     36  </q-n></a>			<q-w>bins</q-w> medium_waiting_time[]	= (2[*6:15] 		=&gt; 3);
<a name="37"><q-n>     37  </q-n></a>			<q-w>bins</q-w> high_waiting_time		= (2[*16:100000] 	=&gt; 3);
<a name="38"><q-n>     38  </q-n></a>			<q-w>illegal_bins</q-w> illegal		= (2				=&gt; 0);
<a name="39"><q-n>     39  </q-n></a>		}
<a name="40"><q-n>     40  </q-n></a>		<q-m>//-- Pause between Transactions</q-m>
<a name="41"><q-n>     41  </q-n></a>		TRANSACTION_PAUSE: <q-w>coverpoint</q-w> {TVALID , TREADY}{
<a name="42"><q-n>     42  </q-n></a>			<q-w>bins</q-w> low_waiting_time[]		= (3 =&gt; 0[*1:5]		=&gt; 2,3);
<a name="43"><q-n>     43  </q-n></a>			<q-w>bins</q-w> medium_waiting_time[]	= (3 =&gt; 0[*6:15] 	=&gt; 2,3);
<a name="44"><q-n>     44  </q-n></a>			<q-w>bins</q-w> high_waiting_time		= (3 =&gt; 0[*16:100] 	=&gt; 2,3);
<a name="45"><q-n>     45  </q-n></a>		}
<a name="46"><q-n>     46  </q-n></a>		<q-m>//-- cover the time TREADY is active until deassertion or TVALID in clock cycles</q-m>
<a name="47"><q-n>     47  </q-n></a>		READY_WITHOUT_VALID: <q-w>coverpoint</q-w> {TVALID , TREADY}{
<a name="48"><q-n>     48  </q-n></a>			<q-w>bins</q-w> short_ready_time[]		= (1[*1:5]  	=&gt; 3,0);
<a name="49"><q-n>     49  </q-n></a>			<q-w>bins</q-w> medium_ready_time[]	= (1[*6:15] 	=&gt; 3,0);
<a name="50"><q-n>     50  </q-n></a>			<q-w>bins</q-w> high_ready_time		= (1[*16:100000]=&gt; 3,0);
<a name="51"><q-n>     51  </q-n></a>		}
<a name="52"><q-n>     52  </q-n></a>		<q-m>//--cover all available transitions of TVALID/TREADY</q-m>
<a name="53"><q-n>     53  </q-n></a>		CASES_VALID_READY : <q-w>cross</q-w> T_VALID, T_READY;
<a name="54"><q-n>     54  </q-n></a>		TRANSITIONS: <q-w>coverpoint</q-w> {TVALID, TREADY}{
<a name="55"><q-n>     55  </q-n></a>			<q-w>bins</q-w> transition[] = ( 0,1,3 =&gt; [0:3]), (2 =&gt; 2,3) ;
<a name="56"><q-n>     56  </q-n></a>		}
<a name="57"><q-n>     57  </q-n></a>		<q-m>//-- cover active VALID Flags</q-m>
<a name="58"><q-n>     58  </q-n></a>		<q-m>//VALID_FLAGS : coverpoint DEBUG_VALIDS;</q-m>
<a name="59"><q-n>     59  </q-n></a>		<q-m>//VALID_TRANSITIONS : coverpoint DEBUG_VALIDS {</q-m>
<a name="60"><q-n>     60  </q-n></a>		<q-m>//	bins transition [] = ( [1:(1&lt;&lt;($size(DEBUG_VALIDS))) -1] =&gt; [1:(1&lt;&lt;($size(DEBUG_VALIDS))) -1] );</q-m>
<a name="61"><q-n>     61  </q-n></a>		<q-m>//}</q-m>
<a name="62"><q-n>     62  </q-n></a>		<q-m>//-- cover active HEADER Flags</q-m>
<a name="63"><q-n>     63  </q-n></a>		<q-m>//HDR_FLAGS   : coverpoint DEBUG_HEADERS;</q-m>
<a name="64"><q-n>     64  </q-n></a>		<q-m>//HDR_TRANSITIONS : coverpoint DEBUG_HEADERS {</q-m>
<a name="65"><q-n>     65  </q-n></a>		<q-m>//	bins transition [] = ( [1:1&lt;&lt;($size(DEBUG_HEADERS)) -1] =&gt; [1:1&lt;&lt;($size(DEBUG_HEADERS)) -1] );</q-m>
<a name="66"><q-n>     66  </q-n></a>		<q-m>//}</q-m>
<a name="67"><q-n>     67  </q-n></a>		<q-m>////-- cover active TAIL Flags</q-m>
<a name="68"><q-n>     68  </q-n></a>		<q-m>//TAIL_FLAGS  : coverpoint DEBUG_TAILS;</q-m>
<a name="69"><q-n>     69  </q-n></a>		<q-m>//TAIL_TRANSITIONS : coverpoint DEBUG_TAILS {</q-m>
<a name="70"><q-n>     70  </q-n></a>		<q-m>//	bins transition [] = ( [1:1&lt;&lt;($size(DEBUG_TAILS)) -1] =&gt; [1:1&lt;&lt;($size(DEBUG_TAILS)) -1] );</q-m>
<a name="71"><q-n>     71  </q-n></a>		<q-m>//}</q-m>
<a name="72"><q-n>     72  </q-n></a>		<q-m>//CROSS_HDR_TAILS : cross HDR_FLAGS, TAIL_FLAGS;</q-m>
<a name="73"><q-n>     73  </q-n></a>		<q-m>//HDR_TAILS : coverpoint { DEBUG_HEADERS != {$size(DEBUG_HEADERS){1'b0}} ,DEBUG_TAILS != {$size(DEBUG_TAILS){1'b0}}   };</q-m>
<a name="74"><q-n>     74  </q-n></a>	<q-w>endgroup</q-w>
<a name="75"><q-n>     75  </q-n></a>	<q-m>//-- creating an instance of the covergroup</q-m>
<a name="76"><q-n>     76  </q-n></a>	axi4_cg axi4 = <q-w>new</q-w>();
<a name="77"><q-n>     77  </q-n></a>	<q-w>property</q-w> reset_synchronous_deassert_p;
<a name="78"><q-n>     78  </q-n></a>		@(<q-a>edge</q-w> ACLK)
<a name="79"><q-n>     79  </q-n></a>		!ARESET_N |-&gt; ARESET_N[-&gt;1];
<a name="80"><q-n>     80  </q-n></a>	<q-w>endproperty</q-w>
<a name="81"><q-n>     81  </q-n></a>	<q-m>// chk_reset_tvalid	: assert property (</q-m>
<a name="82"><q-n>     82  </q-n></a><q-m>//	 	//-- TVALID must be inactive during Reset</q-m>
<a name="83"><q-n>     83  </q-n></a><q-m>//	 	@(posedge ACLK)</q-m>
<a name="84"><q-n>     84  </q-n></a><q-m>//	 	!ARESET_N |-&gt; TVALID == 1'b0</q-m>
<a name="85"><q-n>     85  </q-n></a><q-m>//	 );</q-m>
<a name="86"><q-n>     86  </q-n></a>	chk_valid_hold 		: <q-w>assert</q-w> <q-w>property</q-w> (
<a name="87"><q-n>     87  </q-n></a>		<q-m>//-- if TVALID is set it must be active until TREADY</q-m>
<a name="88"><q-n>     88  </q-n></a>		@(<q-a>posedge</q-w> ACLK) <q-w>disable</q-w> <q-w>iff</q-w>(!ARESET_N)
<a name="89"><q-n>     89  </q-n></a>		(TVALID == 1 &amp;&amp; TREADY == 0) |=&gt; (TVALID==1)
<a name="90"><q-n>     90  </q-n></a>	);
<a name="91"><q-n>     91  </q-n></a>	<q-m>//chk_valid_headers 	: assert property (</q-m>
<a name="92"><q-n>     92  </q-n></a>	<q-m>//	//-- check if HEADER Flags are a subset of VALID Flags</q-m>
<a name="93"><q-n>     93  </q-n></a>	<q-m>//	@(posedge ACLK) disable iff (!ARESET_N)</q-m>
<a name="94"><q-n>     94  </q-n></a>	<q-m>//	(TVALID == 1'b1)    |-&gt; (DEBUG_VALIDS | DEBUG_HEADERS</q-m>
<a name="95"><q-n>     95  </q-n></a>	<q-m>//						  == DEBUG_VALIDS)</q-m>
<a name="96"><q-n>     96  </q-n></a>	<q-m>//);</q-m>
<a name="97"><q-n>     97  </q-n></a>	<q-m>//chk_valid_tails 	: assert property (</q-m>
<a name="98"><q-n>     98  </q-n></a>	<q-m>//	//-- check if TAIL Flags are a subset of VALID Flags</q-m>
<a name="99"><q-n>     99  </q-n></a>	<q-m>//	@(posedge ACLK) disable iff (!ARESET_N)</q-m>
<a name="100"><q-n>     100  </q-n></a>	<q-m>//	(TVALID == 1'b1)    |-&gt; (DEBUG_VALIDS | DEBUG_TAILS</q-m>
<a name="101"><q-n>     101  </q-n></a>	<q-m>//						  == DEBUG_VALIDS)</q-m>
<a name="102"><q-n>     102  </q-n></a>	<q-m>//);</q-m>
<a name="103"><q-n>     103  </q-n></a>	<q-m>//check_spanning_ax_pkts	: assert property (</q-m>
<a name="104"><q-n>     104  </q-n></a>	<q-m>//	//-- check that TVALID stays high if a ax_packet_transaction ranges over multiple axi cycles</q-m>
<a name="105"><q-n>     105  </q-n></a>	<q-m>//	//-- starts if more header than tails</q-m>
<a name="106"><q-n>     106  </q-n></a>	<q-m>//	//-- completes if more tails than header</q-m>
<a name="107"><q-n>     107  </q-n></a>	<q-m>//	@(posedge ACLK  )  disable iff (!ARESET_N)</q-m>
<a name="108"><q-n>     108  </q-n></a>	<q-m>//		(TVALID &amp;&amp;						( $countones(DEBUG_HEADERS) &gt; $countones(DEBUG_TAILS) ))</q-m>
<a name="109"><q-n>     109  </q-n></a>	<q-m>//		|=&gt;	(TVALID == 1) throughout 	( $countones(DEBUG_HEADERS) &lt; $countones(DEBUG_TAILS) )[-&gt;1]</q-m>
<a name="110"><q-n>     110  </q-n></a>	<q-m>//);</q-m>
<a name="111"><q-n>     111  </q-n></a>	<q-w>time</q-w> clk_rise;
<a name="112"><q-n>     112  </q-n></a>	<q-w>time</q-w> reset_rise;
<a name="113"><q-n>     113  </q-n></a>	<q-w>always</q-w> @(<q-a>posedge</q-w> ACLK) <q-w>begin</q-w>	
<a name="114"><q-n>     114  </q-n></a>		<q-w>if</q-w>(ARESET_N == 0)
<a name="115"><q-n>     115  </q-n></a>			clk_rise &lt;= $<q-w>time</q-w>();
<a name="116"><q-n>     116  </q-n></a>	<q-w>end</q-w>
<a name="117"><q-n>     117  </q-n></a>	<q-w>always</q-w> @(<q-a>posedge</q-w> ARESET_N) <q-w>begin</q-w>
<a name="118"><q-n>     118  </q-n></a>		reset_rise &lt;= $<q-w>time</q-w>();
<a name="119"><q-n>     119  </q-n></a>	<q-w>end</q-w>
<a name="120"><q-n>     120  </q-n></a>	<q-m>//TODO TODO ADD</q-m>
<a name="121"><q-n>     121  </q-n></a>	<q-m>// check_sync_reset : assert property (</q-m>
<a name="122"><q-n>     122  </q-n></a>	<q-m>// 	@(posedge ACLK)</q-m>
<a name="123"><q-n>     123  </q-n></a>	<q-m>// 	$rose(ARESET_N) |=&gt; (reset_rise == clk_rise)</q-m>
<a name="124"><q-n>     124  </q-n></a>	<q-m>// 	);</q-m>
<a name="125"><q-n>     125  </q-n></a>	<q-w>property</q-w> data_hold_p;
<a name="126"><q-n>     126  </q-n></a>		<q-m>//-- if TVALID is set TDATA must not be changed until TREADY</q-m>
<a name="127"><q-n>     127  </q-n></a>		<q-w>logic</q-w> [DATA_BYTES-1:0] m_data;
<a name="128"><q-n>     128  </q-n></a>		@(<q-a>posedge</q-w> ACLK) <q-w>disable</q-w> <q-w>iff</q-w>(!ARESET_N)
<a name="129"><q-n>     129  </q-n></a>			(TVALID == 1 &amp;&amp; TREADY == 0,m_data = TDATA) |=&gt; (TDATA == m_data);
<a name="130"><q-n>     130  </q-n></a>	<q-w>endproperty</q-w> : data_hold_p
<a name="131"><q-n>     131  </q-n></a>	<q-w>property</q-w> user_hold_p;
<a name="132"><q-n>     132  </q-n></a>		<q-m>//-- if TVALID is set TUSER must not be changed until TREADY</q-m>
<a name="133"><q-n>     133  </q-n></a>		<q-w>logic</q-w>  m_user;
<a name="134"><q-n>     134  </q-n></a>		@(<q-a>posedge</q-w> ACLK) <q-w>disable</q-w> <q-w>iff</q-w>(!ARESET_N)
<a name="135"><q-n>     135  </q-n></a>			(TVALID == 1 &amp;&amp; TREADY == 0,m_user = TUSER) |=&gt; (TUSER == m_user);
<a name="136"><q-n>     136  </q-n></a>	<q-w>endproperty</q-w> : user_hold_p
<a name="137"><q-n>     137  </q-n></a>	chk_data_hold 		: <q-w>assert</q-w> <q-w>property</q-w>(   data_hold_p);
<a name="138"><q-n>     138  </q-n></a>	chk_user_hold		: <q-w>assert</q-w> <q-w>property</q-w>(   user_hold_p);
<a name="139"><q-n>     139  </q-n></a>    <q-w>modport</q-w>      rx_channel (<q-w>input</q-w> ACLK,ARESET_N,TVALID,TUSER,TLAST,TDATA,<q-w>output</q-w> TREADY);
<a name="140"><q-n>     140  </q-n></a><q-w>endinterface</q-w> : axi4s_if</pre>
</tt>

  
</body>
</html>
