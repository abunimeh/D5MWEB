var g_sourceLines = [
'library ieee;',
'use ieee.std_logic_1164.all;',
'use ieee.numeric_std.all;',
'use work.constantspackage.all;',
'use work.vpfRecords.all;',
'use work.portspackage.all;',
'entity frameProcess is',
'generic (',
'    i_data_width            : integer := 8;',
'    s_data_width            : integer := 16;',
'    b_data_width            : integer := 32;',
'    img_width               : integer := 256;',
'    adwrWidth               : integer := 16;',
'    addrWidth               : integer := 12);',
'port (',
'    clk                     : in std_logic;',
'    rst_l                   : in std_logic;',
'    iRgbSet                 : in rRgb;',
'    --cpu side in',
'    iRgbCoord               : in region;',
'    iPoiRegion              : in poi;',
'    iKls                    : in coefficient;',
'    iAls                    : in coefficient;',
'    iLumTh                  : in integer;',
'    iHsvPerCh               : in integer;',
'    iYccPerCh               : in integer;',
'    iEdgeType               : in std_logic_vector(b_data_width-1 downto 0);',
'    iThreshold              : in std_logic_vector(s_data_width-1 downto 0); ',
'    --out',
'    oFrameData              : out fcolors;',
'    --to cpu',
'    oFifoStatus             : out std_logic_vector(b_data_width-1 downto 0);',
'    oGridLockData           : out std_logic_vector(b_data_width-1 downto 0));',
'end entity;',
'architecture arch of frameProcess is',
'    signal txCord           : coord;',
'    signal rgbV1Correct     : channel;',
'    signal rgbV2Correct     : channel;',
'    signal rgbIn            : channel;',
'    signal rgbRemix         : channel;',
'    signal rgbPoi           : channel;',
'    signal rgbDetect        : channel;',
'    signal hsv              : hsvChannel;',
'    signal hsl              : hslChannel;',
'    signal hsvCcBlur4vx     : hsvChannel;',
'    signal cord             : coord;',
'    signal syncxy           : coord;',
'    signal cordIn           : coord;',
'    signal rgbSum           : tpRgb;',
'    signal rgbImageKernelv1 : colors;',
'    signal rgbImageKernelv2 : colors;',
'    signal rgbImageKernelv3 : colors;',
'    signal rgbImageKernelv4 : colors;',
'    signal rgbImageKernelv5 : colors;',
'    signal iKcoeff          : kernelCoeff;',
'    signal rgbImageFilters  : frameColors;',
'    signal lumThreshold     : std_logic_vector(7 downto 0);',
'    signal cHsv             : std_logic_vector(2 downto 0);',
'    signal cYcc             : std_logic_vector(2 downto 0);',
'    signal edgeValid        : std_logic;',
'    signal rgbDetectLock    : std_logic;',
'    signal rgbPoiLock       : std_logic;',
'    signal sValid           : std_logic;',
'    -------------------------------------------------',
'    constant F_TES          : boolean := true;',
'    constant F_LUM          : boolean := false;',
'    constant F_TRM          : boolean := false;',
'    constant F_RGB          : boolean := true;',
'    constant F_SHP          : boolean := true;',
'    constant F_BLU          : boolean := false;',
'    constant F_EMB          : boolean := false;',
'    constant F_YCC          : boolean := false;',
'    constant F_SOB          : boolean := true;',
'    constant F_CGA          : boolean := true;',
'    constant F_HSV          : boolean := true;',
'    constant F_HSL          : boolean := true;',
'    -------------------------------------------------',
'    constant F_CGA_TO_CGA   : boolean := false;',
'    constant F_CGA_TO_HSL   : boolean := false;',
'    constant F_CGA_TO_HSV   : boolean := false;',
'    constant F_CGA_TO_YCC   : boolean := false;',
'    constant F_CGA_TO_SHP   : boolean := false;',
'    constant F_CGA_TO_BLU   : boolean := false;',
'    -------------------------------------------------',
'    constant F_SHP_TO_SHP   : boolean := false;',
'    constant F_SHP_TO_HSL   : boolean := false;',
'    constant F_SHP_TO_HSV   : boolean := false;',
'    constant F_SHP_TO_YCC   : boolean := false;',
'    constant F_SHP_TO_CGA   : boolean := false;',
'    constant F_SHP_TO_BLU   : boolean := false;',
'    -------------------------------------------------',
'    constant F_BLU_TO_BLU   : boolean := false;',
'    constant F_BLU_TO_HSL   : boolean := false;',
'    constant F_BLU_TO_HSV   : boolean := false;',
'    constant F_BLU_TO_YCC   : boolean := false;',
'    constant F_BLU_TO_CGA   : boolean := false;',
'    constant F_BLU_TO_SHP   : boolean := false;',
'    -------------------------------------------------',
'    constant MASK_TRUE      : boolean := true;',
'    constant MASK_FLSE      : boolean := false;',
'    constant M_SOB_LUM      : boolean := SelFrame(F_SOB,F_LUM,MASK_FLSE);',
'    constant M_SOB_TRM      : boolean := SelFrame(F_SOB,F_TRM,MASK_FLSE);',
'    constant M_SOB_RGB      : boolean := SelFrame(F_SOB,F_RGB,MASK_TRUE);',
'    constant M_SOB_SHP      : boolean := SelFrame(F_SOB,F_SHP,MASK_TRUE);',
'    constant M_SOB_BLU      : boolean := SelFrame(F_SOB,F_BLU,MASK_FLSE);',
'    constant M_SOB_YCC      : boolean := SelFrame(F_SOB,F_YCC,MASK_FLSE);',
'    constant M_SOB_CGA      : boolean := SelFrame(F_SOB,F_CGA,MASK_TRUE);',
'    constant M_SOB_HSV      : boolean := SelFrame(F_SOB,F_HSV,MASK_TRUE);',
'    constant M_SOB_HSL      : boolean := SelFrame(F_SOB,F_HSL,MASK_TRUE);',
'begin',
'    lumThreshold                 &lt;= std_logic_vector(to_unsigned(iLumTh,8));',
'    cHsv                         &lt;= std_logic_vector(to_unsigned(iHsvPerCh,3));--[0-cHsv,1-cHsvH,2-cHsvS,3-cHsvV]',
'    cYcc                         &lt;= std_logic_vector(to_unsigned(iYccPerCh,3));--[0-cYcc,1-cYccY,2-cYccB,3-cYccR]',
'    -------------------------------------------------',
'    oFrameData.sobel             &lt;= rgbImageFilters.sobel;',
'    oFrameData.embos             &lt;= rgbImageFilters.embos;',
'    oFrameData.blur              &lt;= rgbImageFilters.blur;',
'    oFrameData.sharp             &lt;= rgbImageFilters.sharp;',
'    oFrameData.cgain             &lt;= rgbImageFilters.cgain;',
'    oFrameData.ycbcr             &lt;= rgbImageFilters.ycbcr;',
'    oFrameData.hsl               &lt;= rgbImageFilters.hsl;',
'    oFrameData.hsv               &lt;= rgbImageFilters.hsv;',
'    oFrameData.inrgb             &lt;= rgbImageFilters.inrgb;',
'    oFrameData.maskSobelLum      &lt;= rgbImageFilters.maskSobelLum;',
'    oFrameData.maskSobelTrm      &lt;= rgbImageFilters.maskSobelTrm;',
'    oFrameData.maskSobelRgb      &lt;= rgbImageFilters.maskSobelRgb;',
'    oFrameData.maskSobelShp      &lt;= rgbImageFilters.maskSobelShp;',
'    oFrameData.maskSobelBlu      &lt;= rgbImageFilters.maskSobelBlu;',
'    oFrameData.maskSobelYcc      &lt;= rgbImageFilters.maskSobelYcc;',
'    oFrameData.maskSobelHsv      &lt;= rgbImageFilters.maskSobelHsv;',
'    oFrameData.maskSobelHsl      &lt;= rgbImageFilters.maskSobelHsl;',
'    oFrameData.maskSobelCga      &lt;= rgbImageFilters.maskSobelCga;',
'    oFrameData.colorTrm          &lt;= rgbImageFilters.colorTrm;',
'    oFrameData.colorLmp          &lt;= rgbImageFilters.colorLmp;',
'    oFrameData.tPattern          &lt;= rgbImageFilters.tPattern;',
'    oFrameData.cgainToCgain      &lt;= rgbImageFilters.cgainToCgain;',
'    oFrameData.cgainToHsl        &lt;= rgbImageFilters.cgainToHsl;',
'    oFrameData.cgainToHsv        &lt;= rgbImageFilters.cgainToHsv;',
'    oFrameData.cgainToYcbcr      &lt;= rgbImageFilters.cgainToYcbcr;',
'    oFrameData.cgainToShp        &lt;= rgbImageFilters.cgainToShp;',
'    oFrameData.cgainToBlu        &lt;= rgbImageFilters.cgainToBlu;',
'    oFrameData.shpToCgain        &lt;= rgbImageFilters.shpToCgain;',
'    oFrameData.shpToHsl          &lt;= rgbImageFilters.shpToHsl;',
'    oFrameData.shpToHsv          &lt;= rgbImageFilters.shpToHsv;',
'    oFrameData.shpToYcbcr        &lt;= rgbImageFilters.shpToYcbcr;',
'    oFrameData.shpToShp          &lt;= rgbImageFilters.shpToShp;',
'    oFrameData.shpToBlu          &lt;= rgbImageFilters.shpToBlu;',
'    oFrameData.bluToBlu          &lt;= rgbImageFilters.bluToBlu;',
'    oFrameData.bluToCga          &lt;= rgbImageFilters.bluToCga;',
'    oFrameData.bluToShp          &lt;= rgbImageFilters.bluToShp;',
'    oFrameData.bluToYcc          &lt;= rgbImageFilters.bluToYcc;',
'    oFrameData.bluToHsv          &lt;= rgbImageFilters.bluToHsv;',
'    oFrameData.bluToHsl          &lt;= rgbImageFilters.bluToHsl;',
'    oFrameData.bluToCgaShp       &lt;= rgbImageFilters.bluToCgaShp;',
'    oFrameData.bluToCgaShpYcc    &lt;= rgbImageFilters.bluToCgaShpYcc;',
'    oFrameData.bluToCgaShpHsv    &lt;= rgbImageFilters.bluToCgaShpHsv;',
'    oFrameData.bluToShpCga       &lt;= rgbImageFilters.bluToShpCga;',
'    oFrameData.bluToShpCgaYcc    &lt;= rgbImageFilters.bluToShpCgaYcc;',
'    oFrameData.bluToShpCgaHsv    &lt;= rgbImageFilters.bluToShpCgaHsv;',
'    oFrameData.rgbRemix          &lt;= rgbRemix;',
'    oFrameData.rgbDetect         &lt;= rgbDetect;',
'    oFrameData.rgbPoi            &lt;= rgbPoi;',
'    oFrameData.rgbSum            &lt;= rgbSum;',
'    oFrameData.rgbDetectLock     &lt;= rgbDetectLock;',
'    oFrameData.rgbPoiLock        &lt;= rgbPoiLock;',
'    oFrameData.cod               &lt;= syncxy;',
'    oFrameData.pEof              &lt;= iRgbSet.pEof;',
'    oFrameData.pSof              &lt;= iRgbSet.pSof;',
'    rgbIn.red                    &lt;= iRgbSet.red;',
'    rgbIn.green                  &lt;= iRgbSet.green;',
'    rgbIn.blue                   &lt;= iRgbSet.blue;',
'    rgbIn.valid                  &lt;= iRgbSet.valid;',
'    cordIn.x                     &lt;= iRgbSet.cord.x;',
'    cordIn.y                     &lt;= iRgbSet.cord.y;',
'    -------------------------------------------------',
'pipCoordP: process (clk) begin',
'    if rising_edge(clk) then',
'        syncxy          &lt;= cordIn;',
'        cord            &lt;= syncxy;',
'    end if;',
'end process pipCoordP;',
'    -------------------------------------------------',
'    iKcoeff.k1   &lt;= iKls.k1(15 downto 0);',
'    iKcoeff.k2   &lt;= iKls.k2(15 downto 0); ',
'    iKcoeff.k3   &lt;= iKls.k3(15 downto 0); ',
'    iKcoeff.k4   &lt;= iKls.k4(15 downto 0); ',
'    iKcoeff.k5   &lt;= iKls.k5(15 downto 0); ',
'    iKcoeff.k6   &lt;= iKls.k6(15 downto 0); ',
'    iKcoeff.k7   &lt;= iKls.k7(15 downto 0); ',
'    iKcoeff.k8   &lt;= iKls.k8(15 downto 0); ',
'    iKcoeff.k9   &lt;= iKls.k9(15 downto 0); ',
'    iKcoeff.kSet &lt;= iKls.config;',
'    -------------------------------------------------',
'FiltersInst: Filters',
'generic map(',
'    F_TES               =&gt;  F_TES,',
'    F_LUM               =&gt;  F_LUM,',
'    F_TRM               =&gt;  F_TRM,',
'    F_RGB               =&gt;  F_RGB,',
'    F_SHP               =&gt;  F_SHP,',
'    F_BLU               =&gt;  F_BLU,',
'    F_EMB               =&gt;  F_EMB,',
'    F_YCC               =&gt;  F_YCC,',
'    F_SOB               =&gt;  F_SOB,',
'    F_CGA               =&gt;  F_CGA,',
'    F_HSV               =&gt;  F_HSV,',
'    F_HSL               =&gt;  F_HSL,',
'    M_SOB_LUM           =&gt;  M_SOB_LUM,',
'    M_SOB_TRM           =&gt;  M_SOB_TRM,',
'    M_SOB_RGB           =&gt;  M_SOB_RGB,',
'    M_SOB_SHP           =&gt;  M_SOB_SHP,',
'    M_SOB_BLU           =&gt;  M_SOB_BLU,',
'    M_SOB_YCC           =&gt;  M_SOB_YCC,',
'    M_SOB_CGA           =&gt;  M_SOB_CGA,',
'    M_SOB_HSV           =&gt;  M_SOB_HSV,',
'    M_SOB_HSL           =&gt;  M_SOB_HSL,',
'    F_CGA_TO_CGA        =&gt;  F_CGA_TO_CGA,',
'    F_CGA_TO_HSL        =&gt;  F_CGA_TO_HSL,',
'    F_CGA_TO_HSV        =&gt;  F_CGA_TO_HSV,',
'    F_CGA_TO_YCC        =&gt;  F_CGA_TO_YCC,',
'    F_CGA_TO_SHP        =&gt;  F_CGA_TO_SHP,',
'    F_CGA_TO_BLU        =&gt;  F_CGA_TO_BLU,',
'    F_SHP_TO_SHP        =&gt;  F_SHP_TO_SHP,',
'    F_SHP_TO_HSL        =&gt;  F_SHP_TO_HSL,',
'    F_SHP_TO_HSV        =&gt;  F_SHP_TO_HSV,',
'    F_SHP_TO_YCC        =&gt;  F_SHP_TO_YCC,',
'    F_SHP_TO_CGA        =&gt;  F_SHP_TO_CGA,',
'    F_SHP_TO_BLU        =&gt;  F_SHP_TO_BLU,',
'    F_BLU_TO_BLU        =&gt;  F_BLU_TO_BLU,',
'    F_BLU_TO_HSL        =&gt;  F_BLU_TO_HSL,',
'    F_BLU_TO_HSV        =&gt;  F_BLU_TO_HSV,',
'    F_BLU_TO_YCC        =&gt;  F_BLU_TO_YCC,',
'    F_BLU_TO_CGA        =&gt;  F_BLU_TO_CGA,',
'    F_BLU_TO_SHP        =&gt;  F_BLU_TO_SHP,',
'    img_width           =&gt;  img_width,',
'    img_height          =&gt;  img_width + 100,',
'    s_data_width        =&gt;  s_data_width,',
'    i_data_width        =&gt;  i_data_width)',
'port map(',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    txCord              =&gt; cord,',
'    lumThreshold        =&gt; lumThreshold,',
'    iThreshold          =&gt; iThreshold,',
'    iRgb                =&gt; rgbIn,',
'    cHsv                =&gt; cHsv,',
'    cYcc                =&gt; cYcc,',
'    iKcoeff             =&gt; iKcoeff,',
'    edgeValid           =&gt; edgeValid,',
'    oRgb                =&gt; rgbImageFilters);',
'detectInst: detect',
'generic map(',
'    i_data_width        =&gt; i_data_width)',
'port map(',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    iRgb                =&gt; rgbIn,',
'    rgbCoord            =&gt; iRgbCoord,',
'    endOfFrame          =&gt; iRgbSet.pEof,',
'    iCord               =&gt; cord,',
'    pDetect             =&gt; rgbDetectLock,',
'    oRgb                =&gt; rgbDetect);',
'pointOfInterestInst: pointOfInterest',
'generic map(',
'    i_data_width        =&gt; i_data_width,',
'    s_data_width        =&gt; s_data_width,',
'    b_data_width        =&gt; b_data_width)',
'port map(',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    iRgb                =&gt; rgbIn,',
'    iCord               =&gt; cord,',
'    endOfFrame          =&gt; iRgbSet.pEof,',
'    gridLockDatao       =&gt; oGridLockData,',
'    pRegion             =&gt; iPoiRegion,',
'    fifoStatus          =&gt; oFifoStatus,',
'    oGridLocation       =&gt; rgbPoiLock,',
'    oRgb                =&gt; rgbPoi);',
'frameTestPatternInst: frameTestPattern',
'generic map(',
'    s_data_width        =&gt; s_data_width)',
'port map(   ',
'    clk                 =&gt; clk,',
'    iValid              =&gt; rgbIn.valid,',
'    iCord               =&gt; cord,',
'    oRgb                =&gt; rgbSum);',
'end architecture;'
];
countinueBuildStmtTable(g_sourceLines);
