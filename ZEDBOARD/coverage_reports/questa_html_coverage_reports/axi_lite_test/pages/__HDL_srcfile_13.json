var g_sourceLines = [
'library ieee;',
'use ieee.std_logic_1164.all;',
'use ieee.numeric_std.all;',
'use work.constantspackage.all;',
'use work.vpfrecords.all;',
'use work.portspackage.all;',
'entity Kernel is',
'generic (',
'    INRGB_FRAME        : boolean := false;',
'    RGBLP_FRAME        : boolean := false;',
'    RGBTR_FRAME        : boolean := false;',
'    SHARP_FRAME        : boolean := false;',
'    BLURE_FRAME        : boolean := false;',
'    EMBOS_FRAME        : boolean := false;',
'    YCBCR_FRAME        : boolean := false;',
'    SOBEL_FRAME        : boolean := false;',
'    CGAIN_FRAME        : boolean := false;',
'    CCGAIN_FRAME       : boolean := false;',
'    HSV_FRAME          : boolean := false;',
'    HSL_FRAME          : boolean := false;',
'    img_width          : integer := 4096;',
'    img_height         : integer := 4096;',
'    s_data_width       : integer := 16;',
'    i_data_width       : integer := 8);',
'port (',
'    clk                : in std_logic;',
'    rst_l              : in std_logic;',
'    lumThreshold       : in  std_logic_vector(i_data_width-1 downto 0);',
'    iThreshold         : in std_logic_vector(s_data_width-1 downto 0); ',
'    txCord             : in coord;',
'    iRgb               : in channel;',
'    iKcoeff            : in kernelCoeff;',
'    oEdgeValid         : out std_logic;',
'    oRgb               : out colors);',
'end Kernel;',
'architecture Behavioral of Kernel is',
'    signal rgbSyncValid    : std_logic_vector(15 downto 0)  := x"0000";',
'    signal rgbMac1         : channel := (valid =&gt; lo, red =&gt; black, green =&gt; black, blue =&gt; black);',
'    signal rgbMac2         : channel := (valid =&gt; lo, red =&gt; black, green =&gt; black, blue =&gt; black);',
'    signal rgbMac3         : channel := (valid =&gt; lo, red =&gt; black, green =&gt; black, blue =&gt; black);',
'    constant init_channel  : channel := (valid =&gt; lo, red =&gt; black, green =&gt; black, blue =&gt; black);',
'    signal kCoProd         : kCoefFiltFloat;',
'begin',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--CoefMult',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'CoefMultInst: CoefMult',
'port map (',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iKcoeff        =&gt; iKcoeff,',
'    oCoeffProd     =&gt; kCoProd);',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--rgbSync',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'process (clk) begin',
'    if rising_edge(clk) then',
'        rgbSyncValid(0)  &lt;= iRgb.valid;',
'        rgbSyncValid(1)  &lt;= rgbSyncValid(0);',
'        rgbSyncValid(2)  &lt;= rgbSyncValid(1);',
'        rgbSyncValid(3)  &lt;= rgbSyncValid(2);',
'        rgbSyncValid(4)  &lt;= rgbSyncValid(3);',
'        rgbSyncValid(5)  &lt;= rgbSyncValid(4);',
'        rgbSyncValid(6)  &lt;= rgbSyncValid(5);',
'        rgbSyncValid(7)  &lt;= rgbSyncValid(6);',
'        rgbSyncValid(8)  &lt;= rgbSyncValid(7);',
'        rgbSyncValid(9)  &lt;= rgbSyncValid(8);',
'        rgbSyncValid(10) &lt;= rgbSyncValid(9);',
'        rgbSyncValid(11) &lt;= rgbSyncValid(10);',
'        rgbSyncValid(12) &lt;= rgbSyncValid(11);',
'        rgbSyncValid(13) &lt;= rgbSyncValid(12);',
'        rgbSyncValid(14) &lt;= rgbSyncValid(13);',
'        rgbSyncValid(15) &lt;= rgbSyncValid(14);',
'    end if; ',
'end process;',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--TapsController',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'TPDATAWIDTH3_ENABLED: if ((SHARP_FRAME = TRUE) or (BLURE_FRAME = TRUE) or (EMBOS_FRAME = TRUE)) generate',
'    signal tp0        : std_logic_vector(23 downto 0) := (others =&gt; \'0\');',
'    signal tp1        : std_logic_vector(23 downto 0) := (others =&gt; \'0\');',
'    signal tp2        : std_logic_vector(23 downto 0) := (others =&gt; \'0\');',
'    signal tpValid    : std_logic  := lo;',
'begin',
'TapsControllerInst: TapsController',
'generic map(',
'    img_width    =&gt; img_width,',
'    tpDataWidth  =&gt; 24)',
'port map(',
'    clk          =&gt; clk,',
'    rst_l        =&gt; rst_l,',
'    iRgb         =&gt; iRgb,',
'    tpValid      =&gt; tpValid,',
'    tp0          =&gt; tp0,',
'    tp1          =&gt; tp1,',
'    tp2          =&gt; tp2);',
'process (clk,rst_l) begin',
'    if (rst_l = lo) then',
'        rgbMac1.red   &lt;= (others =&gt; \'0\');',
'        rgbMac1.green &lt;= (others =&gt; \'0\');',
'        rgbMac1.blue  &lt;= (others =&gt; \'0\');',
'        rgbMac1.valid &lt;= lo;',
'    elsif rising_edge(clk) then ',
'        rgbMac1.red   &lt;= tp0(23 downto 16);',
'        rgbMac1.green &lt;= tp1(23 downto 16);',
'        rgbMac1.blue  &lt;= tp2(23 downto 16);',
'        rgbMac1.valid &lt;= tpValid;',
'    end if; ',
'end process;',
'process (clk,rst_l) begin',
'    if (rst_l = lo) then',
'        rgbMac2.red   &lt;= (others =&gt; \'0\');',
'        rgbMac2.green &lt;= (others =&gt; \'0\');',
'        rgbMac2.blue  &lt;= (others =&gt; \'0\');',
'        rgbMac2.valid &lt;= lo;',
'    elsif rising_edge(clk) then ',
'        rgbMac2.red   &lt;= tp0(15 downto 8);',
'        rgbMac2.green &lt;= tp1(15 downto 8);',
'        rgbMac2.blue  &lt;= tp2(15 downto 8);',
'        rgbMac2.valid &lt;= tpValid;',
'    end if; ',
'end process;',
'process (clk,rst_l) begin',
'    if (rst_l = lo) then',
'        rgbMac3.red   &lt;= (others =&gt; \'0\');',
'        rgbMac3.green &lt;= (others =&gt; \'0\');',
'        rgbMac3.blue  &lt;= (others =&gt; \'0\');',
'        rgbMac3.valid &lt;= lo;',
'    elsif rising_edge(clk) then ',
'        rgbMac3.red   &lt;= tp0(7 downto 0);',
'        rgbMac3.green &lt;= tp1(7 downto 0);',
'        rgbMac3.blue  &lt;= tp2(7 downto 0);',
'        rgbMac3.valid &lt;= tpValid;',
'    end if; ',
'end process;',
'end generate TPDATAWIDTH3_ENABLED;',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--FILTERS: YCBCR',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'YCBCR_FRAME_ENABLE: if (YCBCR_FRAME = true) generate',
'signal ycbcr       : channel;',
'signal ycbcrSyn    : channel;',
'signal kCoeffYcbcr : kernelCoeDWord;',
'begin',
'process (clk) begin',
'    if (rising_edge (clk)) then',
'        if (kCoProd.kCoeffYcbcr.kSet = kCoefYcbcrIndex) then',
'            kCoeffYcbcr &lt;= kCoProd.kCoeffYcbcr;',
'        end if;',
'    end if; ',
'end process;',
'Kernel_Ycbcr_Inst: KernelCore',
'generic map(',
'    SHARP_FRAME   =&gt; false,',
'    BLURE_FRAME   =&gt; false,',
'    EMBOS_FRAME   =&gt; false,',
'    YCBCR_FRAME   =&gt; YCBCR_FRAME,',
'    SOBEL_FRAME   =&gt; false,',
'    CGAIN_FRAME   =&gt; false,',
'    img_width     =&gt; img_width,',
'    i_data_width  =&gt; i_data_width)',
'port map(',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iRgb           =&gt; iRgb,',
'    kCoeff         =&gt; kCoeffYcbcr,',
'    oRgb           =&gt; ycbcr);',
'    ycbcrSyn.red     &lt;=  ycbcr.red;',
'    ycbcrSyn.blue    &lt;=  ycbcr.blue;',
'    ycbcrSyn.green   &lt;=  ycbcr.green;',
'    ycbcrSyn.valid   &lt;=  rgbSyncValid(9);',
'SyncFramesInst: SyncFrames',
'generic map (',
'    pixelDelay   =&gt; 6)',
'port map(            ',
'    clk      =&gt; clk,',
'    reset    =&gt; rst_l,',
'    iRgb     =&gt; ycbcrSyn,',
'    oRgb     =&gt; oRgb.ycbcr);',
'end generate YCBCR_FRAME_ENABLE;',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--FILTERS: CGAIN',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'CGAIN_FRAME_ENABLE: if (CGAIN_FRAME = true or CCGAIN_FRAME = true) generate',
'signal c1gain          : channel;',
'signal cgain1Syn       : channel;',
'signal cgain2Syn       : channel;',
'signal c2gain          : channel;',
'signal kCofC1gain      : kernelCoeDWord;',
'signal kCofC2gain      : kernelCoeDWord;',
'begin',
'CGAIN_FRAME_KSET_ENABLE: if (CGAIN_FRAME = true and CCGAIN_FRAME = false) generate',
'kCoeffCgainP:process (clk) begin',
'    if (rising_edge (clk)) then',
'        if (kCoProd.kCoeffCgain.kSet = kCoefCgainIndex) then',
'            kCofC1gain &lt;= kCoProd.kCoeffCgain;',
'        end if;',
'    end if; ',
'end process kCoeffCgainP;',
'Kernel1CgainInst: KernelCore',
'generic map(',
'    SHARP_FRAME   =&gt; false,',
'    BLURE_FRAME   =&gt; false,',
'    EMBOS_FRAME   =&gt; false,',
'    YCBCR_FRAME   =&gt; false,',
'    SOBEL_FRAME   =&gt; false,',
'    CGAIN_FRAME   =&gt; CGAIN_FRAME,',
'    img_width     =&gt; img_width,',
'    i_data_width  =&gt; i_data_width)',
'port map(',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iRgb           =&gt; iRgb,',
'    kCoeff         =&gt; kCofC1gain,',
'    oRgb           =&gt; c1gain);',
'    cgain1Syn.red   &lt;=  c1gain.red;',
'    cgain1Syn.blue  &lt;=  c1gain.blue;',
'    cgain1Syn.green &lt;=  c1gain.green;',
'    cgain1Syn.valid &lt;=  rgbSyncValid(9);',
'SyncFramesInst: SyncFrames',
'generic map (',
'    pixelDelay   =&gt; 6)',
'port map(            ',
'    clk      =&gt; clk,',
'    reset    =&gt; rst_l,',
'    iRgb     =&gt; cgain1Syn,',
'    oRgb     =&gt; oRgb.cgain);',
'end generate CGAIN_FRAME_KSET_ENABLE;',
'CCGAIN_FRAME_KSET_ENABLE: if (CGAIN_FRAME = false and CCGAIN_FRAME = true) generate',
'kCoeffCcgainP:process (clk) begin',
'    if (rising_edge (clk)) then',
'        if (kCoProd.kCoef1Cgain.kSet = kCoefCgai1Index) then',
'            kCofC2gain &lt;= kCoProd.kCoef1Cgain;',
'        end if;',
'    end if;',
'end process kCoeffCcgainP;',
'Kernel2CgainInst: KernelCore',
'generic map(',
'    SHARP_FRAME   =&gt; false,',
'    BLURE_FRAME   =&gt; false,',
'    EMBOS_FRAME   =&gt; false,',
'    YCBCR_FRAME   =&gt; false,',
'    SOBEL_FRAME   =&gt; false,',
'    CGAIN_FRAME   =&gt; CGAIN_FRAME,',
'    img_width     =&gt; img_width,',
'    i_data_width  =&gt; i_data_width)',
'port map(',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iRgb           =&gt; iRgb,',
'    kCoeff         =&gt; kCofC2gain,',
'    oRgb           =&gt; c2gain);',
'    cgain2Syn.red   &lt;=  c2gain.red;',
'    cgain2Syn.blue  &lt;=  c2gain.blue;',
'    cgain2Syn.green &lt;=  c2gain.green;',
'    cgain2Syn.valid &lt;=  rgbSyncValid(9);',
'SyncFramesInst: SyncFrames',
'generic map (',
'    pixelDelay   =&gt; 6)',
'port map(            ',
'    clk      =&gt; clk,',
'    reset    =&gt; rst_l,',
'    iRgb     =&gt; cgain2Syn,',
'    oRgb     =&gt; oRgb.cgain);',
'end generate CCGAIN_FRAME_KSET_ENABLE;',
'end generate CGAIN_FRAME_ENABLE;',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--FILTERS: SHARP',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'SHARP_FRAME_ENABLE: if (SHARP_FRAME = true) generate',
'signal oRed           : channel;',
'signal oGreen         : channel;',
'signal oBlue          : channel;',
'signal kCoeffSharp    : kernelCoeDWord;',
'begin',
'process (clk) begin',
'    if (rising_edge (clk)) then',
'        if (kCoProd.kCoeffSharp.kSet = kCoefSharpIndex) then',
'            kCoeffSharp &lt;= kCoProd.kCoeffSharp;',
'        end if;',
'    end if; ',
'end process;',
'Kernel_Sharp_Red_Inst: KernelCore',
'generic map(',
'    SHARP_FRAME   =&gt; SHARP_FRAME,',
'    BLURE_FRAME   =&gt; false,',
'    EMBOS_FRAME   =&gt; false,',
'    YCBCR_FRAME   =&gt; false,',
'    SOBEL_FRAME   =&gt; false,',
'    CGAIN_FRAME   =&gt; false,',
'    img_width     =&gt; img_width,',
'    i_data_width  =&gt; i_data_width)',
'port map(',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iRgb           =&gt; rgbMac1,',
'    kCoeff         =&gt; kCoeffSharp,',
'    oRgb           =&gt; oRed);',
'Kernel_Sharp_Green_Inst: KernelCore',
'generic map(',
'    SHARP_FRAME   =&gt; SHARP_FRAME,',
'    BLURE_FRAME   =&gt; false,',
'    EMBOS_FRAME   =&gt; false,',
'    YCBCR_FRAME   =&gt; false,',
'    SOBEL_FRAME   =&gt; false,',
'    CGAIN_FRAME   =&gt; false,',
'    img_width     =&gt; img_width,',
'    i_data_width  =&gt; i_data_width)',
'port map(',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iRgb           =&gt; rgbMac2,',
'    kCoeff         =&gt; kCoeffSharp,',
'    oRgb           =&gt; oGreen);',
'Kernel_Sharp_Blue_Inst: KernelCore',
'generic map(',
'    SHARP_FRAME   =&gt; SHARP_FRAME,',
'    BLURE_FRAME   =&gt; false,',
'    EMBOS_FRAME   =&gt; false,',
'    YCBCR_FRAME   =&gt; false,',
'    SOBEL_FRAME   =&gt; false,',
'    CGAIN_FRAME   =&gt; false,',
'    img_width     =&gt; img_width,',
'    i_data_width  =&gt; i_data_width)',
'port map(',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iRgb           =&gt; rgbMac3,',
'    kCoeff         =&gt; kCoeffSharp,',
'    oRgb           =&gt; oBlue);',
'    oRgb.sharp.red    &lt;=  oRed.red;',
'    oRgb.sharp.green  &lt;=  oGreen.red;',
'    oRgb.sharp.blue   &lt;=  oBlue.red;',
'    oRgb.sharp.valid  &lt;=  rgbSyncValid(9);',
'end generate SHARP_FRAME_ENABLE;',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--FILTERS: BLURE',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'BLURE_FRAME_ENABLE: if (BLURE_FRAME = true) generate',
'signal oRed           : channel;',
'signal oGreen         : channel;',
'signal oBlue          : channel;',
'signal kCoeffBlure    : kernelCoeDWord;',
'begin',
'process (clk) begin',
'    if (rising_edge (clk)) then',
'        if (kCoProd.kCoeffBlure.kSet = kCoefBlureIndex) then',
'            kCoeffBlure &lt;= kCoProd.kCoeffBlure;',
'        end if;',
'    end if; ',
'end process;',
'Kernel_Blur_Red_Inst: KernelCore',
'generic map(',
'    SHARP_FRAME   =&gt; false,',
'    BLURE_FRAME   =&gt; BLURE_FRAME,',
'    EMBOS_FRAME   =&gt; false,',
'    YCBCR_FRAME   =&gt; false,',
'    SOBEL_FRAME   =&gt; false,',
'    CGAIN_FRAME   =&gt; false,',
'    img_width     =&gt; img_width,',
'    i_data_width  =&gt; i_data_width)',
'port map(',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iRgb           =&gt; rgbMac1,',
'    kCoeff         =&gt; kCoeffBlure,',
'    oRgb           =&gt; oRed);',
'Kernel_Blur_Green_Inst: KernelCore',
'generic map(',
'    SHARP_FRAME   =&gt; false,',
'    BLURE_FRAME   =&gt; BLURE_FRAME,',
'    EMBOS_FRAME   =&gt; false,',
'    YCBCR_FRAME   =&gt; false,',
'    SOBEL_FRAME   =&gt; false,',
'    CGAIN_FRAME   =&gt; false,',
'    img_width     =&gt; img_width,',
'    i_data_width  =&gt; i_data_width)',
'port map(',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iRgb           =&gt; rgbMac2,',
'    kCoeff         =&gt; kCoeffBlure,',
'    oRgb           =&gt; oGreen);',
'Kernel_Blur_Blue_Inst: KernelCore',
'generic map(',
'    SHARP_FRAME   =&gt; false,',
'    BLURE_FRAME   =&gt; BLURE_FRAME,',
'    EMBOS_FRAME   =&gt; false,',
'    YCBCR_FRAME   =&gt; false,',
'    SOBEL_FRAME   =&gt; false,',
'    CGAIN_FRAME   =&gt; false,',
'    img_width     =&gt; img_width,',
'    i_data_width  =&gt; i_data_width)',
'port map(',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iRgb           =&gt; rgbMac3,',
'    kCoeff         =&gt; kCoeffBlure,',
'    oRgb           =&gt; oBlue);',
'    oRgb.blur.red    &lt;=  oRed.red;',
'    oRgb.blur.green  &lt;=  oGreen.red;',
'    oRgb.blur.blue   &lt;=  oBlue.red;',
'    oRgb.blur.valid  &lt;=  rgbSyncValid(14);',
'end generate BLURE_FRAME_ENABLE;',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--FILTERS: EMBOS',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'EMBOS_FRAME_ENABLE: if (EMBOS_FRAME = true) generate',
'signal oRed           : channel;',
'signal oGreen         : channel;',
'signal oBlue          : channel;',
'signal kCoeffEmbos    : kernelCoeDWord;',
'begin',
'process (clk) begin',
'    if (rising_edge (clk)) then',
'        if (kCoProd.kCoeffEmbos.kSet = kCoefEmbosIndex) then',
'            kCoeffEmbos &lt;= kCoProd.kCoeffEmbos;',
'        end if;',
'    end if; ',
'end process;',
'Kernel_Blur_Red_Inst: KernelCore',
'generic map(',
'    SHARP_FRAME   =&gt; false,',
'    BLURE_FRAME   =&gt; false,',
'    EMBOS_FRAME   =&gt; EMBOS_FRAME,',
'    YCBCR_FRAME   =&gt; false,',
'    SOBEL_FRAME   =&gt; false,',
'    CGAIN_FRAME   =&gt; false,',
'    img_width     =&gt; img_width,',
'    i_data_width  =&gt; i_data_width)',
'port map(',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iRgb           =&gt; rgbMac1,',
'    kCoeff         =&gt; kCoeffEmbos,',
'    oRgb           =&gt; oRed);',
'Kernel_Blur_Green_Inst: KernelCore',
'generic map(',
'    SHARP_FRAME   =&gt; false,',
'    BLURE_FRAME   =&gt; false,',
'    EMBOS_FRAME   =&gt; EMBOS_FRAME,',
'    YCBCR_FRAME   =&gt; false,',
'    SOBEL_FRAME   =&gt; false,',
'    CGAIN_FRAME   =&gt; false,',
'    img_width     =&gt; img_width,',
'    i_data_width  =&gt; i_data_width)',
'port map(',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iRgb           =&gt; rgbMac2,',
'    kCoeff         =&gt; kCoeffEmbos,',
'    oRgb           =&gt; oGreen);',
'Kernel_Blur_Blue_Inst: KernelCore',
'generic map(',
'    SHARP_FRAME   =&gt; false,',
'    BLURE_FRAME   =&gt; false,',
'    EMBOS_FRAME   =&gt; EMBOS_FRAME,',
'    YCBCR_FRAME   =&gt; false,',
'    SOBEL_FRAME   =&gt; false,',
'    CGAIN_FRAME   =&gt; false,',
'    img_width     =&gt; img_width,',
'    i_data_width  =&gt; i_data_width)',
'port map(',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iRgb           =&gt; rgbMac3,',
'    kCoeff         =&gt; kCoeffEmbos,',
'    oRgb           =&gt; oBlue);',
'    oRgb.embos.red    &lt;=  oRed.red;',
'    oRgb.embos.green  &lt;=  oGreen.red;',
'    oRgb.embos.blue   &lt;=  oBlue.red;',
'    oRgb.embos.valid  &lt;=  rgbSyncValid(11);',
'end generate EMBOS_FRAME_ENABLE;',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--FILTERS: SOBEL',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'SOBEL_FRAME_ENABLE: if (SOBEL_FRAME = true) generate',
'-----------------------------------------------------------------------------------------------',
'signal osobelX        : channel;',
'signal osobelY        : channel;',
'signal sobel          : channel;',
'signal kCoefXSobel    : kernelCoeDWord;',
'signal kCoefYSobel    : kernelCoeDWord;',
'signal mx             : unsigned(15 downto 0)         := (others =&gt; \'0\');',
'signal my             : unsigned(15 downto 0)         := (others =&gt; \'0\');',
'signal sxy            : unsigned(15 downto 0)         := (others =&gt; \'0\');',
'signal sqr            : std_logic_vector(31 downto 0) := (others =&gt; \'0\');',
'signal sbof           : std_logic_vector(31 downto 0) := (others =&gt; \'0\');',
'signal sobelThreshSet : std_logic_vector(15 downto 0) :=x"006E"; --006E',
'signal sobelThreshold : unsigned(15 downto 0)         :=x"0000";',
'signal tp0            : std_logic_vector(7 downto 0)  := (others =&gt; \'0\');',
'signal tp1            : std_logic_vector(7 downto 0)  := (others =&gt; \'0\');',
'signal tp2            : std_logic_vector(7 downto 0)  := (others =&gt; \'0\');',
'signal tpValid        : std_logic := lo;',
'signal ovalid         : std_logic := lo;',
'begin',
'-----------------------------------------------------------------------------------------------',
'-- TapsController',
'-----------------------------------------------------------------------------------------------',
'TapsControllerInst: TapsController',
'generic map(',
'    img_width    =&gt; img_width,',
'    tpDataWidth  =&gt; 8)',
'port map(',
'    clk          =&gt; clk,',
'    rst_l        =&gt; rst_l,',
'    iRgb         =&gt; iRgb,',
'    tpValid      =&gt; tpValid,',
'    tp0          =&gt; tp0,',
'    tp1          =&gt; tp1,',
'    tp2          =&gt; tp2);',
'-----------------------------------------------------------------------------------------------',
'-- Taps To Rgb',
'-----------------------------------------------------------------------------------------------',
'    sobel.red   &lt;= tp0;',
'    sobel.green &lt;= tp1;',
'    sobel.blue  &lt;= tp2;',
'    sobel.valid &lt;= tpValid;',
'-----------------------------------------------------------------------------------------------',
'-- Coeff Init Updates',
'-----------------------------------------------------------------------------------------------',
'process (clk) begin',
'    if (rising_edge (clk)) then',
'        if (kCoProd.kCoefXSobel.kSet = kCoefSobeXIndex) then',
'            kCoefXSobel &lt;= kCoProd.kCoefXSobel;',
'        end if;',
'    end if; ',
'end process;',
'process (clk) begin',
'    if (rising_edge (clk)) then',
'        if (kCoProd.kCoefYSobel.kSet = kCoefSobeYIndex) then',
'            kCoefYSobel &lt;= kCoProd.kCoefYSobel;',
'        end if;',
'    end if; ',
'end process;',
'KernelSobelXInst: KernelCore',
'generic map(',
'    SHARP_FRAME   =&gt; false,',
'    BLURE_FRAME   =&gt; false,',
'    EMBOS_FRAME   =&gt; false,',
'    YCBCR_FRAME   =&gt; false,',
'    SOBEL_FRAME   =&gt; SOBEL_FRAME,',
'    CGAIN_FRAME   =&gt; false,',
'    img_width     =&gt; img_width,',
'    i_data_width  =&gt; i_data_width)',
'port map(',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iRgb           =&gt; sobel,',
'    kCoeff         =&gt; kCoefXSobel,',
'    oRgb           =&gt; osobelX);',
'KernelSobelYInst: KernelCore',
'generic map(',
'    SHARP_FRAME   =&gt; false,',
'    BLURE_FRAME   =&gt; false,',
'    EMBOS_FRAME   =&gt; false,',
'    YCBCR_FRAME   =&gt; false,',
'    SOBEL_FRAME   =&gt; SOBEL_FRAME,',
'    CGAIN_FRAME   =&gt; false,',
'    img_width     =&gt; img_width,',
'    i_data_width  =&gt; i_data_width)',
'port map(',
'    clk            =&gt; clk,',
'    rst_l          =&gt; rst_l,',
'    iRgb           =&gt; sobel,',
'    kCoeff         =&gt; kCoefYSobel,',
'    oRgb           =&gt; osobelY);',
'sobelDomainsValueP:process (clk) begin',
'    if rising_edge(clk) then',
'        mx  &lt;= (unsigned(osobelX.red) * unsigned(osobelX.red));',
'        my  &lt;= (unsigned(osobelY.red) * unsigned(osobelY.red));',
'    end if;',
'end process sobelDomainsValueP;',
'sumValueP:process (clk) begin',
'    if rising_edge(clk) then',
'        sxy &lt;= (mx + my);',
'    end if;',
'end process sumValueP;',
'squareRootValueP:process (clk) begin',
'    if rising_edge(clk) then',
'        sqr &lt;= std_logic_vector(resize(unsigned(sxy), sqr\'length));',
'    end if;',
'end process squareRootValueP;',
'squareRootTopInst: squareRootTop',
'port map(',
'    clk        =&gt; clk,',
'    ivalid     =&gt; rgbSyncValid(14),',
'    idata      =&gt; sqr,',
'    ovalid     =&gt; ovalid,',
'    odata      =&gt; sbof);',
'    sobelThreshold &lt;= unsigned(std_logic_vector(sbof(15 downto 0)));',
'    sobelThreshSet &lt;= iThreshold;',
'sobelOutP:process (clk) begin',
'    if rising_edge(clk) then',
'        if (sobelThreshold &gt; unsigned(sobelThreshSet)) then',
'            oEdgeValid       &lt;= hi;',
'            oRgb.sobel.red   &lt;= black;',
'            oRgb.sobel.green &lt;= black;',
'            oRgb.sobel.blue  &lt;= black;',
'        else',
'            oEdgeValid       &lt;= lo;',
'            oRgb.sobel.red   &lt;= white;',
'            oRgb.sobel.green &lt;= white;',
'            oRgb.sobel.blue  &lt;= white;',
'        end if;',
'            oRgb.sobel.valid &lt;= rgbSyncValid(15);',
'    end if;',
'end process sobelOutP;',
'end generate SOBEL_FRAME_ENABLE;',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--FILTERS: RGB',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'INRGB_FRAME_ENABLE: if (INRGB_FRAME = true) generate',
'begin',
'    oRgb.inrgb &lt;= iRgb;',
'end generate INRGB_FRAME_ENABLE;',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--FILTERS: HSV',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'HSV_FRAME_ENABLE: if (HSV_FRAME = true) generate',
'    signal hsvColor    : hsvChannel;',
'begin',
'hsvInst: hsv_c',
'generic map(',
'    i_data_width       =&gt; i_data_width)',
'port map(   ',
'    clk                =&gt; clk,',
'    reset              =&gt; rst_l,',
'    iRgb               =&gt; iRgb,',
'    oHsv               =&gt; hsvColor);',
'    oRgb.hsv.red       &lt;= hsvColor.h;',
'    oRgb.hsv.green     &lt;= hsvColor.s;',
'    oRgb.hsv.blue      &lt;= hsvColor.v;',
'    oRgb.hsv.valid     &lt;= hsvColor.valid;',
'end generate HSV_FRAME_ENABLE;',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--FILTERS: HSL',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'HSL_FRAME_ENABLE: if (HSL_FRAME = true) generate',
'signal hslColor    : hslChannel;',
'begin',
'hslInst: hsl_c',
'generic map(',
'    i_data_width       =&gt; i_data_width)',
'port map(   ',
'    clk                =&gt; clk,',
'    reset              =&gt; rst_l,',
'    iRgb               =&gt; iRgb,',
'    oHsl               =&gt; hslColor);',
'    oRgb.hsl.red       &lt;= hslColor.h;',
'    oRgb.hsl.green     &lt;= hslColor.s;',
'    oRgb.hsl.blue      &lt;= hslColor.l;',
'    oRgb.hsl.valid     &lt;= hslColor.valid;',
'end generate HSL_FRAME_ENABLE;',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--FILTERS: RGBTRIM',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'RGBTRIM_FRAME_ENABLE: if (RGBTR_FRAME = true) generate',
'begin',
'ColorTrimInst: ColorTrim',
'generic map(',
'    i_data_width       =&gt; i_data_width)',
'port map(   ',
'    clk                =&gt; clk,',
'    reset              =&gt; rst_l,',
'    iRgb               =&gt; iRgb,',
'    oRgb               =&gt; oRgb.colorTrm);',
'end generate RGBTRIM_FRAME_ENABLE;',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--FILTERS: RGBLUMP',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'RGBLUMP_FRAME_ENABLE: if (RGBLP_FRAME = true) generate',
'begin',
'SegmentColorsInst: SegmentColors',
'port map(   ',
'    clk                =&gt; clk,',
'    reset              =&gt; rst_l,',
'    lumThreshold       =&gt; lumThreshold,',
'    iRgb               =&gt; iRgb,',
'    oRgb               =&gt; oRgb.colorLmp);',
'end generate RGBLUMP_FRAME_ENABLE;',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'--FRAMES_DISABLED',
'-----------------------------------------------------------------------------------------------',
'-----------------------------------------------------------------------------------------------',
'RGBLUMP_FRAME_DISABLED: if (RGBLP_FRAME = false) generate',
'    oRgb.colorLmp   &lt;= init_channel;',
'end generate RGBLUMP_FRAME_DISABLED;',
'RGBTRIM_FRAME_DISABLED: if (RGBTR_FRAME = false) generate',
'    oRgb.colorTrm   &lt;= init_channel;',
'end generate RGBTRIM_FRAME_DISABLED;',
'INRGB_FRAME_DISABLED: if (INRGB_FRAME = false) generate',
'    oRgb.inrgb   &lt;= init_channel;',
'end generate INRGB_FRAME_DISABLED;',
'YCBCR_FRAME_DISABLED: if (YCBCR_FRAME = false) generate',
'    oRgb.ycbcr   &lt;= init_channel;',
'end generate YCBCR_FRAME_DISABLED;',
'SHARP_FRAME_DISABLED: if (SHARP_FRAME = false) generate',
'    oRgb.sharp   &lt;= init_channel;',
'end generate SHARP_FRAME_DISABLED;',
'BLURE_FRAME_DISABLED: if (BLURE_FRAME = false) generate',
'    oRgb.blur  &lt;= init_channel;',
'end generate BLURE_FRAME_DISABLED;',
'EMBOS_FRAME_DISABLED: if (EMBOS_FRAME = false) generate',
'    oRgb.embos   &lt;= init_channel;',
'end generate EMBOS_FRAME_DISABLED;',
'SOBEL_FRAME_DISABLED: if (SOBEL_FRAME = false) generate',
'    oRgb.sobel   &lt;= init_channel;',
'end generate SOBEL_FRAME_DISABLED;',
'CGAIN_FRAME_DISABLED: if (CGAIN_FRAME = false) generate',
'    oRgb.cgain   &lt;= init_channel;',
'end generate CGAIN_FRAME_DISABLED;',
'HSL_FRAME_DISABLED: if (HSL_FRAME = false) generate',
'    oRgb.hsl     &lt;= init_channel;',
'end generate HSL_FRAME_DISABLED;',
'HSV_FRAME_DISABLED: if (HSV_FRAME = false) generate',
'    oRgb.hsv     &lt;= init_channel;',
'end generate HSV_FRAME_DISABLED;',
'end Behavioral;'
];
countinueBuildStmtTable(g_sourceLines);
