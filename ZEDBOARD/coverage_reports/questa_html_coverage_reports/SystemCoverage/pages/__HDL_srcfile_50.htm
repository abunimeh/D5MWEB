
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>// UVM_TEST : RGB_TEST1 [RGB]</q-m>
<a name="2"><q-n>     2  </q-n></a><q-w>class</q-w> rgb_test1 <q-w>extends</q-w> uvm_test;
<a name="3"><q-n>     3  </q-n></a>    `uvm_component_utils(rgb_test1)
<a name="4"><q-n>     4  </q-n></a>    template_env frame_env;
<a name="5"><q-n>     5  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name, uvm_component parent);
<a name="6"><q-n>     6  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="7"><q-n>     7  </q-n></a>    <q-w>endfunction</q-w>
<a name="8"><q-n>     8  </q-n></a>    <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="9"><q-n>     9  </q-n></a>        <q-w>super</q-w>.build_phase(phase);
<a name="10"><q-n>     10  </q-n></a>        <q-w>begin</q-w>
<a name="11"><q-n>     11  </q-n></a>            rgb_configuration frame_cfg;
<a name="12"><q-n>     12  </q-n></a>            frame_cfg = <q-w>new</q-w>;
<a name="13"><q-n>     13  </q-n></a>            <q-w>assert</q-w>(frame_cfg.randomize());
<a name="14"><q-n>     14  </q-n></a>            uvm_config_db#(rgb_configuration)::set(.cntxt(<q-w>this</q-w>),.inst_name(<q-l>"*"</q-l>),.field_name(<q-l>"config"</q-l>),.value(frame_cfg));
<a name="15"><q-n>     15  </q-n></a>            frame_env = template_env::type_id::create(.name(<q-l>"frame_env"</q-l>),.parent(<q-w>this</q-w>));
<a name="16"><q-n>     16  </q-n></a>        <q-w>end</q-w>
<a name="17"><q-n>     17  </q-n></a>    <q-w>endfunction</q-w>: build_phase
<a name="18"><q-n>     18  </q-n></a>    <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="19"><q-n>     19  </q-n></a>        top_sequence        random_sqr;
<a name="20"><q-n>     20  </q-n></a>        uvm_component       component;
<a name="21"><q-n>     21  </q-n></a>        rgb_sequencer       sequencer;
<a name="22"><q-n>     22  </q-n></a>        random_sqr = top_sequence::type_id::create(<q-l>"random_sqr"</q-l>);
<a name="23"><q-n>     23  </q-n></a>        <q-w>if</q-w>( !random_sqr.randomize() ) 
<a name="24"><q-n>     24  </q-n></a>            `uvm_error(<q-l>""</q-l>, <q-l>"Randomize failed"</q-l>)
<a name="25"><q-n>     25  </q-n></a>        random_sqr.starting_phase = phase;
<a name="26"><q-n>     26  </q-n></a>        component = uvm_top.find(<q-l>"*.frame_seqr"</q-l>);
<a name="27"><q-n>     27  </q-n></a>        <q-w>if</q-w> ($<q-v>cast</q-w>(sequencer, component))
<a name="28"><q-n>     28  </q-n></a>            random_sqr.start(sequencer);
<a name="29"><q-n>     29  </q-n></a>    <q-w>endtask</q-w>: run_phase
<a name="30"><q-n>     30  </q-n></a><q-w>endclass</q-w>: rgb_test1
<a name="31"><q-n>     31  </q-n></a>
<a name="32"><q-n>     32  </q-n></a><q-m>// UVM_TEST : RGB_TEST2 [RGB]</q-m>
<a name="33"><q-n>     33  </q-n></a><q-w>class</q-w> rgb_test2 <q-w>extends</q-w> rgb_test1;
<a name="34"><q-n>     34  </q-n></a>    `uvm_component_utils(rgb_test2)
<a name="35"><q-n>     35  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name, uvm_component parent);
<a name="36"><q-n>     36  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="37"><q-n>     37  </q-n></a>    <q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="38"><q-n>     38  </q-n></a>    <q-w>function</q-w> <q-w>void</q-w> start_of_simulation_phase(uvm_phase phase);
<a name="39"><q-n>     39  </q-n></a>        <q-w>super</q-w>.start_of_simulation_phase(phase);
<a name="40"><q-n>     40  </q-n></a>        random_sequence_r1#(par_1)::type_id::set_type_override(random_sequence_r2::get_type());
<a name="41"><q-n>     41  </q-n></a>    <q-w>endfunction</q-w> : start_of_simulation_phase
<a name="42"><q-n>     42  </q-n></a><q-w>endclass</q-w>: rgb_test2
<a name="43"><q-n>     43  </q-n></a>
<a name="44"><q-n>     44  </q-n></a><q-w>class</q-w> rgb_test <q-w>extends</q-w> uvm_test;
<a name="45"><q-n>     45  </q-n></a>    `uvm_component_utils(rgb_test)
<a name="46"><q-n>     46  </q-n></a>
<a name="47"><q-n>     47  </q-n></a>    template_env frame_env;
<a name="48"><q-n>     48  </q-n></a>    rgb_agent#(par_1) frame_agent;
<a name="49"><q-n>     49  </q-n></a>    rgb_agent#(par_2) frame_agent_b;
<a name="50"><q-n>     50  </q-n></a>    rgb_agent#(par_3) frame_agent_cs[4];
<a name="51"><q-n>     51  </q-n></a>
<a name="52"><q-n>     52  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name, uvm_component parent);
<a name="53"><q-n>     53  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="54"><q-n>     54  </q-n></a>    <q-w>endfunction</q-w>
<a name="55"><q-n>     55  </q-n></a>
<a name="56"><q-n>     56  </q-n></a>    <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="57"><q-n>     57  </q-n></a>        <q-w>super</q-w>.build_phase(phase);
<a name="58"><q-n>     58  </q-n></a>        <q-w>begin</q-w>
<a name="59"><q-n>     59  </q-n></a>            rgb_configuration frame_cfg;
<a name="60"><q-n>     60  </q-n></a>            frame_cfg = <q-w>new</q-w>;
<a name="61"><q-n>     61  </q-n></a>            <q-w>assert</q-w>(frame_cfg.randomize());
<a name="62"><q-n>     62  </q-n></a>            uvm_config_db#(rgb_configuration)::set(.cntxt(<q-w>this</q-w>),.inst_name(<q-l>"*"</q-l>),.field_name(<q-l>"config"</q-l>),.value(frame_cfg));
<a name="63"><q-n>     63  </q-n></a>            frame_env       = template_env::type_id::create(.name(<q-l>"frame_env"</q-l>),.parent(<q-w>this</q-w>));
<a name="64"><q-n>     64  </q-n></a>            frame_agent     = rgb_agent#(par_1)::type_id::create(<q-l>"frame_agent"</q-l>, <q-w>this</q-w>);
<a name="65"><q-n>     65  </q-n></a>            frame_agent_b   = rgb_agent#(par_2)::type_id::create(<q-l>"frame_agent_b"</q-l>, <q-w>this</q-w>);
<a name="66"><q-n>     66  </q-n></a>            <q-w>foreach</q-w> (frame_agent_cs[i])
<a name="67"><q-n>     67  </q-n></a>                frame_agent_cs[i] = rgb_agent#(par_3)::type_id::create($sformatf(<q-l>"frame_agent_cs_%0d"</q-l>, i), <q-w>this</q-w>);
<a name="68"><q-n>     68  </q-n></a>        <q-w>end</q-w>
<a name="69"><q-n>     69  </q-n></a>    <q-w>endfunction</q-w>: build_phase
<a name="70"><q-n>     70  </q-n></a>
<a name="71"><q-n>     71  </q-n></a>   <q-w>function</q-w> <q-w>void</q-w> end_of_elaboration_phase(uvm_phase phase);
<a name="72"><q-n>     72  </q-n></a>      uvm_phase run_phase = uvm_run_phase::get();
<a name="73"><q-n>     73  </q-n></a>      run_phase.phase_done.set_drain_time(<q-w>this</q-w>, 100<q-v>us</q-w>);
<a name="74"><q-n>     74  </q-n></a>      frame_agent.frame_mon.agent_id = 0;
<a name="75"><q-n>     75  </q-n></a>      frame_agent_b.frame_mon.agent_id = 1;
<a name="76"><q-n>     76  </q-n></a>      <q-w>foreach</q-w> (frame_agent_cs[i])
<a name="77"><q-n>     77  </q-n></a>        frame_agent_cs[i].frame_mon.agent_id = i + 2;
<a name="78"><q-n>     78  </q-n></a>        <q-w>this</q-w>.print();
<a name="79"><q-n>     79  </q-n></a>        factory.print();
<a name="80"><q-n>     80  </q-n></a>   <q-w>endfunction</q-w>
<a name="81"><q-n>     81  </q-n></a>   
<a name="82"><q-n>     82  </q-n></a>   <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="83"><q-n>     83  </q-n></a>      <q-w>super</q-w>.run_phase(phase);
<a name="84"><q-n>     84  </q-n></a>      phase.raise_objection(<q-w>this</q-w>);
<a name="85"><q-n>     85  </q-n></a>      <q-w>fork</q-w>
<a name="86"><q-n>     86  </q-n></a>         <q-w>repeat</q-w> (3) <q-w>begin</q-w>
<a name="87"><q-n>     87  </q-n></a>            rgb_random_sequence#(par_1) rgb_seq_a = rgb_random_sequence#(par_1)::type_id::create(<q-l>"rgb_seq_a"</q-l>);
<a name="88"><q-n>     88  </q-n></a>            rgb_seq_a.start(frame_env.frame_agent.frame_seqr);
<a name="89"><q-n>     89  </q-n></a>         <q-w>end</q-w>
<a name="90"><q-n>     90  </q-n></a>         <q-w>repeat</q-w> (3) <q-w>begin</q-w>
<a name="91"><q-n>     91  </q-n></a>            rgb_random_sequence#(par_2) rgb_seq_b = rgb_random_sequence#(par_2)::type_id::create(<q-l>"rgb_seq_b"</q-l>);
<a name="92"><q-n>     92  </q-n></a>            rgb_seq_b.start(frame_agent_b.frame_seqr);
<a name="93"><q-n>     93  </q-n></a>         <q-w>end</q-w>
<a name="94"><q-n>     94  </q-n></a>         <q-w>begin</q-w>
<a name="95"><q-n>     95  </q-n></a>            <q-w>foreach</q-w> (frame_agent_cs[i])
<a name="96"><q-n>     96  </q-n></a>               <q-w>fork</q-w>
<a name="97"><q-n>     97  </q-n></a>                  <q-w>automatic</q-w> <q-w>int</q-w> <q-w>unsigned</q-w> agent_id = i;
<a name="98"><q-n>     98  </q-n></a>                  <q-w>repeat</q-w> (3) <q-w>begin</q-w>
<a name="99"><q-n>     99  </q-n></a>                     rgb_random_sequence#(par_3) rgb_seq_c = rgb_random_sequence#(par_3)::type_id::create(<q-l>"rgb_seq_c"</q-l>);
<a name="100"><q-n>     100  </q-n></a>                     rgb_seq_c.start(frame_agent_cs[agent_id].frame_seqr);
<a name="101"><q-n>     101  </q-n></a>                  <q-w>end</q-w>
<a name="102"><q-n>     102  </q-n></a>               <q-w>join_none</q-w>
<a name="103"><q-n>     103  </q-n></a>            <q-w>wait</q-w> <q-w>fork</q-w>;
<a name="104"><q-n>     104  </q-n></a>         <q-w>end</q-w>
<a name="105"><q-n>     105  </q-n></a>      <q-w>join</q-w>
<a name="106"><q-n>     106  </q-n></a>      phase.drop_objection(<q-w>this</q-w>);
<a name="107"><q-n>     107  </q-n></a>   <q-w>endtask</q-w>
<a name="108"><q-n>     108  </q-n></a><q-m>// task run_phase(uvm_phase phase);</q-m>
<a name="109"><q-n>     109  </q-n></a>    <q-m>// rgb_random_sequence#(par_1)    random_sqr;</q-m>
<a name="110"><q-n>     110  </q-n></a>    <q-m>// phase.raise_objection(.obj(this));</q-m>
<a name="111"><q-n>     111  </q-n></a>    <q-m>// random_sqr = rgb_random_sequence#(par_1)::type_id::create(.name("random_sqr"));</q-m>
<a name="112"><q-n>     112  </q-n></a>    <q-m>// assert(random_sqr.randomize());</q-m>
<a name="113"><q-n>     113  </q-n></a>    <q-m>// `uvm_info("aL_env", { "\n", random_sqr.sprint() }, UVM_LOW)</q-m>
<a name="114"><q-n>     114  </q-n></a>    <q-m>// random_sqr.start(frame_env.frame_agent.frame_seqr);</q-m>
<a name="115"><q-n>     115  </q-n></a>    <q-m>// phase.drop_objection(.obj(this));</q-m>
<a name="116"><q-n>     116  </q-n></a><q-m>// endtask: run_phase</q-m>
<a name="117"><q-n>     117  </q-n></a><q-w>endclass</q-w>: rgb_test</pre>
</tt>

  
</body>
</html>
