var g_sourceLines = [
'--05062019 [05-06-2019]',
'library ieee;',
'use ieee.std_logic_1164.all;',
'use ieee.numeric_std.all;',
'use work.fixed_pkg.all;',
'use work.float_pkg.all;',
'use work.constantspackage.all;',
'use work.vpfRecords.all;',
'use work.portspackage.all;',
'entity hsl_c is',
'generic (',
'    i_data_width   : integer := 8);',
'port (',
'    clk            : in  std_logic;',
'    reset          : in  std_logic;',
'    iRgb           : in channel;',
'    oHsl           : out hslChannel);',
'end hsl_c;',
'architecture behavioral of hsl_c is',
'    --RGB Floating',
'    signal uFs1Rgb       : rgbToUfRecord;',
'    signal uFs2Rgb       : rgbToUfRecord;',
'    signal uFs3Rgb       : rgbToUfRecord;',
'    --RGB Max Min',
'    signal rgbMax        : ufixed(7 downto 0) :=(others =&gt; \'0\');',
'    signal rgbMin        : ufixed(7 downto 0) :=(others =&gt; \'0\');',
'    signal maxValue      : ufixed(7 downto 0) :=(others =&gt; \'0\');',
'    signal minValue      : ufixed(7 downto 0) :=(others =&gt; \'0\');',
'    signal rgbDelta      : ufixed(8 downto 0) :=(others =&gt; \'0\');',
'    signal maxMinSum     : ufixed(8 downto 0) :=(others =&gt; \'0\');',
'    --Valid',
'    signal valid1xD      : std_logic := \'0\';',
'    signal valid2xD      : std_logic := \'0\';',
'    signal valid3xD      : std_logic := \'0\';',
'    signal valid4xD      : std_logic := \'0\';',
'    --HValue',
'    signal hValue1xD     : std_logic_vector(i_data_width-1 downto 0) :=(others =&gt; \'0\');',
'    signal hValue2xD     : std_logic_vector(i_data_width-1 downto 0) :=(others =&gt; \'0\');',
'    signal hValue3xD     : std_logic_vector(i_data_width-1 downto 0) :=(others =&gt; \'0\');',
'    signal hValue4xD     : std_logic_vector(i_data_width-1 downto 0) :=(others =&gt; \'0\');',
'    --Lum',
'    signal lumValueQuot  : ufixed(8 downto -9) :=(others =&gt; \'0\');',
'    signal lumValue      : ufixed(7 downto 0)  :=(others =&gt; \'0\');',
'    signal lumValue1xD   : std_logic_vector(i_data_width-1 downto 0) :=(others =&gt; \'0\');',
'    signal lumValue2xD   : std_logic_vector(i_data_width-1 downto 0) :=(others =&gt; \'0\');',
'    --Saturate',
'    signal satUfTop      : ufixed(17 downto 0) :=(others =&gt; \'0\');',
'    signal satUfBott     : ufixed(7 downto 0) :=(others =&gt; \'0\');',
'    signal satValueQuot  : ufixed(17 downto -8) :=(others =&gt; \'0\');',
'    signal satValue      : ufixed(7 downto 0) :=(others =&gt; \'0\');',
'    signal satValue1xD   : std_logic_vector(7 downto 0) :=(others =&gt; \'0\');',
'    --Hue Rsiz',
'    signal hueTop        : ufixed(17 downto 0) :=(others =&gt; \'0\');',
'    signal hueBot        : ufixed(8 downto 0) :=(others =&gt; \'0\');',
'    signal hueQuot       : ufixed(17 downto -9) :=(others =&gt; \'0\');',
'    signal hueQuot1x     : ufixed(7 downto 0) :=(others =&gt; \'0\');',
'    signal hueDeg        : ufixed(26 downto 0) :=(others =&gt; \'0\');',
'    signal hueDeg1x      : ufixed(7 downto 0) :=(others =&gt; \'0\');',
'    signal hueValue      : unsigned(7 downto 0):= (others =&gt; \'0\');',
'begin',
'rgbToUfP: process (clk,reset)begin',
'    if (reset = lo) then',
'        uFs1Rgb.red    &lt;= (others =&gt; \'0\');',
'        uFs1Rgb.green  &lt;= (others =&gt; \'0\');',
'        uFs1Rgb.blue   &lt;= (others =&gt; \'0\');',
'    elsif rising_edge(clk) then ',
'        uFs1Rgb.red    &lt;= to_ufixed(iRgb.red,uFs1Rgb.red);',
'        uFs1Rgb.green  &lt;= to_ufixed(iRgb.green,uFs1Rgb.green);',
'        uFs1Rgb.blue   &lt;= to_ufixed(iRgb.blue,uFs1Rgb.blue);',
'        uFs1Rgb.valid  &lt;= iRgb.valid;',
'    end if; ',
'end process rgbToUfP;',
'pipRgbD2P: process (clk) begin',
'    if rising_edge(clk) then ',
'        uFs2Rgb &lt;= uFs1Rgb;',
'    end if;',
'end process pipRgbD2P;',
'pipRgbD3P: process (clk) begin',
'    if rising_edge(clk) then ',
'        uFs3Rgb &lt;= uFs2Rgb;',
'    end if;',
'end process pipRgbD3P;',
'rgbMaxP: process (clk) begin',
'    if rising_edge(clk) then ',
'        if ((uFs1Rgb.red &gt;= uFs1Rgb.green) and (uFs1Rgb.red &gt;= uFs1Rgb.blue)) then',
'            rgbMax &lt;= uFs1Rgb.red;',
'        elsif((uFs1Rgb.green &gt;= uFs1Rgb.red) and (uFs1Rgb.green &gt;= uFs1Rgb.blue))then',
'            rgbMax &lt;= uFs1Rgb.green;',
'        else',
'            rgbMax &lt;= uFs1Rgb.blue;',
'        end if;',
'    end if;',
'end process rgbMaxP;',
'rgbMinP: process (clk) begin',
'    if rising_edge(clk) then ',
'        if ((uFs1Rgb.red &lt;= uFs1Rgb.green) and (uFs1Rgb.red &lt;= uFs1Rgb.blue)) then',
'            rgbMin &lt;= uFs1Rgb.red;',
'        elsif((uFs1Rgb.green &lt;= uFs1Rgb.red) and (uFs1Rgb.green &lt;= uFs1Rgb.blue)) then',
'            rgbMin &lt;= uFs1Rgb.green;',
'        else',
'            rgbMin &lt;= uFs1Rgb.blue;',
'        end if;',
'    end if;',
'end process rgbMinP;',
'rgbDeltaP: process (clk) begin',
'    if rising_edge(clk) then ',
'        rgbDelta      &lt;= rgbMax - rgbMin;',
'    end if;',
'end process rgbDeltaP;',
'maxMinUfSumP: process (clk) begin',
'    if rising_edge(clk) then ',
'        maxMinSum    &lt;= rgbMax + rgbMin;',
'    end if;',
'end process maxMinUfSumP;',
'pipRgbMaxUfD1P: process (clk) begin',
'    if rising_edge(clk) then ',
'        maxValue          &lt;= rgbMax;',
'        minValue          &lt;= rgbMin;',
'    end if;',
'end process pipRgbMaxUfD1P;',
'-------------------------------------------------',
'-- LUM',
'-------------------------------------------------',
'lumP: process (clk) begin',
'    if rising_edge(clk) then ',
'        lumValueQuot   &lt;= maxMinSum / 2.0;',
'    end if;',
'end process lumP;',
'lumResizeP: process (clk) begin',
'    if rising_edge(clk) then ',
'        lumValue &lt;= resize(lumValueQuot,lumValue);',
'        lumValue1xD &lt;= std_logic_vector(to_unsigned(lumValue,8));',
'        lumValue2xD &lt;= lumValue1xD;',
'    end if;',
'end process lumResizeP;',
'-------------------------------------------------',
'-- VALUE',
'-------------------------------------------------',
'hValueP: process (clk) begin',
'    if rising_edge(clk) then ',
'        hValue1xD &lt;= std_logic_vector(to_unsigned(maxValue,8));',
'        hValue2xD &lt;= hValue1xD;',
'        hValue3xD &lt;= hValue2xD;',
'        hValue4xD &lt;= hValue3xD;',
'    end if;',
'end process hValueP;',
'-------------------------------------------------',
'-- SATURATE',
'-------------------------------------------------',
'satNumniatorUfP: process (clk) begin',
'    if rising_edge(clk) then ',
'        satUfTop      &lt;= 256.0 * rgbDelta;',
'    end if;',
'end process satNumniatorUfP;',
'satDominaUfCalP: process (clk) begin',
'    if rising_edge(clk) then ',
'        if (maxValue &gt; 0) then',
'            satUfBott &lt;= maxValue;',
'        end if;',
'    end if;',
'end process satDominaUfCalP;',
'satDividerP: process (clk) begin',
'    if rising_edge(clk) then ',
'        satValueQuot &lt;= satUfTop / satUfBott;',
'    end if;',
'end process satDividerP;',
'satDividerResizeP: process (clk) begin',
'    if rising_edge(clk) then ',
'        satValue    &lt;= resize(satValueQuot,satValue);',
'        satValue1xD &lt;= std_logic_vector(to_unsigned(satValue,8));',
'    end if;',
'end process satDividerResizeP;',
'-------------------------------------------------',
'-- HUE',
'-------------------------------------------------',
'hueBottomP: process (clk) begin',
'    if rising_edge(clk) then ',
'        if (rgbDelta &gt; 0) then',
'            hueBot &lt;= rgbDelta;',
'        else',
'            hueBot &lt;= to_ufixed (6.0,hueBot);',
'        end if;',
'    end if;',
'end process hueBottomP;',
'hueP: process (clk) begin',
'  if rising_edge(clk) then ',
'    if (uFs3Rgb.red  = maxValue) then',
'            hueDeg &lt;= to_ufixed (0.0,hueDeg);',
'        if (uFs3Rgb.green &gt;= uFs3Rgb.blue) then',
'            hueTop        &lt;= (uFs3Rgb.green - uFs3Rgb.blue) * 43;',
'        else',
'            hueTop        &lt;= (uFs3Rgb.blue - uFs3Rgb.green) * 43;',
'        end if;',
'    elsif(uFs3Rgb.green = maxValue)  then',
'            hueDeg &lt;= to_ufixed (85.0,hueDeg);',
'        if (uFs3Rgb.blue &gt;= uFs3Rgb.red ) then',
'            hueTop       &lt;= (uFs3Rgb.blue - uFs3Rgb.red ) * 43;',
'        else',
'            hueTop       &lt;= (uFs3Rgb.red  - uFs3Rgb.blue) * 43;',
'        end if;',
'    elsif(uFs3Rgb.blue = maxValue)  then',
'            hueDeg &lt;= to_ufixed (171.0,hueDeg);',
'        if (uFs3Rgb.red  &gt;= uFs3Rgb.green) then',
'            hueTop       &lt;= (uFs3Rgb.red  - uFs3Rgb.green) * 43;',
'        else',
'            hueTop       &lt;= (uFs3Rgb.green - uFs3Rgb.red ) * 43;',
'        end if;',
'    end if;',
'  end if;',
'end process hueP;',
'hueDividerP: process (clk) begin',
'    if rising_edge(clk) then ',
'        hueQuot  &lt;= hueTop / hueBot;',
'    end if;',
'end process hueDividerP;',
'hueDegreeP: process (clk) begin',
'    if rising_edge(clk) then ',
'        hueDeg1x       &lt;= resize(hueDeg,hueDeg1x);',
'    end if;',
'end process hueDegreeP;',
'hueDividerResizeP: process (clk) begin',
'    if rising_edge(clk) then ',
'        hueQuot1x &lt;= resize(hueQuot,hueQuot1x);',
'    end if;',
'end process hueDividerResizeP;',
'hueValueP: process (clk) begin',
'    if rising_edge(clk) then ',
'        hueValue &lt;= (to_unsigned(hueQuot1x,8) + to_unsigned(hueDeg1x,8));',
'    end if;',
'end process hueValueP;',
'-------------------------------------------------',
'-- VALID',
'-------------------------------------------------',
'pipValidP: process (clk) begin',
'    if rising_edge(clk) then ',
'        valid1xD    &lt;= uFs3Rgb.valid;',
'        valid2xD    &lt;= valid1xD;',
'        valid3xD    &lt;= valid2xD;',
'        valid4xD    &lt;= valid3xD;',
'    end if;',
'end process pipValidP;',
'hsvOut: process (clk) begin',
'    if rising_edge(clk) then ',
'        oHsl.h      &lt;= std_logic_vector(hueValue(i_data_width-1 downto 0));',
'        oHsl.s      &lt;= satValue1xD;',
'        oHsl.l      &lt;= lumValue2xD;',
'        oHsl.valid  &lt;= valid4xD;',
'    end if;',
'end process hsvOut;',
'end behavioral;'
];
countinueBuildStmtTable(g_sourceLines);
