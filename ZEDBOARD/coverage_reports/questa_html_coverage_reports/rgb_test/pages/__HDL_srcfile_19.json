var g_sourceLines = [
'library ieee;',
'use ieee.std_logic_1164.all;',
'use ieee.numeric_std.all;',
'use work.fixed_pkg.all;',
'--use work.float_pkg.all;',
'use work.constantspackage.all;',
'use work.vpfrecords.all;',
'use work.portspackage.all;',
'entity Filters is',
'generic (',
'    F_TES                 : boolean := false;',
'    F_LUM                 : boolean := false;',
'    F_TRM                 : boolean := false;',
'    F_RGB                 : boolean := false;',
'    F_SHP                 : boolean := false;',
'    F_BLU                 : boolean := false;',
'    F_EMB                 : boolean := false;',
'    F_YCC                 : boolean := false;',
'    F_SOB                 : boolean := false;',
'    F_CGA                 : boolean := false;',
'    F_HSV                 : boolean := false;',
'    F_HSL                 : boolean := false;',
'    M_SOB_LUM             : boolean := false;',
'    M_SOB_TRM             : boolean := false;',
'    M_SOB_RGB             : boolean := false;',
'    M_SOB_SHP             : boolean := false;',
'    M_SOB_BLU             : boolean := false;',
'    M_SOB_YCC             : boolean := false;',
'    M_SOB_CGA             : boolean := false;',
'    M_SOB_HSV             : boolean := false;',
'    M_SOB_HSL             : boolean := false;',
'    F_CGA_TO_CGA          : boolean := false;',
'    F_CGA_TO_HSL          : boolean := false;',
'    F_CGA_TO_HSV          : boolean := false;',
'    F_CGA_TO_YCC          : boolean := false;',
'    F_CGA_TO_SHP          : boolean := false;',
'    F_CGA_TO_BLU          : boolean := false;',
'    F_SHP_TO_SHP          : boolean := false;',
'    F_SHP_TO_HSL          : boolean := false;',
'    F_SHP_TO_HSV          : boolean := false;',
'    F_SHP_TO_YCC          : boolean := false;',
'    F_SHP_TO_CGA          : boolean := false;',
'    F_SHP_TO_BLU          : boolean := false;',
'    F_BLU_TO_BLU          : boolean := false;',
'    F_BLU_TO_HSL          : boolean := false;',
'    F_BLU_TO_HSV          : boolean := false;',
'    F_BLU_TO_YCC          : boolean := false;',
'    F_BLU_TO_CGA          : boolean := false;',
'    F_BLU_TO_SHP          : boolean := false;',
'    img_width             : integer := 4096;',
'    img_height            : integer := 4096;',
'    s_data_width          : integer := 16;',
'    i_data_width          : integer := 8);',
'port (',
'    clk                : in std_logic;',
'    rst_l              : in std_logic;',
'    txCord             : in coord;',
'    iRgb               : in channel;',
'    lumThreshold       : in  std_logic_vector(7 downto 0);',
'    iThreshold         : in std_logic_vector(s_data_width-1 downto 0); ',
'    cHsv               : in std_logic_vector(2 downto 0);',
'    cYcc               : in std_logic_vector(2 downto 0);',
'    iKcoeff            : in kernelCoeff;',
'    edgeValid          : out std_logic;',
'    oRgb               : out frameColors);',
'end Filters;',
'architecture Behavioral of Filters is',
'signal rgbImageKernel   : colors;',
'constant init_channel   : channel := (valid =&gt; lo, red =&gt; black, green =&gt; black, blue =&gt; black);',
'signal location         : cord := (x =&gt; 40, y =&gt; 10);',
'signal fRgb             : frameColors;',
'signal sEdgeValid       : std_logic;',
'begin',
'    edgeValid           &lt;= sEdgeValid;',
'    oRgb                &lt;= fRgb;',
'ImageKernelInst: Kernel',
'generic map(',
'    INRGB_FRAME         =&gt; F_RGB,',
'    RGBLP_FRAME         =&gt; F_LUM,',
'    RGBTR_FRAME         =&gt; F_TRM,',
'    SHARP_FRAME         =&gt; F_SHP,',
'    BLURE_FRAME         =&gt; F_BLU,',
'    EMBOS_FRAME         =&gt; F_EMB,',
'    YCBCR_FRAME         =&gt; F_YCC,',
'    SOBEL_FRAME         =&gt; F_SOB,',
'    CGAIN_FRAME         =&gt; F_CGA,',
'    CCGAIN_FRAME        =&gt; false,',
'    HSV_FRAME           =&gt; F_HSV,',
'    HSL_FRAME           =&gt; F_HSL,',
'    img_width           =&gt; img_width,',
'    img_height          =&gt; img_height,',
'    s_data_width        =&gt; s_data_width,',
'    i_data_width        =&gt; i_data_width)',
'port map(',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    txCord              =&gt; txCord,',
'    lumThreshold        =&gt; lumThreshold,',
'    iThreshold          =&gt; iThreshold,',
'    iRgb                =&gt; iRgb,',
'    iKcoeff             =&gt; iKcoeff,',
'    oEdgeValid          =&gt; sEdgeValid,',
'    oRgb                =&gt; rgbImageKernel);',
'CGA_TO_FILTRS1_FRAME_ENABLE: if (F_CGA_TO_HSV = true) or (F_CGA_TO_HSL = true) or (F_CGA_TO_YCC = true)  or (F_CGA_TO_SHP = true) or (F_CGA_TO_BLU = true) or (F_CGA_TO_CGA = true)generate',
'signal fRgb1             : colors;',
'begin',
'ImageKernelInst: Kernel',
'generic map(',
'    INRGB_FRAME         =&gt; false,',
'    RGBLP_FRAME         =&gt; F_LUM,',
'    RGBTR_FRAME         =&gt; F_TRM,',
'    SHARP_FRAME         =&gt; F_CGA_TO_SHP,',
'    BLURE_FRAME         =&gt; F_CGA_TO_BLU,',
'    EMBOS_FRAME         =&gt; false,',
'    YCBCR_FRAME         =&gt; F_CGA_TO_YCC,',
'    SOBEL_FRAME         =&gt; false,',
'    CGAIN_FRAME         =&gt; false,',
'    CCGAIN_FRAME        =&gt; F_CGA_TO_CGA,',
'    HSV_FRAME           =&gt; F_CGA_TO_HSV,',
'    HSL_FRAME           =&gt; F_CGA_TO_HSL,',
'    img_width           =&gt; img_width,',
'    img_height          =&gt; img_height,',
'    s_data_width        =&gt; s_data_width,',
'    i_data_width        =&gt; i_data_width)',
'port map(',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    txCord              =&gt; txCord,',
'    lumThreshold        =&gt; lumThreshold,',
'    iThreshold          =&gt; iThreshold,',
'    iRgb                =&gt; rgbImageKernel.cgain,',
'    iKcoeff             =&gt; iKcoeff,',
'    oEdgeValid          =&gt; sEdgeValid,',
'    oRgb                =&gt; fRgb1);',
'    fRgb.cgainToHsl     &lt;= fRgb1.hsl;',
'    fRgb.cgainToHsv     &lt;= fRgb1.hsv;',
'    fRgb.cgainToYcbcr   &lt;= fRgb1.ycbcr;',
'    fRgb.cgainToShp     &lt;= fRgb1.sharp;',
'    fRgb.cgainToBlu     &lt;= fRgb1.blur;',
'    fRgb.cgainToCgain   &lt;= fRgb1.cgain;',
'end generate CGA_TO_FILTRS1_FRAME_ENABLE;',
'SHP_TO_FILTRS2_FRAME_ENABLE: if (F_SHP_TO_HSV = true) or (F_SHP_TO_HSL = true) or (F_SHP_TO_YCC = true)  or (F_SHP_TO_SHP = true) or (F_SHP_TO_BLU = true) or (F_SHP_TO_CGA = true) generate',
'signal fRgb2             : colors;',
'begin',
'ImageKernelInst: Kernel',
'generic map(',
'    INRGB_FRAME         =&gt; false,',
'    RGBLP_FRAME         =&gt; F_LUM,',
'    RGBTR_FRAME         =&gt; F_TRM,',
'    SHARP_FRAME         =&gt; F_SHP_TO_SHP,',
'    BLURE_FRAME         =&gt; F_SHP_TO_BLU,',
'    EMBOS_FRAME         =&gt; false,',
'    YCBCR_FRAME         =&gt; F_SHP_TO_YCC,',
'    SOBEL_FRAME         =&gt; false,',
'    CGAIN_FRAME         =&gt; F_SHP_TO_CGA,',
'    CCGAIN_FRAME        =&gt; false,',
'    HSV_FRAME           =&gt; F_SHP_TO_HSV,',
'    HSL_FRAME           =&gt; F_SHP_TO_HSL,',
'    img_width           =&gt; img_width,',
'    img_height          =&gt; img_height,',
'    s_data_width        =&gt; s_data_width,',
'    i_data_width        =&gt; i_data_width)',
'port map(',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    txCord              =&gt; txCord,',
'    lumThreshold        =&gt; lumThreshold,',
'    iThreshold          =&gt; iThreshold,',
'    iRgb                =&gt; rgbImageKernel.sharp,',
'    iKcoeff             =&gt; iKcoeff,',
'    oEdgeValid          =&gt; sEdgeValid,',
'    oRgb                =&gt; fRgb2);',
'    fRgb.shpToHsl       &lt;= fRgb2.hsl;',
'    fRgb.shpToHsv       &lt;= fRgb2.hsv;',
'    fRgb.shpToYcbcr     &lt;= fRgb2.ycbcr;',
'    fRgb.shpToShp       &lt;= fRgb2.sharp;',
'    fRgb.shpToBlu       &lt;= fRgb2.blur;',
'    fRgb.shpToCgain     &lt;= fRgb2.cgain;',
'end generate SHP_TO_FILTRS2_FRAME_ENABLE;',
'BLU_TO_FILTRS3_FRAME_ENABLE: if (F_BLU_TO_HSV = true) or (F_BLU_TO_HSL = true) or (F_BLU_TO_YCC = true)  or (F_BLU_TO_SHP = true) or (F_BLU_TO_BLU = true) or (F_BLU_TO_CGA = true) generate',
'signal fRgb3             : colors;',
'begin',
'ImageKernelInst: Kernel',
'generic map(',
'    INRGB_FRAME         =&gt; false,',
'    RGBLP_FRAME         =&gt; F_LUM,',
'    RGBTR_FRAME         =&gt; F_TRM,',
'    SHARP_FRAME         =&gt; F_BLU_TO_SHP,',
'    BLURE_FRAME         =&gt; F_BLU_TO_BLU,',
'    EMBOS_FRAME         =&gt; false,',
'    YCBCR_FRAME         =&gt; F_BLU_TO_YCC,',
'    SOBEL_FRAME         =&gt; false,',
'    CGAIN_FRAME         =&gt; F_BLU_TO_CGA,',
'    CCGAIN_FRAME        =&gt; false,',
'    HSV_FRAME           =&gt; F_BLU_TO_HSV,',
'    HSL_FRAME           =&gt; F_BLU_TO_HSL,',
'    img_width           =&gt; img_width,',
'    img_height          =&gt; img_height,',
'    s_data_width        =&gt; s_data_width,',
'    i_data_width        =&gt; i_data_width)',
'port map(',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    txCord              =&gt; txCord,',
'    lumThreshold        =&gt; lumThreshold,',
'    iThreshold          =&gt; iThreshold,',
'    iRgb                =&gt; rgbImageKernel.sharp,',
'    iKcoeff             =&gt; iKcoeff,',
'    oEdgeValid          =&gt; sEdgeValid,',
'    oRgb                =&gt; fRgb3);',
'    fRgb.bluToHsl       &lt;= fRgb3.hsl;',
'    fRgb.bluToHsv       &lt;= fRgb3.hsv;',
'    fRgb.bluToYcc       &lt;= fRgb3.ycbcr;',
'    fRgb.bluToShp       &lt;= fRgb3.sharp;',
'    fRgb.bluToBlu       &lt;= fRgb3.blur;',
'    fRgb.bluToCga       &lt;= fRgb3.cgain;',
'end generate BLU_TO_FILTRS3_FRAME_ENABLE;',
'TEST_FRAME_ENABLE: if (F_TES = true) generate',
'    signal ChannelS      : integer := 0;',
'    signal rgbSum        : tpRgb;',
'begin',
'frameTestPatternInst: frameTestPattern',
'generic map(',
'    s_data_width =&gt; s_data_width)',
'port map(   ',
'    clk          =&gt; clk,',
'    iValid       =&gt; iRgb.valid,',
'    iCord        =&gt; txCord,',
'    oRgb         =&gt; rgbSum);',
'TestPatternInst: TestPattern',
'port map(',
'    clk           =&gt; clk,',
'    ChannelS      =&gt; ChannelS,',
'    rgbSum        =&gt; rgbSum,',
'    oRgb          =&gt; fRgb.tPattern);',
'end generate TEST_FRAME_ENABLE;',
'MASK_SOB_CGA_FRAME_ENABLE: if (M_SOB_CGA = true) generate',
'    signal tp2cgain   : channel;',
'    signal tp2        : std_logic_vector(23 downto 0) := (others =&gt; \'0\');',
'    alias tp2Red      : std_logic_vector(7 downto 0) is tp2(23 downto 16);',
'    alias tp2Green    : std_logic_vector(7 downto 0) is tp2(15 downto 8);',
'    alias tp2Blue     : std_logic_vector(7 downto 0) is tp2(7 downto 0);',
'    signal tpValid    : std_logic  := lo;',
'begin',
'TapsControllerSobCgaInst: TapsController',
'generic map(',
'    img_width    =&gt; img_width,',
'    tpDataWidth  =&gt; 24)',
'port map(',
'    clk          =&gt; clk,',
'    rst_l        =&gt; rst_l,',
'    iRgb         =&gt; rgbImageKernel.cgain,',
'    tpValid      =&gt; tpValid,',
'    tp0          =&gt; open,',
'    tp1          =&gt; open,',
'    tp2          =&gt; tp2);',
'process (clk,rst_l) begin',
'    if (rst_l = lo) then',
'        tp2cgain.red   &lt;= black;',
'        tp2cgain.green &lt;= black;',
'        tp2cgain.blue  &lt;= black;',
'        tp2cgain.valid &lt;= lo;',
'    elsif rising_edge(clk) then',
'        tp2cgain.red   &lt;= tp2Red;',
'        tp2cgain.green &lt;= tp2Green;',
'        tp2cgain.blue  &lt;= tp2Blue;',
'        tp2cgain.valid &lt;= tpValid;',
'    end if; ',
'end process;',
'FrameMaskInst: FrameMask',
'generic map (',
'    eBlack       =&gt; true)',
'port map(            ',
'    clk         =&gt; clk,',
'    reset       =&gt; rst_l,',
'    iEdgeValid  =&gt; sEdgeValid,',
'    i1Rgb       =&gt; rgbImageKernel.sobel,',
'    i2Rgb       =&gt; tp2cgain,',
'    oRgb        =&gt; fRgb.maskSobelCga);',
'end generate MASK_SOB_CGA_FRAME_ENABLE;',
'MASK_SOB_TRM_FRAME_ENABLE: if (M_SOB_TRM = true) generate',
'begin',
'FrameMaskInst: FrameMask',
'generic map (',
'    eBlack       =&gt; true)',
'port map(            ',
'    clk         =&gt; clk,',
'    reset       =&gt; rst_l,',
'    iEdgeValid  =&gt; sEdgeValid,',
'    i1Rgb       =&gt; rgbImageKernel.sobel,',
'    i2Rgb       =&gt; rgbImageKernel.colorTrm,',
'    oRgb        =&gt; fRgb.maskSobelTrm);',
'end generate MASK_SOB_TRM_FRAME_ENABLE; ',
'MASK_SOB_HSL_FRAME_ENABLE: if (M_SOB_HSL = true) generate',
'    signal dSobHsl           : channel;',
'    constant sobHslPiDelay   : integer := 18;',
'begin',
'dSobHsvPiDelayInst: SyncFrames',
'generic map(',
'    pixelDelay =&gt; sobHslPiDelay)',
'port map(',
'    clk        =&gt; clk,',
'    reset      =&gt; rst_l,',
'    iRgb       =&gt; rgbImageKernel.hsl,',
'    oRgb       =&gt; dSobHsl);',
'FrameMaskInst: FrameMask',
'generic map (',
'    eBlack       =&gt; true)',
'port map(            ',
'    clk         =&gt; clk,',
'    reset       =&gt; rst_l,',
'    iEdgeValid  =&gt; sEdgeValid,',
'    i1Rgb       =&gt; rgbImageKernel.sobel,',
'    i2Rgb       =&gt; dSobHsl,',
'    oRgb        =&gt; fRgb.maskSobelHsl);',
'end generate MASK_SOB_HSL_FRAME_ENABLE;  ',
'MASK_SOB_HSV_FRAME_ENABLE: if (M_SOB_HSV = true) generate',
'    signal dSobHsv           : channel;',
'    constant sobHsvPiDelay   : integer := 18;',
'begin',
'dSobHsvPiDelayInst: SyncFrames',
'generic map(',
'    pixelDelay =&gt; sobHsvPiDelay)',
'port map(',
'    clk        =&gt; clk,',
'    reset      =&gt; rst_l,',
'    iRgb       =&gt; rgbImageKernel.hsv,',
'    oRgb       =&gt; dSobHsv);',
'FrameMaskInst: FrameMask',
'generic map (',
'    eBlack       =&gt; true)',
'port map(            ',
'    clk         =&gt; clk,',
'    reset       =&gt; rst_l,',
'    iEdgeValid  =&gt; sEdgeValid,',
'    i1Rgb       =&gt; rgbImageKernel.sobel,',
'    i2Rgb       =&gt; dSobHsv,',
'    oRgb        =&gt; fRgb.maskSobelHsv);',
'end generate MASK_SOB_HSV_FRAME_ENABLE; ',
'MASK_SOB_YCC_FRAME_ENABLE: if (M_SOB_YCC = true) generate',
'begin',
'FrameMaskInst: FrameMask',
'generic map (',
'    eBlack       =&gt; true)',
'port map(            ',
'    clk         =&gt; clk,',
'    reset       =&gt; rst_l,',
'    iEdgeValid  =&gt; sEdgeValid,',
'    i1Rgb       =&gt; rgbImageKernel.sobel,',
'    i2Rgb       =&gt; rgbImageKernel.ycbcr,',
'    oRgb        =&gt; fRgb.maskSobelYcc);',
'end generate MASK_SOB_YCC_FRAME_ENABLE;   ',
'MASK_SOB_SHP_FRAME_ENABLE: if (M_SOB_SHP = true) generate',
'begin',
'FrameMaskInst: FrameMask',
'generic map (',
'    eBlack       =&gt; true)',
'port map(            ',
'    clk         =&gt; clk,',
'    reset       =&gt; rst_l,',
'    iEdgeValid  =&gt; sEdgeValid,',
'    i1Rgb       =&gt; rgbImageKernel.sobel,',
'    i2Rgb       =&gt; rgbImageKernel.sharp,',
'    oRgb        =&gt; fRgb.maskSobelShp);',
'end generate MASK_SOB_SHP_FRAME_ENABLE;',
'MASK_SOB_RGB_FRAME_ENABLE: if (M_SOB_RGB = true) generate',
'    constant sobRgbPiDelay : integer := 14;',
'    signal tp2inrgb        : channel;',
'    signal tp2             : std_logic_vector(23 downto 0) := (others =&gt; \'0\');',
'    alias tp2Red           : std_logic_vector(7 downto 0) is tp2(23 downto 16);',
'    alias tp2Green         : std_logic_vector(7 downto 0) is tp2(15 downto 8);',
'    alias tp2Blue          : std_logic_vector(7 downto 0) is tp2(7 downto 0);',
'    signal tpValid         : std_logic  := lo;',
'    signal d1Rgb           : channel;',
'begin',
'TapsControllerSobCgaInst: TapsController',
'generic map(',
'    img_width    =&gt; img_width,',
'    tpDataWidth  =&gt; 24)',
'port map(',
'    clk          =&gt; clk,',
'    rst_l        =&gt; rst_l,',
'    iRgb         =&gt; rgbImageKernel.inrgb,',
'    tpValid      =&gt; tpValid,',
'    tp0          =&gt; open,',
'    tp1          =&gt; open,',
'    tp2          =&gt; tp2);',
'process (clk,rst_l) begin',
'    if (rst_l = lo) then',
'        tp2inrgb.red   &lt;= black;',
'        tp2inrgb.green &lt;= black;',
'        tp2inrgb.blue  &lt;= black;',
'        tp2inrgb.valid &lt;= lo;',
'    elsif rising_edge(clk) then',
'        tp2inrgb.red   &lt;= tp2Red;',
'        tp2inrgb.green &lt;= tp2Green;',
'        tp2inrgb.blue  &lt;= tp2Blue;',
'        tp2inrgb.valid &lt;= tpValid;',
'    end if; ',
'end process;',
'sobRgbPiDelayInst: SyncFrames',
'generic map(',
'    pixelDelay =&gt; sobRgbPiDelay)',
'port map(',
'    clk        =&gt; clk,',
'    reset      =&gt; rst_l,',
'    iRgb       =&gt; tp2inrgb,',
'    oRgb       =&gt; d1Rgb);',
'FrameMaskInst: FrameMask',
'generic map (',
'    eBlack       =&gt; true)',
'port map(            ',
'    clk         =&gt; clk,',
'    reset       =&gt; rst_l,',
'    iEdgeValid  =&gt; sEdgeValid,',
'    i1Rgb       =&gt; rgbImageKernel.sobel,',
'    i2Rgb       =&gt; d1Rgb,',
'    oRgb        =&gt; fRgb.maskSobelRgb);',
'end generate MASK_SOB_RGB_FRAME_ENABLE;',
'MASK_SOB_LUM_FRAME_ENABLE: if (M_SOB_LUM = true) generate',
'begin',
'FrameMaskInst: FrameMask',
'generic map (',
'    eBlack       =&gt; true)',
'port map(            ',
'    clk         =&gt; clk,',
'    reset       =&gt; rst_l,',
'    iEdgeValid  =&gt; sEdgeValid,',
'    i1Rgb       =&gt; rgbImageKernel.sobel,',
'    i2Rgb       =&gt; rgbImageKernel.colorLmp,',
'    oRgb        =&gt; fRgb.maskSobelLum);',
'end generate MASK_SOB_LUM_FRAME_ENABLE;',
'MASK_SOB_BLU_FRAME_ENABLE: if (M_SOB_BLU = true) generate',
'begin',
'FrameMaskInst: FrameMask',
'generic map (',
'    eBlack       =&gt; true)',
'port map(            ',
'    clk         =&gt; clk,',
'    reset       =&gt; rst_l,',
'    iEdgeValid  =&gt; sEdgeValid,',
'    i1Rgb       =&gt; rgbImageKernel.sobel,',
'    i2Rgb       =&gt; rgbImageKernel.blur,',
'    oRgb        =&gt; fRgb.maskSobelBlu);',
'end generate MASK_SOB_BLU_FRAME_ENABLE;',
'INRGB_FRAME_ENABLE: if (F_RGB = true) generate',
'    fRgb.inrgb &lt;= rgbImageKernel.inrgb;',
'end generate INRGB_FRAME_ENABLE;',
'-- INRGB_FRAME_ENABLE: if (F_RGB = true) generate',
'-- begin',
'-- TextGenInrgbInst: TextGen',
'-- generic map (',
'    -- img_width     =&gt; img_width,',
'    -- img_height    =&gt; img_height,',
'    -- displayText   =&gt; "INRGB")',
'-- port map(            ',
'    -- clk      =&gt; clk,',
'    -- rst_l    =&gt; rst_l,',
'    -- txCord   =&gt; txCord,',
'    -- location =&gt; location,',
'    -- iRgb     =&gt; rgbImageKernel.inrgb,',
'    -- oRgb     =&gt; fRgb.inrgb);',
'-- end generate INRGB_FRAME_ENABLE;',
'YCBCR_FRAME_ENABLE: if (F_YCC = true) generate',
'signal rgbYcbcr   : channel;',
'begin',
'-- TextGenYcbcrInst: TextGen',
'-- generic map (',
'    -- img_width     =&gt; img_width,',
'    -- img_height    =&gt; img_height,',
'    -- displayText   =&gt; "YCBCR")',
'-- port map(            ',
'    -- clk      =&gt; clk,',
'    -- rst_l    =&gt; rst_l,',
'    -- txCord   =&gt; txCord,',
'    -- location =&gt; location,',
'    -- iRgb     =&gt; rgbImageKernel.ycbcr,',
'    -- oRgb     =&gt; rgbYcbcr);',
'rgbYcbcr &lt;= rgbImageKernel.ycbcr;',
'process (clk) begin',
'    if rising_edge(clk) then',
'        if(cYcc = "001")then',
'            fRgb.ycbcr.red       &lt;= rgbYcbcr.red;',
'            fRgb.ycbcr.green     &lt;= rgbYcbcr.red;',
'            fRgb.ycbcr.blue      &lt;= rgbYcbcr.red;',
'            fRgb.ycbcr.valid     &lt;= rgbYcbcr.valid;',
'        elsif(cYcc = "010")then',
'            fRgb.ycbcr.red       &lt;= rgbYcbcr.green;',
'            fRgb.ycbcr.green     &lt;= rgbYcbcr.green;',
'            fRgb.ycbcr.blue      &lt;= rgbYcbcr.green;',
'            fRgb.ycbcr.valid     &lt;= rgbYcbcr.valid;',
'        elsif(cYcc = "100")then',
'            fRgb.ycbcr.red       &lt;= rgbYcbcr.blue;',
'            fRgb.ycbcr.green     &lt;= rgbYcbcr.blue;',
'            fRgb.ycbcr.blue      &lt;= rgbYcbcr.blue;',
'            fRgb.ycbcr.valid     &lt;= rgbYcbcr.valid;',
'        else',
'            fRgb.ycbcr.red       &lt;= rgbYcbcr.red;',
'            fRgb.ycbcr.green     &lt;= rgbYcbcr.green;',
'            fRgb.ycbcr.blue      &lt;= rgbYcbcr.blue;',
'            fRgb.ycbcr.valid     &lt;= rgbYcbcr.valid;',
'        end if;',
'    end if;',
'end process;',
'end generate YCBCR_FRAME_ENABLE;',
'SHARP_FRAME_ENABLE: if (F_SHP = true) generate',
'-- begin',
'-- TextGenSharpInst: TextGen',
'-- generic map (',
'    -- img_width     =&gt; img_width,',
'    -- img_height    =&gt; img_height,',
'    -- displayText   =&gt; "SHARP")',
'-- port map(            ',
'    -- clk      =&gt; clk,',
'    -- rst_l    =&gt; rst_l,',
'    -- txCord   =&gt; txCord,',
'    -- location =&gt; location,',
'    -- iRgb     =&gt; rgbImageKernel.sharp,',
'    -- oRgb     =&gt; fRgb.sharp);',
'fRgb.sharp &lt;= rgbImageKernel.sharp;',
'end generate SHARP_FRAME_ENABLE;',
'BLURE_FRAME_ENABLE: if (F_BLU = true) generate',
'-- begin',
'-- TextGenBlurInst: TextGen',
'-- generic map (',
'    -- img_width     =&gt; img_width,',
'    -- img_height    =&gt; img_height,',
'    -- displayText   =&gt; "BLUR")',
'-- port map(            ',
'    -- clk      =&gt; clk,',
'    -- rst_l    =&gt; rst_l,',
'    -- txCord   =&gt; txCord,',
'    -- location =&gt; location,',
'    -- iRgb     =&gt; rgbImageKernel.blur,',
'    -- oRgb     =&gt; fRgb.blur);',
'fRgb.blur &lt;= rgbImageKernel.blur;',
'end generate BLURE_FRAME_ENABLE;',
'EMBOS_FRAME_ENABLE: if (F_EMB = true) generate',
'-- begin',
'-- TextGenEmbossInst: TextGen',
'-- generic map (',
'    -- img_width     =&gt; img_width,',
'    -- img_height    =&gt; img_height,',
'    -- displayText   =&gt; "EMBOSS")',
'-- port map(            ',
'    -- clk      =&gt; clk,',
'    -- rst_l    =&gt; rst_l,',
'    -- txCord   =&gt; txCord,',
'    -- location =&gt; location,',
'    -- iRgb     =&gt; rgbImageKernel.embos,',
'    -- oRgb     =&gt; fRgb.embos);',
'fRgb.embos &lt;= rgbImageKernel.embos;',
'end generate EMBOS_FRAME_ENABLE;',
'SOBEL_FRAME_ENABLE: if (F_SOB = true) generate',
'    fRgb.sobel &lt;= rgbImageKernel.sobel;',
'end generate SOBEL_FRAME_ENABLE;',
'-- SOBEL_FRAME_ENABLE: if (F_SOB = true) generate',
'-- begin',
'-- TextGenSobelInst: TextGen',
'-- generic map (',
'    -- img_width     =&gt; img_width,',
'    -- img_height    =&gt; img_height,',
'    -- displayText   =&gt; "SOBEL")',
'-- port map(            ',
'    -- clk      =&gt; clk,',
'    -- rst_l    =&gt; rst_l,',
'    -- txCord   =&gt; txCord,',
'    -- location =&gt; location,',
'    -- iRgb     =&gt; rgbImageKernel.sobel,',
'    -- oRgb     =&gt; fRgb.sobel);',
'-- end generate SOBEL_FRAME_ENABLE;',
'CGAIN_FRAME_ENABLE: if (F_CGA = true) generate',
'-- begin',
'-- TextGenCgainInst: TextGen',
'-- generic map (',
'    -- img_width     =&gt; img_width,',
'    -- img_height    =&gt; img_height,',
'    -- displayText   =&gt; "CGAIN")',
'-- port map(            ',
'    -- clk      =&gt; clk,',
'    -- rst_l    =&gt; rst_l,',
'    -- txCord   =&gt; txCord,',
'    -- location =&gt; location,',
'    -- iRgb     =&gt; rgbImageKernel.cgain,',
'    -- oRgb     =&gt; fRgb.cgain);',
'fRgb.cgain &lt;= rgbImageKernel.cgain;',
'end generate CGAIN_FRAME_ENABLE;',
'HSL_FRAME_ENABLE: if (F_HSL = true) generate',
'    fRgb.hsl &lt;= rgbImageKernel.hsl;',
'end generate HSL_FRAME_ENABLE;',
'-- HSL_FRAME_ENABLE: if (F_HSL = true) generate',
'-- begin',
'-- TextGenHslInst: TextGen',
'-- generic map (',
'    -- img_width     =&gt; img_width,',
'    -- img_height    =&gt; img_height,',
'    -- displayText   =&gt; "HSL")',
'-- port map(            ',
'    -- clk      =&gt; clk,',
'    -- rst_l    =&gt; rst_l,',
'    -- txCord   =&gt; txCord,',
'    -- location =&gt; location,',
'    -- iRgb     =&gt; rgbImageKernel.hsl,',
'    -- oRgb     =&gt; fRgb.hsl);',
'-- end generate HSL_FRAME_ENABLE;',
'HSV_FRAME_ENABLE: if (F_HSV = true) generate',
'signal rgbHsv   : channel;',
'begin',
'-- TextGenHsvInst: TextGen',
'-- generic map (',
'    -- img_width     =&gt; img_width,',
'    -- img_height    =&gt; img_height,',
'    -- displayText   =&gt; "HSV")',
'-- port map(            ',
'    -- clk      =&gt; clk,',
'    -- rst_l    =&gt; rst_l,',
'    -- txCord   =&gt; txCord,',
'    -- location =&gt; location,',
'    -- iRgb     =&gt; rgbImageKernel.hsv,',
'    -- oRgb     =&gt; rgbHsv);',
'rgbHsv &lt;= rgbImageKernel.hsv;',
'process (clk) begin',
'    if rising_edge(clk) then',
'        if(cHsv = "001")then',
'            fRgb.hsv.red       &lt;= rgbHsv.red;',
'            fRgb.hsv.green     &lt;= rgbHsv.red;',
'            fRgb.hsv.blue      &lt;= rgbHsv.red;',
'            fRgb.hsv.valid     &lt;= rgbHsv.valid;',
'        elsif(cHsv = "010")then',
'            fRgb.hsv.red       &lt;= rgbHsv.green;',
'            fRgb.hsv.green     &lt;= rgbHsv.green;',
'            fRgb.hsv.blue      &lt;= rgbHsv.green;',
'            fRgb.hsv.valid     &lt;= rgbHsv.valid;',
'        elsif(cHsv = "100")then',
'            fRgb.hsv.red       &lt;= rgbHsv.blue;',
'            fRgb.hsv.green     &lt;= rgbHsv.blue;',
'            fRgb.hsv.blue      &lt;= rgbHsv.blue;',
'            fRgb.hsv.valid     &lt;= rgbHsv.valid;',
'        else',
'            fRgb.hsv.red       &lt;= rgbHsv.red;',
'            fRgb.hsv.green     &lt;= rgbHsv.green;',
'            fRgb.hsv.blue      &lt;= rgbHsv.blue;',
'            fRgb.hsv.valid     &lt;= rgbHsv.valid;',
'        end if;',
'    end if;',
'end process;',
'end generate HSV_FRAME_ENABLE;',
'LUM_FRAME_ENABLE: if (F_LUM = true) generate',
'-- begin',
'-- TextGenHsvInst: TextGen',
'-- generic map (',
'    -- img_width     =&gt; img_width,',
'    -- img_height    =&gt; img_height,',
'    -- displayText   =&gt; "LUM")',
'-- port map(            ',
'    -- clk      =&gt; clk,',
'    -- rst_l    =&gt; rst_l,',
'    -- txCord   =&gt; txCord,',
'    -- location =&gt; location,',
'    -- iRgb     =&gt; rgbImageKernel.colorLmp,',
'    -- oRgb     =&gt; fRgb.colorLmp);',
'fRgb.colorLmp &lt;= rgbImageKernel.colorLmp;',
'end generate LUM_FRAME_ENABLE;',
'TRM_FRAME_ENABLE: if (F_TRM = true) generate',
'-- begin',
'-- TextGenTrmInst: TextGen',
'-- generic map (',
'    -- img_width     =&gt; img_width,',
'    -- img_height    =&gt; img_height,',
'    -- displayText   =&gt; "TRM")',
'-- port map(            ',
'    -- clk      =&gt; clk,',
'    -- rst_l    =&gt; rst_l,',
'    -- txCord   =&gt; txCord,',
'    -- location =&gt; location,',
'    -- iRgb     =&gt; rgbImageKernel.colorTrm,',
'    -- oRgb     =&gt; fRgb.colorTrm);',
'fRgb.colorTrm &lt;= rgbImageKernel.colorTrm;',
'end generate TRM_FRAME_ENABLE;',
'MASK_SOB_CGA_FRAME_DISABLED: if (M_SOB_CGA = false) generate',
'    fRgb.maskSobelCga  &lt;= init_channel;',
'end generate MASK_SOB_CGA_FRAME_DISABLED;',
'MASK_SOB_TRM_FRAME_DISABLED: if (M_SOB_TRM = false) generate',
'    fRgb.maskSobelTrm  &lt;= init_channel;',
'end generate MASK_SOB_TRM_FRAME_DISABLED;',
'MASK_SOB_HSL_FRAME_DISABLED: if (M_SOB_HSL = false) generate',
'    fRgb.maskSobelHsl  &lt;= init_channel;',
'end generate MASK_SOB_HSL_FRAME_DISABLED;',
'MASK_SOB_HSV_FRAME_DISABLED: if (M_SOB_HSV = false) generate',
'    fRgb.maskSobelHsv  &lt;= init_channel;',
'end generate MASK_SOB_HSV_FRAME_DISABLED;',
'MASK_SOB_YCC_FRAME_DISABLED: if (M_SOB_YCC = false) generate',
'    fRgb.maskSobelYcc  &lt;= init_channel;',
'end generate MASK_SOB_YCC_FRAME_DISABLED;',
'MASK_SOB_SHP_FRAME_DISABLED: if (M_SOB_SHP = false) generate',
'    fRgb.maskSobelShp  &lt;= init_channel;',
'end generate MASK_SOB_SHP_FRAME_DISABLED;',
'MASK_SOB_RGB_FRAME_DISABLED: if (M_SOB_RGB = false) generate',
'    fRgb.maskSobelRgb  &lt;= init_channel;',
'end generate MASK_SOB_RGB_FRAME_DISABLED;',
'MASK_SOB_LUM_FRAME_DISABLED: if (M_SOB_LUM = false) generate',
'    fRgb.maskSobelLum  &lt;= init_channel;',
'end generate MASK_SOB_LUM_FRAME_DISABLED;',
'MASK_SOB_BLU_FRAME_DISABLED: if (M_SOB_BLU = false) generate',
'    fRgb.maskSobelBlu  &lt;= init_channel;',
'end generate MASK_SOB_BLU_FRAME_DISABLED;',
'LUM_FRAME_DISABLED: if (F_LUM = false) generate',
'    fRgb.colorLmp  &lt;= init_channel;',
'end generate LUM_FRAME_DISABLED;',
'TRM_FRAME_DISABLED: if (F_TRM = false) generate',
'    fRgb.colorTrm  &lt;= init_channel;',
'end generate TRM_FRAME_DISABLED;',
'INRGB_FRAME_DISABLED: if (F_RGB = false) generate',
'    fRgb.inrgb     &lt;= init_channel;',
'end generate INRGB_FRAME_DISABLED;',
'YCBCR_FRAME_DISABLED: if (F_YCC = false) generate',
'    fRgb.ycbcr     &lt;= init_channel;',
'end generate YCBCR_FRAME_DISABLED;',
'SHARP_FRAME_DISABLED: if (F_SHP = false) generate',
'    fRgb.sharp     &lt;= init_channel;',
'end generate SHARP_FRAME_DISABLED;',
'BLURE_FRAME_DISABLED: if (F_BLU = false) generate',
'    fRgb.blur     &lt;= init_channel;',
'end generate BLURE_FRAME_DISABLED;',
'EMBOS_FRAME_DISABLED: if (F_EMB = false) generate',
'    fRgb.embos     &lt;= init_channel;',
'end generate EMBOS_FRAME_DISABLED;',
'SOBEL_FRAME_DISABLED: if (F_SOB = false) generate',
'    fRgb.sobel     &lt;= init_channel;',
'end generate SOBEL_FRAME_DISABLED;',
'CGAIN_FRAME_DISABLED: if (F_CGA = false) generate',
'    fRgb.cgain     &lt;= init_channel;',
'end generate CGAIN_FRAME_DISABLED;',
'HSL_FRAME_DISABLED: if (F_HSL = false) generate',
'    fRgb.hsl     &lt;= init_channel;',
'end generate HSL_FRAME_DISABLED;',
'HSV_FRAME_DISABLED: if (F_HSV = false) generate',
'    fRgb.hsv     &lt;= init_channel;',
'end generate HSV_FRAME_DISABLED;',
'end Behavioral;'
];
countinueBuildStmtTable(g_sourceLines);
