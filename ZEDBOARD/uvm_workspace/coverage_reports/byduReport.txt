Coverage Report by DU with details

=================================================================================
=== Subprogram: work.axi4_stream_master_agent_pkg::axi4_stream_master_sequence::body
=================================================================================
=== Design Unit: work.axi4_stream_master_agent_pkg
=================================================================================

Assertion Coverage:
    Assertions                       1         1         0     100.0
-------------------------------------------------------
Name                 File(Line)           Failure Pass 
                                          Count   Count 
-------------------------------------------------------
work.axi4_stream_master_agent_pkg::axi4_stream_master_sequence/body/#ublk#13123591#27/immed__30
                     ../../uvmtb/tb/env/system_env/../axi4_stream_env/../../agent/sequence/axi4_stream_master_sequence.svh(30)       0     1

=================================================================================
=== Design Unit: work.axi4_stream_master_agent_pkg
=================================================================================

Assertion Coverage:
    Assertions                       1         1         0     100.0

=================================================================================
=== Subprogram: work.axi4_stream_pkg::axi4_stream_test::run_phase
=================================================================================
=== Design Unit: work.axi4_stream_pkg
=================================================================================

Assertion Coverage:
    Assertions                       1         1         0     100.0
-------------------------------------------------------
Name                 File(Line)           Failure Pass 
                                          Count   Count 
-------------------------------------------------------
work.axi4_stream_pkg::axi4_stream_test/run_phase/immed__39
                     ../../uvmtb/tb/env/system_env/../axi4_stream_env/../../test/axi4_stream/axi4_stream_test.sv(39)       0     1

=================================================================================
=== Design Unit: work.axi4_stream_pkg
=================================================================================

Assertion Coverage:
    Assertions                       1         1         0     100.0

=================================================================================
=== Design Unit: work.axi4s_if
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            5         5         0     100.0

================================Statement Details================================

Statement Coverage for Design Unit work.axi4s_if --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/tb/top/system_top/../../interfaces/axi4s_if.sv
    1                                                interface axi4s_if(input bit ACLK,ARESET_N);
    2                                                    parameter DATA_BYTES = 16;
    3                                                    logic TVALID;    // Master valid
    4                                                    logic TLAST;    // Master TLAST
    5                                                    logic TREADY;    // Slave ready
    6                                                    logic [DATA_BYTES-1:0] TDATA;    //-- Master data
    7                                                    logic TUSER;    //-- Master sideband signals
    8                                                    //--
    9                                                    //--DEBUG signals
    10                                                   //--
    11                                                   //logic [DATA_BYTES/16-1:0] DEBUG_VALIDS;        //-- contains the AX-VALID Flags
    12                                                   //logic [DATA_BYTES/16-1:0] DEBUG_HEADERS;    //-- contains the AX-HEADER Flags
    13                                                   //logic [DATA_BYTES/16-1:0] DEBUG_TAILS;        //-- contains the AX-TAIL Flags
    14                                                   ////-- assigning the debug signals to TUSER
    15                                                   //assign DEBUG_VALIDS     = (DATA_BYTES /16)-1: (DATA_BYTES /16);
    16                                                   //assign DEBUG_HEADERS    = (DATA_BYTES /16)-1: (DATA_BYTES /16);
    17                                                   //assign DEBUG_TAILS      = (DATA_BYTES /16)-1: (DATA_BYTES /16);
    18                                                   //--
    19                                                   //-- Interface Coverage
    20                                                   //--
    21                                                   covergroup axi4_cg @ (posedge ACLK);
    22                                                       option.per_instance = 1;
    23                                                       T_VALID : coverpoint TVALID;
    24                                                       T_READY : coverpoint TREADY;
    25                                                       //-- cover the amount of consecutive AXI4 transactions
    26                                                       CONSECUTIVE_TRANSACTIONS: coverpoint {TVALID , TREADY}{
    27                                                           bins transactions_single    = (0,1,2 =>3            => 0,1,2);
    28                                                           bins transactions_1_5[]     = (0,1,2 =>3[*2:10]     => 0,1,2);
    29                                                           bins transactions_11_50[]     = (0,1,2 =>3[*11:50]    => 0,1,2);
    30                                                           bins transactions_huge         = (0,1,2 =>3[*51:100000]=> 0,1,2);
    31                                                       }
    32                                                       //-- cover the waiting time after TVALID is set until TREADY in clock cycles
    33                                                       TRANSACTION_WAITING: coverpoint {TVALID , TREADY}{
    34                                                           bins zero_waiting_time        = (0,1                => 3);
    35                                                           bins low_waiting_time[]        = (2[*1:5]            => 3);
    36                                                           bins medium_waiting_time[]    = (2[*6:15]         => 3);
    37                                                           bins high_waiting_time        = (2[*16:100000]     => 3);
    38                                                           illegal_bins illegal        = (2                => 0);
    39                                                       }
    40                                                       //-- Pause between Transactions
    41                                                       TRANSACTION_PAUSE: coverpoint {TVALID , TREADY}{
    42                                                           bins low_waiting_time[]        = (3 => 0[*1:5]        => 2,3);
    43                                                           bins medium_waiting_time[]    = (3 => 0[*6:15]     => 2,3);
    44                                                           bins high_waiting_time        = (3 => 0[*16:100]     => 2,3);
    45                                                       }
    46                                                       //-- cover the time TREADY is active until deassertion or TVALID in clock cycles
    47                                                       READY_WITHOUT_VALID: coverpoint {TVALID , TREADY}{
    48                                                           bins short_ready_time[]        = (1[*1:5]      => 3,0);
    49                                                           bins medium_ready_time[]    = (1[*6:15]     => 3,0);
    50                                                           bins high_ready_time        = (1[*16:100000]=> 3,0);
    51                                                       }
    52                                                       //--cover all available transitions of TVALID/TREADY
    53                                                       CASES_VALID_READY : cross T_VALID, T_READY;
    54                                                       TRANSITIONS: coverpoint {TVALID, TREADY}{
    55                                                           bins transition[] = ( 0,1,3 => [0:3]), (2 => 2,3) ;
    56                                                       }
    57                                                       //-- cover active VALID Flags
    58                                                       //VALID_FLAGS : coverpoint DEBUG_VALIDS;
    59                                                       //VALID_TRANSITIONS : coverpoint DEBUG_VALIDS {
    60                                                       //    bins transition [] = ( [1:(1<<($size(DEBUG_VALIDS))) -1] => [1:(1<<($size(DEBUG_VALIDS))) -1] );
    61                                                       //}
    62                                                       //-- cover active HEADER Flags
    63                                                       //HDR_FLAGS   : coverpoint DEBUG_HEADERS;
    64                                                       //HDR_TRANSITIONS : coverpoint DEBUG_HEADERS {
    65                                                       //    bins transition [] = ( [1:1<<($size(DEBUG_HEADERS)) -1] => [1:1<<($size(DEBUG_HEADERS)) -1] );
    66                                                       //}
    67                                                       ////-- cover active TAIL Flags
    68                                                       //TAIL_FLAGS  : coverpoint DEBUG_TAILS;
    69                                                       //TAIL_TRANSITIONS : coverpoint DEBUG_TAILS {
    70                                                       //    bins transition [] = ( [1:1<<($size(DEBUG_TAILS)) -1] => [1:1<<($size(DEBUG_TAILS)) -1] );
    71                                                       //}
    72                                                       //CROSS_HDR_TAILS : cross HDR_FLAGS, TAIL_FLAGS;
    73                                                       //HDR_TAILS : coverpoint { DEBUG_HEADERS != {$size(DEBUG_HEADERS){1'b0}} ,DEBUG_TAILS != {$size(DEBUG_TAILS){1'b0}}   };
    74                                                   endgroup
    75                                                   //-- creating an instance of the covergroup
    76              1                          1         axi4_cg axi4 = new();
    77                                                   property reset_synchronous_deassert_p;
    78                                                       @(edge ACLK)
    79                                                       !ARESET_N |-> ARESET_N[->1];
    80                                                   endproperty
    81                                                   // chk_reset_tvalid    : assert property (
    82                                               //         //-- TVALID must be inactive during Reset
    83                                               //         @(posedge ACLK)
    84                                               //         !ARESET_N |-> TVALID == 1'b0
    85                                               //     );
    86                                                   chk_valid_hold         : assert property (
    87                                                       //-- if TVALID is set it must be active until TREADY
    88                                                       @(posedge ACLK) disable iff(!ARESET_N)
    89                                                       (TVALID == 1 && TREADY == 0) |=> (TVALID==1)
    90                                                   );
    91                                                   //chk_valid_headers     : assert property (
    92                                                   //    //-- check if HEADER Flags are a subset of VALID Flags
    93                                                   //    @(posedge ACLK) disable iff (!ARESET_N)
    94                                                   //    (TVALID == 1'b1)    |-> (DEBUG_VALIDS | DEBUG_HEADERS
    95                                                   //                          == DEBUG_VALIDS)
    96                                                   //);
    97                                                   //chk_valid_tails     : assert property (
    98                                                   //    //-- check if TAIL Flags are a subset of VALID Flags
    99                                                   //    @(posedge ACLK) disable iff (!ARESET_N)
    100                                                  //    (TVALID == 1'b1)    |-> (DEBUG_VALIDS | DEBUG_TAILS
    101                                                  //                          == DEBUG_VALIDS)
    102                                                  //);
    103                                                  //check_spanning_ax_pkts    : assert property (
    104                                                  //    //-- check that TVALID stays high if a ax_packet_transaction ranges over multiple axi cycles
    105                                                  //    //-- starts if more header than tails
    106                                                  //    //-- completes if more tails than header
    107                                                  //    @(posedge ACLK  )  disable iff (!ARESET_N)
    108                                                  //        (TVALID &&                        ( $countones(DEBUG_HEADERS) > $countones(DEBUG_TAILS) ))
    109                                                  //        |=>    (TVALID == 1) throughout     ( $countones(DEBUG_HEADERS) < $countones(DEBUG_TAILS) )[->1]
    110                                                  //);
    111                                                  time clk_rise;
    112                                                  time reset_rise;
    113             1                        100         always @(posedge ACLK) begin    
    114                                                      if(ARESET_N == 0)
    115             1                         99                 clk_rise <= $time();
    116                                                  end
    117             1                          1         always @(posedge ARESET_N) begin
    118             1                          1             reset_rise <= $time();

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         2         2         0     100.0

================================Branch Details================================

Branch Coverage for Design Unit work.axi4s_if

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/tb/top/system_top/../../interfaces/axi4s_if.sv
------------------------------------IF Branch------------------------------------
    114                                      100     Count coming in to IF
    114             1                         99             if(ARESET_N == 0)
                                               1     All False Count
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

Covergroup Coverage:
    Cover Group Types                1        na        na      46.1
    Coverpoints/Crosses              8        na        na        na
        Covergroup Bins            544        32       512       5.8
-----------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal    Status               
                                                                                              
-----------------------------------------------------------------------------------------------
 TYPE work.axi4s_if::axi4_cg                            46.1%        100    Uncovered            
    covered/total bins:                                    32        544                      
    missing/total bins:                                   512        544                      
    % Hit:                                               5.8%        100                      
    type_option.weight=1
    type_option.goal=100
    type_option.comment=
    type_option.strobe=0
    type_option.merge_instances=0
    Coverpoint axi4_cg::T_VALID                        100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
    Coverpoint axi4_cg::T_READY                        100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
    Coverpoint axi4_cg::CONSECUTIVE_TRANSACTIONS         0.6%        100    Uncovered            
        covered/total bins:                                 3        443                      
        missing/total bins:                               440        443                      
        % Hit:                                           0.6%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
    Coverpoint axi4_cg::TRANSACTION_WAITING              5.8%        100    Uncovered            
        covered/total bins:                                 1         17                      
        missing/total bins:                                16         17                      
        % Hit:                                           5.8%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
    Coverpoint axi4_cg::TRANSACTION_PAUSE                0.0%        100    ZERO                 
        covered/total bins:                                 0         31                      
        missing/total bins:                                31         31                      
        % Hit:                                           0.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
    Coverpoint axi4_cg::READY_WITHOUT_VALID             51.6%        100    Uncovered            
        covered/total bins:                                16         31                      
        missing/total bins:                                15         31                      
        % Hit:                                          51.6%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
    Coverpoint axi4_cg::TRANSITIONS                     35.7%        100    Uncovered            
        covered/total bins:                                 5         14                      
        missing/total bins:                                 9         14                      
        % Hit:                                          35.7%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
    Cross axi4_cg::CASES_VALID_READY                    75.0%        100    Uncovered            
        covered/total bins:                                 3          4                      
        missing/total bins:                                 1          4                      
        % Hit:                                          75.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
 Covergroup instance \/top/axi4s_vif/axi4               46.1%        100    Uncovered            
    covered/total bins:                                    32        544                      
    missing/total bins:                                   512        544                      
    % Hit:                                               5.8%        100                      
    option.name=\/top/axi4s_vif/axi4 
    option.weight=1
    option.goal=100
    option.comment=
    option.at_least=1
    option.auto_bin_max=64
    option.cross_num_print_missing=0
    option.detect_overlap=0
    option.per_instance=1
    option.get_inst_coverage=0
    Coverpoint T_VALID                                 100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.auto_bin_max=64
        option.detect_overlap=0
        bin auto[0]                                      9760          1    Covered              
        bin auto[1]                                      1000          1    Covered              
    Coverpoint T_READY                                 100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.auto_bin_max=64
        option.detect_overlap=0
        bin auto[0]                                         1          1    Covered              
        bin auto[1]                                     10659          1    Covered              
    Coverpoint CONSECUTIVE_TRANSACTIONS                  0.6%        100    Uncovered            
        covered/total bins:                                 3        443                      
        missing/total bins:                               440        443                      
        % Hit:                                           0.6%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.auto_bin_max=64
        option.detect_overlap=0
        bin transactions_single                           896          1    Covered              
        bin transactions_1_5[2=>3[*2]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*2]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*2]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*3]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*3]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*3]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*4]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*4]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*4]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*5]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*5]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*5]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*6]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*6]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*6]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*7]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*7]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*7]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*8]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*8]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*8]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*9]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*9]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*9]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*10]=>2]                  0          1    ZERO                 
        bin transactions_1_5[2=>3[*10]=>1]                  0          1    ZERO                 
        bin transactions_1_5[2=>3[*10]=>0]                  0          1    ZERO                 
        bin transactions_1_5[1=>3[*2]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*2]=>1]                  50          1    Covered              
        bin transactions_1_5[1=>3[*2]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*3]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*3]=>1]                   1          1    Covered              
        bin transactions_1_5[1=>3[*3]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*4]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*4]=>1]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*4]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*5]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*5]=>1]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*5]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*6]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*6]=>1]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*6]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*7]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*7]=>1]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*7]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*8]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*8]=>1]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*8]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*9]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*9]=>1]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*9]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*10]=>2]                  0          1    ZERO                 
        bin transactions_1_5[1=>3[*10]=>1]                  0          1    ZERO                 
        bin transactions_1_5[1=>3[*10]=>0]                  0          1    ZERO                 
        bin transactions_1_5[0=>3[*2]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*2]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*2]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*3]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*3]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*3]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*4]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*4]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*4]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*5]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*5]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*5]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*6]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*6]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*6]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*7]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*7]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*7]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*8]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*8]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*8]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*9]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*9]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*9]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*10]=>2]                  0          1    ZERO                 
        bin transactions_1_5[0=>3[*10]=>1]                  0          1    ZERO                 
        bin transactions_1_5[0=>3[*10]=>0]                  0          1    ZERO                 
        bin transactions_11_50[2=>3[*11]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*11]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*11]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*12]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*12]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*12]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*13]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*13]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*13]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*14]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*14]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*14]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*15]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*15]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*15]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*16]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*16]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*16]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*17]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*17]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*17]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*18]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*18]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*18]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*19]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*19]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*19]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*20]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*20]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*20]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*21]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*21]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*21]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*22]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*22]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*22]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*23]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*23]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*23]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*24]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*24]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*24]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*25]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*25]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*25]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*26]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*26]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*26]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*27]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*27]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*27]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*28]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*28]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*28]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*29]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*29]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*29]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*30]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*30]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*30]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*31]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*31]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*31]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*32]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*32]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*32]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*33]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*33]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*33]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*34]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*34]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*34]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*35]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*35]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*35]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*36]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*36]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*36]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*37]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*37]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*37]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*38]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*38]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*38]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*39]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*39]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*39]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*40]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*40]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*40]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*41]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*41]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*41]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*42]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*42]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*42]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*43]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*43]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*43]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*44]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*44]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*44]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*45]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*45]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*45]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*46]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*46]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*46]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*47]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*47]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*47]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*48]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*48]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*48]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*49]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*49]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*49]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*50]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*50]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*50]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*11]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*11]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*11]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*12]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*12]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*12]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*13]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*13]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*13]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*14]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*14]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*14]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*15]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*15]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*15]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*16]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*16]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*16]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*17]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*17]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*17]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*18]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*18]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*18]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*19]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*19]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*19]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*20]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*20]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*20]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*21]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*21]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*21]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*22]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*22]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*22]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*23]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*23]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*23]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*24]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*24]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*24]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*25]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*25]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*25]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*26]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*26]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*26]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*27]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*27]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*27]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*28]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*28]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*28]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*29]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*29]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*29]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*30]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*30]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*30]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*31]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*31]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*31]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*32]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*32]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*32]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*33]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*33]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*33]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*34]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*34]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*34]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*35]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*35]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*35]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*36]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*36]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*36]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*37]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*37]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*37]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*38]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*38]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*38]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*39]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*39]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*39]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*40]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*40]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*40]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*41]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*41]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*41]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*42]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*42]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*42]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*43]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*43]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*43]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*44]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*44]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*44]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*45]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*45]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*45]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*46]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*46]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*46]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*47]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*47]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*47]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*48]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*48]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*48]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*49]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*49]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*49]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*50]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*50]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*50]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*11]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*11]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*11]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*12]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*12]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*12]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*13]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*13]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*13]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*14]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*14]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*14]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*15]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*15]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*15]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*16]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*16]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*16]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*17]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*17]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*17]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*18]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*18]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*18]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*19]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*19]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*19]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*20]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*20]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*20]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*21]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*21]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*21]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*22]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*22]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*22]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*23]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*23]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*23]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*24]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*24]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*24]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*25]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*25]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*25]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*26]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*26]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*26]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*27]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*27]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*27]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*28]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*28]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*28]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*29]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*29]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*29]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*30]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*30]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*30]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*31]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*31]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*31]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*32]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*32]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*32]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*33]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*33]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*33]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*34]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*34]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*34]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*35]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*35]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*35]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*36]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*36]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*36]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*37]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*37]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*37]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*38]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*38]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*38]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*39]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*39]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*39]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*40]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*40]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*40]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*41]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*41]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*41]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*42]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*42]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*42]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*43]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*43]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*43]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*44]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*44]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*44]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*45]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*45]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*45]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*46]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*46]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*46]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*47]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*47]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*47]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*48]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*48]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*48]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*49]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*49]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*49]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*50]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*50]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*50]=>0]                0          1    ZERO                 
        bin transactions_huge                               0          1    ZERO                 
    Coverpoint TRANSACTION_WAITING                       5.8%        100    Uncovered            
        covered/total bins:                                 1         17                      
        missing/total bins:                                16         17                      
        % Hit:                                           5.8%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.auto_bin_max=64
        option.detect_overlap=0
        illegal_bin illegal                                 0               ZERO                 
        bin zero_waiting_time                             948          1    Covered              
        bin low_waiting_time[2[*1]=>3]                      0          1    ZERO                 
        bin low_waiting_time[2[*2]=>3]                      0          1    ZERO                 
        bin low_waiting_time[2[*3]=>3]                      0          1    ZERO                 
        bin low_waiting_time[2[*4]=>3]                      0          1    ZERO                 
        bin low_waiting_time[2[*5]=>3]                      0          1    ZERO                 
        bin medium_waiting_time[2[*6]=>3]                   0          1    ZERO                 
        bin medium_waiting_time[2[*7]=>3]                   0          1    ZERO                 
        bin medium_waiting_time[2[*8]=>3]                   0          1    ZERO                 
        bin medium_waiting_time[2[*9]=>3]                   0          1    ZERO                 
        bin medium_waiting_time[2[*10]=>3]                  0          1    ZERO                 
        bin medium_waiting_time[2[*11]=>3]                  0          1    ZERO                 
        bin medium_waiting_time[2[*12]=>3]                  0          1    ZERO                 
        bin medium_waiting_time[2[*13]=>3]                  0          1    ZERO                 
        bin medium_waiting_time[2[*14]=>3]                  0          1    ZERO                 
        bin medium_waiting_time[2[*15]=>3]                  0          1    ZERO                 
        bin high_waiting_time                               0          1    ZERO                 
    Coverpoint TRANSACTION_PAUSE                         0.0%        100    ZERO                 
        covered/total bins:                                 0         31                      
        missing/total bins:                                31         31                      
        % Hit:                                           0.0%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.auto_bin_max=64
        option.detect_overlap=0
        bin low_waiting_time[3=>0[*1]=>3]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*1]=>2]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*2]=>3]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*2]=>2]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*3]=>3]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*3]=>2]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*4]=>3]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*4]=>2]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*5]=>3]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*5]=>2]                   0          1    ZERO                 
        bin medium_waiting_time[3=>0[*6]=>3]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*6]=>2]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*7]=>3]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*7]=>2]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*8]=>3]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*8]=>2]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*9]=>3]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*9]=>2]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*10]=>3]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*10]=>2]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*11]=>3]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*11]=>2]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*12]=>3]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*12]=>2]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*13]=>3]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*13]=>2]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*14]=>3]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*14]=>2]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*15]=>3]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*15]=>2]               0          1    ZERO                 
        bin high_waiting_time                               0          1    ZERO                 
    Coverpoint READY_WITHOUT_VALID                      51.6%        100    Uncovered            
        covered/total bins:                                16         31                      
        missing/total bins:                                15         31                      
        % Hit:                                          51.6%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.auto_bin_max=64
        option.detect_overlap=0
        bin short_ready_time[1[*1]=>3]                    948          1    Covered              
        bin short_ready_time[1[*1]=>0]                      0          1    ZERO                 
        bin short_ready_time[1[*2]=>3]                    905          1    Covered              
        bin short_ready_time[1[*2]=>0]                      0          1    ZERO                 
        bin short_ready_time[1[*3]=>3]                    857          1    Covered              
        bin short_ready_time[1[*3]=>0]                      0          1    ZERO                 
        bin short_ready_time[1[*4]=>3]                    807          1    Covered              
        bin short_ready_time[1[*4]=>0]                      0          1    ZERO                 
        bin short_ready_time[1[*5]=>3]                    760          1    Covered              
        bin short_ready_time[1[*5]=>0]                      0          1    ZERO                 
        bin medium_ready_time[1[*6]=>3]                   710          1    Covered              
        bin medium_ready_time[1[*6]=>0]                     0          1    ZERO                 
        bin medium_ready_time[1[*7]=>3]                   663          1    Covered              
        bin medium_ready_time[1[*7]=>0]                     0          1    ZERO                 
        bin medium_ready_time[1[*8]=>3]                   609          1    Covered              
        bin medium_ready_time[1[*8]=>0]                     0          1    ZERO                 
        bin medium_ready_time[1[*9]=>3]                   563          1    Covered              
        bin medium_ready_time[1[*9]=>0]                     0          1    ZERO                 
        bin medium_ready_time[1[*10]=>3]                  523          1    Covered              
        bin medium_ready_time[1[*10]=>0]                    0          1    ZERO                 
        bin medium_ready_time[1[*11]=>3]                  474          1    Covered              
        bin medium_ready_time[1[*11]=>0]                    0          1    ZERO                 
        bin medium_ready_time[1[*12]=>3]                  417          1    Covered              
        bin medium_ready_time[1[*12]=>0]                    0          1    ZERO                 
        bin medium_ready_time[1[*13]=>3]                  362          1    Covered              
        bin medium_ready_time[1[*13]=>0]                    0          1    ZERO                 
        bin medium_ready_time[1[*14]=>3]                  301          1    Covered              
        bin medium_ready_time[1[*14]=>0]                    0          1    ZERO                 
        bin medium_ready_time[1[*15]=>3]                  250          1    Covered              
        bin medium_ready_time[1[*15]=>0]                    0          1    ZERO                 
        bin high_ready_time                               205          1    Covered              
    Coverpoint TRANSITIONS                              35.7%        100    Uncovered            
        covered/total bins:                                 5         14                      
        missing/total bins:                                 9         14                      
        % Hit:                                          35.7%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.auto_bin_max=64
        option.detect_overlap=0
        bin transition[3=>3]                               52          1    Covered              
        bin transition[3=>2]                                0          1    ZERO                 
        bin transition[3=>1]                              947          1    Covered              
        bin transition[3=>0]                                0          1    ZERO                 
        bin transition[1=>3]                              948          1    Covered              
        bin transition[1=>2]                                0          1    ZERO                 
        bin transition[1=>1]                             8711          1    Covered              
        bin transition[1=>0]                                0          1    ZERO                 
        bin transition[0=>3]                                0          1    ZERO                 
        bin transition[0=>2]                                0          1    ZERO                 
        bin transition[0=>1]                                1          1    Covered              
        bin transition[0=>0]                                0          1    ZERO                 
        bin transition[2=>3]                                0          1    ZERO                 
        bin transition[2=>2]                                0          1    ZERO                 
    Cross CASES_VALID_READY                             75.0%        100    Uncovered            
        covered/total bins:                                 3          4                      
        missing/total bins:                                 1          4                      
        % Hit:                                          75.0%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.cross_num_print_missing=0
        bin <auto[0],auto[0]>                               1          1    Covered              
        bin <auto[0],auto[1]>                            9659          1    Covered              
        bin <auto[1],auto[1]>                            1000          1    Covered              
        bin <auto[1],auto[0]>                               0          1    ZERO                 

Assertion Coverage:
    Assertions                       3         0         3       0.0
-------------------------------------------------------
Name                 File(Line)           Failure Pass 
                                          Count   Count 
-------------------------------------------------------
work.axi4s_if::chk_valid_hold
                     ../../uvmtb/tb/top/system_top/../../interfaces/axi4s_if.sv(90)       0     0
work.axi4s_if::chk_data_hold
                     ../../uvmtb/tb/top/system_top/../../interfaces/axi4s_if.sv(137)       0     0
work.axi4s_if::chk_user_hold
                     ../../uvmtb/tb/top/system_top/../../interfaces/axi4s_if.sv(138)       0     0

=================================================================================
=== Design Unit: work.camerarawdata(arch_imp)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           49        29        20      59.1

================================Statement Details================================

Statement Coverage for Design Unit work.camerarawdata(arch_imp) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/CameraRawData.vhd
    28                                               architecture arch_imp of CameraRawData is
    29                                                   --PIXCLK SIDE
    30                                                   signal pLine          : std_logic :=lo;
    31                                                   signal pFrame         : std_logic :=lo;
    32                                                   signal pLineSyn       : std_logic :=lo;
    33                                                   signal pDataWrAddress : integer   := zero;
    34                                                   signal pSof           : std_logic :=lo;
    35                                                   signal pSol           : std_logic :=lo;
    36                                                   signal pEof           : std_logic :=lo;
    37                                                   signal pEol           : std_logic :=lo;
    38                                                   --M_AXIS_ACLK SIDE
    39                                                   signal ilvalSync1     : std_logic :=lo;
    40                                                   signal ilvalSync2     : std_logic :=lo;
    41                                                   signal ilvalSync3     : std_logic :=lo;
    42                                                   signal ilvalSync4     : std_logic :=lo;
    43                                                   signal ifvalSync1     : std_logic :=lo;
    44                                                   signal ifvalSync2     : std_logic :=lo;
    45                                                   signal endOfLine      : std_logic :=lo;
    46                                                   ----
    47                                                   signal rVdata         : std_logic_vector(11 downto 0):= (others => lo);
    48                                                   signal rLine          : std_logic :=lo;
    49                                                   type d5mSt is (readLineState,eolState,eofState,sofState);
    50                                                   signal d5mStates : d5mSt; 
    51                                                   signal cordx          : integer :=zero;
    52                                                   signal cordy          : integer :=zero;
    53                                               	signal imgWidth       : integer := 3071;
    54                                                   type plineRam is array (0 to img_width) of std_logic_vector (11 downto 0);
    55                                                   signal d5mLine        : plineRam := (others => (others => lo));
    56                                               begin
    57                                               -----------------------------------------------------------------------------------------
    58                                               --pixclk
    59                                               -----------------------------------------------------------------------------------------
    60              1                          2     endOfLine <= hi when (pLineSyn = hi and ilval = lo) else lo;
    61                                               d5mDataSyncP: process(pixclk) begin
    62                                                   if rising_edge(pixclk) then
    63              1                          2             pLine       <= ilval;
    64              1                          2     		pLineSyn    <= pLine;
    65              1                          2             pFrame      <= ifval;
    66                                                       if (pFrame = hi and pLine = hi) then
    67              1                    ***0***                 pDataWrAddress  <= pDataWrAddress + one;
    68                                                       else
    69              1                          2                 pDataWrAddress <= zero;
    70                                                       end if;
    71                                                       if (endOfLine = hi) then
    72              1                    ***0***                 imgWidth  <= pDataWrAddress;
    73                                                       else
    74              1                          2                 imgWidth  <= imgWidth;
    75                                                       end if;
    76              1                          2             d5mLine(pDataWrAddress) <= idata;
    77                                                   end if;
    78                                               end process d5mDataSyncP;
    79                                               -----------------------------------------------------------------------------------------
    80                                               cdcSignals: process (m_axis_aclk) begin
    81                                                   if rising_edge(m_axis_aclk) then
    82              1                      10760             ilvalSync1  <= ilval;
    83              1                      10760             ilvalSync2  <= ilvalSync1;
    84              1                      10760     		ifvalSync1  <= ifval;
    85              1                      10760             ifvalSync2  <= ifvalSync1;
    86                                                   end if;
    87                                               end process cdcSignals;
    88                                               edgeDetect: process (m_axis_aclk) begin
    89                                                   if rising_edge(m_axis_aclk) then
    90              1                      10760             ilvalSync3  <= ilvalSync2;
    91              1                      10760             ilvalSync4  <= ilvalSync3;
    92                                                   end if;
    93                                               end process edgeDetect;
    94              1                          3     pSol <= hi when (ilvalSync4 = lo and ilvalSync2 = hi) else lo;--risingEdge Detect
    95              1                          3     pEol <= hi when (ilvalSync4 = hi and ilvalSync2 = lo) else lo;--fallingEdge Detect
    96                                               readLineP: process (m_axis_aclk) begin
    97                                                   if (rising_edge (m_axis_aclk)) then
    98                                                       if (m_axis_aresetn = lo) then
    99              1                          3                 d5mStates <= sofState;
    100             1                          3     			pSof      <= lo;
    101             1                          3     			pEof      <= lo;
    102             1                          3     			rLine     <= lo;
    103             1                          3     			cordx     <= zero;
    104             1                          3     			cordy     <= zero;
    105                                                      else
    106                                                      case (d5mStates) is
    107                                                      when sofState =>
    108             1                          1                 pEof      <= lo;
    109                                                          if (ifvalSync2 = hi) and (pEol = hi) then --endOfLine and Sof
    110             1                    ***0***                     pSof      <= hi;
    111             1                    ***0***                     d5mStates <= readLineState;
    112                                                          end if;
    113                                                      when readLineState =>
    114                                                          if (cordx = imgWidth) then
    115             1                    ***0***                     rLine         <= lo;
    116             1                    ***0***                     d5mStates     <= eolState;
    117             1                    ***0***                     cordx         <= zero;
    118                                              			else
    119             1                    ***0***                     cordx         <= cordx + one;--start reading
    120             1                    ***0***     				rLine         <= hi;
    121             1                    ***0***     				pSof          <= lo;
    122             1                    ***0***     				d5mStates     <= readLineState;
    123                                                          end if;
    124                                                      when eolState =>
    125                                                          if (ifvalSync2 = lo)  then --endOfLine and Sof
    126             1                    ***0***                     cordy     <= zero;
    127             1                    ***0***                     d5mStates <= eofState;
    128                                              		    elsif(pEol = hi) then
    129             1                    ***0***                     d5mStates <= readLineState;
    130             1                    ***0***                     cordy     <= cordy + one;
    131                                              			else
    132             1                    ***0***                     d5mStates <= eolState;
    133                                                          end if;
    134                                                      when eofState =>	
    135             1                    ***0***     			d5mStates <= sofState;
    136             1                    ***0***                 pEof      <= hi;
    137                                                      when others =>
    138             1                    ***0***                 d5mStates <= sofState;
    139                                                      end case;
    140                                                      end if;
    141                                                  end if;
    142                                              end process readLineP;
    143                                              d5mLineRamP: process (m_axis_aclk) begin
    144                                                  if rising_edge(m_axis_aclk) then
    145             1                      10760             rVdata <= d5mLine(cordx);
    146                                                  end if;
    147                                              end process d5mLineRamP;
    148                                              d5mP: process (m_axis_aclk) begin
    149                                                  if rising_edge(m_axis_aclk) then
    150             1                          2             oRawData.valid  <= rLine;
    151             1                          2             oRawData.pEof   <= pEof;
    152             1                          2             oRawData.pSof   <= pSof;
    153             1                          2             oRawData.cord.x <= std_logic_vector(to_unsigned(cordx, 16)); 
    154             1                          2             oRawData.cord.y <= std_logic_vector(to_unsigned(cordy, 16)); 
    155                                                      if (rLine = hi) then
    156             1                    ***0***                 oRawData.data <= rVdata;
    157                                                      else
    158             1                          2                 oRawData.data <= (others =>lo);

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        32        16        16      50.0

================================Branch Details================================

Branch Coverage for Design Unit work.camerarawdata(arch_imp)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/CameraRawData.vhd
------------------------------------IF Branch------------------------------------
    60                                         2     Count coming in to IF
    60              1                    ***0***     endOfLine <= hi when (pLineSyn = hi and ilval = lo) else lo;
    60              2                          2     endOfLine <= hi when (pLineSyn = hi and ilval = lo) else lo;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    62                                         2     Count coming in to IF
    62              1                          2         if rising_edge(pixclk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    66                                         2     Count coming in to IF
    66              1                    ***0***             if (pFrame = hi and pLine = hi) then
    68              1                          2             else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    71                                         2     Count coming in to IF
    71              1                    ***0***             if (endOfLine = hi) then
    73              1                          2             else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    81                                     10760     Count coming in to IF
    81              1                      10760         if rising_edge(m_axis_aclk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    89                                     10760     Count coming in to IF
    89              1                      10760         if rising_edge(m_axis_aclk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    94                                         3     Count coming in to IF
    94              1                    ***0***     pSol <= hi when (ilvalSync4 = lo and ilvalSync2 = hi) else lo;--risingEdge Detect
    94              2                          3     pSol <= hi when (ilvalSync4 = lo and ilvalSync2 = hi) else lo;--risingEdge Detect
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    95                                         3     Count coming in to IF
    95              1                    ***0***     pEol <= hi when (ilvalSync4 = hi and ilvalSync2 = lo) else lo;--fallingEdge Detect
    95              2                          3     pEol <= hi when (ilvalSync4 = hi and ilvalSync2 = lo) else lo;--fallingEdge Detect
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    97                                         4     Count coming in to IF
    97              1                          4         if (rising_edge (m_axis_aclk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    98                                         4     Count coming in to IF
    98              1                          3             if (m_axis_aresetn = lo) then
    105             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    106                                        1     Count coming in to CASE
    107             1                          1             when sofState =>
    113             1                    ***0***             when readLineState =>
    124             1                    ***0***             when eolState =>
    134             1                    ***0***             when eofState =>	
    137             1                    ***0***             when others =>
Branch totals: 1 hit of 5 branches = 20.0%

------------------------------------IF Branch------------------------------------
    109                                        1     Count coming in to IF
    109             1                    ***0***                 if (ifvalSync2 = hi) and (pEol = hi) then --endOfLine and Sof
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    114                                  ***0***     Count coming in to IF
    114             1                    ***0***                 if (cordx = imgWidth) then
    118             1                    ***0***     			else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    125                                  ***0***     Count coming in to IF
    125             1                    ***0***                 if (ifvalSync2 = lo)  then --endOfLine and Sof
    128             1                    ***0***     		    elsif(pEol = hi) then
    131             1                    ***0***     			else
Branch totals: 0 hits of 3 branches = 0.0%

------------------------------------IF Branch------------------------------------
    144                                    10760     Count coming in to IF
    144             1                      10760         if rising_edge(m_axis_aclk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    149                                        2     Count coming in to IF
    149             1                          2         if rising_edge(m_axis_aclk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    155                                        2     Count coming in to IF
    155             1                    ***0***             if (rLine = hi) then
    157             1                          2             else
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms             10         0        10       0.0

================================Condition Details================================

Condition Coverage for Design Unit work.camerarawdata(arch_imp) --

  File ../../uvmtb/dut/src/Control/CameraRawData.vhd
----------------Focused Condition View-------------------
Line       60 Item    1  ((pLineSyn = hi) and (ilval = lo))
Condition totals: 0 of 2 input terms covered = 0.0%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  (pLineSyn = hi)         N  '_1' not hit             Hit '_1'
     (ilval = lo)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (pLineSyn = hi)_0     -                             
  Row   2:    ***0***  (pLineSyn = hi)_1     (ilval = lo)                  
  Row   3:    ***0***  (ilval = lo)_0        (pLineSyn = hi)               
  Row   4:    ***0***  (ilval = lo)_1        (pLineSyn = hi)               

----------------Focused Condition View-------------------
Line       66 Item    1  ((pFrame = hi) and (pLine = hi))
Condition totals: 0 of 2 input terms covered = 0.0%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (pFrame = hi)         N  '_1' not hit             Hit '_1'
   (pLine = hi)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (pFrame = hi)_0       -                             
  Row   2:    ***0***  (pFrame = hi)_1       (pLine = hi)                  
  Row   3:    ***0***  (pLine = hi)_0        (pFrame = hi)                 
  Row   4:    ***0***  (pLine = hi)_1        (pFrame = hi)                 

----------------Focused Condition View-------------------
Line       94 Item    1  ((ilvalSync4 = lo) and (ilvalSync2 = hi))
Condition totals: 0 of 2 input terms covered = 0.0%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  (ilvalSync4 = lo)         N  '_1' not hit             Hit '_1'
  (ilvalSync2 = hi)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (ilvalSync4 = lo)_0   -                             
  Row   2:    ***0***  (ilvalSync4 = lo)_1   (ilvalSync2 = hi)             
  Row   3:          1  (ilvalSync2 = hi)_0   (ilvalSync4 = lo)             
  Row   4:    ***0***  (ilvalSync2 = hi)_1   (ilvalSync4 = lo)             

----------------Focused Condition View-------------------
Line       95 Item    1  ((ilvalSync4 = hi) and (ilvalSync2 = lo))
Condition totals: 0 of 2 input terms covered = 0.0%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  (ilvalSync4 = hi)         N  '_1' not hit             Hit '_1'
  (ilvalSync2 = lo)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (ilvalSync4 = hi)_0   -                             
  Row   2:    ***0***  (ilvalSync4 = hi)_1   (ilvalSync2 = lo)             
  Row   3:    ***0***  (ilvalSync2 = lo)_0   (ilvalSync4 = hi)             
  Row   4:    ***0***  (ilvalSync2 = lo)_1   (ilvalSync4 = hi)             

----------------Focused Condition View-------------------
Line       109 Item    1  ((ifvalSync2 = hi) and (pEol = hi))
Condition totals: 0 of 2 input terms covered = 0.0%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  (ifvalSync2 = hi)         N  '_1' not hit             Hit '_1'
        (pEol = hi)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (ifvalSync2 = hi)_0   -                             
  Row   2:    ***0***  (ifvalSync2 = hi)_1   (pEol = hi)                   
  Row   3:    ***0***  (pEol = hi)_0         (ifvalSync2 = hi)             
  Row   4:    ***0***  (pEol = hi)_1         (ifvalSync2 = hi)             


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                        19.6
        States                       4         1         3      25.0
        Transitions                  7         1         6      14.2

================================FSM Details================================

FSM Coverage for Design Unit work.camerarawdata(arch_imp) --

FSM_ID: d5mStates
    Current State Object : d5mStates
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 107            sofState                   3
 113       readLineState                   0
 124            eolState                   1
 134            eofState                   2
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                sofState                   3
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
  99                   2                   1          readLineState -> sofState
    Uncovered States :
    ------------------
                   State
                   -----
           readLineState
                eolState
                eofState
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 111                   0          sofState -> readLineState
 116                   1          readLineState -> eolState
 127                   3          eolState -> eofState
 129                   4          eolState -> readLineState
  99                   5          eolState -> sofState
 135                   6          eofState -> sofState


    Summary                     Active      Hits    Misses % Covered
    -------                     ------      ----    ------ ---------
        States                       4         1         3      25.0
        Transitions                  7         1         6      14.2

=================================================================================
=== Design Unit: work.coefmult(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          139       114        25      82.0

================================Statement Details================================

Statement Coverage for Design Unit work.coefmult(behavioral) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/CoefMult.vhd
    15                                               architecture behavioral of CoefMult is
    16                                                   constant fractValue     : std_logic_vector(31 downto 0):= x"3a83126f";--0.001
    17                                                   constant rgbLevelValue  : std_logic_vector(31 downto 0):= x"43800000";--256
    18                                                   constant FloatMaxLat    : integer   := 20;
    19                                                   type kCoefSt is (kCoefCgainState,kCoefSharpState,kCoefBlureState,kCoefYcbcrState,kCoefXSobeState,kCoefYSobeState,kCoefEmbosState,kCoefUpdaterState);
    20                                                   signal kCoefStates      : kCoefSt; 
    21                                                   signal kCoefVals        : kCoefFilters;
    22                                                   signal kCoeffDWord      : kernelCoeDWord;
    23                                                   signal kCofFrtProd      : kernelCoeDWord;
    24                                                   signal upCtr            : integer   :=zero;
    25                                                   signal kCoeffValid      : std_logic := hi;
    26                                                   signal fractLevel       : std_logic_vector(31 downto 0):= (others => lo);
    27                                                   signal kCof             : kernelCoeff;
    28                                               begin
    29              1                          1             kCoefVals.kCoeffYcbcr.k1   <= x"0101";--  0.257
    30              1                          1             kCoefVals.kCoeffYcbcr.k2   <= x"01F8";--  0.504
    31              1                          1             kCoefVals.kCoeffYcbcr.k3   <= x"0062";--  0.098
    32              1                          1             kCoefVals.kCoeffYcbcr.k4   <= x"FF6C";-- -0.148
    33              1                          1             kCoefVals.kCoeffYcbcr.k5   <= x"FEDD";-- -0.291
    34              1                          1             kCoefVals.kCoeffYcbcr.k6   <= x"01B7";--  0.439
    35              1                          1             kCoefVals.kCoeffYcbcr.k7   <= x"01B7";--  0.439
    36              1                          1             kCoefVals.kCoeffYcbcr.k8   <= x"FE90";-- -0.368
    37              1                          1             kCoefVals.kCoeffYcbcr.k9   <= x"FFB9";-- -0.071
    38              1                          1             kCoefVals.kCoeffYcbcr.kSet <= kCoefYcbcrIndex;
    39              1                          1             kCoefVals.kCoeffCgain.k1   <= x"05DC";--  1375  =  1.375
    40              1                          1             kCoefVals.kCoeffCgain.k2   <= x"FF06";-- -250   = -0.250
    41              1                          1             kCoefVals.kCoeffCgain.k3   <= x"FF06";-- -500   = -0.500
    42              1                          1             kCoefVals.kCoeffCgain.k4   <= x"FF06";-- -500   = -0.500
    43              1                          1             kCoefVals.kCoeffCgain.k5   <= x"05DC";--  1375  =  1.375
    44              1                          1             kCoefVals.kCoeffCgain.k6   <= x"FF06";-- -250   = -0.250
    45              1                          1             kCoefVals.kCoeffCgain.k7   <= x"FF06";-- -250   = -0.250
    46              1                          1             kCoefVals.kCoeffCgain.k8   <= x"FF06";-- -500   = -0.500
    47              1                          1             kCoefVals.kCoeffCgain.k9   <= x"05DC";--  1375  =  1.375
    48              1                          1             kCoefVals.kCoeffCgain.kSet <= kCoefCgainIndex;
    49              1                          1             kCoefVals.kCoeffSharp.k1   <= x"0000";--  0
    50              1                          1             kCoefVals.kCoeffSharp.k2   <= x"FE0C";-- -0.5
    51              1                          1             kCoefVals.kCoeffSharp.k3   <= x"0000";--  0
    52              1                          1             kCoefVals.kCoeffSharp.k4   <= x"FE0C";-- -0.5
    53              1                          1             kCoefVals.kCoeffSharp.k5   <= x"0BB8";--  3
    54              1                          1             kCoefVals.kCoeffSharp.k6   <= x"FE0C";-- -0.5
    55              1                          1             kCoefVals.kCoeffSharp.k7   <= x"0000";--  0
    56              1                          1             kCoefVals.kCoeffSharp.k8   <= x"FE0C";-- -0.5
    57              1                          1             kCoefVals.kCoeffSharp.k9   <= x"0000";--  0
    58              1                          1             kCoefVals.kCoeffSharp.kSet <= kCoefSharpIndex;
    59              1                          1             kCoefVals.kCoeffBlure.k1   <= x"006F";-- 0.111
    60              1                          1             kCoefVals.kCoeffBlure.k2   <= x"006F";-- 0.111
    61              1                          1             kCoefVals.kCoeffBlure.k3   <= x"006F";-- 0.111
    62              1                          1             kCoefVals.kCoeffBlure.k4   <= x"006F";-- 0.111
    63              1                          1             kCoefVals.kCoeffBlure.k5   <= x"006F";-- 0.111
    64              1                          1             kCoefVals.kCoeffBlure.k6   <= x"006F";-- 0.111
    65              1                          1             kCoefVals.kCoeffBlure.k7   <= x"006F";-- 0.111
    66              1                          1             kCoefVals.kCoeffBlure.k8   <= x"006F";-- 0.111
    67              1                          1             kCoefVals.kCoeffBlure.k9   <= x"006F";-- 0.111
    68              1                          1             kCoefVals.kCoeffBlure.kSet <= kCoefBlureIndex;
    69              1                          1             kCoefVals.kCoefXSobel.k1   <= x"FC18";--  [-1]
    70              1                          1             kCoefVals.kCoefXSobel.k2   <= x"0000";--  [+0]
    71              1                          1             kCoefVals.kCoefXSobel.k3   <= x"03E8";--  [+1]
    72              1                          1             kCoefVals.kCoefXSobel.k4   <= x"F830";--  [-2]
    73              1                          1             kCoefVals.kCoefXSobel.k5   <= x"0000";--  [+0]
    74              1                          1             kCoefVals.kCoefXSobel.k6   <= x"07D0";--  [+2]
    75              1                          1             kCoefVals.kCoefXSobel.k7   <= x"FC18";--  [-1]
    76              1                          1             kCoefVals.kCoefXSobel.k8   <= x"0000";--  [+0]
    77              1                          1             kCoefVals.kCoefXSobel.k9   <= x"03E8";--  [+1]
    78              1                          1             kCoefVals.kCoefXSobel.kSet <= kCoefSobeXIndex;
    79              1                          1             kCoefVals.kCoefYSobel.k1   <= x"03E8";--  [+1]
    80              1                          1             kCoefVals.kCoefYSobel.k2   <= x"07D0";--  [+2]
    81              1                          1             kCoefVals.kCoefYSobel.k3   <= x"03E8";--  [+1]
    82              1                          1             kCoefVals.kCoefYSobel.k4   <= x"F830";--  [-2]
    83              1                          1             kCoefVals.kCoefYSobel.k5   <= x"0000";--  [+0]
    84              1                          1             kCoefVals.kCoefYSobel.k6   <= x"07D0";--  [+2]
    85              1                          1             kCoefVals.kCoefYSobel.k7   <= x"FC18";--  [-1]
    86              1                          1             kCoefVals.kCoefYSobel.k8   <= x"F830";--  [-2]
    87              1                          1             kCoefVals.kCoefYSobel.k9   <= x"FC18";--  [-1]
    88              1                          1             kCoefVals.kCoefYSobel.kSet <= kCoefSobeYIndex;
    89              1                          1             kCoefVals.kCoeffEmbos.k1   <= x"FC18";-- -1
    90              1                          1             kCoefVals.kCoeffEmbos.k2   <= x"FC18";-- -1
    91              1                          1             kCoefVals.kCoeffEmbos.k3   <= x"0000";--  0
    92              1                          1             kCoefVals.kCoeffEmbos.k4   <= x"FC18";-- -1
    93              1                          1             kCoefVals.kCoeffEmbos.k5   <= x"0000";--  0
    94              1                          1             kCoefVals.kCoeffEmbos.k6   <= x"03E8";--  1
    95              1                          1             kCoefVals.kCoeffEmbos.k7   <= x"0000";--  0
    96              1                          1             kCoefVals.kCoeffEmbos.k8   <= x"03E8";--  1
    97              1                          1             kCoefVals.kCoeffEmbos.k9   <= x"03E8";--  1
    98              1                          1             kCoefVals.kCoeffEmbos.kSet <= kCoefEmbosIndex;
    99              1                          1             kCoefVals.kCoef1Cgain.k1   <= x"055F";--  1375  =  1.375
    100             1                          1             kCoefVals.kCoef1Cgain.k2   <= x"FF83";-- -125   = -0.125
    101             1                          1             kCoefVals.kCoef1Cgain.k3   <= x"FF06";-- -250   = -0.250
    102             1                          1             kCoefVals.kCoef1Cgain.k4   <= x"FF06";-- -250   = -0.250
    103             1                          1             kCoefVals.kCoef1Cgain.k5   <= x"055F";--  1375  =  1.375
    104             1                          1             kCoefVals.kCoef1Cgain.k6   <= x"FF83";-- -125   = -0.125
    105             1                          1             kCoefVals.kCoef1Cgain.k7   <= x"FF83";-- -125   = -0.125
    106             1                          1             kCoefVals.kCoef1Cgain.k8   <= x"FF06";-- -250   = -0.250
    107             1                          1             kCoefVals.kCoef1Cgain.k9   <= x"055F";--  1375  =  1.375
    108             1                          1             kCoefVals.kCoef1Cgain.kSet <= kCoefCgai1Index;
    109                                                      
    110                                              FloatMaxLatP: process(clk) begin
    111                                                  if (rising_edge (clk)) then
    112                                                      if (rst_l = lo) then
    113             1                          1                 upCtr <= zero;
    114                                                      else
    115                                                          if (upCtr < (FloatMaxLat + one)) then
    116             1                      10177                     upCtr  <= upCtr + one;
    117                                                          else
    118             1                        484                     upCtr <= zero;
    119                                                          end if;
    120                                                      end if;
    121                                                  end if;
    122                                              end process FloatMaxLatP;
    123                                              kCoefStP: process (clk) begin
    124                                                  if (rising_edge (clk)) then
    125                                                      if (rst_l = lo) then
    126             1                          3                 kCoefStates <= kCoefYcbcrState;
    127                                                      else
    128                                                      case (kCoefStates) is
    129                                                      when kCoefYcbcrState =>	
    130             1                         21                     kCof <= kCoefVals.kCoeffYcbcr;
    131                                                          if (upCtr = FloatMaxLat) then
    132             1                          1                     oCoeffProd.kCoeffYcbcr <= kCofFrtProd;
    133             1                          1                     oCoeffProd.kCoeffYcbcr.kSet <= kCoefVals.kCoeffYcbcr.kSet;
    134             1                          1                     kCoefStates <= kCoefCgainState;
    135                                                          end if;
    136                                                      when kCoefCgainState =>
    137             1                         22                 kCof <= kCoefVals.kCoeffCgain;
    138                                                          if (upCtr = FloatMaxLat) then
    139             1                          1                     oCoeffProd.kCoeffCgain <= kCofFrtProd;
    140             1                          1                     oCoeffProd.kCoeffCgain.kSet <= kCoefVals.kCoeffCgain.kSet;
    141             1                          1                     kCoefStates <= kCoefSharpState;
    142                                                          end if;
    143                                                      when kCoefSharpState =>
    144             1                         22                 kCof <= kCoefVals.kCoeffSharp;
    145                                                          if (upCtr = FloatMaxLat) then
    146             1                          1                     oCoeffProd.kCoeffSharp <= kCofFrtProd;
    147             1                          1                     oCoeffProd.kCoeffSharp.kSet <= kCoefVals.kCoeffSharp.kSet;
    148             1                          1                     kCoefStates <= kCoefBlureState;
    149                                                          end if;
    150                                                      when kCoefBlureState =>
    151             1                         22                 kCof <= kCoefVals.kCoeffBlure;
    152                                                          if (upCtr = FloatMaxLat) then
    153             1                          1                     oCoeffProd.kCoeffBlure <= kCofFrtProd;
    154             1                          1                     oCoeffProd.kCoeffBlure.kSet <= kCoefVals.kCoeffBlure.kSet;
    155             1                          1                     kCoefStates <= kCoefXSobeState;
    156                                                          end if;
    157                                                      when kCoefXSobeState =>	
    158             1                         22                 kCof <= kCoefVals.kCoefXSobel;
    159                                                          if (upCtr = FloatMaxLat) then
    160             1                          1                     oCoeffProd.kCoefXSobel <= kCofFrtProd;
    161             1                          1                     oCoeffProd.kCoefXSobel.kSet <= kCoefVals.kCoefXSobel.kSet;
    162             1                          1                     kCoefStates <= kCoefYSobeState;
    163                                                          end if;
    164                                                      when kCoefYSobeState =>	
    165             1                         22                 kCof <= kCoefVals.kCoefYSobel;
    166                                                          if (upCtr = FloatMaxLat) then
    167             1                          1                     oCoeffProd.kCoefYSobel <= kCofFrtProd;
    168             1                          1                     oCoeffProd.kCoefYSobel.kSet <= kCoefVals.kCoefYSobel.kSet;
    169             1                          1                     kCoefStates <= kCoefEmbosState;
    170                                                          end if;
    171                                                      when kCoefEmbosState =>	
    172             1                         22                 kCof <= kCoefVals.kCoeffEmbos;
    173                                                          if (upCtr = FloatMaxLat) then
    174             1                          1                     oCoeffProd.kCoeffEmbos <= kCofFrtProd;
    175             1                          1                     oCoeffProd.kCoeffEmbos.kSet <= kCoefVals.kCoeffEmbos.kSet;
    176             1                          1                     kCoefStates <= kCoefUpdaterState;
    177                                                          end if;
    178                                                      when kCoefUpdaterState =>
    179             1                      10508                     kCoefStates <= kCoefUpdaterState;
    180                                                          if (iKcoeff.kSet = kCoefVals.kCoeffYcbcr.kSet) then
    181             1                    ***0***                     kCof                        <= iKcoeff;
    182             1                    ***0***                     oCoeffProd.kCoeffYcbcr      <= kCofFrtProd;
    183             1                    ***0***                     oCoeffProd.kCoeffYcbcr.kSet <= kCoefYcbcrIndex;
    184                                                          elsif(iKcoeff.kSet = kCoefVals.kCoeffCgain.kSet)then
    185             1                    ***0***                     kCof                        <= iKcoeff;
    186             1                    ***0***                     oCoeffProd.kCoeffCgain      <= kCofFrtProd;
    187             1                    ***0***                     oCoeffProd.kCoeffCgain.kSet <= kCoefCgainIndex;
    188                                                          elsif(iKcoeff.kSet = kCoefVals.kCoeffSharp.kSet)then
    189             1                    ***0***                     kCof                        <= iKcoeff;
    190             1                    ***0***                     oCoeffProd.kCoeffSharp      <= kCofFrtProd;
    191             1                    ***0***                     oCoeffProd.kCoeffSharp.kSet <= kCoefSharpIndex;
    192                                                          elsif(iKcoeff.kSet = kCoefVals.kCoeffBlure.kSet)then
    193             1                    ***0***                     kCof                        <= iKcoeff;
    194             1                    ***0***                     oCoeffProd.kCoeffBlure      <= kCofFrtProd;
    195             1                    ***0***                     oCoeffProd.kCoeffBlure.kSet <= kCoefBlureIndex;
    196                                                          elsif(iKcoeff.kSet = kCoefVals.kCoefXSobel.kSet)then
    197             1                    ***0***                     kCof                        <= iKcoeff;
    198             1                    ***0***                     oCoeffProd.kCoefXSobel      <= kCofFrtProd;
    199             1                    ***0***                     oCoeffProd.kCoefXSobel.kSet <= kCoefSobeXIndex;
    200                                                          elsif(iKcoeff.kSet = kCoefVals.kCoefYSobel.kSet)then
    201             1                    ***0***                     kCof                        <= iKcoeff;
    202             1                    ***0***                     oCoeffProd.kCoefYSobel      <= kCofFrtProd;
    203             1                    ***0***                     oCoeffProd.kCoefYSobel.kSet <= kCoefSobeYIndex;
    204                                                          elsif(iKcoeff.kSet = kCoefVals.kCoeffEmbos.kSet)then
    205             1                    ***0***                     kCof                        <= iKcoeff;
    206             1                    ***0***                     oCoeffProd.kCoeffEmbos      <= kCofFrtProd;
    207             1                    ***0***                     oCoeffProd.kCoeffEmbos.kSet <= kCoefEmbosIndex;
    208                                                          elsif(iKcoeff.kSet = kCoefVals.kCoef1Cgain.kSet)then
    209             1                    ***0***                     kCof                        <= iKcoeff;
    210             1                    ***0***                     oCoeffProd.kCoef1Cgain      <= kCofFrtProd;
    211             1                    ***0***                     oCoeffProd.kCoef1Cgain.kSet <= kCoefCgai1Index;
    212                                                          else
    213             1                      10508                     kCof                        <= iKcoeff;
    214                                                            --oCoeffProd.kCoeffYcbcr      <= kCofFrtProd;
    215                                                            --oCoeffProd.kCoeffYcbcr.kSet <= zero;
    216                                                            --oCoeffProd.kCoeffCgain      <= kCofFrtProd;
    217                                                            --oCoeffProd.kCoeffCgain.kSet <= zero;
    218                                                            --oCoeffProd.kCoeffSharp      <= kCofFrtProd;
    219                                                            --oCoeffProd.kCoeffSharp.kSet <= zero;
    220                                                            --oCoeffProd.kCoeffBlure      <= kCofFrtProd;
    221                                                            --oCoeffProd.kCoeffBlure.kSet <= zero;
    222                                                            --oCoeffProd.kCoefXSobel      <= kCofFrtProd;
    223                                                            --oCoeffProd.kCoefXSobel.kSet <= zero;
    224                                                            --oCoeffProd.kCoefYSobel      <= kCofFrtProd;
    225                                                            --oCoeffProd.kCoefYSobel.kSet <= zero;
    226                                                            --oCoeffProd.kCoeffEmbos      <= kCofFrtProd;
    227                                                            --oCoeffProd.kCoeffEmbos.kSet <= zero;
    228                                                          end if;
    229                                                      when others =>
    230             1                    ***0***                 kCoefStates <= kCoefUpdaterState;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        40        31         9      77.5

================================Branch Details================================

Branch Coverage for Design Unit work.coefmult(behavioral)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/CoefMult.vhd
------------------------------------IF Branch------------------------------------
    111                                    10662     Count coming in to IF
    111             1                      10662         if (rising_edge (clk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    112                                    10662     Count coming in to IF
    112             1                          1             if (rst_l = lo) then
    114             1                      10661             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    115                                    10661     Count coming in to IF
    115             1                      10177                 if (upCtr < (FloatMaxLat + one)) then
    117             1                        484                 else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    124                                    10664     Count coming in to IF
    124             1                      10664         if (rising_edge (clk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    125                                    10664     Count coming in to IF
    125             1                          3             if (rst_l = lo) then
    127             1                      10661             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    128                                    10661     Count coming in to CASE
    129             1                         21             when kCoefYcbcrState =>	
    136             1                         22             when kCoefCgainState =>
    143             1                         22             when kCoefSharpState =>
    150             1                         22             when kCoefBlureState =>
    157             1                         22             when kCoefXSobeState =>	
    164             1                         22             when kCoefYSobeState =>	
    171             1                         22             when kCoefEmbosState =>	
    178             1                      10508             when kCoefUpdaterState =>
    229             1                    ***0***             when others =>
Branch totals: 8 hits of 9 branches = 88.8%

------------------------------------IF Branch------------------------------------
    131                                       21     Count coming in to IF
    131             1                          1                 if (upCtr = FloatMaxLat) then
                                              20     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    138                                       22     Count coming in to IF
    138             1                          1                 if (upCtr = FloatMaxLat) then
                                              21     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    145                                       22     Count coming in to IF
    145             1                          1                 if (upCtr = FloatMaxLat) then
                                              21     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    152                                       22     Count coming in to IF
    152             1                          1                 if (upCtr = FloatMaxLat) then
                                              21     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    159                                       22     Count coming in to IF
    159             1                          1                 if (upCtr = FloatMaxLat) then
                                              21     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    166                                       22     Count coming in to IF
    166             1                          1                 if (upCtr = FloatMaxLat) then
                                              21     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    173                                       22     Count coming in to IF
    173             1                          1                 if (upCtr = FloatMaxLat) then
                                              21     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    180                                    10508     Count coming in to IF
    180             1                    ***0***                 if (iKcoeff.kSet = kCoefVals.kCoeffYcbcr.kSet) then
    184             1                    ***0***                 elsif(iKcoeff.kSet = kCoefVals.kCoeffCgain.kSet)then
    188             1                    ***0***                 elsif(iKcoeff.kSet = kCoefVals.kCoeffSharp.kSet)then
    192             1                    ***0***                 elsif(iKcoeff.kSet = kCoefVals.kCoeffBlure.kSet)then
    196             1                    ***0***                 elsif(iKcoeff.kSet = kCoefVals.kCoefXSobel.kSet)then
    200             1                    ***0***                 elsif(iKcoeff.kSet = kCoefVals.kCoefYSobel.kSet)then
    204             1                    ***0***                 elsif(iKcoeff.kSet = kCoefVals.kCoeffEmbos.kSet)then
    208             1                    ***0***                 elsif(iKcoeff.kSet = kCoefVals.kCoef1Cgain.kSet)then
    212             1                      10508                 else
Branch totals: 1 hit of 9 branches = 11.1%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                        78.5
        States                       8         8         0     100.0
        Transitions                 14         8         6      57.1

================================FSM Details================================

FSM Coverage for Design Unit work.coefmult(behavioral) --

FSM_ID: kCoefStates
    Current State Object : kCoefStates
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 129     kCoefYcbcrState                   3
 136     kCoefCgainState                   0
 143     kCoefSharpState                   1
 150     kCoefBlureState                   2
 157     kCoefXSobeState                   4
 164     kCoefYSobeState                   5
 171     kCoefEmbosState                   6
 126   kCoefUpdaterState                   7
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
         kCoefYcbcrState                   3
         kCoefCgainState                   1
         kCoefSharpState                   1
         kCoefBlureState                   1
         kCoefXSobeState                   1
         kCoefYSobeState                   1
         kCoefEmbosState                   1
       kCoefUpdaterState               10509
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
 134                   0                   1          kCoefYcbcrState -> kCoefCgainState
 141                   1                   1          kCoefCgainState -> kCoefSharpState
 126                   2                   1          kCoefCgainState -> kCoefYcbcrState
 148                   3                   1          kCoefSharpState -> kCoefBlureState
 155                   5                   1          kCoefBlureState -> kCoefXSobeState
 162                   7                   1          kCoefXSobeState -> kCoefYSobeState
 169                   9                   1          kCoefYSobeState -> kCoefEmbosState
 176                  11                   1          kCoefEmbosState -> kCoefUpdaterState
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 126                   4          kCoefSharpState -> kCoefYcbcrState
 126                   6          kCoefBlureState -> kCoefYcbcrState
 126                   8          kCoefXSobeState -> kCoefYcbcrState
 126                  10          kCoefYSobeState -> kCoefYcbcrState
 126                  12          kCoefEmbosState -> kCoefYcbcrState
 126                  13          kCoefUpdaterState -> kCoefYcbcrState


    Summary                     Active      Hits    Misses % Covered
    -------                     ------      ----    ------ ---------
        States                       8         8         0     100.0
        Transitions                 14         8         6      57.1

=================================================================================
=== Design Unit: work.datataps(arch)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           32        18        14      56.2

================================Statement Details================================

Statement Coverage for Design Unit work.datataps(arch) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/dataTaps.vhd
    18                                               architecture arch of dataTaps is
    19                                                   signal d1RawData    :  rData;
    20                                                   signal d2RawData    :  rData;
    21                                               	signal wChx0Valid   : std_logic_vector(3 downto 0) := (others => lo);
    22                                               	signal wChx1Valid   : std_logic_vector(3 downto 0) := (others => lo);
    23                                               	signal wChx2Valid   : std_logic_vector(3 downto 0) := (others => lo);
    24                                               	signal wChx3Valid   : std_logic_vector(3 downto 0) := (others => lo);
    25                                                   signal write_chs    : integer range 0 to 3;
    26                                                   signal write_s      : std_logic;
    27                                                   signal write_p      : std_logic;
    28                                                   signal tap0_data    : std_logic_vector(dataWidth - 1 downto 0) := (others => lo);
    29                                                   signal tap1_data    : std_logic_vector(dataWidth - 1 downto 0) := (others => lo);
    30                                                   signal tap2_data    : std_logic_vector(dataWidth - 1 downto 0) := (others => lo);
    31                                                   signal tap3_data    : std_logic_vector(dataWidth - 1 downto 0) := (others => lo);
    32                                                   
    33                                               begin
    34                                               
    35              1                          3     write_p         <= hi when (write_s = hi and iRawData.valid = lo) else lo;
    36              1                          2     wChx0Valid(ch0) <= hi when (write_chs = ch0 and iRawData.valid = hi)  else lo;
    37              1                          2     wChx0Valid(ch1) <= hi when (write_chs = ch1 and iRawData.valid = hi)  else lo;
    38              1                          2     wChx0Valid(ch2) <= hi when (write_chs = ch2 and iRawData.valid = hi)  else lo;
    39              1                          2     wChx0Valid(ch3) <= hi when (write_chs = ch3 and iRawData.valid = hi)  else lo;
    40              1                          1     oTpData.valid <= hi when (wChx3Valid(ch0) = hi or wChx3Valid(ch1) = hi or wChx3Valid(ch2) = hi or wChx3Valid(ch3) = hi)  else lo;
    41                                               
    42                                               pipValidP: process (aclk) begin
    43                                                   if (rising_edge(aclk)) then
    44              1                      10760             write_s <= iRawData.valid;
    45                                                   end if;
    46                                               end process pipValidP;
    47                                               selChP: process (aclk) begin
    48                                                   if (rising_edge(aclk) ) then
    49                                                       if (write_p = hi) then
    50                                                           if (write_chs = ch3) then
    51              1                    ***0***                     write_chs <= ch0;
    52                                                           else
    53              1                    ***0***                     write_chs <= write_chs + 1;
    54                                                           end if;
    55                                                       end if;
    56                                                   end if;
    57                                               end process selChP;
    58                                               pipValidChP: process (aclk) begin
    59                                                   if (rising_edge(aclk) ) then
    60              1                          4             d1RawData     <= iRawData;
    61              1                          4             d2RawData     <= d1RawData;
    62              1                          4             oTpData.pEof  <= d2RawData.pEof;
    63              1                          4             oTpData.pSof  <= d2RawData.pSof;
    64              1                          4             oTpData.cord  <= d2RawData.cord;
    65              1                          4             wChx1Valid    <= wChx0Valid;
    66              1                          4             wChx2Valid    <= wChx1Valid;
    67              1                          4             wChx3Valid    <= wChx2Valid;
    68                                                   end if;
    69                                               end process pipValidChP;
    70                                               
    71                                               tap1ReadOutP: process(aclk) begin
    72                                                   if (rising_edge(aclk) ) then
    73                                                       if(wChx0Valid(ch0) = hi or wChx1Valid(ch0) = hi or wChx2Valid(ch0) = hi or wChx3Valid(ch0) = hi) then
    74              1                    ***0***                 oTpData.taps.tp1 <= tap1_data;
    75              1                    ***0***                 oTpData.taps.tp2 <= tap2_data;
    76              1                    ***0***                 oTpData.taps.tp3 <= tap3_data;
    77                                                       elsif(wChx0Valid(ch1) = hi or wChx1Valid(ch1) = hi or wChx2Valid(ch1) = hi or wChx3Valid(ch1) = hi) then
    78              1                    ***0***                 oTpData.taps.tp1 <= tap2_data;
    79              1                    ***0***                 oTpData.taps.tp2 <= tap3_data;
    80              1                    ***0***                 oTpData.taps.tp3 <= tap0_data;
    81                                                       elsif(wChx0Valid(ch2) = hi or wChx1Valid(ch2) = hi or wChx2Valid(ch2) = hi or wChx3Valid(ch2) = hi) then
    82              1                    ***0***                 oTpData.taps.tp1 <= tap3_data;
    83              1                    ***0***                 oTpData.taps.tp2 <= tap0_data;
    84              1                    ***0***                 oTpData.taps.tp3 <= tap1_data;
    85                                                       elsif(wChx0Valid(ch3) = hi or wChx1Valid(ch3) = hi or wChx2Valid(ch3) = hi or wChx3Valid(ch3) = hi) then
    86              1                    ***0***                 oTpData.taps.tp1 <= tap0_data; 
    87              1                    ***0***                 oTpData.taps.tp2 <= tap1_data; 
    88              1                    ***0***                 oTpData.taps.tp3 <= tap2_data;		
    89                                                       else
    90              1                          2                 oTpData.taps.tp1 <= (others => lo);
    91              1                          2                 oTpData.taps.tp2 <= (others => lo);
    92              1                          2                 oTpData.taps.tp3 <= (others => lo);

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        25        12        13      48.0

================================Branch Details================================

Branch Coverage for Design Unit work.datataps(arch)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/dataTaps.vhd
------------------------------------IF Branch------------------------------------
    35                                         3     Count coming in to IF
    35              1                    ***0***     write_p         <= hi when (write_s = hi and iRawData.valid = lo) else lo;
    35              2                          3     write_p         <= hi when (write_s = hi and iRawData.valid = lo) else lo;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    36                                         2     Count coming in to IF
    36              1                    ***0***     wChx0Valid(ch0) <= hi when (write_chs = ch0 and iRawData.valid = hi)  else lo;
    36              2                          2     wChx0Valid(ch0) <= hi when (write_chs = ch0 and iRawData.valid = hi)  else lo;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    37                                         2     Count coming in to IF
    37              1                    ***0***     wChx0Valid(ch1) <= hi when (write_chs = ch1 and iRawData.valid = hi)  else lo;
    37              2                          2     wChx0Valid(ch1) <= hi when (write_chs = ch1 and iRawData.valid = hi)  else lo;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    38                                         2     Count coming in to IF
    38              1                    ***0***     wChx0Valid(ch2) <= hi when (write_chs = ch2 and iRawData.valid = hi)  else lo;
    38              2                          2     wChx0Valid(ch2) <= hi when (write_chs = ch2 and iRawData.valid = hi)  else lo;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    39                                         2     Count coming in to IF
    39              1                    ***0***     wChx0Valid(ch3) <= hi when (write_chs = ch3 and iRawData.valid = hi)  else lo;
    39              2                          2     wChx0Valid(ch3) <= hi when (write_chs = ch3 and iRawData.valid = hi)  else lo;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    40                                         1     Count coming in to IF
    40              1                    ***0***     oTpData.valid <= hi when (wChx3Valid(ch0) = hi or wChx3Valid(ch1) = hi or wChx3Valid(ch2) = hi or wChx3Valid(ch3) = hi)  else lo;
    40              2                          1     oTpData.valid <= hi when (wChx3Valid(ch0) = hi or wChx3Valid(ch1) = hi or wChx3Valid(ch2) = hi or wChx3Valid(ch3) = hi)  else lo;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    43                                     10760     Count coming in to IF
    43              1                      10760         if (rising_edge(aclk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    48                                         1     Count coming in to IF
    48              1                          1         if (rising_edge(aclk) ) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    49                                         1     Count coming in to IF
    49              1                    ***0***             if (write_p = hi) then
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    50                                   ***0***     Count coming in to IF
    50              1                    ***0***                 if (write_chs = ch3) then
    52              1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    59                                         4     Count coming in to IF
    59              1                          4         if (rising_edge(aclk) ) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    72                                         2     Count coming in to IF
    72              1                          2         if (rising_edge(aclk) ) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    73                                         2     Count coming in to IF
    73              1                    ***0***             if(wChx0Valid(ch0) = hi or wChx1Valid(ch0) = hi or wChx2Valid(ch0) = hi or wChx3Valid(ch0) = hi) then
    77              1                    ***0***             elsif(wChx0Valid(ch1) = hi or wChx1Valid(ch1) = hi or wChx2Valid(ch1) = hi or wChx3Valid(ch1) = hi) then
    81              1                    ***0***             elsif(wChx0Valid(ch2) = hi or wChx1Valid(ch2) = hi or wChx2Valid(ch2) = hi or wChx3Valid(ch2) = hi) then
    85              1                    ***0***             elsif(wChx0Valid(ch3) = hi or wChx1Valid(ch3) = hi or wChx2Valid(ch3) = hi or wChx3Valid(ch3) = hi) then
    89              1                          2             else
Branch totals: 1 hit of 5 branches = 20.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms             30         0        30       0.0

================================Condition Details================================

Condition Coverage for Design Unit work.datataps(arch) --

  File ../../uvmtb/dut/src/Control/dataTaps.vhd
----------------Focused Condition View-------------------
Line       35 Item    1  ((write_s = hi) and (iRawData.valid = lo))
Condition totals: 0 of 2 input terms covered = 0.0%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
         (write_s = hi)         N  '_1' not hit             Hit '_1'
  (iRawData.valid = lo)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  (write_s = hi)_0         -                             
  Row   2:    ***0***  (write_s = hi)_1         (iRawData.valid = lo)         
  Row   3:    ***0***  (iRawData.valid = lo)_0  (write_s = hi)                
  Row   4:    ***0***  (iRawData.valid = lo)_1  (write_s = hi)                

----------------Focused Condition View-------------------
Line       36 Item    1  ((write_chs = ch0) and (iRawData.valid = hi))
Condition totals: 0 of 2 input terms covered = 0.0%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
      (write_chs = ch0)         N  No hits                  Hit '_0' and '_1'
  (iRawData.valid = hi)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:    ***0***  (write_chs = ch0)_0      -                             
  Row   2:    ***0***  (write_chs = ch0)_1      (iRawData.valid = hi)         
  Row   3:          1  (iRawData.valid = hi)_0  (write_chs = ch0)             
  Row   4:    ***0***  (iRawData.valid = hi)_1  (write_chs = ch0)             

----------------Focused Condition View-------------------
Line       37 Item    1  ((write_chs = ch1) and (iRawData.valid = hi))
Condition totals: 0 of 2 input terms covered = 0.0%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
      (write_chs = ch1)         N  '_1' not hit             Hit '_1'
  (iRawData.valid = hi)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  (write_chs = ch1)_0      -                             
  Row   2:    ***0***  (write_chs = ch1)_1      (iRawData.valid = hi)         
  Row   3:    ***0***  (iRawData.valid = hi)_0  (write_chs = ch1)             
  Row   4:    ***0***  (iRawData.valid = hi)_1  (write_chs = ch1)             

----------------Focused Condition View-------------------
Line       38 Item    1  ((write_chs = ch2) and (iRawData.valid = hi))
Condition totals: 0 of 2 input terms covered = 0.0%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
      (write_chs = ch2)         N  '_1' not hit             Hit '_1'
  (iRawData.valid = hi)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  (write_chs = ch2)_0      -                             
  Row   2:    ***0***  (write_chs = ch2)_1      (iRawData.valid = hi)         
  Row   3:    ***0***  (iRawData.valid = hi)_0  (write_chs = ch2)             
  Row   4:    ***0***  (iRawData.valid = hi)_1  (write_chs = ch2)             

----------------Focused Condition View-------------------
Line       39 Item    1  ((write_chs = ch3) and (iRawData.valid = hi))
Condition totals: 0 of 2 input terms covered = 0.0%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
      (write_chs = ch3)         N  '_1' not hit             Hit '_1'
  (iRawData.valid = hi)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  (write_chs = ch3)_0      -                             
  Row   2:    ***0***  (write_chs = ch3)_1      (iRawData.valid = hi)         
  Row   3:    ***0***  (iRawData.valid = hi)_0  (write_chs = ch3)             
  Row   4:    ***0***  (iRawData.valid = hi)_1  (write_chs = ch3)             

----------------Focused Condition View-------------------
Line       40 Item    1  ((((wChx3Valid(0) = hi) or (wChx3Valid(1) = hi)) or (wChx3Valid(2) = hi)) or (wChx3Valid(3) = hi))
Condition totals: 0 of 4 input terms covered = 0.0%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (wChx3Valid(0) = hi)         N  '_1' not hit             Hit '_1'
  (wChx3Valid(1) = hi)         N  '_1' not hit             Hit '_1'
  (wChx3Valid(2) = hi)         N  '_1' not hit             Hit '_1'
  (wChx3Valid(3) = hi)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (wChx3Valid(0) = hi)_0  not (wChx3Valid(3) = hi) && not (wChx3Valid(2) = hi) && not (wChx3Valid(1) = hi)
  Row   2:    ***0***  (wChx3Valid(0) = hi)_1  -                             
  Row   3:          1  (wChx3Valid(1) = hi)_0  not (wChx3Valid(3) = hi) && not (wChx3Valid(2) = hi) && not (wChx3Valid(0) = hi)
  Row   4:    ***0***  (wChx3Valid(1) = hi)_1  not (wChx3Valid(0) = hi)      
  Row   5:          1  (wChx3Valid(2) = hi)_0  not (wChx3Valid(3) = hi) && not ((wChx3Valid(0) = hi) or (wChx3Valid(1) = hi))
  Row   6:    ***0***  (wChx3Valid(2) = hi)_1  not ((wChx3Valid(0) = hi) or (wChx3Valid(1) = hi))
  Row   7:          1  (wChx3Valid(3) = hi)_0  not (((wChx3Valid(0) = hi) or (wChx3Valid(1) = hi)) or (wChx3Valid(2) = hi))
  Row   8:    ***0***  (wChx3Valid(3) = hi)_1  not (((wChx3Valid(0) = hi) or (wChx3Valid(1) = hi)) or (wChx3Valid(2) = hi))

----------------Focused Condition View-------------------
Line       73 Item    1  ((((wChx0Valid(0) = hi) or (wChx1Valid(0) = hi)) or (wChx2Valid(0) = hi)) or (wChx3Valid(0) = hi))
Condition totals: 0 of 4 input terms covered = 0.0%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (wChx0Valid(0) = hi)         N  '_1' not hit             Hit '_1'
  (wChx1Valid(0) = hi)         N  '_1' not hit             Hit '_1'
  (wChx2Valid(0) = hi)         N  '_1' not hit             Hit '_1'
  (wChx3Valid(0) = hi)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (wChx0Valid(0) = hi)_0  not (wChx3Valid(0) = hi) && not (wChx2Valid(0) = hi) && not (wChx1Valid(0) = hi)
  Row   2:    ***0***  (wChx0Valid(0) = hi)_1  -                             
  Row   3:          1  (wChx1Valid(0) = hi)_0  not (wChx3Valid(0) = hi) && not (wChx2Valid(0) = hi) && not (wChx0Valid(0) = hi)
  Row   4:    ***0***  (wChx1Valid(0) = hi)_1  not (wChx0Valid(0) = hi)      
  Row   5:          1  (wChx2Valid(0) = hi)_0  not (wChx3Valid(0) = hi) && not ((wChx0Valid(0) = hi) or (wChx1Valid(0) = hi))
  Row   6:    ***0***  (wChx2Valid(0) = hi)_1  not ((wChx0Valid(0) = hi) or (wChx1Valid(0) = hi))
  Row   7:          1  (wChx3Valid(0) = hi)_0  not (((wChx0Valid(0) = hi) or (wChx1Valid(0) = hi)) or (wChx2Valid(0) = hi))
  Row   8:    ***0***  (wChx3Valid(0) = hi)_1  not (((wChx0Valid(0) = hi) or (wChx1Valid(0) = hi)) or (wChx2Valid(0) = hi))

----------------Focused Condition View-------------------
Line       77 Item    1  ((((wChx0Valid(1) = hi) or (wChx1Valid(1) = hi)) or (wChx2Valid(1) = hi)) or (wChx3Valid(1) = hi))
Condition totals: 0 of 4 input terms covered = 0.0%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (wChx0Valid(1) = hi)         N  '_1' not hit             Hit '_1'
  (wChx1Valid(1) = hi)         N  '_1' not hit             Hit '_1'
  (wChx2Valid(1) = hi)         N  '_1' not hit             Hit '_1'
  (wChx3Valid(1) = hi)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (wChx0Valid(1) = hi)_0  not (wChx3Valid(1) = hi) && not (wChx2Valid(1) = hi) && not (wChx1Valid(1) = hi)
  Row   2:    ***0***  (wChx0Valid(1) = hi)_1  -                             
  Row   3:          1  (wChx1Valid(1) = hi)_0  not (wChx3Valid(1) = hi) && not (wChx2Valid(1) = hi) && not (wChx0Valid(1) = hi)
  Row   4:    ***0***  (wChx1Valid(1) = hi)_1  not (wChx0Valid(1) = hi)      
  Row   5:          1  (wChx2Valid(1) = hi)_0  not (wChx3Valid(1) = hi) && not ((wChx0Valid(1) = hi) or (wChx1Valid(1) = hi))
  Row   6:    ***0***  (wChx2Valid(1) = hi)_1  not ((wChx0Valid(1) = hi) or (wChx1Valid(1) = hi))
  Row   7:          1  (wChx3Valid(1) = hi)_0  not (((wChx0Valid(1) = hi) or (wChx1Valid(1) = hi)) or (wChx2Valid(1) = hi))
  Row   8:    ***0***  (wChx3Valid(1) = hi)_1  not (((wChx0Valid(1) = hi) or (wChx1Valid(1) = hi)) or (wChx2Valid(1) = hi))

----------------Focused Condition View-------------------
Line       81 Item    1  ((((wChx0Valid(2) = hi) or (wChx1Valid(2) = hi)) or (wChx2Valid(2) = hi)) or (wChx3Valid(2) = hi))
Condition totals: 0 of 4 input terms covered = 0.0%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (wChx0Valid(2) = hi)         N  '_1' not hit             Hit '_1'
  (wChx1Valid(2) = hi)         N  '_1' not hit             Hit '_1'
  (wChx2Valid(2) = hi)         N  '_1' not hit             Hit '_1'
  (wChx3Valid(2) = hi)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (wChx0Valid(2) = hi)_0  not (wChx3Valid(2) = hi) && not (wChx2Valid(2) = hi) && not (wChx1Valid(2) = hi)
  Row   2:    ***0***  (wChx0Valid(2) = hi)_1  -                             
  Row   3:          1  (wChx1Valid(2) = hi)_0  not (wChx3Valid(2) = hi) && not (wChx2Valid(2) = hi) && not (wChx0Valid(2) = hi)
  Row   4:    ***0***  (wChx1Valid(2) = hi)_1  not (wChx0Valid(2) = hi)      
  Row   5:          1  (wChx2Valid(2) = hi)_0  not (wChx3Valid(2) = hi) && not ((wChx0Valid(2) = hi) or (wChx1Valid(2) = hi))
  Row   6:    ***0***  (wChx2Valid(2) = hi)_1  not ((wChx0Valid(2) = hi) or (wChx1Valid(2) = hi))
  Row   7:          1  (wChx3Valid(2) = hi)_0  not (((wChx0Valid(2) = hi) or (wChx1Valid(2) = hi)) or (wChx2Valid(2) = hi))
  Row   8:    ***0***  (wChx3Valid(2) = hi)_1  not (((wChx0Valid(2) = hi) or (wChx1Valid(2) = hi)) or (wChx2Valid(2) = hi))

----------------Focused Condition View-------------------
Line       85 Item    1  ((((wChx0Valid(3) = hi) or (wChx1Valid(3) = hi)) or (wChx2Valid(3) = hi)) or (wChx3Valid(3) = hi))
Condition totals: 0 of 4 input terms covered = 0.0%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (wChx0Valid(3) = hi)         N  '_1' not hit             Hit '_1'
  (wChx1Valid(3) = hi)         N  '_1' not hit             Hit '_1'
  (wChx2Valid(3) = hi)         N  '_1' not hit             Hit '_1'
  (wChx3Valid(3) = hi)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (wChx0Valid(3) = hi)_0  not (wChx3Valid(3) = hi) && not (wChx2Valid(3) = hi) && not (wChx1Valid(3) = hi)
  Row   2:    ***0***  (wChx0Valid(3) = hi)_1  -                             
  Row   3:          1  (wChx1Valid(3) = hi)_0  not (wChx3Valid(3) = hi) && not (wChx2Valid(3) = hi) && not (wChx0Valid(3) = hi)
  Row   4:    ***0***  (wChx1Valid(3) = hi)_1  not (wChx0Valid(3) = hi)      
  Row   5:          1  (wChx2Valid(3) = hi)_0  not (wChx3Valid(3) = hi) && not ((wChx0Valid(3) = hi) or (wChx1Valid(3) = hi))
  Row   6:    ***0***  (wChx2Valid(3) = hi)_1  not ((wChx0Valid(3) = hi) or (wChx1Valid(3) = hi))
  Row   7:          1  (wChx3Valid(3) = hi)_0  not (((wChx0Valid(3) = hi) or (wChx1Valid(3) = hi)) or (wChx2Valid(3) = hi))
  Row   8:    ***0***  (wChx3Valid(3) = hi)_1  not (((wChx0Valid(3) = hi) or (wChx1Valid(3) = hi)) or (wChx2Valid(3) = hi))


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.detect(arch)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            5         4         1      80.0

================================Statement Details================================

Statement Coverage for Design Unit work.detect(arch) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/detect.vhd
    21                                               architecture arch of detect is
    22                                                   signal pEnable         : std_logic;
    23                                                   signal pCont           : cord;
    24                                               begin
    25              1                          2     pDetect        <= pEnable;
    26                                               pixelRangeP: process (clk)begin
    27                                               if rising_edge(clk) then
    28                                                   if((iRgb.red>rgbCoord.rl and iRgb.red<rgbCoord.rh) and (iRgb.green>rgbCoord.gl and iRgb.green<rgbCoord.gh) and (iRgb.blue>rgbCoord.bl and iRgb.blue<rgbCoord.bh))then
    29              1                    ***0***             pEnable <= hi;
    30                                                   else
    31              1                          3             pEnable <= lo;
    32                                                   end if;
    33                                               end if;
    34                                               end process pixelRangeP;
    35                                               pipCordP: process (clk)begin
    36                                                   if rising_edge(clk) then
    37              1                          2             pCont.x      <= to_integer((unsigned(iCord.x)));
    38              1                          2             pCont.y      <= to_integer((unsigned(iCord.y)));

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         4         3         1      75.0

================================Branch Details================================

Branch Coverage for Design Unit work.detect(arch)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/detect.vhd
------------------------------------IF Branch------------------------------------
    27                                         3     Count coming in to IF
    27              1                          3     if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    28                                         3     Count coming in to IF
    28              1                    ***0***         if((iRgb.red>rgbCoord.rl and iRgb.red<rgbCoord.rh) and (iRgb.green>rgbCoord.gl and iRgb.green<rgbCoord.gh) and (iRgb.blue>rgbCoord.bl and iRgb.blue<rgbCoord.bh))then
    30              1                          3         else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    36                                         2     Count coming in to IF
    36              1                          2         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              6         0         6       0.0

================================Condition Details================================

Condition Coverage for Design Unit work.detect(arch) --

  File ../../uvmtb/dut/src/Process/detect.vhd
----------------Focused Condition View-------------------
Line       28 Item    1  ((((iRgb.red > rgbCoord.rl) and (iRgb.red < rgbCoord.rh)) and ((iRgb.green > rgbCoord.gl) and (iRgb.green < rgbCoord.gh))) and ((iRgb.blue > rgbCoord.bl) and (iRgb.blue < rgbCoord.bh)))
Condition totals: 0 of 6 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
    (iRgb.red > rgbCoord.rl)         N  '_1' not hit             Hit '_1'
    (iRgb.red < rgbCoord.rh)         N  '_1' not hit             Hit '_1'
  (iRgb.green > rgbCoord.gl)         N  No hits                  Hit '_0' and '_1'
  (iRgb.green < rgbCoord.gh)         N  No hits                  Hit '_0' and '_1'
   (iRgb.blue > rgbCoord.bl)         N  No hits                  Hit '_0' and '_1'
   (iRgb.blue < rgbCoord.bh)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iRgb.red > rgbCoord.rl)_0    -                             
  Row   2:    ***0***  (iRgb.red > rgbCoord.rl)_1    ((iRgb.blue > rgbCoord.bl) and (iRgb.blue < rgbCoord.bh)) && ((iRgb.green > rgbCoord.gl) and (iRgb.green < rgbCoord.gh)) && (iRgb.red < rgbCoord.rh)
  Row   3:          1  (iRgb.red < rgbCoord.rh)_0    (iRgb.red > rgbCoord.rl)      
  Row   4:    ***0***  (iRgb.red < rgbCoord.rh)_1    ((iRgb.blue > rgbCoord.bl) and (iRgb.blue < rgbCoord.bh)) && ((iRgb.green > rgbCoord.gl) and (iRgb.green < rgbCoord.gh)) && (iRgb.red > rgbCoord.rl)
  Row   5:    ***0***  (iRgb.green > rgbCoord.gl)_0  ((iRgb.red > rgbCoord.rl) and (iRgb.red < rgbCoord.rh))
  Row   6:    ***0***  (iRgb.green > rgbCoord.gl)_1  ((iRgb.blue > rgbCoord.bl) and (iRgb.blue < rgbCoord.bh)) && ((iRgb.red > rgbCoord.rl) and (iRgb.red < rgbCoord.rh)) && (iRgb.green < rgbCoord.gh)
  Row   7:    ***0***  (iRgb.green < rgbCoord.gh)_0  ((iRgb.red > rgbCoord.rl) and (iRgb.red < rgbCoord.rh)) && (iRgb.green > rgbCoord.gl)
  Row   8:    ***0***  (iRgb.green < rgbCoord.gh)_1  ((iRgb.blue > rgbCoord.bl) and (iRgb.blue < rgbCoord.bh)) && ((iRgb.red > rgbCoord.rl) and (iRgb.red < rgbCoord.rh)) && (iRgb.green > rgbCoord.gl)
  Row   9:    ***0***  (iRgb.blue > rgbCoord.bl)_0   (((iRgb.red > rgbCoord.rl) and (iRgb.red < rgbCoord.rh)) and ((iRgb.green > rgbCoord.gl) and (iRgb.green < rgbCoord.gh)))
 Row   10:    ***0***  (iRgb.blue > rgbCoord.bl)_1   (((iRgb.red > rgbCoord.rl) and (iRgb.red < rgbCoord.rh)) and ((iRgb.green > rgbCoord.gl) and (iRgb.green < rgbCoord.gh))) && (iRgb.blue < rgbCoord.bh)
 Row   11:    ***0***  (iRgb.blue < rgbCoord.bh)_0   (((iRgb.red > rgbCoord.rl) and (iRgb.red < rgbCoord.rh)) and ((iRgb.green > rgbCoord.gl) and (iRgb.green < rgbCoord.gh))) && (iRgb.blue > rgbCoord.bl)
 Row   12:    ***0***  (iRgb.blue < rgbCoord.bh)_1   (((iRgb.red > rgbCoord.rl) and (iRgb.red < rgbCoord.rh)) and ((iRgb.green > rgbCoord.gl) and (iRgb.green < rgbCoord.gh))) && (iRgb.blue > rgbCoord.bl)


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.digiclk(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           12         4         8      33.3

================================Statement Details================================

Statement Coverage for Design Unit work.digiclk(behavioral) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/digiClk.vhd
    17                                               architecture Behavioral of digiClk is
    18                                               constant HALFPERIOD     : integer   := 71428566;--@142.8MHz= 1/2sec for HARDWARE
    19                                               constant TESTHALFPERIOD : integer   := 50000;--@100MHz= 1/2ms
    20                                               signal sec,min,hour     : integer range 0 to 60 :=0;
    21                                               signal count            : integer   := 1;
    22                                               signal clk              : std_logic :='0';
    23                                               begin
    24              1                          1         seconds <= conv_std_logic_vector(sec,6);
    25              1                          1         minutes <= conv_std_logic_vector(min,6);
    26              1                          1         hours   <= conv_std_logic_vector(hour,5);
    27                                               process(clk1)begin
    28                                                   if(clk1'event and clk1='1') then
    29              1                      10760             count <=count + 1;
    30                                                       if(count = HALFPERIOD) then
    31              1                    ***0***                 clk     <= not clk;
    32              1                    ***0***                 count   <=1;
    33                                                       end if;
    34                                                   end if;
    35                                               end process;
    36                                               process(clk)begin
    37                                                   if(clk'event and clk='1') then
    38              1                    ***0***             sec <= sec+ 1;
    39                                                       if(sec = 59) then
    40              1                    ***0***                 sec<=0;
    41              1                    ***0***                 min <= min + 1;
    42                                                           if(min = 59) then
    43              1                    ***0***                     hour <= hour + 1;
    44              1                    ***0***                     min <= 0;
    45                                                               if(hour = 23) then
    46              1                    ***0***                         hour <= 0;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        10         2         8      20.0

================================Branch Details================================

Branch Coverage for Design Unit work.digiclk(behavioral)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/digiClk.vhd
------------------------------------IF Branch------------------------------------
    28                                     10760     Count coming in to IF
    28              1                      10760         if(clk1'event and clk1='1') then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    30                                     10760     Count coming in to IF
    30              1                    ***0***             if(count = HALFPERIOD) then
                                           10760     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    37                                   ***0***     Count coming in to IF
    37              1                    ***0***         if(clk'event and clk='1') then
                                            ECOP     All False Count
Branch totals: 0 hits of 1 branch = 0.0%

------------------------------------IF Branch------------------------------------
    39                                   ***0***     Count coming in to IF
    39              1                    ***0***             if(sec = 59) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    42                                   ***0***     Count coming in to IF
    42              1                    ***0***                 if(min = 59) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    45                                   ***0***     Count coming in to IF
    45              1                    ***0***                     if(hour = 23) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::BLURE_FRAME_DISABLED
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::BLURE_FRAME_DISABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    723             1                          1         fRgb.blur     <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::CGAIN_FRAME_ENABLE
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::CGAIN_FRAME_ENABLE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    573                                              -- begin
    574                                              -- TextGenCgainInst: TextGen
    575                                              -- generic map (
    576                                                  -- img_width     => img_width,
    577                                                  -- img_height    => img_height,
    578                                                  -- displayText   => "CGAIN")
    579                                              -- port map(            
    580                                                  -- clk      => clk,
    581                                                  -- rst_l    => rst_l,
    582                                                  -- txCord   => txCord,
    583                                                  -- location => location,
    584                                                  -- iRgb     => rgbImageKernel.cgain,
    585                                                  -- oRgb     => fRgb.cgain);
    586             1                          6     fRgb.cgain <= rgbImageKernel.cgain;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::EMBOS_FRAME_DISABLED
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::EMBOS_FRAME_DISABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    726             1                          1         fRgb.embos     <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::HSL_FRAME_ENABLE
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::HSL_FRAME_ENABLE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    589             1                          5         fRgb.hsl <= rgbImageKernel.hsl;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::HSV_FRAME_ENABLE
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           17         5        12      29.4

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::HSV_FRAME_ENABLE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    607                                              signal rgbHsv   : channel;
    608                                              begin
    609                                              -- TextGenHsvInst: TextGen
    610                                              -- generic map (
    611                                                  -- img_width     => img_width,
    612                                                  -- img_height    => img_height,
    613                                                  -- displayText   => "HSV")
    614                                              -- port map(            
    615                                                  -- clk      => clk,
    616                                                  -- rst_l    => rst_l,
    617                                                  -- txCord   => txCord,
    618                                                  -- location => location,
    619                                                  -- iRgb     => rgbImageKernel.hsv,
    620                                                  -- oRgb     => rgbHsv);
    621             1                          5     rgbHsv <= rgbImageKernel.hsv;
    622                                              process (clk) begin
    623                                                  if rising_edge(clk) then
    624                                                      if(cHsv = "001")then
    625             1                    ***0***                 fRgb.hsv.red       <= rgbHsv.red;
    626             1                    ***0***                 fRgb.hsv.green     <= rgbHsv.red;
    627             1                    ***0***                 fRgb.hsv.blue      <= rgbHsv.red;
    628             1                    ***0***                 fRgb.hsv.valid     <= rgbHsv.valid;
    629                                                      elsif(cHsv = "010")then
    630             1                    ***0***                 fRgb.hsv.red       <= rgbHsv.green;
    631             1                    ***0***                 fRgb.hsv.green     <= rgbHsv.green;
    632             1                    ***0***                 fRgb.hsv.blue      <= rgbHsv.green;
    633             1                    ***0***                 fRgb.hsv.valid     <= rgbHsv.valid;
    634                                                      elsif(cHsv = "100")then
    635             1                    ***0***                 fRgb.hsv.red       <= rgbHsv.blue;
    636             1                    ***0***                 fRgb.hsv.green     <= rgbHsv.blue;
    637             1                    ***0***                 fRgb.hsv.blue      <= rgbHsv.blue;
    638             1                    ***0***                 fRgb.hsv.valid     <= rgbHsv.valid;
    639                                                      else
    640             1                          5                 fRgb.hsv.red       <= rgbHsv.red;
    641             1                          5                 fRgb.hsv.green     <= rgbHsv.green;
    642             1                          5                 fRgb.hsv.blue      <= rgbHsv.blue;
    643             1                          5                 fRgb.hsv.valid     <= rgbHsv.valid;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         5         2         3      40.0

================================Branch Details================================

Branch Coverage for generate block work.filters(behavioral)::HSV_FRAME_ENABLE

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
------------------------------------IF Branch------------------------------------
    623                                        5     Count coming in to IF
    623             1                          5         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    624                                        5     Count coming in to IF
    624             1                    ***0***             if(cHsv = "001")then
    629             1                    ***0***             elsif(cHsv = "010")then
    634             1                    ***0***             elsif(cHsv = "100")then
    639             1                          5             else
Branch totals: 1 hit of 4 branches = 25.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::INRGB_FRAME_ENABLE
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::INRGB_FRAME_ENABLE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    447             1                          3         fRgb.inrgb <= rgbImageKernel.inrgb;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::LUM_FRAME_DISABLED
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::LUM_FRAME_DISABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    708             1                          1         fRgb.colorLmp  <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::MASK_SOB_BLU_FRAME_DISABLED
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::MASK_SOB_BLU_FRAME_DISABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    705             1                          1         fRgb.maskSobelBlu  <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::MASK_SOB_CGA_FRAME_ENABLE
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            8         8         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::MASK_SOB_CGA_FRAME_ENABLE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    238                                                  signal tp2cgain   : channel;
    239                                                  signal tp2        : std_logic_vector(23 downto 0) := (others => '0');
    240                                                  alias tp2Red      : std_logic_vector(7 downto 0) is tp2(23 downto 16);
    241                                                  alias tp2Green    : std_logic_vector(7 downto 0) is tp2(15 downto 8);
    242                                                  alias tp2Blue     : std_logic_vector(7 downto 0) is tp2(7 downto 0);
    243                                                  signal tpValid    : std_logic  := lo;
    244                                              begin
    245                                              TapsControllerSobCgaInst: TapsController
    246                                              generic map(
    247                                                  img_width    => img_width,
    248                                                  tpDataWidth  => 24)
    249                                              port map(
    250                                                  clk          => clk,
    251                                                  rst_l        => rst_l,
    252                                                  iRgb         => rgbImageKernel.cgain,
    253                                                  tpValid      => tpValid,
    254                                                  tp0          => open,
    255                                                  tp1          => open,
    256                                                  tp2          => tp2);
    257                                              process (clk,rst_l) begin
    258                                                  if (rst_l = lo) then
    259             1                        100             tp2cgain.red   <= black;
    260             1                        100             tp2cgain.green <= black;
    261             1                        100             tp2cgain.blue  <= black;
    262             1                        100             tp2cgain.valid <= lo;
    263                                                  elsif rising_edge(clk) then
    264             1                          2             tp2cgain.red   <= tp2Red;
    265             1                          2             tp2cgain.green <= tp2Green;
    266             1                          2             tp2cgain.blue  <= tp2Blue;
    267             1                          2             tp2cgain.valid <= tpValid;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         2         2         0     100.0

================================Branch Details================================

Branch Coverage for generate block work.filters(behavioral)::MASK_SOB_CGA_FRAME_ENABLE

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
------------------------------------IF Branch------------------------------------
    258                                      102     Count coming in to IF
    258             1                        100         if (rst_l = lo) then
    263             1                          2         elsif rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::MASK_SOB_LUM_FRAME_DISABLED
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::MASK_SOB_LUM_FRAME_DISABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    702             1                          1         fRgb.maskSobelLum  <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::MASK_SOB_RGB_FRAME_ENABLE
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            8         8         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::MASK_SOB_RGB_FRAME_ENABLE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    367                                                  constant sobRgbPiDelay : integer := 14;
    368                                                  signal tp2inrgb        : channel;
    369                                                  signal tp2             : std_logic_vector(23 downto 0) := (others => '0');
    370                                                  alias tp2Red           : std_logic_vector(7 downto 0) is tp2(23 downto 16);
    371                                                  alias tp2Green         : std_logic_vector(7 downto 0) is tp2(15 downto 8);
    372                                                  alias tp2Blue          : std_logic_vector(7 downto 0) is tp2(7 downto 0);
    373                                                  signal tpValid         : std_logic  := lo;
    374                                                  signal d1Rgb           : channel;
    375                                              begin
    376                                              TapsControllerSobCgaInst: TapsController
    377                                              generic map(
    378                                                  img_width    => img_width,
    379                                                  tpDataWidth  => 24)
    380                                              port map(
    381                                                  clk          => clk,
    382                                                  rst_l        => rst_l,
    383                                                  iRgb         => rgbImageKernel.inrgb,
    384                                                  tpValid      => tpValid,
    385                                                  tp0          => open,
    386                                                  tp1          => open,
    387                                                  tp2          => tp2);
    388                                              process (clk,rst_l) begin
    389                                                  if (rst_l = lo) then
    390             1                        100             tp2inrgb.red   <= black;
    391             1                        100             tp2inrgb.green <= black;
    392             1                        100             tp2inrgb.blue  <= black;
    393             1                        100             tp2inrgb.valid <= lo;
    394                                                  elsif rising_edge(clk) then
    395             1                          2             tp2inrgb.red   <= tp2Red;
    396             1                          2             tp2inrgb.green <= tp2Green;
    397             1                          2             tp2inrgb.blue  <= tp2Blue;
    398             1                          2             tp2inrgb.valid <= tpValid;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         2         2         0     100.0

================================Branch Details================================

Branch Coverage for generate block work.filters(behavioral)::MASK_SOB_RGB_FRAME_ENABLE

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
------------------------------------IF Branch------------------------------------
    389                                      102     Count coming in to IF
    389             1                        100         if (rst_l = lo) then
    394             1                          2         elsif rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::MASK_SOB_TRM_FRAME_DISABLED
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::MASK_SOB_TRM_FRAME_DISABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    684             1                          1         fRgb.maskSobelTrm  <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::MASK_SOB_YCC_FRAME_DISABLED
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::MASK_SOB_YCC_FRAME_DISABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    693             1                          1         fRgb.maskSobelYcc  <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::SHARP_FRAME_ENABLE
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::SHARP_FRAME_ENABLE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    507                                              -- begin
    508                                              -- TextGenSharpInst: TextGen
    509                                              -- generic map (
    510                                                  -- img_width     => img_width,
    511                                                  -- img_height    => img_height,
    512                                                  -- displayText   => "SHARP")
    513                                              -- port map(            
    514                                                  -- clk      => clk,
    515                                                  -- rst_l    => rst_l,
    516                                                  -- txCord   => txCord,
    517                                                  -- location => location,
    518                                                  -- iRgb     => rgbImageKernel.sharp,
    519                                                  -- oRgb     => fRgb.sharp);
    520             1                          6     fRgb.sharp <= rgbImageKernel.sharp;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::SOBEL_FRAME_ENABLE
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::SOBEL_FRAME_ENABLE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    555             1                          4         fRgb.sobel <= rgbImageKernel.sobel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::TRM_FRAME_DISABLED
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::TRM_FRAME_DISABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    711             1                          1         fRgb.colorTrm  <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.filters(behavioral)::YCBCR_FRAME_DISABLED
=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.filters(behavioral)::YCBCR_FRAME_DISABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    717             1                          1         fRgb.ycbcr     <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.filters(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           49        37        12      75.5

================================Statement Details================================

Statement Coverage for Design Unit work.filters(behavioral) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
    67                                               architecture Behavioral of Filters is
    68                                               signal rgbImageKernel   : colors;
    69                                               constant init_channel   : channel := (valid => lo, red => black, green => black, blue => black);
    70                                               signal location         : cord := (x => 40, y => 10);
    71                                               signal fRgb             : frameColors;
    72                                               signal sEdgeValid       : std_logic;
    73                                               begin
    74              1                          2         edgeValid           <= sEdgeValid;
    75              1                         34         oRgb                <= fRgb;
    76                                               ImageKernelInst: Kernel
    77                                               generic map(
    78                                                   INRGB_FRAME         => F_RGB,
    79                                                   RGBLP_FRAME         => F_LUM,
    80                                                   RGBTR_FRAME         => F_TRM,
    81                                                   SHARP_FRAME         => F_SHP,
    82                                                   BLURE_FRAME         => F_BLU,
    83                                                   EMBOS_FRAME         => F_EMB,
    84                                                   YCBCR_FRAME         => F_YCC,
    85                                                   SOBEL_FRAME         => F_SOB,
    86                                                   CGAIN_FRAME         => F_CGA,
    87                                                   CCGAIN_FRAME        => false,
    88                                                   HSV_FRAME           => F_HSV,
    89                                                   HSL_FRAME           => F_HSL,
    90                                                   img_width           => img_width,
    91                                                   img_height          => img_height,
    92                                                   s_data_width        => s_data_width,
    93                                                   i_data_width        => i_data_width)
    94                                               port map(
    95                                                   clk                 => clk,
    96                                                   rst_l               => rst_l,
    97                                                   txCord              => txCord,
    98                                                   lumThreshold        => lumThreshold,
    99                                                   iThreshold          => iThreshold,
    100                                                  iRgb                => iRgb,
    101                                                  iKcoeff             => iKcoeff,
    102                                                  oEdgeValid          => sEdgeValid,
    103                                                  oRgb                => rgbImageKernel);
    104                                              CGA_TO_FILTRS1_FRAME_ENABLE: if (F_CGA_TO_HSV = true) or (F_CGA_TO_HSL = true) or (F_CGA_TO_YCC = true)  or (F_CGA_TO_SHP = true) or (F_CGA_TO_BLU = true) or (F_CGA_TO_CGA = true)generate
    105                                              signal fRgb1             : colors;
    106                                              begin
    107                                              ImageKernelInst: Kernel
    108                                              generic map(
    109                                                  INRGB_FRAME         => false,
    110                                                  RGBLP_FRAME         => F_LUM,
    111                                                  RGBTR_FRAME         => F_TRM,
    112                                                  SHARP_FRAME         => F_CGA_TO_SHP,
    113                                                  BLURE_FRAME         => F_CGA_TO_BLU,
    114                                                  EMBOS_FRAME         => false,
    115                                                  YCBCR_FRAME         => F_CGA_TO_YCC,
    116                                                  SOBEL_FRAME         => false,
    117                                                  CGAIN_FRAME         => false,
    118                                                  CCGAIN_FRAME        => F_CGA_TO_CGA,
    119                                                  HSV_FRAME           => F_CGA_TO_HSV,
    120                                                  HSL_FRAME           => F_CGA_TO_HSL,
    121                                                  img_width           => img_width,
    122                                                  img_height          => img_height,
    123                                                  s_data_width        => s_data_width,
    124                                                  i_data_width        => i_data_width)
    125                                              port map(
    126                                                  clk                 => clk,
    127                                                  rst_l               => rst_l,
    128                                                  txCord              => txCord,
    129                                                  lumThreshold        => lumThreshold,
    130                                                  iThreshold          => iThreshold,
    131                                                  iRgb                => rgbImageKernel.cgain,
    132                                                  iKcoeff             => iKcoeff,
    133                                                  oEdgeValid          => sEdgeValid,
    134                                                  oRgb                => fRgb1);
    135                                                  fRgb.cgainToHsl     <= fRgb1.hsl;
    136                                                  fRgb.cgainToHsv     <= fRgb1.hsv;
    137                                                  fRgb.cgainToYcbcr   <= fRgb1.ycbcr;
    138                                                  fRgb.cgainToShp     <= fRgb1.sharp;
    139                                                  fRgb.cgainToBlu     <= fRgb1.blur;
    140                                                  fRgb.cgainToCgain   <= fRgb1.cgain;
    141                                              end generate CGA_TO_FILTRS1_FRAME_ENABLE;
    142                                              SHP_TO_FILTRS2_FRAME_ENABLE: if (F_SHP_TO_HSV = true) or (F_SHP_TO_HSL = true) or (F_SHP_TO_YCC = true)  or (F_SHP_TO_SHP = true) or (F_SHP_TO_BLU = true) or (F_SHP_TO_CGA = true) generate
    143                                              signal fRgb2             : colors;
    144                                              begin
    145                                              ImageKernelInst: Kernel
    146                                              generic map(
    147                                                  INRGB_FRAME         => false,
    148                                                  RGBLP_FRAME         => F_LUM,
    149                                                  RGBTR_FRAME         => F_TRM,
    150                                                  SHARP_FRAME         => F_SHP_TO_SHP,
    151                                                  BLURE_FRAME         => F_SHP_TO_BLU,
    152                                                  EMBOS_FRAME         => false,
    153                                                  YCBCR_FRAME         => F_SHP_TO_YCC,
    154                                                  SOBEL_FRAME         => false,
    155                                                  CGAIN_FRAME         => F_SHP_TO_CGA,
    156                                                  CCGAIN_FRAME        => false,
    157                                                  HSV_FRAME           => F_SHP_TO_HSV,
    158                                                  HSL_FRAME           => F_SHP_TO_HSL,
    159                                                  img_width           => img_width,
    160                                                  img_height          => img_height,
    161                                                  s_data_width        => s_data_width,
    162                                                  i_data_width        => i_data_width)
    163                                              port map(
    164                                                  clk                 => clk,
    165                                                  rst_l               => rst_l,
    166                                                  txCord              => txCord,
    167                                                  lumThreshold        => lumThreshold,
    168                                                  iThreshold          => iThreshold,
    169                                                  iRgb                => rgbImageKernel.sharp,
    170                                                  iKcoeff             => iKcoeff,
    171                                                  oEdgeValid          => sEdgeValid,
    172                                                  oRgb                => fRgb2);
    173                                                  fRgb.shpToHsl       <= fRgb2.hsl;
    174                                                  fRgb.shpToHsv       <= fRgb2.hsv;
    175                                                  fRgb.shpToYcbcr     <= fRgb2.ycbcr;
    176                                                  fRgb.shpToShp       <= fRgb2.sharp;
    177                                                  fRgb.shpToBlu       <= fRgb2.blur;
    178                                                  fRgb.shpToCgain     <= fRgb2.cgain;
    179                                              end generate SHP_TO_FILTRS2_FRAME_ENABLE;
    180                                              BLU_TO_FILTRS3_FRAME_ENABLE: if (F_BLU_TO_HSV = true) or (F_BLU_TO_HSL = true) or (F_BLU_TO_YCC = true)  or (F_BLU_TO_SHP = true) or (F_BLU_TO_BLU = true) or (F_BLU_TO_CGA = true) generate
    181                                              signal fRgb3             : colors;
    182                                              begin
    183                                              ImageKernelInst: Kernel
    184                                              generic map(
    185                                                  INRGB_FRAME         => false,
    186                                                  RGBLP_FRAME         => F_LUM,
    187                                                  RGBTR_FRAME         => F_TRM,
    188                                                  SHARP_FRAME         => F_BLU_TO_SHP,
    189                                                  BLURE_FRAME         => F_BLU_TO_BLU,
    190                                                  EMBOS_FRAME         => false,
    191                                                  YCBCR_FRAME         => F_BLU_TO_YCC,
    192                                                  SOBEL_FRAME         => false,
    193                                                  CGAIN_FRAME         => F_BLU_TO_CGA,
    194                                                  CCGAIN_FRAME        => false,
    195                                                  HSV_FRAME           => F_BLU_TO_HSV,
    196                                                  HSL_FRAME           => F_BLU_TO_HSL,
    197                                                  img_width           => img_width,
    198                                                  img_height          => img_height,
    199                                                  s_data_width        => s_data_width,
    200                                                  i_data_width        => i_data_width)
    201                                              port map(
    202                                                  clk                 => clk,
    203                                                  rst_l               => rst_l,
    204                                                  txCord              => txCord,
    205                                                  lumThreshold        => lumThreshold,
    206                                                  iThreshold          => iThreshold,
    207                                                  iRgb                => rgbImageKernel.sharp,
    208                                                  iKcoeff             => iKcoeff,
    209                                                  oEdgeValid          => sEdgeValid,
    210                                                  oRgb                => fRgb3);
    211                                                  fRgb.bluToHsl       <= fRgb3.hsl;
    212                                                  fRgb.bluToHsv       <= fRgb3.hsv;
    213                                                  fRgb.bluToYcc       <= fRgb3.ycbcr;
    214                                                  fRgb.bluToShp       <= fRgb3.sharp;
    215                                                  fRgb.bluToBlu       <= fRgb3.blur;
    216                                                  fRgb.bluToCga       <= fRgb3.cgain;
    217                                              end generate BLU_TO_FILTRS3_FRAME_ENABLE;
    218                                              TEST_FRAME_ENABLE: if (F_TES = true) generate
    219                                                  signal ChannelS      : integer := 0;
    220                                                  signal rgbSum        : tpRgb;
    221                                              begin
    222                                              frameTestPatternInst: frameTestPattern
    223                                              generic map(
    224                                                  s_data_width => s_data_width)
    225                                              port map(   
    226                                                  clk          => clk,
    227                                                  iValid       => iRgb.valid,
    228                                                  iCord        => txCord,
    229                                                  oRgb         => rgbSum);
    230                                              TestPatternInst: TestPattern
    231                                              port map(
    232                                                  clk           => clk,
    233                                                  ChannelS      => ChannelS,
    234                                                  rgbSum        => rgbSum,
    235                                                  oRgb          => fRgb.tPattern);
    236                                              end generate TEST_FRAME_ENABLE;
    237                                              MASK_SOB_CGA_FRAME_ENABLE: if (M_SOB_CGA = true) generate
    238                                                  signal tp2cgain   : channel;
    239                                                  signal tp2        : std_logic_vector(23 downto 0) := (others => '0');
    240                                                  alias tp2Red      : std_logic_vector(7 downto 0) is tp2(23 downto 16);
    241                                                  alias tp2Green    : std_logic_vector(7 downto 0) is tp2(15 downto 8);
    242                                                  alias tp2Blue     : std_logic_vector(7 downto 0) is tp2(7 downto 0);
    243                                                  signal tpValid    : std_logic  := lo;
    244                                              begin
    245                                              TapsControllerSobCgaInst: TapsController
    246                                              generic map(
    247                                                  img_width    => img_width,
    248                                                  tpDataWidth  => 24)
    249                                              port map(
    250                                                  clk          => clk,
    251                                                  rst_l        => rst_l,
    252                                                  iRgb         => rgbImageKernel.cgain,
    253                                                  tpValid      => tpValid,
    254                                                  tp0          => open,
    255                                                  tp1          => open,
    256                                                  tp2          => tp2);
    257                                              process (clk,rst_l) begin
    258                                                  if (rst_l = lo) then
    259             1                        100             tp2cgain.red   <= black;
    260             1                        100             tp2cgain.green <= black;
    261             1                        100             tp2cgain.blue  <= black;
    262             1                        100             tp2cgain.valid <= lo;
    263                                                  elsif rising_edge(clk) then
    264             1                          2             tp2cgain.red   <= tp2Red;
    265             1                          2             tp2cgain.green <= tp2Green;
    266             1                          2             tp2cgain.blue  <= tp2Blue;
    267             1                          2             tp2cgain.valid <= tpValid;
    268                                                  end if; 
    269                                              end process;
    270                                              FrameMaskInst: FrameMask
    271                                              generic map (
    272                                                  eBlack       => true)
    273                                              port map(            
    274                                                  clk         => clk,
    275                                                  reset       => rst_l,
    276                                                  iEdgeValid  => sEdgeValid,
    277                                                  i1Rgb       => rgbImageKernel.sobel,
    278                                                  i2Rgb       => tp2cgain,
    279                                                  oRgb        => fRgb.maskSobelCga);
    280                                              end generate MASK_SOB_CGA_FRAME_ENABLE;
    281                                              MASK_SOB_TRM_FRAME_ENABLE: if (M_SOB_TRM = true) generate
    282                                              begin
    283                                              FrameMaskInst: FrameMask
    284                                              generic map (
    285                                                  eBlack       => true)
    286                                              port map(            
    287                                                  clk         => clk,
    288                                                  reset       => rst_l,
    289                                                  iEdgeValid  => sEdgeValid,
    290                                                  i1Rgb       => rgbImageKernel.sobel,
    291                                                  i2Rgb       => rgbImageKernel.colorTrm,
    292                                                  oRgb        => fRgb.maskSobelTrm);
    293                                              end generate MASK_SOB_TRM_FRAME_ENABLE; 
    294                                              MASK_SOB_HSL_FRAME_ENABLE: if (M_SOB_HSL = true) generate
    295                                                  signal dSobHsl           : channel;
    296                                                  constant sobHslPiDelay   : integer := 18;
    297                                              begin
    298                                              dSobHsvPiDelayInst: SyncFrames
    299                                              generic map(
    300                                                  pixelDelay => sobHslPiDelay)
    301                                              port map(
    302                                                  clk        => clk,
    303                                                  reset      => rst_l,
    304                                                  iRgb       => rgbImageKernel.hsl,
    305                                                  oRgb       => dSobHsl);
    306                                              FrameMaskInst: FrameMask
    307                                              generic map (
    308                                                  eBlack       => true)
    309                                              port map(            
    310                                                  clk         => clk,
    311                                                  reset       => rst_l,
    312                                                  iEdgeValid  => sEdgeValid,
    313                                                  i1Rgb       => rgbImageKernel.sobel,
    314                                                  i2Rgb       => dSobHsl,
    315                                                  oRgb        => fRgb.maskSobelHsl);
    316                                              end generate MASK_SOB_HSL_FRAME_ENABLE;  
    317                                              MASK_SOB_HSV_FRAME_ENABLE: if (M_SOB_HSV = true) generate
    318                                                  signal dSobHsv           : channel;
    319                                                  constant sobHsvPiDelay   : integer := 18;
    320                                              begin
    321                                              dSobHsvPiDelayInst: SyncFrames
    322                                              generic map(
    323                                                  pixelDelay => sobHsvPiDelay)
    324                                              port map(
    325                                                  clk        => clk,
    326                                                  reset      => rst_l,
    327                                                  iRgb       => rgbImageKernel.hsv,
    328                                                  oRgb       => dSobHsv);
    329                                              FrameMaskInst: FrameMask
    330                                              generic map (
    331                                                  eBlack       => true)
    332                                              port map(            
    333                                                  clk         => clk,
    334                                                  reset       => rst_l,
    335                                                  iEdgeValid  => sEdgeValid,
    336                                                  i1Rgb       => rgbImageKernel.sobel,
    337                                                  i2Rgb       => dSobHsv,
    338                                                  oRgb        => fRgb.maskSobelHsv);
    339                                              end generate MASK_SOB_HSV_FRAME_ENABLE; 
    340                                              MASK_SOB_YCC_FRAME_ENABLE: if (M_SOB_YCC = true) generate
    341                                              begin
    342                                              FrameMaskInst: FrameMask
    343                                              generic map (
    344                                                  eBlack       => true)
    345                                              port map(            
    346                                                  clk         => clk,
    347                                                  reset       => rst_l,
    348                                                  iEdgeValid  => sEdgeValid,
    349                                                  i1Rgb       => rgbImageKernel.sobel,
    350                                                  i2Rgb       => rgbImageKernel.ycbcr,
    351                                                  oRgb        => fRgb.maskSobelYcc);
    352                                              end generate MASK_SOB_YCC_FRAME_ENABLE;   
    353                                              MASK_SOB_SHP_FRAME_ENABLE: if (M_SOB_SHP = true) generate
    354                                              begin
    355                                              FrameMaskInst: FrameMask
    356                                              generic map (
    357                                                  eBlack       => true)
    358                                              port map(            
    359                                                  clk         => clk,
    360                                                  reset       => rst_l,
    361                                                  iEdgeValid  => sEdgeValid,
    362                                                  i1Rgb       => rgbImageKernel.sobel,
    363                                                  i2Rgb       => rgbImageKernel.sharp,
    364                                                  oRgb        => fRgb.maskSobelShp);
    365                                              end generate MASK_SOB_SHP_FRAME_ENABLE;
    366                                              MASK_SOB_RGB_FRAME_ENABLE: if (M_SOB_RGB = true) generate
    367                                                  constant sobRgbPiDelay : integer := 14;
    368                                                  signal tp2inrgb        : channel;
    369                                                  signal tp2             : std_logic_vector(23 downto 0) := (others => '0');
    370                                                  alias tp2Red           : std_logic_vector(7 downto 0) is tp2(23 downto 16);
    371                                                  alias tp2Green         : std_logic_vector(7 downto 0) is tp2(15 downto 8);
    372                                                  alias tp2Blue          : std_logic_vector(7 downto 0) is tp2(7 downto 0);
    373                                                  signal tpValid         : std_logic  := lo;
    374                                                  signal d1Rgb           : channel;
    375                                              begin
    376                                              TapsControllerSobCgaInst: TapsController
    377                                              generic map(
    378                                                  img_width    => img_width,
    379                                                  tpDataWidth  => 24)
    380                                              port map(
    381                                                  clk          => clk,
    382                                                  rst_l        => rst_l,
    383                                                  iRgb         => rgbImageKernel.inrgb,
    384                                                  tpValid      => tpValid,
    385                                                  tp0          => open,
    386                                                  tp1          => open,
    387                                                  tp2          => tp2);
    388                                              process (clk,rst_l) begin
    389                                                  if (rst_l = lo) then
    390             1                        100             tp2inrgb.red   <= black;
    391             1                        100             tp2inrgb.green <= black;
    392             1                        100             tp2inrgb.blue  <= black;
    393             1                        100             tp2inrgb.valid <= lo;
    394                                                  elsif rising_edge(clk) then
    395             1                          2             tp2inrgb.red   <= tp2Red;
    396             1                          2             tp2inrgb.green <= tp2Green;
    397             1                          2             tp2inrgb.blue  <= tp2Blue;
    398             1                          2             tp2inrgb.valid <= tpValid;
    399                                                  end if; 
    400                                              end process;
    401                                              sobRgbPiDelayInst: SyncFrames
    402                                              generic map(
    403                                                  pixelDelay => sobRgbPiDelay)
    404                                              port map(
    405                                                  clk        => clk,
    406                                                  reset      => rst_l,
    407                                                  iRgb       => tp2inrgb,
    408                                                  oRgb       => d1Rgb);
    409                                              FrameMaskInst: FrameMask
    410                                              generic map (
    411                                                  eBlack       => true)
    412                                              port map(            
    413                                                  clk         => clk,
    414                                                  reset       => rst_l,
    415                                                  iEdgeValid  => sEdgeValid,
    416                                                  i1Rgb       => rgbImageKernel.sobel,
    417                                                  i2Rgb       => d1Rgb,
    418                                                  oRgb        => fRgb.maskSobelRgb);
    419                                              end generate MASK_SOB_RGB_FRAME_ENABLE;
    420                                              MASK_SOB_LUM_FRAME_ENABLE: if (M_SOB_LUM = true) generate
    421                                              begin
    422                                              FrameMaskInst: FrameMask
    423                                              generic map (
    424                                                  eBlack       => true)
    425                                              port map(            
    426                                                  clk         => clk,
    427                                                  reset       => rst_l,
    428                                                  iEdgeValid  => sEdgeValid,
    429                                                  i1Rgb       => rgbImageKernel.sobel,
    430                                                  i2Rgb       => rgbImageKernel.colorLmp,
    431                                                  oRgb        => fRgb.maskSobelLum);
    432                                              end generate MASK_SOB_LUM_FRAME_ENABLE;
    433                                              MASK_SOB_BLU_FRAME_ENABLE: if (M_SOB_BLU = true) generate
    434                                              begin
    435                                              FrameMaskInst: FrameMask
    436                                              generic map (
    437                                                  eBlack       => true)
    438                                              port map(            
    439                                                  clk         => clk,
    440                                                  reset       => rst_l,
    441                                                  iEdgeValid  => sEdgeValid,
    442                                                  i1Rgb       => rgbImageKernel.sobel,
    443                                                  i2Rgb       => rgbImageKernel.blur,
    444                                                  oRgb        => fRgb.maskSobelBlu);
    445                                              end generate MASK_SOB_BLU_FRAME_ENABLE;
    446                                              INRGB_FRAME_ENABLE: if (F_RGB = true) generate
    447             1                          3         fRgb.inrgb <= rgbImageKernel.inrgb;
    448                                              end generate INRGB_FRAME_ENABLE;
    449                                              -- INRGB_FRAME_ENABLE: if (F_RGB = true) generate
    450                                              -- begin
    451                                              -- TextGenInrgbInst: TextGen
    452                                              -- generic map (
    453                                                  -- img_width     => img_width,
    454                                                  -- img_height    => img_height,
    455                                                  -- displayText   => "INRGB")
    456                                              -- port map(            
    457                                                  -- clk      => clk,
    458                                                  -- rst_l    => rst_l,
    459                                                  -- txCord   => txCord,
    460                                                  -- location => location,
    461                                                  -- iRgb     => rgbImageKernel.inrgb,
    462                                                  -- oRgb     => fRgb.inrgb);
    463                                              -- end generate INRGB_FRAME_ENABLE;
    464                                              YCBCR_FRAME_ENABLE: if (F_YCC = true) generate
    465                                              signal rgbYcbcr   : channel;
    466                                              begin
    467                                              -- TextGenYcbcrInst: TextGen
    468                                              -- generic map (
    469                                                  -- img_width     => img_width,
    470                                                  -- img_height    => img_height,
    471                                                  -- displayText   => "YCBCR")
    472                                              -- port map(            
    473                                                  -- clk      => clk,
    474                                                  -- rst_l    => rst_l,
    475                                                  -- txCord   => txCord,
    476                                                  -- location => location,
    477                                                  -- iRgb     => rgbImageKernel.ycbcr,
    478                                                  -- oRgb     => rgbYcbcr);
    479                                              rgbYcbcr <= rgbImageKernel.ycbcr;
    480                                              process (clk) begin
    481                                                  if rising_edge(clk) then
    482                                                      if(cYcc = "001")then
    483                                                          fRgb.ycbcr.red       <= rgbYcbcr.red;
    484                                                          fRgb.ycbcr.green     <= rgbYcbcr.red;
    485                                                          fRgb.ycbcr.blue      <= rgbYcbcr.red;
    486                                                          fRgb.ycbcr.valid     <= rgbYcbcr.valid;
    487                                                      elsif(cYcc = "010")then
    488                                                          fRgb.ycbcr.red       <= rgbYcbcr.green;
    489                                                          fRgb.ycbcr.green     <= rgbYcbcr.green;
    490                                                          fRgb.ycbcr.blue      <= rgbYcbcr.green;
    491                                                          fRgb.ycbcr.valid     <= rgbYcbcr.valid;
    492                                                      elsif(cYcc = "100")then
    493                                                          fRgb.ycbcr.red       <= rgbYcbcr.blue;
    494                                                          fRgb.ycbcr.green     <= rgbYcbcr.blue;
    495                                                          fRgb.ycbcr.blue      <= rgbYcbcr.blue;
    496                                                          fRgb.ycbcr.valid     <= rgbYcbcr.valid;
    497                                                      else
    498                                                          fRgb.ycbcr.red       <= rgbYcbcr.red;
    499                                                          fRgb.ycbcr.green     <= rgbYcbcr.green;
    500                                                          fRgb.ycbcr.blue      <= rgbYcbcr.blue;
    501                                                          fRgb.ycbcr.valid     <= rgbYcbcr.valid;
    502                                                      end if;
    503                                                  end if;
    504                                              end process;
    505                                              end generate YCBCR_FRAME_ENABLE;
    506                                              SHARP_FRAME_ENABLE: if (F_SHP = true) generate
    507                                              -- begin
    508                                              -- TextGenSharpInst: TextGen
    509                                              -- generic map (
    510                                                  -- img_width     => img_width,
    511                                                  -- img_height    => img_height,
    512                                                  -- displayText   => "SHARP")
    513                                              -- port map(            
    514                                                  -- clk      => clk,
    515                                                  -- rst_l    => rst_l,
    516                                                  -- txCord   => txCord,
    517                                                  -- location => location,
    518                                                  -- iRgb     => rgbImageKernel.sharp,
    519                                                  -- oRgb     => fRgb.sharp);
    520             1                          6     fRgb.sharp <= rgbImageKernel.sharp;
    521                                              end generate SHARP_FRAME_ENABLE;
    522                                              BLURE_FRAME_ENABLE: if (F_BLU = true) generate
    523                                              -- begin
    524                                              -- TextGenBlurInst: TextGen
    525                                              -- generic map (
    526                                                  -- img_width     => img_width,
    527                                                  -- img_height    => img_height,
    528                                                  -- displayText   => "BLUR")
    529                                              -- port map(            
    530                                                  -- clk      => clk,
    531                                                  -- rst_l    => rst_l,
    532                                                  -- txCord   => txCord,
    533                                                  -- location => location,
    534                                                  -- iRgb     => rgbImageKernel.blur,
    535                                                  -- oRgb     => fRgb.blur);
    536                                              fRgb.blur <= rgbImageKernel.blur;
    537                                              end generate BLURE_FRAME_ENABLE;
    538                                              EMBOS_FRAME_ENABLE: if (F_EMB = true) generate
    539                                              -- begin
    540                                              -- TextGenEmbossInst: TextGen
    541                                              -- generic map (
    542                                                  -- img_width     => img_width,
    543                                                  -- img_height    => img_height,
    544                                                  -- displayText   => "EMBOSS")
    545                                              -- port map(            
    546                                                  -- clk      => clk,
    547                                                  -- rst_l    => rst_l,
    548                                                  -- txCord   => txCord,
    549                                                  -- location => location,
    550                                                  -- iRgb     => rgbImageKernel.embos,
    551                                                  -- oRgb     => fRgb.embos);
    552                                              fRgb.embos <= rgbImageKernel.embos;
    553                                              end generate EMBOS_FRAME_ENABLE;
    554                                              SOBEL_FRAME_ENABLE: if (F_SOB = true) generate
    555             1                          4         fRgb.sobel <= rgbImageKernel.sobel;
    556                                              end generate SOBEL_FRAME_ENABLE;
    557                                              -- SOBEL_FRAME_ENABLE: if (F_SOB = true) generate
    558                                              -- begin
    559                                              -- TextGenSobelInst: TextGen
    560                                              -- generic map (
    561                                                  -- img_width     => img_width,
    562                                                  -- img_height    => img_height,
    563                                                  -- displayText   => "SOBEL")
    564                                              -- port map(            
    565                                                  -- clk      => clk,
    566                                                  -- rst_l    => rst_l,
    567                                                  -- txCord   => txCord,
    568                                                  -- location => location,
    569                                                  -- iRgb     => rgbImageKernel.sobel,
    570                                                  -- oRgb     => fRgb.sobel);
    571                                              -- end generate SOBEL_FRAME_ENABLE;
    572                                              CGAIN_FRAME_ENABLE: if (F_CGA = true) generate
    573                                              -- begin
    574                                              -- TextGenCgainInst: TextGen
    575                                              -- generic map (
    576                                                  -- img_width     => img_width,
    577                                                  -- img_height    => img_height,
    578                                                  -- displayText   => "CGAIN")
    579                                              -- port map(            
    580                                                  -- clk      => clk,
    581                                                  -- rst_l    => rst_l,
    582                                                  -- txCord   => txCord,
    583                                                  -- location => location,
    584                                                  -- iRgb     => rgbImageKernel.cgain,
    585                                                  -- oRgb     => fRgb.cgain);
    586             1                          6     fRgb.cgain <= rgbImageKernel.cgain;
    587                                              end generate CGAIN_FRAME_ENABLE;
    588                                              HSL_FRAME_ENABLE: if (F_HSL = true) generate
    589             1                          5         fRgb.hsl <= rgbImageKernel.hsl;
    590                                              end generate HSL_FRAME_ENABLE;
    591                                              -- HSL_FRAME_ENABLE: if (F_HSL = true) generate
    592                                              -- begin
    593                                              -- TextGenHslInst: TextGen
    594                                              -- generic map (
    595                                                  -- img_width     => img_width,
    596                                                  -- img_height    => img_height,
    597                                                  -- displayText   => "HSL")
    598                                              -- port map(            
    599                                                  -- clk      => clk,
    600                                                  -- rst_l    => rst_l,
    601                                                  -- txCord   => txCord,
    602                                                  -- location => location,
    603                                                  -- iRgb     => rgbImageKernel.hsl,
    604                                                  -- oRgb     => fRgb.hsl);
    605                                              -- end generate HSL_FRAME_ENABLE;
    606                                              HSV_FRAME_ENABLE: if (F_HSV = true) generate
    607                                              signal rgbHsv   : channel;
    608                                              begin
    609                                              -- TextGenHsvInst: TextGen
    610                                              -- generic map (
    611                                                  -- img_width     => img_width,
    612                                                  -- img_height    => img_height,
    613                                                  -- displayText   => "HSV")
    614                                              -- port map(            
    615                                                  -- clk      => clk,
    616                                                  -- rst_l    => rst_l,
    617                                                  -- txCord   => txCord,
    618                                                  -- location => location,
    619                                                  -- iRgb     => rgbImageKernel.hsv,
    620                                                  -- oRgb     => rgbHsv);
    621             1                          5     rgbHsv <= rgbImageKernel.hsv;
    622                                              process (clk) begin
    623                                                  if rising_edge(clk) then
    624                                                      if(cHsv = "001")then
    625             1                    ***0***                 fRgb.hsv.red       <= rgbHsv.red;
    626             1                    ***0***                 fRgb.hsv.green     <= rgbHsv.red;
    627             1                    ***0***                 fRgb.hsv.blue      <= rgbHsv.red;
    628             1                    ***0***                 fRgb.hsv.valid     <= rgbHsv.valid;
    629                                                      elsif(cHsv = "010")then
    630             1                    ***0***                 fRgb.hsv.red       <= rgbHsv.green;
    631             1                    ***0***                 fRgb.hsv.green     <= rgbHsv.green;
    632             1                    ***0***                 fRgb.hsv.blue      <= rgbHsv.green;
    633             1                    ***0***                 fRgb.hsv.valid     <= rgbHsv.valid;
    634                                                      elsif(cHsv = "100")then
    635             1                    ***0***                 fRgb.hsv.red       <= rgbHsv.blue;
    636             1                    ***0***                 fRgb.hsv.green     <= rgbHsv.blue;
    637             1                    ***0***                 fRgb.hsv.blue      <= rgbHsv.blue;
    638             1                    ***0***                 fRgb.hsv.valid     <= rgbHsv.valid;
    639                                                      else
    640             1                          5                 fRgb.hsv.red       <= rgbHsv.red;
    641             1                          5                 fRgb.hsv.green     <= rgbHsv.green;
    642             1                          5                 fRgb.hsv.blue      <= rgbHsv.blue;
    643             1                          5                 fRgb.hsv.valid     <= rgbHsv.valid;
    644                                                      end if;
    645                                                  end if;
    646                                              end process;
    647                                              end generate HSV_FRAME_ENABLE;
    648                                              LUM_FRAME_ENABLE: if (F_LUM = true) generate
    649                                              -- begin
    650                                              -- TextGenHsvInst: TextGen
    651                                              -- generic map (
    652                                                  -- img_width     => img_width,
    653                                                  -- img_height    => img_height,
    654                                                  -- displayText   => "LUM")
    655                                              -- port map(            
    656                                                  -- clk      => clk,
    657                                                  -- rst_l    => rst_l,
    658                                                  -- txCord   => txCord,
    659                                                  -- location => location,
    660                                                  -- iRgb     => rgbImageKernel.colorLmp,
    661                                                  -- oRgb     => fRgb.colorLmp);
    662                                              fRgb.colorLmp <= rgbImageKernel.colorLmp;
    663                                              end generate LUM_FRAME_ENABLE;
    664                                              TRM_FRAME_ENABLE: if (F_TRM = true) generate
    665                                              -- begin
    666                                              -- TextGenTrmInst: TextGen
    667                                              -- generic map (
    668                                                  -- img_width     => img_width,
    669                                                  -- img_height    => img_height,
    670                                                  -- displayText   => "TRM")
    671                                              -- port map(            
    672                                                  -- clk      => clk,
    673                                                  -- rst_l    => rst_l,
    674                                                  -- txCord   => txCord,
    675                                                  -- location => location,
    676                                                  -- iRgb     => rgbImageKernel.colorTrm,
    677                                                  -- oRgb     => fRgb.colorTrm);
    678                                              fRgb.colorTrm <= rgbImageKernel.colorTrm;
    679                                              end generate TRM_FRAME_ENABLE;
    680                                              MASK_SOB_CGA_FRAME_DISABLED: if (M_SOB_CGA = false) generate
    681                                                  fRgb.maskSobelCga  <= init_channel;
    682                                              end generate MASK_SOB_CGA_FRAME_DISABLED;
    683                                              MASK_SOB_TRM_FRAME_DISABLED: if (M_SOB_TRM = false) generate
    684             1                          1         fRgb.maskSobelTrm  <= init_channel;
    685                                              end generate MASK_SOB_TRM_FRAME_DISABLED;
    686                                              MASK_SOB_HSL_FRAME_DISABLED: if (M_SOB_HSL = false) generate
    687                                                  fRgb.maskSobelHsl  <= init_channel;
    688                                              end generate MASK_SOB_HSL_FRAME_DISABLED;
    689                                              MASK_SOB_HSV_FRAME_DISABLED: if (M_SOB_HSV = false) generate
    690                                                  fRgb.maskSobelHsv  <= init_channel;
    691                                              end generate MASK_SOB_HSV_FRAME_DISABLED;
    692                                              MASK_SOB_YCC_FRAME_DISABLED: if (M_SOB_YCC = false) generate
    693             1                          1         fRgb.maskSobelYcc  <= init_channel;
    694                                              end generate MASK_SOB_YCC_FRAME_DISABLED;
    695                                              MASK_SOB_SHP_FRAME_DISABLED: if (M_SOB_SHP = false) generate
    696                                                  fRgb.maskSobelShp  <= init_channel;
    697                                              end generate MASK_SOB_SHP_FRAME_DISABLED;
    698                                              MASK_SOB_RGB_FRAME_DISABLED: if (M_SOB_RGB = false) generate
    699                                                  fRgb.maskSobelRgb  <= init_channel;
    700                                              end generate MASK_SOB_RGB_FRAME_DISABLED;
    701                                              MASK_SOB_LUM_FRAME_DISABLED: if (M_SOB_LUM = false) generate
    702             1                          1         fRgb.maskSobelLum  <= init_channel;
    703                                              end generate MASK_SOB_LUM_FRAME_DISABLED;
    704                                              MASK_SOB_BLU_FRAME_DISABLED: if (M_SOB_BLU = false) generate
    705             1                          1         fRgb.maskSobelBlu  <= init_channel;
    706                                              end generate MASK_SOB_BLU_FRAME_DISABLED;
    707                                              LUM_FRAME_DISABLED: if (F_LUM = false) generate
    708             1                          1         fRgb.colorLmp  <= init_channel;
    709                                              end generate LUM_FRAME_DISABLED;
    710                                              TRM_FRAME_DISABLED: if (F_TRM = false) generate
    711             1                          1         fRgb.colorTrm  <= init_channel;
    712                                              end generate TRM_FRAME_DISABLED;
    713                                              INRGB_FRAME_DISABLED: if (F_RGB = false) generate
    714                                                  fRgb.inrgb     <= init_channel;
    715                                              end generate INRGB_FRAME_DISABLED;
    716                                              YCBCR_FRAME_DISABLED: if (F_YCC = false) generate
    717             1                          1         fRgb.ycbcr     <= init_channel;
    718                                              end generate YCBCR_FRAME_DISABLED;
    719                                              SHARP_FRAME_DISABLED: if (F_SHP = false) generate
    720                                                  fRgb.sharp     <= init_channel;
    721                                              end generate SHARP_FRAME_DISABLED;
    722                                              BLURE_FRAME_DISABLED: if (F_BLU = false) generate
    723             1                          1         fRgb.blur     <= init_channel;
    724                                              end generate BLURE_FRAME_DISABLED;
    725                                              EMBOS_FRAME_DISABLED: if (F_EMB = false) generate
    726             1                          1         fRgb.embos     <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         9         6         3      66.6

================================Branch Details================================

Branch Coverage for Design Unit work.filters(behavioral)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Filters.vhd
------------------------------------IF Branch------------------------------------
    258                                      102     Count coming in to IF
    258             1                        100         if (rst_l = lo) then
    263             1                          2         elsif rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    389                                      102     Count coming in to IF
    389             1                        100         if (rst_l = lo) then
    394             1                          2         elsif rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    623                                        5     Count coming in to IF
    623             1                          5         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    624                                        5     Count coming in to IF
    624             1                    ***0***             if(cHsv = "001")then
    629             1                    ***0***             elsif(cHsv = "010")then
    634             1                    ***0***             elsif(cHsv = "100")then
    639             1                          5             else
Branch totals: 1 hit of 4 branches = 25.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.fixed_pkg
=================================================================================

Assertion Coverage:
    Assertions                       3         2         1      66.6
-------------------------------------------------------
Name                 File(Line)           Failure Pass 
                                          Count   Count 
-------------------------------------------------------
work.fixed_pkg::\=#immed__3971\
                     ../../uvmtb/dut/src/float_and_fixed_pkg/fixed_pkg_c.vhd(3971)       6     0
work.fixed_pkg::cleanvec#immed__2070
                     ../../uvmtb/dut/src/float_and_fixed_pkg/fixed_pkg_c.vhd(2070)       0     1
work.fixed_pkg::cleanvec#immed__2055
                     ../../uvmtb/dut/src/float_and_fixed_pkg/fixed_pkg_c.vhd(2055)       0     1

=================================================================================
=== Generate Block: work.framemask(behavioral)::EBLACK_ENABLED
=================================================================================
=== Design Unit: work.framemask(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            7         4         3      57.1

================================Statement Details================================

Statement Coverage for generate block work.framemask(behavioral)::EBLACK_ENABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/FrameMask.vhd
    30                                                   process (clk) begin
    31                                                       if rising_edge(clk) then
    32                                                           if (iEdgeValid = hi) then
    33              1                    ***0***                     oRgb.red   <= black;
    34              1                    ***0***                     oRgb.green <= black;
    35              1                    ***0***                     oRgb.blue  <= black;
    36                                                           else
    37              1                         30                     oRgb.red   <= d1Rgb.red;
    38              1                         30                     oRgb.green <= d1Rgb.green;
    39              1                         30                     oRgb.blue  <= d1Rgb.blue;
    40                                                           end if;
    41              1                         30                     oRgb.valid <= i1Rgb.valid;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         3         2         1      66.6

================================Branch Details================================

Branch Coverage for generate block work.framemask(behavioral)::EBLACK_ENABLED

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/FrameMask.vhd
------------------------------------IF Branch------------------------------------
    31                                        30     Count coming in to IF
    31              1                         30             if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    32                                        30     Count coming in to IF
    32              1                    ***0***                 if (iEdgeValid = hi) then
    36              1                         30                 else
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.framemask(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            7         4         3      57.1

================================Statement Details================================

Statement Coverage for Design Unit work.framemask(behavioral) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/FrameMask.vhd
    18                                               architecture behavioral of FrameMask is
    19                                                   signal d1Rgb     : channel;
    20                                               begin
    21                                               SyncFrames32Inst: SyncFrames
    22                                               generic map(
    23                                                   pixelDelay => 31) --LATENCY 32
    24                                               port map(
    25                                                   clk        => clk,
    26                                                   reset      => reset,
    27                                                   iRgb       => i2Rgb,
    28                                                   oRgb       => d1Rgb);
    29                                               EBLACK_ENABLED: if (eBlack = true) generate
    30                                                   process (clk) begin
    31                                                       if rising_edge(clk) then
    32                                                           if (iEdgeValid = hi) then
    33              1                    ***0***                     oRgb.red   <= black;
    34              1                    ***0***                     oRgb.green <= black;
    35              1                    ***0***                     oRgb.blue  <= black;
    36                                                           else
    37              1                         30                     oRgb.red   <= d1Rgb.red;
    38              1                         30                     oRgb.green <= d1Rgb.green;
    39              1                         30                     oRgb.blue  <= d1Rgb.blue;
    40                                                           end if;
    41              1                         30                     oRgb.valid <= i1Rgb.valid;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         3         2         1      66.6

================================Branch Details================================

Branch Coverage for Design Unit work.framemask(behavioral)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/FrameMask.vhd
------------------------------------IF Branch------------------------------------
    31                                        30     Count coming in to IF
    31              1                         30             if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    32                                        30     Count coming in to IF
    32              1                    ***0***                 if (iEdgeValid = hi) then
    36              1                         30                 else
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.frameprocess(arch)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           75        75         0     100.0

================================Statement Details================================

Statement Coverage for Design Unit work.frameprocess(arch) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/frameProcess.vhd
    35                                               architecture arch of frameProcess is
    36                                                   signal txCord           : coord;
    37                                                   signal rgbV1Correct     : channel;
    38                                                   signal rgbV2Correct     : channel;
    39                                                   signal rgbIn            : channel;
    40                                                   signal rgbRemix         : channel;
    41                                                   signal rgbPoi           : channel;
    42                                                   signal rgbDetect        : channel;
    43                                                   signal hsv              : hsvChannel;
    44                                                   signal hsl              : hslChannel;
    45                                                   signal hsvCcBlur4vx     : hsvChannel;
    46                                                   signal cord             : coord;
    47                                                   signal syncxy           : coord;
    48                                                   signal cordIn           : coord;
    49                                                   signal rgbSum           : tpRgb;
    50                                                   signal rgbImageKernelv1 : colors;
    51                                                   signal rgbImageKernelv2 : colors;
    52                                                   signal rgbImageKernelv3 : colors;
    53                                                   signal rgbImageKernelv4 : colors;
    54                                                   signal rgbImageKernelv5 : colors;
    55                                                   signal iKcoeff          : kernelCoeff;
    56                                                   signal rgbImageFilters  : frameColors;
    57                                                   signal lumThreshold     : std_logic_vector(7 downto 0);
    58                                                   signal cHsv             : std_logic_vector(2 downto 0);
    59                                                   signal cYcc             : std_logic_vector(2 downto 0);
    60                                                   signal edgeValid        : std_logic;
    61                                                   signal rgbDetectLock    : std_logic;
    62                                                   signal rgbPoiLock       : std_logic;
    63                                                   signal sValid           : std_logic;
    64                                                   -------------------------------------------------
    65                                                   constant F_TES          : boolean := true;
    66                                                   constant F_LUM          : boolean := false;
    67                                                   constant F_TRM          : boolean := false;
    68                                                   constant F_RGB          : boolean := true;
    69                                                   constant F_SHP          : boolean := true;
    70                                                   constant F_BLU          : boolean := false;
    71                                                   constant F_EMB          : boolean := false;
    72                                                   constant F_YCC          : boolean := false;
    73                                                   constant F_SOB          : boolean := true;
    74                                                   constant F_CGA          : boolean := true;
    75                                                   constant F_HSV          : boolean := true;
    76                                                   constant F_HSL          : boolean := true;
    77                                                   -------------------------------------------------
    78                                                   constant F_CGA_TO_CGA   : boolean := false;
    79                                                   constant F_CGA_TO_HSL   : boolean := false;
    80                                                   constant F_CGA_TO_HSV   : boolean := false;
    81                                                   constant F_CGA_TO_YCC   : boolean := false;
    82                                                   constant F_CGA_TO_SHP   : boolean := false;
    83                                                   constant F_CGA_TO_BLU   : boolean := false;
    84                                                   -------------------------------------------------
    85                                                   constant F_SHP_TO_SHP   : boolean := false;
    86                                                   constant F_SHP_TO_HSL   : boolean := false;
    87                                                   constant F_SHP_TO_HSV   : boolean := false;
    88                                                   constant F_SHP_TO_YCC   : boolean := false;
    89                                                   constant F_SHP_TO_CGA   : boolean := false;
    90                                                   constant F_SHP_TO_BLU   : boolean := false;
    91                                                   -------------------------------------------------
    92                                                   constant F_BLU_TO_BLU   : boolean := false;
    93                                                   constant F_BLU_TO_HSL   : boolean := false;
    94                                                   constant F_BLU_TO_HSV   : boolean := false;
    95                                                   constant F_BLU_TO_YCC   : boolean := false;
    96                                                   constant F_BLU_TO_CGA   : boolean := false;
    97                                                   constant F_BLU_TO_SHP   : boolean := false;
    98                                                   -------------------------------------------------
    99                                                   constant MASK_TRUE      : boolean := true;
    100                                                  constant MASK_FLSE      : boolean := false;
    101                                                  constant M_SOB_LUM      : boolean := SelFrame(F_SOB,F_LUM,MASK_FLSE);
    102                                                  constant M_SOB_TRM      : boolean := SelFrame(F_SOB,F_TRM,MASK_FLSE);
    103                                                  constant M_SOB_RGB      : boolean := SelFrame(F_SOB,F_RGB,MASK_TRUE);
    104                                                  constant M_SOB_SHP      : boolean := SelFrame(F_SOB,F_SHP,MASK_TRUE);
    105                                                  constant M_SOB_BLU      : boolean := SelFrame(F_SOB,F_BLU,MASK_FLSE);
    106                                                  constant M_SOB_YCC      : boolean := SelFrame(F_SOB,F_YCC,MASK_FLSE);
    107                                                  constant M_SOB_CGA      : boolean := SelFrame(F_SOB,F_CGA,MASK_TRUE);
    108                                                  constant M_SOB_HSV      : boolean := SelFrame(F_SOB,F_HSV,MASK_TRUE);
    109                                                  constant M_SOB_HSL      : boolean := SelFrame(F_SOB,F_HSL,MASK_TRUE);
    110                                              begin
    111             1                          2         lumThreshold                 <= std_logic_vector(to_unsigned(iLumTh,8));
    112             1                          2         cHsv                         <= std_logic_vector(to_unsigned(iHsvPerCh,3));--[0-cHsv,1-cHsvH,2-cHsvS,3-cHsvV]
    113             1                          2         cYcc                         <= std_logic_vector(to_unsigned(iYccPerCh,3));--[0-cYcc,1-cYccY,2-cYccB,3-cYccR]
    114                                                  -------------------------------------------------
    115             1                          4         oFrameData.sobel             <= rgbImageFilters.sobel;
    116             1                          2         oFrameData.embos             <= rgbImageFilters.embos;
    117             1                          2         oFrameData.blur              <= rgbImageFilters.blur;
    118             1                          6         oFrameData.sharp             <= rgbImageFilters.sharp;
    119             1                          6         oFrameData.cgain             <= rgbImageFilters.cgain;
    120             1                          2         oFrameData.ycbcr             <= rgbImageFilters.ycbcr;
    121             1                          5         oFrameData.hsl               <= rgbImageFilters.hsl;
    122             1                          5         oFrameData.hsv               <= rgbImageFilters.hsv;
    123             1                          3         oFrameData.inrgb             <= rgbImageFilters.inrgb;
    124             1                          2         oFrameData.maskSobelLum      <= rgbImageFilters.maskSobelLum;
    125             1                          2         oFrameData.maskSobelTrm      <= rgbImageFilters.maskSobelTrm;
    126             1                          5         oFrameData.maskSobelRgb      <= rgbImageFilters.maskSobelRgb;
    127             1                          6         oFrameData.maskSobelShp      <= rgbImageFilters.maskSobelShp;
    128             1                          2         oFrameData.maskSobelBlu      <= rgbImageFilters.maskSobelBlu;
    129             1                          2         oFrameData.maskSobelYcc      <= rgbImageFilters.maskSobelYcc;
    130             1                          7         oFrameData.maskSobelHsv      <= rgbImageFilters.maskSobelHsv;
    131             1                          7         oFrameData.maskSobelHsl      <= rgbImageFilters.maskSobelHsl;
    132             1                          5         oFrameData.maskSobelCga      <= rgbImageFilters.maskSobelCga;
    133             1                          2         oFrameData.colorTrm          <= rgbImageFilters.colorTrm;
    134             1                          2         oFrameData.colorLmp          <= rgbImageFilters.colorLmp;
    135             1                          3         oFrameData.tPattern          <= rgbImageFilters.tPattern;
    136             1                          1         oFrameData.cgainToCgain      <= rgbImageFilters.cgainToCgain;
    137             1                          1         oFrameData.cgainToHsl        <= rgbImageFilters.cgainToHsl;
    138             1                          1         oFrameData.cgainToHsv        <= rgbImageFilters.cgainToHsv;
    139             1                          1         oFrameData.cgainToYcbcr      <= rgbImageFilters.cgainToYcbcr;
    140             1                          1         oFrameData.cgainToShp        <= rgbImageFilters.cgainToShp;
    141             1                          1         oFrameData.cgainToBlu        <= rgbImageFilters.cgainToBlu;
    142             1                          1         oFrameData.shpToCgain        <= rgbImageFilters.shpToCgain;
    143             1                          1         oFrameData.shpToHsl          <= rgbImageFilters.shpToHsl;
    144             1                          1         oFrameData.shpToHsv          <= rgbImageFilters.shpToHsv;
    145             1                          1         oFrameData.shpToYcbcr        <= rgbImageFilters.shpToYcbcr;
    146             1                          1         oFrameData.shpToShp          <= rgbImageFilters.shpToShp;
    147             1                          1         oFrameData.shpToBlu          <= rgbImageFilters.shpToBlu;
    148             1                          1         oFrameData.bluToBlu          <= rgbImageFilters.bluToBlu;
    149             1                          1         oFrameData.bluToCga          <= rgbImageFilters.bluToCga;
    150             1                          1         oFrameData.bluToShp          <= rgbImageFilters.bluToShp;
    151             1                          1         oFrameData.bluToYcc          <= rgbImageFilters.bluToYcc;
    152             1                          1         oFrameData.bluToHsv          <= rgbImageFilters.bluToHsv;
    153             1                          1         oFrameData.bluToHsl          <= rgbImageFilters.bluToHsl;
    154             1                          1         oFrameData.bluToCgaShp       <= rgbImageFilters.bluToCgaShp;
    155             1                          1         oFrameData.bluToCgaShpYcc    <= rgbImageFilters.bluToCgaShpYcc;
    156             1                          1         oFrameData.bluToCgaShpHsv    <= rgbImageFilters.bluToCgaShpHsv;
    157             1                          1         oFrameData.bluToShpCga       <= rgbImageFilters.bluToShpCga;
    158             1                          1         oFrameData.bluToShpCgaYcc    <= rgbImageFilters.bluToShpCgaYcc;
    159             1                          1         oFrameData.bluToShpCgaHsv    <= rgbImageFilters.bluToShpCgaHsv;
    160             1                          1         oFrameData.rgbRemix          <= rgbRemix;
    161             1                          2         oFrameData.rgbDetect         <= rgbDetect;
    162             1                          2         oFrameData.rgbPoi            <= rgbPoi;
    163             1                          3         oFrameData.rgbSum            <= rgbSum;
    164             1                          2         oFrameData.rgbDetectLock     <= rgbDetectLock;
    165             1                          2         oFrameData.rgbPoiLock        <= rgbPoiLock;
    166             1                          2         oFrameData.cod               <= syncxy;
    167             1                          2         oFrameData.pEof              <= iRgbSet.pEof;
    168             1                          2         oFrameData.pSof              <= iRgbSet.pSof;
    169             1                          2         rgbIn.red                    <= iRgbSet.red;
    170             1                          2         rgbIn.green                  <= iRgbSet.green;
    171             1                          2         rgbIn.blue                   <= iRgbSet.blue;
    172             1                          2         rgbIn.valid                  <= iRgbSet.valid;
    173             1                          2         cordIn.x                     <= iRgbSet.cord.x;
    174             1                          2         cordIn.y                     <= iRgbSet.cord.y;
    175                                                  -------------------------------------------------
    176                                              pipCoordP: process (clk) begin
    177                                                  if rising_edge(clk) then
    178             1                          3             syncxy          <= cordIn;
    179             1                          3             cord            <= syncxy;
    180                                                  end if;
    181                                              end process pipCoordP;
    182                                                  -------------------------------------------------
    183             1                          2         iKcoeff.k1   <= iKls.k1(15 downto 0);
    184             1                          2         iKcoeff.k2   <= iKls.k2(15 downto 0); 
    185             1                          2         iKcoeff.k3   <= iKls.k3(15 downto 0); 
    186             1                          2         iKcoeff.k4   <= iKls.k4(15 downto 0); 
    187             1                          2         iKcoeff.k5   <= iKls.k5(15 downto 0); 
    188             1                          2         iKcoeff.k6   <= iKls.k6(15 downto 0); 
    189             1                          2         iKcoeff.k7   <= iKls.k7(15 downto 0); 
    190             1                          2         iKcoeff.k8   <= iKls.k8(15 downto 0); 
    191             1                          2         iKcoeff.k9   <= iKls.k9(15 downto 0); 
    192             1                          2         iKcoeff.kSet <= iKls.config;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         1         1         0     100.0

================================Branch Details================================

Branch Coverage for Design Unit work.frameprocess(arch)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/frameProcess.vhd
------------------------------------IF Branch------------------------------------
    177                                        3     Count coming in to IF
    177             1                          3         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.frametestpattern(arch_imp)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           15         6         9      40.0

================================Statement Details================================

Statement Coverage for Design Unit work.frametestpattern(arch_imp) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/frameTestPattern.vhd
    17                                               architecture arch_imp of frameTestPattern is
    18                                                   signal xCounter           : integer;
    19                                                   signal yCounter           : integer;
    20                                                   signal rowdist            : integer;
    21                                                   signal nrowdist           : integer;
    22                                                   signal coldist            : integer;
    23                                                   signal ncoldist           : integer;
    24                                                   signal irgbSum            : integer;
    25                                               begin
    26              1                          4         xCounter    <= to_integer(unsigned(iCord.x));
    27              1                          4         yCounter    <= to_integer(unsigned(iCord.y));
    28                                               tPattenP: Process (clk) begin
    29                                                   if rising_edge(clk) then
    30                                                       if iValid = '1'  then
    31                                                           if xcounter > 960 then
    32              1                    ***0***                     rowdist <= xcounter - 960;
    33                                                           else
    34              1                    ***0***                     rowdist <= 960 - xcounter;
    35                                                           end if;
    36                                                           if rowdist > 480 then
    37              1                    ***0***                     nrowdist <= rowdist - 480;
    38                                                           else
    39              1                    ***0***                     nrowdist <= 480 - rowdist;
    40                                                           end if;	
    41                                                           if ycounter > 540 then
    42              1                    ***0***                     coldist <= ycounter -540;
    43                                                           else
    44              1                    ***0***                     coldist <= 540 - ycounter;
    45                                                           end if;
    46                                                           if coldist > 270 then
    47              1                    ***0***                     ncoldist <= coldist - 270;
    48                                                           else
    49              1                    ***0***                     ncoldist <= 270 - coldist;
    50                                                           end if;
    51              1                    ***0***                 irgbSum <= nrowdist + ncoldist;
    52                                                       end if;
    53                                                   end if;
    54                                               end process tPattenP;
    55                                               rgbSumP: Process (clk) begin
    56                                                   if rising_edge(clk) then
    57              1                          4             oRgb.valid    <= iValid;
    58              1                          4             oRgb.red      <= std_logic_vector(to_unsigned(irgbSum,12));
    59              1                          4             oRgb.green    <= std_logic_vector(to_unsigned(irgbSum,12));
    60              1                          4             oRgb.blue     <= std_logic_vector(to_unsigned(irgbSum,12));

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        12         3         9      25.0

================================Branch Details================================

Branch Coverage for Design Unit work.frametestpattern(arch_imp)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/frameTestPattern.vhd
------------------------------------IF Branch------------------------------------
    29                                         4     Count coming in to IF
    29              1                          4         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    30                                         4     Count coming in to IF
    30              1                    ***0***             if iValid = '1'  then
                                               4     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    31                                   ***0***     Count coming in to IF
    31              1                    ***0***                 if xcounter > 960 then
    33              1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    36                                   ***0***     Count coming in to IF
    36              1                    ***0***                 if rowdist > 480 then
    38              1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    41                                   ***0***     Count coming in to IF
    41              1                    ***0***                 if ycounter > 540 then
    43              1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    46                                   ***0***     Count coming in to IF
    46              1                    ***0***                 if coldist > 270 then
    48              1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    56                                         4     Count coming in to IF
    56              1                          4         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.gridlockfifo(rtl)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           26        22         4      84.6

================================Statement Details================================

Statement Coverage for Design Unit work.gridlockfifo(rtl) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/gridLockFifo.vhd
    30                                               architecture rtl of gridLockFifo is
    31                                                   type RAM is array (integer range <>)of std_logic_vector (FIFO_DATA_WIDTH-1 downto 0);
    32                                                   signal Mem : RAM (0 to FIFO_DEPTH-1);
    33                                                   signal eqlLocations  : std_logic;
    34                                                   signal wrDoneStatus  : std_logic;
    35                                                   signal rdDoneStatus  : std_logic;
    36                                                   signal preStatus     : std_logic := lo;
    37                                                   signal preFull       : std_logic;
    38                                                   signal preEmpty      : std_logic;
    39                                                   signal emptyHi       : std_logic;
    40                                                   signal fullHi        : std_logic;
    41                                                   signal fifoWrAddrs   : integer := 0;
    42                                                   signal fifoRdAddrs   : integer := 0;
    43                                               begin
    44                                               
    45              1                          2     fullO        <= fullHi;
    46              1                          4     emptyO       <= emptyHi;
    47                                               
    48              1                          2     fifoWrAddrs  <= to_integer(unsigned(wrAddress));
    49              1                          2     fifoRdAddrs  <= to_integer(unsigned(rdAddress));
    50                                               
    51              1                          3     eqlLocations <= hi when (wrAddress = rdAddress) else lo;
    52              1                          1     wrDone       <= hi when (fifoWrAddrs    = FIFO_DEPTH - 1) else lo;
    53              1                          1     rdDone       <= hi when (fifoRdAddrs    = FIFO_DEPTH - 1) else lo;
    54              1                          4     preEmpty     <= not preStatus and eqlLocations;
    55              1                          4     preFull      <= preStatus and eqlLocations;
    56                                               
    57                                               readPort: process (clk) begin
    58                                                   if (rising_edge(clk)) then
    59                                                       if (rdEn = hi and emptyHi = lo) then
    60              1                    ***0***                 dataO <= Mem(fifoRdAddrs);
    61                                                       end if;
    62                                                   end if;
    63                                               end process readPort;
    64                                               
    65                                               writePort: process (clk) begin
    66                                                   if (rising_edge(clk)) then
    67                                                       if (wrEn = hi and fullHi = lo) then
    68              1                    ***0***                 Mem(fifoWrAddrs) <= dataIn;
    69                                                       end if;
    70                                                   end if;
    71                                               end process writePort;
    72                                               
    73              1                          3     rdPointerStatus: process (wrAddress, rdAddress)
    74                                                   variable rdConditionBit0 : std_logic;
    75                                                   variable rdConditionBit1 : std_logic;
    76                                               begin
    77              1                          3         rdConditionBit0 := wrAddress(FIFO_ADDR_WIDTH-2) xor  rdAddress(FIFO_ADDR_WIDTH-1);
    78              1                          3         rdConditionBit1 := wrAddress(FIFO_ADDR_WIDTH-1) xnor rdAddress(FIFO_ADDR_WIDTH-2);
    79              1                          3         rdDoneStatus    <= rdConditionBit0 and rdConditionBit1;
    80                                               end process rdPointerStatus;
    81                                               
    82              1                          3     wrPointerStatus: process (wrAddress, rdAddress)
    83                                                   variable wrConditionBit0 : std_logic;
    84                                                   variable wrConditionBit1 : std_logic;
    85                                               begin
    86              1                          3         wrConditionBit0 := wrAddress(FIFO_ADDR_WIDTH-2) xnor rdAddress(FIFO_ADDR_WIDTH-1);
    87              1                          3         wrConditionBit1 := wrAddress(FIFO_ADDR_WIDTH-1) xor  rdAddress(FIFO_ADDR_WIDTH-2);
    88              1                          3         wrDoneStatus    <= wrConditionBit0 and wrConditionBit1;
    89                                               end process wrPointerStatus;
    90                                               
    91              1                          4     fifoPreStatus: process (wrDoneStatus, rdDoneStatus, clrStatus) begin
    92                                                   if (rdDoneStatus = hi or clrStatus = hi) then
    93              1                          2             preStatus <= lo;  -- GoingEmpty
    94                                                   elsif (wrDoneStatus = hi) then
    95              1                    ***0***             preStatus <= hi;  -- GoingFull
    96                                                   end if;
    97                                               end process fifoPreStatus;
    98                                               
    99                                               fifoFullStatus: process (clk, preFull) begin
    100                                                  if (preFull = hi) then
    101             1                    ***0***             fullHi <= hi;
    102                                                  elsif (rising_edge(clk)) then
    103             1                          1             fullHi <= lo;
    104                                                  end if;
    105                                              end process fifoFullStatus;
    106                                              
    107                                              fifoEmptyStatus: process (clk, preEmpty) begin
    108                                                  if (preEmpty = hi) then
    109             1                      10761             emptyHi <= hi;
    110                                                  elsif (rising_edge(clk)) then
    111             1                          1             emptyHi <= lo;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        19        13         6      68.4

================================Branch Details================================

Branch Coverage for Design Unit work.gridlockfifo(rtl)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/gridLockFifo.vhd
------------------------------------IF Branch------------------------------------
    51                                         3     Count coming in to IF
    51              1                          2     eqlLocations <= hi when (wrAddress = rdAddress) else lo;
    51              2                          1     eqlLocations <= hi when (wrAddress = rdAddress) else lo;
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    52                                         1     Count coming in to IF
    52              1                    ***0***     wrDone       <= hi when (fifoWrAddrs    = FIFO_DEPTH - 1) else lo;
    52              2                          1     wrDone       <= hi when (fifoWrAddrs    = FIFO_DEPTH - 1) else lo;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    53                                         1     Count coming in to IF
    53              1                    ***0***     rdDone       <= hi when (fifoRdAddrs    = FIFO_DEPTH - 1) else lo;
    53              2                          1     rdDone       <= hi when (fifoRdAddrs    = FIFO_DEPTH - 1) else lo;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    58                                     10760     Count coming in to IF
    58              1                      10760         if (rising_edge(clk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    59                                     10760     Count coming in to IF
    59              1                    ***0***             if (rdEn = hi and emptyHi = lo) then
                                           10760     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    66                                         3     Count coming in to IF
    66              1                          3         if (rising_edge(clk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    67                                         3     Count coming in to IF
    67              1                    ***0***             if (wrEn = hi and fullHi = lo) then
                                               3     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    92                                         4     Count coming in to IF
    92              1                          2         if (rdDoneStatus = hi or clrStatus = hi) then
    94              1                    ***0***         elsif (wrDoneStatus = hi) then
                                               2     All False Count
Branch totals: 2 hits of 3 branches = 66.6%

------------------------------------IF Branch------------------------------------
    100                                        1     Count coming in to IF
    100             1                    ***0***         if (preFull = hi) then
    102             1                          1         elsif (rising_edge(clk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    108                                    10762     Count coming in to IF
    108             1                      10761         if (preEmpty = hi) then
    110             1                          1         elsif (rising_edge(clk)) then
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              6         1         5      16.6

================================Condition Details================================

Condition Coverage for Design Unit work.gridlockfifo(rtl) --

  File ../../uvmtb/dut/src/Process/gridLockFifo.vhd
----------------Focused Condition View-------------------
Line       59 Item    1  ((rdEn = hi) and (emptyHi = lo))
Condition totals: 0 of 2 input terms covered = 0.0%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
     (rdEn = hi)         N  '_1' not hit             Hit '_1'
  (emptyHi = lo)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (rdEn = hi)_0         -                             
  Row   2:    ***0***  (rdEn = hi)_1         (emptyHi = lo)                
  Row   3:    ***0***  (emptyHi = lo)_0      (rdEn = hi)                   
  Row   4:    ***0***  (emptyHi = lo)_1      (rdEn = hi)                   

----------------Focused Condition View-------------------
Line       67 Item    1  ((wrEn = hi) and (fullHi = lo))
Condition totals: 0 of 2 input terms covered = 0.0%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
    (wrEn = hi)         N  '_1' not hit             Hit '_1'
  (fullHi = lo)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (wrEn = hi)_0         -                             
  Row   2:    ***0***  (wrEn = hi)_1         (fullHi = lo)                 
  Row   3:    ***0***  (fullHi = lo)_0       (wrEn = hi)                   
  Row   4:    ***0***  (fullHi = lo)_1       (wrEn = hi)                   

----------------Focused Condition View-------------------
Line       92 Item    1  ((rdDoneStatus = hi) or (clrStatus = hi))
Condition totals: 1 of 2 input terms covered = 50.0%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (rdDoneStatus = hi)         N  '_1' not hit             Hit '_1'
     (clrStatus = hi)         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  (rdDoneStatus = hi)_0  not (clrStatus = hi)          
  Row   2:    ***0***  (rdDoneStatus = hi)_1  -                             
  Row   3:          1  (clrStatus = hi)_0     not (rdDoneStatus = hi)       
  Row   4:          1  (clrStatus = hi)_1     not (rdDoneStatus = hi)       


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms            16         1        15       6.2

================================Expression Details================================

Expression Coverage for Design Unit work.gridlockfifo(rtl) --

  File ../../uvmtb/dut/src/Process/gridLockFifo.vhd
----------------Focused Expression View-----------------
Line       54 Item    1  (not(preStatus) and eqlLocations)
Expression totals: 1 of 2 input terms covered = 50.0%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
     preStatus         N  '_1' not hit             Hit '_1'
  eqlLocations         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  preStatus_0           eqlLocations                  
  Row   2:    ***0***  preStatus_1           eqlLocations                  
  Row   3:          1  eqlLocations_0        not preStatus                 
  Row   4:          1  eqlLocations_1        not preStatus                 

----------------Focused Expression View-----------------
Line       55 Item    1  (preStatus and eqlLocations)
Expression totals: 0 of 2 input terms covered = 0.0%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
     preStatus         N  '_1' not hit             Hit '_1'
  eqlLocations         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  preStatus_0           eqlLocations                  
  Row   2:    ***0***  preStatus_1           eqlLocations                  
  Row   3:    ***0***  eqlLocations_0        preStatus                     
  Row   4:    ***0***  eqlLocations_1        preStatus                     

-----------Focused Expression View (Bimodal)------------
Line       77 Item    1  (wrAddress(12) xor rdAddress(13))
Expression totals: 0 of 2 input terms covered = 0.0%

       Input Term   Covered  Reason for no coverage                  Hint
      -----------  --------  --------------------------------------  --------------
    wrAddress(12)         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->1
    rdAddress(13)         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->1

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           
---------  ----------  ----------  --------------------  -----------------------------------
 Row   1:           1           0  wrAddress(12)_0       -                                  
 Row   2:           0           0  wrAddress(12)_1       -                                  
 Row   3:           1           0  rdAddress(13)_0       -                                  
 Row   4:           0           0  rdAddress(13)_1       -                                  

-----------Focused Expression View (Bimodal)------------
Line       78 Item    1  (wrAddress(13) xnor rdAddress(12))
Expression totals: 0 of 2 input terms covered = 0.0%

       Input Term   Covered  Reason for no coverage                  Hint
      -----------  --------  --------------------------------------  --------------
    wrAddress(13)         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->0
    rdAddress(12)         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->0

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           
---------  ----------  ----------  --------------------  -----------------------------------
 Row   1:           0           1  wrAddress(13)_0       -                                  
 Row   2:           0           0  wrAddress(13)_1       -                                  
 Row   3:           0           1  rdAddress(12)_0       -                                  
 Row   4:           0           0  rdAddress(12)_1       -                                  

----------------Focused Expression View-----------------
Line       79 Item    1  (rdConditionBit0 and rdConditionBit1)
Expression totals: 0 of 2 input terms covered = 0.0%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  rdConditionBit0         N  '_1' not hit             Hit '_1'
  rdConditionBit1         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  rdConditionBit0_0     rdConditionBit1               
  Row   2:    ***0***  rdConditionBit0_1     rdConditionBit1               
  Row   3:    ***0***  rdConditionBit1_0     rdConditionBit0               
  Row   4:    ***0***  rdConditionBit1_1     rdConditionBit0               

-----------Focused Expression View (Bimodal)------------
Line       86 Item    1  (wrAddress(12) xnor rdAddress(13))
Expression totals: 0 of 2 input terms covered = 0.0%

       Input Term   Covered  Reason for no coverage                  Hint
      -----------  --------  --------------------------------------  --------------
    wrAddress(12)         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->0
    rdAddress(13)         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->0

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           
---------  ----------  ----------  --------------------  -----------------------------------
 Row   1:           0           1  wrAddress(12)_0       -                                  
 Row   2:           0           0  wrAddress(12)_1       -                                  
 Row   3:           0           1  rdAddress(13)_0       -                                  
 Row   4:           0           0  rdAddress(13)_1       -                                  

-----------Focused Expression View (Bimodal)------------
Line       87 Item    1  (wrAddress(13) xor rdAddress(12))
Expression totals: 0 of 2 input terms covered = 0.0%

       Input Term   Covered  Reason for no coverage                  Hint
      -----------  --------  --------------------------------------  --------------
    wrAddress(13)         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->1
    rdAddress(12)         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->1

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           
---------  ----------  ----------  --------------------  -----------------------------------
 Row   1:           1           0  wrAddress(13)_0       -                                  
 Row   2:           0           0  wrAddress(13)_1       -                                  
 Row   3:           1           0  rdAddress(12)_0       -                                  
 Row   4:           0           0  rdAddress(12)_1       -                                  

----------------Focused Expression View-----------------
Line       88 Item    1  (wrConditionBit0 and wrConditionBit1)
Expression totals: 0 of 2 input terms covered = 0.0%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  wrConditionBit0         N  No hits                  Hit '_0' and '_1'
  wrConditionBit1         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  wrConditionBit0_0     wrConditionBit1               
  Row   2:    ***0***  wrConditionBit0_1     wrConditionBit1               
  Row   3:          1  wrConditionBit1_0     wrConditionBit0               
  Row   4:    ***0***  wrConditionBit1_1     wrConditionBit0               


FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.hsl_c(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           55        42        13      76.3

================================Statement Details================================

Statement Coverage for Design Unit work.hsl_c(behavioral) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/hsl.vhd
    19                                               architecture behavioral of hsl_c is
    20                                                   --RGB Floating
    21                                                   signal uFs1Rgb       : rgbToUfRecord;
    22                                                   signal uFs2Rgb       : rgbToUfRecord;
    23                                                   signal uFs3Rgb       : rgbToUfRecord;
    24                                                   --RGB Max Min
    25                                                   signal rgbMax        : ufixed(7 downto 0) :=(others => '0');
    26                                                   signal rgbMin        : ufixed(7 downto 0) :=(others => '0');
    27                                                   signal maxValue      : ufixed(7 downto 0) :=(others => '0');
    28                                                   signal minValue      : ufixed(7 downto 0) :=(others => '0');
    29                                                   signal rgbDelta      : ufixed(8 downto 0) :=(others => '0');
    30                                                   signal maxMinSum     : ufixed(8 downto 0) :=(others => '0');
    31                                                   --Valid
    32                                                   signal valid1xD      : std_logic := '0';
    33                                                   signal valid2xD      : std_logic := '0';
    34                                                   signal valid3xD      : std_logic := '0';
    35                                                   signal valid4xD      : std_logic := '0';
    36                                                   --HValue
    37                                                   signal hValue1xD     : std_logic_vector(i_data_width-1 downto 0) :=(others => '0');
    38                                                   signal hValue2xD     : std_logic_vector(i_data_width-1 downto 0) :=(others => '0');
    39                                                   signal hValue3xD     : std_logic_vector(i_data_width-1 downto 0) :=(others => '0');
    40                                                   signal hValue4xD     : std_logic_vector(i_data_width-1 downto 0) :=(others => '0');
    41                                                   --Lum
    42                                                   signal lumValueQuot  : ufixed(8 downto -9) :=(others => '0');
    43                                                   signal lumValue      : ufixed(7 downto 0)  :=(others => '0');
    44                                                   signal lumValue1xD   : std_logic_vector(i_data_width-1 downto 0) :=(others => '0');
    45                                                   signal lumValue2xD   : std_logic_vector(i_data_width-1 downto 0) :=(others => '0');
    46                                                   --Saturate
    47                                                   signal satUfTop      : ufixed(17 downto 0) :=(others => '0');
    48                                                   signal satUfBott     : ufixed(7 downto 0) :=(others => '0');
    49                                                   signal satValueQuot  : ufixed(17 downto -8) :=(others => '0');
    50                                                   signal satValue      : ufixed(7 downto 0) :=(others => '0');
    51                                                   signal satValue1xD   : std_logic_vector(7 downto 0) :=(others => '0');
    52                                                   --Hue Rsiz
    53                                                   signal hueTop        : ufixed(17 downto 0) :=(others => '0');
    54                                                   signal hueBot        : ufixed(8 downto 0) :=(others => '0');
    55                                                   signal hueQuot       : ufixed(17 downto -9) :=(others => '0');
    56                                                   signal hueQuot1x     : ufixed(7 downto 0) :=(others => '0');
    57                                                   signal hueDeg        : ufixed(26 downto 0) :=(others => '0');
    58                                                   signal hueDeg1x      : ufixed(7 downto 0) :=(others => '0');
    59                                                   signal hueValue      : unsigned(7 downto 0):= (others => '0');
    60                                               begin
    61                                               rgbToUfP: process (clk,reset)begin
    62                                                   if (reset = lo) then
    63              1                        100             uFs1Rgb.red    <= (others => '0');
    64              1                        100             uFs1Rgb.green  <= (others => '0');
    65              1                        100             uFs1Rgb.blue   <= (others => '0');
    66                                                   elsif rising_edge(clk) then 
    67              1                      10661             uFs1Rgb.red    <= to_ufixed(iRgb.red,uFs1Rgb.red);
    68              1                      10661             uFs1Rgb.green  <= to_ufixed(iRgb.green,uFs1Rgb.green);
    69              1                      10661             uFs1Rgb.blue   <= to_ufixed(iRgb.blue,uFs1Rgb.blue);
    70              1                      10661             uFs1Rgb.valid  <= iRgb.valid;
    71                                                   end if; 
    72                                               end process rgbToUfP;
    73                                               pipRgbD2P: process (clk) begin
    74                                                   if rising_edge(clk) then 
    75              1                          2             uFs2Rgb <= uFs1Rgb;
    76                                                   end if;
    77                                               end process pipRgbD2P;
    78                                               pipRgbD3P: process (clk) begin
    79                                                   if rising_edge(clk) then 
    80              1                          3             uFs3Rgb <= uFs2Rgb;
    81                                                   end if;
    82                                               end process pipRgbD3P;
    83                                               rgbMaxP: process (clk) begin
    84                                                   if rising_edge(clk) then 
    85                                                       if ((uFs1Rgb.red >= uFs1Rgb.green) and (uFs1Rgb.red >= uFs1Rgb.blue)) then
    86              1                          1                 rgbMax <= uFs1Rgb.red;
    87                                                       elsif((uFs1Rgb.green >= uFs1Rgb.red) and (uFs1Rgb.green >= uFs1Rgb.blue))then
    88              1                    ***0***                 rgbMax <= uFs1Rgb.green;
    89                                                       else
    90              1                    ***0***                 rgbMax <= uFs1Rgb.blue;
    91                                                       end if;
    92                                                   end if;
    93                                               end process rgbMaxP;
    94                                               rgbMinP: process (clk) begin
    95                                                   if rising_edge(clk) then 
    96                                                       if ((uFs1Rgb.red <= uFs1Rgb.green) and (uFs1Rgb.red <= uFs1Rgb.blue)) then
    97              1                          1                 rgbMin <= uFs1Rgb.red;
    98                                                       elsif((uFs1Rgb.green <= uFs1Rgb.red) and (uFs1Rgb.green <= uFs1Rgb.blue)) then
    99              1                    ***0***                 rgbMin <= uFs1Rgb.green;
    100                                                      else
    101             1                    ***0***                 rgbMin <= uFs1Rgb.blue;
    102                                                      end if;
    103                                                  end if;
    104                                              end process rgbMinP;
    105                                              rgbDeltaP: process (clk) begin
    106                                                  if rising_edge(clk) then 
    107             1                          1             rgbDelta      <= rgbMax - rgbMin;
    108                                                  end if;
    109                                              end process rgbDeltaP;
    110                                              maxMinUfSumP: process (clk) begin
    111                                                  if rising_edge(clk) then 
    112             1                          1             maxMinSum    <= rgbMax + rgbMin;
    113                                                  end if;
    114                                              end process maxMinUfSumP;
    115                                              pipRgbMaxUfD1P: process (clk) begin
    116                                                  if rising_edge(clk) then 
    117             1                          1             maxValue          <= rgbMax;
    118             1                          1             minValue          <= rgbMin;
    119                                                  end if;
    120                                              end process pipRgbMaxUfD1P;
    121                                              -------------------------------------------------
    122                                              -- LUM
    123                                              -------------------------------------------------
    124                                              lumP: process (clk) begin
    125                                                  if rising_edge(clk) then 
    126             1                          1             lumValueQuot   <= maxMinSum / 2.0;
    127                                                  end if;
    128                                              end process lumP;
    129                                              lumResizeP: process (clk) begin
    130                                                  if rising_edge(clk) then 
    131             1                      10760             lumValue <= resize(lumValueQuot,lumValue);
    132             1                      10760             lumValue1xD <= std_logic_vector(to_unsigned(lumValue,8));
    133             1                      10760             lumValue2xD <= lumValue1xD;
    134                                                  end if;
    135                                              end process lumResizeP;
    136                                              -------------------------------------------------
    137                                              -- VALUE
    138                                              -------------------------------------------------
    139                                              hValueP: process (clk) begin
    140                                                  if rising_edge(clk) then 
    141             1                      10760             hValue1xD <= std_logic_vector(to_unsigned(maxValue,8));
    142             1                      10760             hValue2xD <= hValue1xD;
    143             1                      10760             hValue3xD <= hValue2xD;
    144             1                      10760             hValue4xD <= hValue3xD;
    145                                                  end if;
    146                                              end process hValueP;
    147                                              -------------------------------------------------
    148                                              -- SATURATE
    149                                              -------------------------------------------------
    150                                              satNumniatorUfP: process (clk) begin
    151                                                  if rising_edge(clk) then 
    152             1                          1             satUfTop      <= 256.0 * rgbDelta;
    153                                                  end if;
    154                                              end process satNumniatorUfP;
    155                                              satDominaUfCalP: process (clk) begin
    156                                                  if rising_edge(clk) then 
    157                                                      if (maxValue > 0) then
    158             1                    ***0***                 satUfBott <= maxValue;
    159                                                      end if;
    160                                                  end if;
    161                                              end process satDominaUfCalP;
    162                                              satDividerP: process (clk) begin
    163                                                  if rising_edge(clk) then 
    164             1                          1             satValueQuot <= satUfTop / satUfBott;
    165                                                  end if;
    166                                              end process satDividerP;
    167                                              satDividerResizeP: process (clk) begin
    168                                                  if rising_edge(clk) then 
    169             1                      10760             satValue    <= resize(satValueQuot,satValue);
    170             1                      10760             satValue1xD <= std_logic_vector(to_unsigned(satValue,8));
    171                                                  end if;
    172                                              end process satDividerResizeP;
    173                                              -------------------------------------------------
    174                                              -- HUE
    175                                              -------------------------------------------------
    176                                              hueBottomP: process (clk) begin
    177                                                  if rising_edge(clk) then 
    178                                                      if (rgbDelta > 0) then
    179             1                    ***0***                 hueBot <= rgbDelta;
    180                                                      else
    181             1                      10760                 hueBot <= to_ufixed (6.0,hueBot);
    182                                                      end if;
    183                                                  end if;
    184                                              end process hueBottomP;
    185                                              hueP: process (clk) begin
    186                                                if rising_edge(clk) then 
    187                                                  if (uFs3Rgb.red  = maxValue) then
    188             1                      10758                 hueDeg <= to_ufixed (0.0,hueDeg);
    189                                                      if (uFs3Rgb.green >= uFs3Rgb.blue) then
    190             1                      10758                 hueTop        <= (uFs3Rgb.green - uFs3Rgb.blue) * 43;
    191                                                      else
    192             1                    ***0***                 hueTop        <= (uFs3Rgb.blue - uFs3Rgb.green) * 43;
    193                                                      end if;
    194                                                  elsif(uFs3Rgb.green = maxValue)  then
    195             1                    ***0***                 hueDeg <= to_ufixed (85.0,hueDeg);
    196                                                      if (uFs3Rgb.blue >= uFs3Rgb.red ) then
    197             1                    ***0***                 hueTop       <= (uFs3Rgb.blue - uFs3Rgb.red ) * 43;
    198                                                      else
    199             1                    ***0***                 hueTop       <= (uFs3Rgb.red  - uFs3Rgb.blue) * 43;
    200                                                      end if;
    201                                                  elsif(uFs3Rgb.blue = maxValue)  then
    202             1                    ***0***                 hueDeg <= to_ufixed (171.0,hueDeg);
    203                                                      if (uFs3Rgb.red  >= uFs3Rgb.green) then
    204             1                    ***0***                 hueTop       <= (uFs3Rgb.red  - uFs3Rgb.green) * 43;
    205                                                      else
    206             1                    ***0***                 hueTop       <= (uFs3Rgb.green - uFs3Rgb.red ) * 43;
    207                                                      end if;
    208                                                  end if;
    209                                                end if;
    210                                              end process hueP;
    211                                              hueDividerP: process (clk) begin
    212                                                  if rising_edge(clk) then 
    213             1                          2             hueQuot  <= hueTop / hueBot;
    214                                                  end if;
    215                                              end process hueDividerP;
    216                                              hueDegreeP: process (clk) begin
    217                                                  if rising_edge(clk) then 
    218             1                      10760             hueDeg1x       <= resize(hueDeg,hueDeg1x);
    219                                                  end if;
    220                                              end process hueDegreeP;
    221                                              hueDividerResizeP: process (clk) begin
    222                                                  if rising_edge(clk) then 
    223             1                      10760             hueQuot1x <= resize(hueQuot,hueQuot1x);
    224                                                  end if;
    225                                              end process hueDividerResizeP;
    226                                              hueValueP: process (clk) begin
    227                                                  if rising_edge(clk) then 
    228             1                      10760             hueValue <= (to_unsigned(hueQuot1x,8) + to_unsigned(hueDeg1x,8));
    229                                                  end if;
    230                                              end process hueValueP;
    231                                              -------------------------------------------------
    232                                              -- VALID
    233                                              -------------------------------------------------
    234                                              pipValidP: process (clk) begin
    235                                                  if rising_edge(clk) then 
    236             1                      10760             valid1xD    <= uFs3Rgb.valid;
    237             1                      10760             valid2xD    <= valid1xD;
    238             1                      10760             valid3xD    <= valid2xD;
    239             1                      10760             valid4xD    <= valid3xD;
    240                                                  end if;
    241                                              end process pipValidP;
    242                                              hsvOut: process (clk) begin
    243                                                  if rising_edge(clk) then 
    244             1                          4             oHsl.h      <= std_logic_vector(hueValue(i_data_width-1 downto 0));
    245             1                          4             oHsl.s      <= satValue1xD;
    246             1                          4             oHsl.l      <= lumValue2xD;
    247             1                          4             oHsl.valid  <= valid4xD;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        44        31        13      70.4

================================Branch Details================================

Branch Coverage for Design Unit work.hsl_c(behavioral)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/hsl.vhd
------------------------------------IF Branch------------------------------------
    62                                     10761     Count coming in to IF
    62              1                        100         if (reset = lo) then
    66              1                      10661         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    74                                         2     Count coming in to IF
    74              1                          2         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    79                                         3     Count coming in to IF
    79              1                          3         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    84                                         1     Count coming in to IF
    84              1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    85                                         1     Count coming in to IF
    85              1                          1             if ((uFs1Rgb.red >= uFs1Rgb.green) and (uFs1Rgb.red >= uFs1Rgb.blue)) then
    87              1                    ***0***             elsif((uFs1Rgb.green >= uFs1Rgb.red) and (uFs1Rgb.green >= uFs1Rgb.blue))then
    89              1                    ***0***             else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    95                                         1     Count coming in to IF
    95              1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    96                                         1     Count coming in to IF
    96              1                          1             if ((uFs1Rgb.red <= uFs1Rgb.green) and (uFs1Rgb.red <= uFs1Rgb.blue)) then
    98              1                    ***0***             elsif((uFs1Rgb.green <= uFs1Rgb.red) and (uFs1Rgb.green <= uFs1Rgb.blue)) then
    100             1                    ***0***             else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    106                                        1     Count coming in to IF
    106             1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    111                                        1     Count coming in to IF
    111             1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    116                                        1     Count coming in to IF
    116             1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    125                                        1     Count coming in to IF
    125             1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    130                                    10760     Count coming in to IF
    130             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    140                                    10760     Count coming in to IF
    140             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    151                                        1     Count coming in to IF
    151             1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    156                                        1     Count coming in to IF
    156             1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    157                                        1     Count coming in to IF
    157             1                    ***0***             if (maxValue > 0) then
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    163                                        1     Count coming in to IF
    163             1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    168                                    10760     Count coming in to IF
    168             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    177                                    10760     Count coming in to IF
    177             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    178                                    10760     Count coming in to IF
    178             1                    ***0***             if (rgbDelta > 0) then
    180             1                      10760             else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    186                                    10759     Count coming in to IF
    186             1                      10759       if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    187                                    10759     Count coming in to IF
    187             1                      10758         if (uFs3Rgb.red  = maxValue) then
    194             1                    ***0***         elsif(uFs3Rgb.green = maxValue)  then
    201             1                    ***0***         elsif(uFs3Rgb.blue = maxValue)  then
                                               1     All False Count
Branch totals: 2 hits of 4 branches = 50.0%

------------------------------------IF Branch------------------------------------
    189                                    10758     Count coming in to IF
    189             1                      10758             if (uFs3Rgb.green >= uFs3Rgb.blue) then
    191             1                    ***0***             else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    196                                  ***0***     Count coming in to IF
    196             1                    ***0***             if (uFs3Rgb.blue >= uFs3Rgb.red ) then
    198             1                    ***0***             else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    203                                  ***0***     Count coming in to IF
    203             1                    ***0***             if (uFs3Rgb.red  >= uFs3Rgb.green) then
    205             1                    ***0***             else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    212                                        2     Count coming in to IF
    212             1                          2         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    217                                    10760     Count coming in to IF
    217             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    222                                    10760     Count coming in to IF
    222             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    227                                    10760     Count coming in to IF
    227             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    235                                    10760     Count coming in to IF
    235             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    243                                        4     Count coming in to IF
    243             1                          4         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              8         0         8       0.0

================================Condition Details================================

Condition Coverage for Design Unit work.hsl_c(behavioral) --

  File ../../uvmtb/dut/src/Filters/hsl.vhd
----------------Focused Condition View-------------------
Line       85 Item    1  ((uFs1Rgb.red >= uFs1Rgb.green) and (uFs1Rgb.red >= uFs1Rgb.blue))
Condition totals: 0 of 2 input terms covered = 0.0%

                      Input Term   Covered  Reason for no coverage   Hint
                     -----------  --------  -----------------------  --------------
  (uFs1Rgb.red >= uFs1Rgb.green)         N  '_0' not hit             Hit '_0'
   (uFs1Rgb.red >= uFs1Rgb.blue)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                        Non-masking condition(s)      
 ---------  ---------  --------------------              -------------------------     
  Row   1:    ***0***  (uFs1Rgb.red >= uFs1Rgb.green)_0  -                             
  Row   2:          1  (uFs1Rgb.red >= uFs1Rgb.green)_1  (uFs1Rgb.red >= uFs1Rgb.blue) 
  Row   3:    ***0***  (uFs1Rgb.red >= uFs1Rgb.blue)_0   (uFs1Rgb.red >= uFs1Rgb.green)
  Row   4:          1  (uFs1Rgb.red >= uFs1Rgb.blue)_1   (uFs1Rgb.red >= uFs1Rgb.green)

----------------Focused Condition View-------------------
Line       87 Item    1  ((uFs1Rgb.green >= uFs1Rgb.red) and (uFs1Rgb.green >= uFs1Rgb.blue))
Condition totals: 0 of 2 input terms covered = 0.0%

                       Input Term   Covered  Reason for no coverage   Hint
                      -----------  --------  -----------------------  --------------
   (uFs1Rgb.green >= uFs1Rgb.red)         N  No hits                  Hit '_0' and '_1'
  (uFs1Rgb.green >= uFs1Rgb.blue)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                         Non-masking condition(s)      
 ---------  ---------  --------------------               -------------------------     
  Row   1:    ***0***  (uFs1Rgb.green >= uFs1Rgb.red)_0   -                             
  Row   2:    ***0***  (uFs1Rgb.green >= uFs1Rgb.red)_1   (uFs1Rgb.green >= uFs1Rgb.blue)
  Row   3:    ***0***  (uFs1Rgb.green >= uFs1Rgb.blue)_0  (uFs1Rgb.green >= uFs1Rgb.red)
  Row   4:    ***0***  (uFs1Rgb.green >= uFs1Rgb.blue)_1  (uFs1Rgb.green >= uFs1Rgb.red)

----------------Focused Condition View-------------------
Line       96 Item    1  ((uFs1Rgb.red <= uFs1Rgb.green) and (uFs1Rgb.red <= uFs1Rgb.blue))
Condition totals: 0 of 2 input terms covered = 0.0%

                      Input Term   Covered  Reason for no coverage   Hint
                     -----------  --------  -----------------------  --------------
  (uFs1Rgb.red <= uFs1Rgb.green)         N  '_0' not hit             Hit '_0'
   (uFs1Rgb.red <= uFs1Rgb.blue)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                        Non-masking condition(s)      
 ---------  ---------  --------------------              -------------------------     
  Row   1:    ***0***  (uFs1Rgb.red <= uFs1Rgb.green)_0  -                             
  Row   2:          1  (uFs1Rgb.red <= uFs1Rgb.green)_1  (uFs1Rgb.red <= uFs1Rgb.blue) 
  Row   3:    ***0***  (uFs1Rgb.red <= uFs1Rgb.blue)_0   (uFs1Rgb.red <= uFs1Rgb.green)
  Row   4:          1  (uFs1Rgb.red <= uFs1Rgb.blue)_1   (uFs1Rgb.red <= uFs1Rgb.green)

----------------Focused Condition View-------------------
Line       98 Item    1  ((uFs1Rgb.green <= uFs1Rgb.red) and (uFs1Rgb.green <= uFs1Rgb.blue))
Condition totals: 0 of 2 input terms covered = 0.0%

                       Input Term   Covered  Reason for no coverage   Hint
                      -----------  --------  -----------------------  --------------
   (uFs1Rgb.green <= uFs1Rgb.red)         N  No hits                  Hit '_0' and '_1'
  (uFs1Rgb.green <= uFs1Rgb.blue)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                         Non-masking condition(s)      
 ---------  ---------  --------------------               -------------------------     
  Row   1:    ***0***  (uFs1Rgb.green <= uFs1Rgb.red)_0   -                             
  Row   2:    ***0***  (uFs1Rgb.green <= uFs1Rgb.red)_1   (uFs1Rgb.green <= uFs1Rgb.blue)
  Row   3:    ***0***  (uFs1Rgb.green <= uFs1Rgb.blue)_0  (uFs1Rgb.green <= uFs1Rgb.red)
  Row   4:    ***0***  (uFs1Rgb.green <= uFs1Rgb.blue)_1  (uFs1Rgb.green <= uFs1Rgb.red)


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.hsv_c(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           57        44        13      77.1

================================Statement Details================================

Statement Coverage for Design Unit work.hsv_c(behavioral) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/hsv.vhd
    19                                               architecture behavioral of hsv_c is
    20                                                   --RGB Floating
    21                                                   signal uFs1Rgb       : rgbToUfRecord;
    22                                                   signal uFs2Rgb       : rgbToUfRecord;
    23                                                   signal uFs3Rgb       : rgbToUfRecord;
    24                                                   --RGB Max Min
    25                                                   signal rgbMax        : ufixed(7 downto 0) :=(others => '0');
    26                                                   signal rgbMin        : ufixed(7 downto 0) :=(others => '0');
    27                                                   signal maxValue      : ufixed(7 downto 0) :=(others => '0');
    28                                                   signal minValue      : ufixed(7 downto 0) :=(others => '0');
    29                                                   signal rgbDelta      : ufixed(8 downto 0) :=(others => '0');
    30                                                   signal maxMinSum     : ufixed(8 downto 0) :=(others => '0');
    31                                                   --Valid
    32                                                   signal valid1xD      : std_logic := '0';
    33                                                   signal valid2xD      : std_logic := '0';
    34                                                   signal valid3xD      : std_logic := '0';
    35                                                   signal valid4xD      : std_logic := '0';
    36                                                   --HValue
    37                                                   signal hValue1xD     : std_logic_vector(i_data_width-1 downto 0) :=(others => '0');
    38                                                   signal hValue2xD     : std_logic_vector(i_data_width-1 downto 0) :=(others => '0');
    39                                                   signal hValue3xD     : std_logic_vector(i_data_width-1 downto 0) :=(others => '0');
    40                                                   signal hValue4xD     : std_logic_vector(i_data_width-1 downto 0) :=(others => '0');
    41                                                   --Lum
    42                                                   signal lumValueQuot  : ufixed(8 downto -9) :=(others => '0');
    43                                                   signal lumValue      : ufixed(7 downto 0)  :=(others => '0');
    44                                                   signal lumValue1xD   : std_logic_vector(i_data_width-1 downto 0) :=(others => '0');
    45                                                   signal lumValue2xD   : std_logic_vector(i_data_width-1 downto 0) :=(others => '0');
    46                                                   --Saturate
    47                                                   signal satUfTop      : ufixed(17 downto 0) :=(others => '0');
    48                                                   signal satUfTopV     : ufixed(17 downto 0) :=(others => '0');
    49                                                   signal satUfBott     : ufixed(7 downto 0) :=(others => '0');
    50                                                   signal satValueQuot  : ufixed(17 downto -8) :=(others => '0');
    51                                                   signal satValueQuotV : ufixed(17 downto -8) :=(others => '0');
    52                                                   signal satValue      : ufixed(7 downto 0) :=(others => '0');
    53                                                   signal satValue1xD   : std_logic_vector(7 downto 0) :=(others => '0');
    54                                                   --Hue Rsiz
    55                                                   signal hueTop        : ufixed(17 downto 0) :=(others => '0');
    56                                                   signal hueBot        : ufixed(8 downto 0) :=(others => '0');
    57                                                   signal hueQuot       : ufixed(17 downto -9) :=(others => '0');
    58                                                   signal hueQuot1x     : ufixed(7 downto 0) :=(others => '0');
    59                                                   signal hueDeg        : ufixed(26 downto 0) :=(others => '0');
    60                                                   signal hueDeg1x      : ufixed(7 downto 0) :=(others => '0');
    61                                                   signal hueValue      : unsigned(7 downto 0):= (others => '0');
    62                                               begin
    63                                               rgbToUfP: process (clk,reset)begin
    64                                                   if (reset = lo) then
    65              1                        100             uFs1Rgb.red    <= (others => '0');
    66              1                        100             uFs1Rgb.green  <= (others => '0');
    67              1                        100             uFs1Rgb.blue   <= (others => '0');
    68                                                   elsif rising_edge(clk) then 
    69              1                      10661             uFs1Rgb.red    <= to_ufixed(iRgb.red,uFs1Rgb.red);
    70              1                      10661             uFs1Rgb.green  <= to_ufixed(iRgb.green,uFs1Rgb.green);
    71              1                      10661             uFs1Rgb.blue   <= to_ufixed(iRgb.blue,uFs1Rgb.blue);
    72              1                      10661             uFs1Rgb.valid  <= iRgb.valid;
    73                                                   end if; 
    74                                               end process rgbToUfP;
    75                                               pipRgbD2P: process (clk) begin
    76                                                   if rising_edge(clk) then 
    77              1                          2             uFs2Rgb <= uFs1Rgb;
    78                                                   end if;
    79                                               end process pipRgbD2P;
    80                                               pipRgbD3P: process (clk) begin
    81                                                   if rising_edge(clk) then 
    82              1                          3             uFs3Rgb <= uFs2Rgb;
    83                                                   end if;
    84                                               end process pipRgbD3P;
    85                                               rgbMaxP: process (clk) begin
    86                                                   if rising_edge(clk) then 
    87                                                       if ((uFs1Rgb.red >= uFs1Rgb.green) and (uFs1Rgb.red >= uFs1Rgb.blue)) then
    88              1                          1                 rgbMax <= uFs1Rgb.red;
    89                                                       elsif((uFs1Rgb.green >= uFs1Rgb.red) and (uFs1Rgb.green >= uFs1Rgb.blue))then
    90              1                    ***0***                 rgbMax <= uFs1Rgb.green;
    91                                                       else
    92              1                    ***0***                 rgbMax <= uFs1Rgb.blue;
    93                                                       end if;
    94                                                   end if;
    95                                               end process rgbMaxP;
    96                                               rgbMinP: process (clk) begin
    97                                                   if rising_edge(clk) then 
    98                                                       if ((uFs1Rgb.red <= uFs1Rgb.green) and (uFs1Rgb.red <= uFs1Rgb.blue)) then
    99              1                          1                 rgbMin <= uFs1Rgb.red;
    100                                                      elsif((uFs1Rgb.green <= uFs1Rgb.red) and (uFs1Rgb.green <= uFs1Rgb.blue)) then
    101             1                    ***0***                 rgbMin <= uFs1Rgb.green;
    102                                                      else
    103             1                    ***0***                 rgbMin <= uFs1Rgb.blue;
    104                                                      end if;
    105                                                  end if;
    106                                              end process rgbMinP;
    107                                              rgbDeltaP: process (clk) begin
    108                                                  if rising_edge(clk) then 
    109             1                          1             rgbDelta      <= rgbMax - rgbMin;
    110                                                  end if;
    111                                              end process rgbDeltaP;
    112                                              maxMinUfSumP: process (clk) begin
    113                                                  if rising_edge(clk) then 
    114             1                          1             maxMinSum    <= rgbMax + rgbMin;
    115                                                  end if;
    116                                              end process maxMinUfSumP;
    117                                              pipRgbMaxUfD1P: process (clk) begin
    118                                                  if rising_edge(clk) then 
    119             1                          1             maxValue          <= rgbMax;
    120             1                          1             minValue          <= rgbMin;
    121                                                  end if;
    122                                              end process pipRgbMaxUfD1P;
    123                                              -------------------------------------------------
    124                                              -- LUM
    125                                              -------------------------------------------------
    126                                              lumP: process (clk) begin
    127                                                  if rising_edge(clk) then 
    128             1                          1             lumValueQuot   <= maxMinSum / 2.0;
    129                                                  end if;
    130                                              end process lumP;
    131                                              lumResizeP: process (clk) begin
    132                                                  if rising_edge(clk) then 
    133             1                      10760             lumValue <= resize(lumValueQuot,lumValue);
    134             1                      10760             lumValue1xD <= std_logic_vector(to_unsigned(lumValue,8));
    135             1                      10760             lumValue2xD <= lumValue1xD;
    136                                                  end if;
    137                                              end process lumResizeP;
    138                                              -------------------------------------------------
    139                                              -- VALUE
    140                                              -------------------------------------------------
    141                                              hValueP: process (clk) begin
    142                                                  if rising_edge(clk) then 
    143             1                      10760             hValue1xD <= std_logic_vector(to_unsigned(maxValue,8));
    144             1                      10760             hValue2xD <= hValue1xD;
    145             1                      10760             hValue3xD <= hValue2xD;
    146             1                      10760             hValue4xD <= hValue3xD;
    147                                                  end if;
    148                                              end process hValueP;
    149                                              -------------------------------------------------
    150                                              -- SATURATE
    151                                              -------------------------------------------------
    152             1                          1     satUfTopV      <= (256.0 * rgbDelta);
    153                                              satNumniatorUfP: process (clk) begin
    154                                                  if rising_edge(clk) then 
    155             1                          1             satUfTop      <= satUfTopV;
    156                                                  end if;
    157                                              end process satNumniatorUfP;
    158                                              satDominaUfCalP: process (clk) begin
    159                                                  if rising_edge(clk) then 
    160                                                      if (maxValue > 0) then
    161             1                    ***0***                 satUfBott <= maxValue;
    162                                                      end if;
    163                                                  end if;
    164                                              end process satDominaUfCalP;
    165             1                          1     satValueQuotV <= (satUfTop / satUfBott);
    166                                              satDividerP: process (clk) begin
    167                                                  if rising_edge(clk) then 
    168             1                          1             satValueQuot <= satValueQuotV;
    169                                                  end if;
    170                                              end process satDividerP;
    171                                              satDividerResizeP: process (clk) begin
    172                                                  if rising_edge(clk) then 
    173             1                      10760             satValue    <= resize(satValueQuot,satValue);
    174             1                      10760             satValue1xD <= std_logic_vector(to_unsigned(satValue,8));
    175                                                  end if;
    176                                              end process satDividerResizeP;
    177                                              -------------------------------------------------
    178                                              -- HUE
    179                                              -------------------------------------------------
    180                                              hueBottomP: process (clk) begin
    181                                                  if rising_edge(clk) then 
    182                                                      if (rgbDelta > 0) then
    183             1                    ***0***                 hueBot <= rgbDelta;
    184                                                      else
    185             1                      10760                 hueBot <= to_ufixed (6.0,hueBot);
    186                                                      end if;
    187                                                  end if;
    188                                              end process hueBottomP;
    189                                              hueP: process (clk) begin
    190                                                if rising_edge(clk) then 
    191                                                  if (uFs3Rgb.red  = maxValue) then
    192             1                      10758                 hueDeg <= to_ufixed (0.0,hueDeg);
    193                                                      if (uFs3Rgb.green >= uFs3Rgb.blue) then
    194             1                      10758                 hueTop        <= (uFs3Rgb.green - uFs3Rgb.blue) * 43;
    195                                                      else
    196             1                    ***0***                 hueTop        <= (uFs3Rgb.blue - uFs3Rgb.green) * 43;
    197                                                      end if;
    198                                                  elsif(uFs3Rgb.green = maxValue)  then
    199             1                    ***0***                 hueDeg <= to_ufixed (85.0,hueDeg);
    200                                                      if (uFs3Rgb.blue >= uFs3Rgb.red ) then
    201             1                    ***0***                 hueTop       <= (uFs3Rgb.blue - uFs3Rgb.red ) * 43;
    202                                                      else
    203             1                    ***0***                 hueTop       <= (uFs3Rgb.red  - uFs3Rgb.blue) * 43;
    204                                                      end if;
    205                                                  elsif(uFs3Rgb.blue = maxValue)  then
    206             1                    ***0***                 hueDeg <= to_ufixed (171.0,hueDeg);
    207                                                      if (uFs3Rgb.red  >= uFs3Rgb.green) then
    208             1                    ***0***                 hueTop       <= (uFs3Rgb.red  - uFs3Rgb.green) * 43;
    209                                                      else
    210             1                    ***0***                 hueTop       <= (uFs3Rgb.green - uFs3Rgb.red ) * 43;
    211                                                      end if;
    212                                                  end if;
    213                                                end if;
    214                                              end process hueP;
    215                                              hueDividerP: process (clk) begin
    216                                                  if rising_edge(clk) then 
    217             1                          2             hueQuot  <= hueTop / hueBot;
    218                                                  end if;
    219                                              end process hueDividerP;
    220                                              hueDegreeP: process (clk) begin
    221                                                  if rising_edge(clk) then 
    222             1                      10760             hueDeg1x       <= resize(hueDeg,hueDeg1x);
    223                                                  end if;
    224                                              end process hueDegreeP;
    225                                              hueDividerResizeP: process (clk) begin
    226                                                  if rising_edge(clk) then 
    227             1                      10760             hueQuot1x <= resize(hueQuot,hueQuot1x);
    228                                                  end if;
    229                                              end process hueDividerResizeP;
    230                                              hueValueP: process (clk) begin
    231                                                  if rising_edge(clk) then 
    232             1                      10760             hueValue <= (to_unsigned(hueQuot1x,8) + to_unsigned(hueDeg1x,8));
    233                                                  end if;
    234                                              end process hueValueP;
    235                                              -------------------------------------------------
    236                                              -- VALID
    237                                              -------------------------------------------------
    238                                              pipValidP: process (clk) begin
    239                                                  if rising_edge(clk) then 
    240             1                      10760             valid1xD   <= uFs3Rgb.valid;
    241             1                      10760             valid2xD   <= valid1xD;
    242             1                      10760             valid3xD   <= valid2xD;
    243             1                      10760             valid4xD   <= valid3xD;
    244                                                  end if;
    245                                              end process pipValidP;
    246                                              hsvOut: process (clk) begin
    247                                                  if rising_edge(clk) then 
    248             1                          4             oHsv.h     <= std_logic_vector(hueValue(i_data_width-1 downto 0));
    249             1                          4             oHsv.s     <= satValue1xD;
    250             1                          4             oHsv.v     <= hValue4xD;
    251             1                          4             oHsv.valid <= valid4xD;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        44        31        13      70.4

================================Branch Details================================

Branch Coverage for Design Unit work.hsv_c(behavioral)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/hsv.vhd
------------------------------------IF Branch------------------------------------
    64                                     10761     Count coming in to IF
    64              1                        100         if (reset = lo) then
    68              1                      10661         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    76                                         2     Count coming in to IF
    76              1                          2         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    81                                         3     Count coming in to IF
    81              1                          3         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    86                                         1     Count coming in to IF
    86              1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    87                                         1     Count coming in to IF
    87              1                          1             if ((uFs1Rgb.red >= uFs1Rgb.green) and (uFs1Rgb.red >= uFs1Rgb.blue)) then
    89              1                    ***0***             elsif((uFs1Rgb.green >= uFs1Rgb.red) and (uFs1Rgb.green >= uFs1Rgb.blue))then
    91              1                    ***0***             else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    97                                         1     Count coming in to IF
    97              1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    98                                         1     Count coming in to IF
    98              1                          1             if ((uFs1Rgb.red <= uFs1Rgb.green) and (uFs1Rgb.red <= uFs1Rgb.blue)) then
    100             1                    ***0***             elsif((uFs1Rgb.green <= uFs1Rgb.red) and (uFs1Rgb.green <= uFs1Rgb.blue)) then
    102             1                    ***0***             else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    108                                        1     Count coming in to IF
    108             1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    113                                        1     Count coming in to IF
    113             1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    118                                        1     Count coming in to IF
    118             1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    127                                        1     Count coming in to IF
    127             1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    132                                    10760     Count coming in to IF
    132             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    142                                    10760     Count coming in to IF
    142             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    154                                        1     Count coming in to IF
    154             1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    159                                        1     Count coming in to IF
    159             1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    160                                        1     Count coming in to IF
    160             1                    ***0***             if (maxValue > 0) then
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    167                                        1     Count coming in to IF
    167             1                          1         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    172                                    10760     Count coming in to IF
    172             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    181                                    10760     Count coming in to IF
    181             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    182                                    10760     Count coming in to IF
    182             1                    ***0***             if (rgbDelta > 0) then
    184             1                      10760             else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    190                                    10759     Count coming in to IF
    190             1                      10759       if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    191                                    10759     Count coming in to IF
    191             1                      10758         if (uFs3Rgb.red  = maxValue) then
    198             1                    ***0***         elsif(uFs3Rgb.green = maxValue)  then
    205             1                    ***0***         elsif(uFs3Rgb.blue = maxValue)  then
                                               1     All False Count
Branch totals: 2 hits of 4 branches = 50.0%

------------------------------------IF Branch------------------------------------
    193                                    10758     Count coming in to IF
    193             1                      10758             if (uFs3Rgb.green >= uFs3Rgb.blue) then
    195             1                    ***0***             else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    200                                  ***0***     Count coming in to IF
    200             1                    ***0***             if (uFs3Rgb.blue >= uFs3Rgb.red ) then
    202             1                    ***0***             else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    207                                  ***0***     Count coming in to IF
    207             1                    ***0***             if (uFs3Rgb.red  >= uFs3Rgb.green) then
    209             1                    ***0***             else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    216                                        2     Count coming in to IF
    216             1                          2         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    221                                    10760     Count coming in to IF
    221             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    226                                    10760     Count coming in to IF
    226             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    231                                    10760     Count coming in to IF
    231             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    239                                    10760     Count coming in to IF
    239             1                      10760         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    247                                        4     Count coming in to IF
    247             1                          4         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              8         0         8       0.0

================================Condition Details================================

Condition Coverage for Design Unit work.hsv_c(behavioral) --

  File ../../uvmtb/dut/src/Filters/hsv.vhd
----------------Focused Condition View-------------------
Line       87 Item    1  ((uFs1Rgb.red >= uFs1Rgb.green) and (uFs1Rgb.red >= uFs1Rgb.blue))
Condition totals: 0 of 2 input terms covered = 0.0%

                      Input Term   Covered  Reason for no coverage   Hint
                     -----------  --------  -----------------------  --------------
  (uFs1Rgb.red >= uFs1Rgb.green)         N  '_0' not hit             Hit '_0'
   (uFs1Rgb.red >= uFs1Rgb.blue)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                        Non-masking condition(s)      
 ---------  ---------  --------------------              -------------------------     
  Row   1:    ***0***  (uFs1Rgb.red >= uFs1Rgb.green)_0  -                             
  Row   2:          1  (uFs1Rgb.red >= uFs1Rgb.green)_1  (uFs1Rgb.red >= uFs1Rgb.blue) 
  Row   3:    ***0***  (uFs1Rgb.red >= uFs1Rgb.blue)_0   (uFs1Rgb.red >= uFs1Rgb.green)
  Row   4:          1  (uFs1Rgb.red >= uFs1Rgb.blue)_1   (uFs1Rgb.red >= uFs1Rgb.green)

----------------Focused Condition View-------------------
Line       89 Item    1  ((uFs1Rgb.green >= uFs1Rgb.red) and (uFs1Rgb.green >= uFs1Rgb.blue))
Condition totals: 0 of 2 input terms covered = 0.0%

                       Input Term   Covered  Reason for no coverage   Hint
                      -----------  --------  -----------------------  --------------
   (uFs1Rgb.green >= uFs1Rgb.red)         N  No hits                  Hit '_0' and '_1'
  (uFs1Rgb.green >= uFs1Rgb.blue)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                         Non-masking condition(s)      
 ---------  ---------  --------------------               -------------------------     
  Row   1:    ***0***  (uFs1Rgb.green >= uFs1Rgb.red)_0   -                             
  Row   2:    ***0***  (uFs1Rgb.green >= uFs1Rgb.red)_1   (uFs1Rgb.green >= uFs1Rgb.blue)
  Row   3:    ***0***  (uFs1Rgb.green >= uFs1Rgb.blue)_0  (uFs1Rgb.green >= uFs1Rgb.red)
  Row   4:    ***0***  (uFs1Rgb.green >= uFs1Rgb.blue)_1  (uFs1Rgb.green >= uFs1Rgb.red)

----------------Focused Condition View-------------------
Line       98 Item    1  ((uFs1Rgb.red <= uFs1Rgb.green) and (uFs1Rgb.red <= uFs1Rgb.blue))
Condition totals: 0 of 2 input terms covered = 0.0%

                      Input Term   Covered  Reason for no coverage   Hint
                     -----------  --------  -----------------------  --------------
  (uFs1Rgb.red <= uFs1Rgb.green)         N  '_0' not hit             Hit '_0'
   (uFs1Rgb.red <= uFs1Rgb.blue)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                        Non-masking condition(s)      
 ---------  ---------  --------------------              -------------------------     
  Row   1:    ***0***  (uFs1Rgb.red <= uFs1Rgb.green)_0  -                             
  Row   2:          1  (uFs1Rgb.red <= uFs1Rgb.green)_1  (uFs1Rgb.red <= uFs1Rgb.blue) 
  Row   3:    ***0***  (uFs1Rgb.red <= uFs1Rgb.blue)_0   (uFs1Rgb.red <= uFs1Rgb.green)
  Row   4:          1  (uFs1Rgb.red <= uFs1Rgb.blue)_1   (uFs1Rgb.red <= uFs1Rgb.green)

----------------Focused Condition View-------------------
Line       100 Item    1  ((uFs1Rgb.green <= uFs1Rgb.red) and (uFs1Rgb.green <= uFs1Rgb.blue))
Condition totals: 0 of 2 input terms covered = 0.0%

                       Input Term   Covered  Reason for no coverage   Hint
                      -----------  --------  -----------------------  --------------
   (uFs1Rgb.green <= uFs1Rgb.red)         N  No hits                  Hit '_0' and '_1'
  (uFs1Rgb.green <= uFs1Rgb.blue)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                         Non-masking condition(s)      
 ---------  ---------  --------------------               -------------------------     
  Row   1:    ***0***  (uFs1Rgb.green <= uFs1Rgb.red)_0   -                             
  Row   2:    ***0***  (uFs1Rgb.green <= uFs1Rgb.red)_1   (uFs1Rgb.green <= uFs1Rgb.blue)
  Row   3:    ***0***  (uFs1Rgb.green <= uFs1Rgb.blue)_0  (uFs1Rgb.green <= uFs1Rgb.red)
  Row   4:    ***0***  (uFs1Rgb.green <= uFs1Rgb.blue)_1  (uFs1Rgb.green <= uFs1Rgb.red)


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.kernel(behavioral)::BLURE_FRAME_DISABLED
=================================================================================
=== Design Unit: work.kernel(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.kernel(behavioral)::BLURE_FRAME_DISABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
    731             1                          1         oRgb.blur  <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.kernel(behavioral)::CGAIN_FRAME_ENABLE::CGAIN_FRAME_KSET_ENABLE
=================================================================================
=== Design Unit: work.kernel(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            5         5         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.kernel(behavioral)::CGAIN_FRAME_ENABLE::CGAIN_FRAME_KSET_ENABLE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
    203                                              kCoeffCgainP:process (clk) begin
    204                                                  if (rising_edge (clk)) then
    205                                                      if (kCoProd.kCoeffCgain.kSet = kCoefCgainIndex) then
    206             1                      10618                 kCofC1gain <= kCoProd.kCoeffCgain;
    207                                                      end if;
    208                                                  end if; 
    209                                              end process kCoeffCgainP;
    210                                              Kernel1CgainInst: KernelCore
    211                                              generic map(
    212                                                  SHARP_FRAME   => false,
    213                                                  BLURE_FRAME   => false,
    214                                                  EMBOS_FRAME   => false,
    215                                                  YCBCR_FRAME   => false,
    216                                                  SOBEL_FRAME   => false,
    217                                                  CGAIN_FRAME   => CGAIN_FRAME,
    218                                                  img_width     => img_width,
    219                                                  i_data_width  => i_data_width)
    220                                              port map(
    221                                                  clk            => clk,
    222                                                  rst_l          => rst_l,
    223                                                  iRgb           => iRgb,
    224                                                  kCoeff         => kCofC1gain,
    225                                                  oRgb           => c1gain);
    226             1                          3         cgain1Syn.red   <=  c1gain.red;
    227             1                          3         cgain1Syn.blue  <=  c1gain.blue;
    228             1                          3         cgain1Syn.green <=  c1gain.green;
    229             1                          3         cgain1Syn.valid <=  rgbSyncValid(9);

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         3         3         0     100.0

================================Branch Details================================

Branch Coverage for generate block work.kernel(behavioral)::CGAIN_FRAME_ENABLE::CGAIN_FRAME_KSET_ENABLE

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
------------------------------------IF Branch------------------------------------
    204                                    10760     Count coming in to IF
    204             1                      10760         if (rising_edge (clk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    205                                    10760     Count coming in to IF
    205             1                      10618             if (kCoProd.kCoeffCgain.kSet = kCoefCgainIndex) then
                                             142     All False Count
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.kernel(behavioral)::EMBOS_FRAME_DISABLED
=================================================================================
=== Design Unit: work.kernel(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.kernel(behavioral)::EMBOS_FRAME_DISABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
    734             1                          1         oRgb.embos   <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.kernel(behavioral)::HSL_FRAME_ENABLE
=================================================================================
=== Design Unit: work.kernel(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            4         4         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.kernel(behavioral)::HSL_FRAME_ENABLE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
    664                                              signal hslColor    : hslChannel;
    665                                              begin
    666                                              hslInst: hsl_c
    667                                              generic map(
    668                                                  i_data_width       => i_data_width)
    669                                              port map(   
    670                                                  clk                => clk,
    671                                                  reset              => rst_l,
    672                                                  iRgb               => iRgb,
    673                                                  oHsl               => hslColor);
    674             1                          4         oRgb.hsl.red       <= hslColor.h;
    675             1                          3         oRgb.hsl.green     <= hslColor.s;
    676             1                          2         oRgb.hsl.blue      <= hslColor.l;
    677             1                          4         oRgb.hsl.valid     <= hslColor.valid;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.kernel(behavioral)::HSV_FRAME_ENABLE
=================================================================================
=== Design Unit: work.kernel(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            4         4         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.kernel(behavioral)::HSV_FRAME_ENABLE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
    643                                                  signal hsvColor    : hsvChannel;
    644                                              begin
    645                                              hsvInst: hsv_c
    646                                              generic map(
    647                                                  i_data_width       => i_data_width)
    648                                              port map(   
    649                                                  clk                => clk,
    650                                                  reset              => rst_l,
    651                                                  iRgb               => iRgb,
    652                                                  oHsv               => hsvColor);
    653             1                          4         oRgb.hsv.red       <= hsvColor.h;
    654             1                          3         oRgb.hsv.green     <= hsvColor.s;
    655             1                          2         oRgb.hsv.blue      <= hsvColor.v;
    656             1                          4         oRgb.hsv.valid     <= hsvColor.valid;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.kernel(behavioral)::INRGB_FRAME_ENABLE
=================================================================================
=== Design Unit: work.kernel(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.kernel(behavioral)::INRGB_FRAME_ENABLE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
    634                                              begin
    635             1                          3         oRgb.inrgb <= iRgb;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.kernel(behavioral)::RGBLUMP_FRAME_DISABLED
=================================================================================
=== Design Unit: work.kernel(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.kernel(behavioral)::RGBLUMP_FRAME_DISABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
    716             1                          1         oRgb.colorLmp   <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.kernel(behavioral)::RGBTRIM_FRAME_DISABLED
=================================================================================
=== Design Unit: work.kernel(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.kernel(behavioral)::RGBTRIM_FRAME_DISABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
    719             1                          1         oRgb.colorTrm   <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.kernel(behavioral)::SHARP_FRAME_ENABLE
=================================================================================
=== Design Unit: work.kernel(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            5         5         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.kernel(behavioral)::SHARP_FRAME_ENABLE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
    283                                              signal oRed           : channel;
    284                                              signal oGreen         : channel;
    285                                              signal oBlue          : channel;
    286                                              signal kCoeffSharp    : kernelCoeDWord;
    287                                              begin
    288                                              process (clk) begin
    289                                                  if (rising_edge (clk)) then
    290                                                      if (kCoProd.kCoeffSharp.kSet = kCoefSharpIndex) then
    291             1                      10596                 kCoeffSharp <= kCoProd.kCoeffSharp;
    292                                                      end if;
    293                                                  end if; 
    294                                              end process;
    295                                              Kernel_Sharp_Red_Inst: KernelCore
    296                                              generic map(
    297                                                  SHARP_FRAME   => SHARP_FRAME,
    298                                                  BLURE_FRAME   => false,
    299                                                  EMBOS_FRAME   => false,
    300                                                  YCBCR_FRAME   => false,
    301                                                  SOBEL_FRAME   => false,
    302                                                  CGAIN_FRAME   => false,
    303                                                  img_width     => img_width,
    304                                                  i_data_width  => i_data_width)
    305                                              port map(
    306                                                  clk            => clk,
    307                                                  rst_l          => rst_l,
    308                                                  iRgb           => rgbMac1,
    309                                                  kCoeff         => kCoeffSharp,
    310                                                  oRgb           => oRed);
    311                                              Kernel_Sharp_Green_Inst: KernelCore
    312                                              generic map(
    313                                                  SHARP_FRAME   => SHARP_FRAME,
    314                                                  BLURE_FRAME   => false,
    315                                                  EMBOS_FRAME   => false,
    316                                                  YCBCR_FRAME   => false,
    317                                                  SOBEL_FRAME   => false,
    318                                                  CGAIN_FRAME   => false,
    319                                                  img_width     => img_width,
    320                                                  i_data_width  => i_data_width)
    321                                              port map(
    322                                                  clk            => clk,
    323                                                  rst_l          => rst_l,
    324                                                  iRgb           => rgbMac2,
    325                                                  kCoeff         => kCoeffSharp,
    326                                                  oRgb           => oGreen);
    327                                              Kernel_Sharp_Blue_Inst: KernelCore
    328                                              generic map(
    329                                                  SHARP_FRAME   => SHARP_FRAME,
    330                                                  BLURE_FRAME   => false,
    331                                                  EMBOS_FRAME   => false,
    332                                                  YCBCR_FRAME   => false,
    333                                                  SOBEL_FRAME   => false,
    334                                                  CGAIN_FRAME   => false,
    335                                                  img_width     => img_width,
    336                                                  i_data_width  => i_data_width)
    337                                              port map(
    338                                                  clk            => clk,
    339                                                  rst_l          => rst_l,
    340                                                  iRgb           => rgbMac3,
    341                                                  kCoeff         => kCoeffSharp,
    342                                                  oRgb           => oBlue);
    343             1                          3         oRgb.sharp.red    <=  oRed.red;
    344             1                          3         oRgb.sharp.green  <=  oGreen.red;
    345             1                          3         oRgb.sharp.blue   <=  oBlue.red;
    346             1                          3         oRgb.sharp.valid  <=  rgbSyncValid(9);

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         3         3         0     100.0

================================Branch Details================================

Branch Coverage for generate block work.kernel(behavioral)::SHARP_FRAME_ENABLE

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
------------------------------------IF Branch------------------------------------
    289                                    10760     Count coming in to IF
    289             1                      10760         if (rising_edge (clk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    290                                    10760     Count coming in to IF
    290             1                      10596             if (kCoProd.kCoeffSharp.kSet = kCoefSharpIndex) then
                                             164     All False Count
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.kernel(behavioral)::SOBEL_FRAME_ENABLE
=================================================================================
=== Design Unit: work.kernel(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           21        17         4      80.9

================================Statement Details================================

Statement Coverage for generate block work.kernel(behavioral)::SOBEL_FRAME_ENABLE --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
    496                                              -----------------------------------------------------------------------------------------------
    497                                              signal osobelX        : channel;
    498                                              signal osobelY        : channel;
    499                                              signal sobel          : channel;
    500                                              signal kCoefXSobel    : kernelCoeDWord;
    501                                              signal kCoefYSobel    : kernelCoeDWord;
    502                                              signal mx             : unsigned(15 downto 0)         := (others => '0');
    503                                              signal my             : unsigned(15 downto 0)         := (others => '0');
    504                                              signal sxy            : unsigned(15 downto 0)         := (others => '0');
    505                                              signal sqr            : std_logic_vector(31 downto 0) := (others => '0');
    506                                              signal sbof           : std_logic_vector(31 downto 0) := (others => '0');
    507                                              signal sobelThreshSet : std_logic_vector(15 downto 0) :=x"006E"; --006E
    508                                              signal sobelThreshold : unsigned(15 downto 0)         :=x"0000";
    509                                              signal tp0            : std_logic_vector(7 downto 0)  := (others => '0');
    510                                              signal tp1            : std_logic_vector(7 downto 0)  := (others => '0');
    511                                              signal tp2            : std_logic_vector(7 downto 0)  := (others => '0');
    512                                              signal tpValid        : std_logic := lo;
    513                                              signal ovalid         : std_logic := lo;
    514                                              begin
    515                                              -----------------------------------------------------------------------------------------------
    516                                              -- TapsController
    517                                              -----------------------------------------------------------------------------------------------
    518                                              TapsControllerInst: TapsController
    519                                              generic map(
    520                                                  img_width    => img_width,
    521                                                  tpDataWidth  => 8)
    522                                              port map(
    523                                                  clk          => clk,
    524                                                  rst_l        => rst_l,
    525                                                  iRgb         => iRgb,
    526                                                  tpValid      => tpValid,
    527                                                  tp0          => tp0,
    528                                                  tp1          => tp1,
    529                                                  tp2          => tp2);
    530                                              -----------------------------------------------------------------------------------------------
    531                                              -- Taps To Rgb
    532                                              -----------------------------------------------------------------------------------------------
    533             1                          2         sobel.red   <= tp0;
    534             1                          2         sobel.green <= tp1;
    535             1                          2         sobel.blue  <= tp2;
    536             1                          2         sobel.valid <= tpValid;
    537                                              -----------------------------------------------------------------------------------------------
    538                                              -- Coeff Init Updates
    539                                              -----------------------------------------------------------------------------------------------
    540                                              process (clk) begin
    541                                                  if (rising_edge (clk)) then
    542                                                      if (kCoProd.kCoefXSobel.kSet = kCoefSobeXIndex) then
    543             1                      10552                 kCoefXSobel <= kCoProd.kCoefXSobel;
    544                                                      end if;
    545                                                  end if; 
    546                                              end process;
    547                                              process (clk) begin
    548                                                  if (rising_edge (clk)) then
    549                                                      if (kCoProd.kCoefYSobel.kSet = kCoefSobeYIndex) then
    550             1                      10530                 kCoefYSobel <= kCoProd.kCoefYSobel;
    551                                                      end if;
    552                                                  end if; 
    553                                              end process;
    554                                              KernelSobelXInst: KernelCore
    555                                              generic map(
    556                                                  SHARP_FRAME   => false,
    557                                                  BLURE_FRAME   => false,
    558                                                  EMBOS_FRAME   => false,
    559                                                  YCBCR_FRAME   => false,
    560                                                  SOBEL_FRAME   => SOBEL_FRAME,
    561                                                  CGAIN_FRAME   => false,
    562                                                  img_width     => img_width,
    563                                                  i_data_width  => i_data_width)
    564                                              port map(
    565                                                  clk            => clk,
    566                                                  rst_l          => rst_l,
    567                                                  iRgb           => sobel,
    568                                                  kCoeff         => kCoefXSobel,
    569                                                  oRgb           => osobelX);
    570                                              KernelSobelYInst: KernelCore
    571                                              generic map(
    572                                                  SHARP_FRAME   => false,
    573                                                  BLURE_FRAME   => false,
    574                                                  EMBOS_FRAME   => false,
    575                                                  YCBCR_FRAME   => false,
    576                                                  SOBEL_FRAME   => SOBEL_FRAME,
    577                                                  CGAIN_FRAME   => false,
    578                                                  img_width     => img_width,
    579                                                  i_data_width  => i_data_width)
    580                                              port map(
    581                                                  clk            => clk,
    582                                                  rst_l          => rst_l,
    583                                                  iRgb           => sobel,
    584                                                  kCoeff         => kCoefYSobel,
    585                                                  oRgb           => osobelY);
    586                                              sobelDomainsValueP:process (clk) begin
    587                                                  if rising_edge(clk) then
    588             1                          3             mx  <= (unsigned(osobelX.red) * unsigned(osobelX.red));
    589             1                          3             my  <= (unsigned(osobelY.red) * unsigned(osobelY.red));
    590                                                  end if;
    591                                              end process sobelDomainsValueP;
    592                                              sumValueP:process (clk) begin
    593                                                  if rising_edge(clk) then
    594             1                          4             sxy <= (mx + my);
    595                                                  end if;
    596                                              end process sumValueP;
    597                                              squareRootValueP:process (clk) begin
    598                                                  if rising_edge(clk) then
    599             1                          4             sqr <= std_logic_vector(resize(unsigned(sxy), sqr'length));
    600                                                  end if;
    601                                              end process squareRootValueP;
    602                                              squareRootTopInst: squareRootTop
    603                                              port map(
    604                                                  clk        => clk,
    605                                                  ivalid     => rgbSyncValid(14),
    606                                                  idata      => sqr,
    607                                                  ovalid     => ovalid,
    608                                                  odata      => sbof);
    609             1                          1         sobelThreshold <= unsigned(std_logic_vector(sbof(15 downto 0)));
    610             1                          2         sobelThreshSet <= iThreshold;
    611                                              sobelOutP:process (clk) begin
    612                                                  if rising_edge(clk) then
    613                                                      if (sobelThreshold > unsigned(sobelThreshSet)) then
    614             1                    ***0***                 oEdgeValid       <= hi;
    615             1                    ***0***                 oRgb.sobel.red   <= black;
    616             1                    ***0***                 oRgb.sobel.green <= black;
    617             1                    ***0***                 oRgb.sobel.blue  <= black;
    618                                                      else
    619             1                          4                 oEdgeValid       <= lo;
    620             1                          4                 oRgb.sobel.red   <= white;
    621             1                          4                 oRgb.sobel.green <= white;
    622             1                          4                 oRgb.sobel.blue  <= white;
    623                                                      end if;
    624             1                          4                 oRgb.sobel.valid <= rgbSyncValid(15);

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        12        11         1      91.6

================================Branch Details================================

Branch Coverage for generate block work.kernel(behavioral)::SOBEL_FRAME_ENABLE

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
------------------------------------IF Branch------------------------------------
    541                                    10760     Count coming in to IF
    541             1                      10760         if (rising_edge (clk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    542                                    10760     Count coming in to IF
    542             1                      10552             if (kCoProd.kCoefXSobel.kSet = kCoefSobeXIndex) then
                                             208     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    548                                    10760     Count coming in to IF
    548             1                      10760         if (rising_edge (clk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    549                                    10760     Count coming in to IF
    549             1                      10530             if (kCoProd.kCoefYSobel.kSet = kCoefSobeYIndex) then
                                             230     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    587                                        3     Count coming in to IF
    587             1                          3         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    593                                        4     Count coming in to IF
    593             1                          4         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    598                                        4     Count coming in to IF
    598             1                          4         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    612                                        4     Count coming in to IF
    612             1                          4         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    613                                        4     Count coming in to IF
    613             1                    ***0***             if (sobelThreshold > unsigned(sobelThreshSet)) then
    618             1                          4             else
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.kernel(behavioral)::TPDATAWIDTH3_ENABLED
=================================================================================
=== Design Unit: work.kernel(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           24        24         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.kernel(behavioral)::TPDATAWIDTH3_ENABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
    86                                                   signal tp0        : std_logic_vector(23 downto 0) := (others => '0');
    87                                                   signal tp1        : std_logic_vector(23 downto 0) := (others => '0');
    88                                                   signal tp2        : std_logic_vector(23 downto 0) := (others => '0');
    89                                                   signal tpValid    : std_logic  := lo;
    90                                               begin
    91                                               TapsControllerInst: TapsController
    92                                               generic map(
    93                                                   img_width    => img_width,
    94                                                   tpDataWidth  => 24)
    95                                               port map(
    96                                                   clk          => clk,
    97                                                   rst_l        => rst_l,
    98                                                   iRgb         => iRgb,
    99                                                   tpValid      => tpValid,
    100                                                  tp0          => tp0,
    101                                                  tp1          => tp1,
    102                                                  tp2          => tp2);
    103                                              process (clk,rst_l) begin
    104                                                  if (rst_l = lo) then
    105             1                        100             rgbMac1.red   <= (others => '0');
    106             1                        100             rgbMac1.green <= (others => '0');
    107             1                        100             rgbMac1.blue  <= (others => '0');
    108             1                        100             rgbMac1.valid <= lo;
    109                                                  elsif rising_edge(clk) then 
    110             1                          2             rgbMac1.red   <= tp0(23 downto 16);
    111             1                          2             rgbMac1.green <= tp1(23 downto 16);
    112             1                          2             rgbMac1.blue  <= tp2(23 downto 16);
    113             1                          2             rgbMac1.valid <= tpValid;
    114                                                  end if; 
    115                                              end process;
    116                                              process (clk,rst_l) begin
    117                                                  if (rst_l = lo) then
    118             1                        100             rgbMac2.red   <= (others => '0');
    119             1                        100             rgbMac2.green <= (others => '0');
    120             1                        100             rgbMac2.blue  <= (others => '0');
    121             1                        100             rgbMac2.valid <= lo;
    122                                                  elsif rising_edge(clk) then 
    123             1                          2             rgbMac2.red   <= tp0(15 downto 8);
    124             1                          2             rgbMac2.green <= tp1(15 downto 8);
    125             1                          2             rgbMac2.blue  <= tp2(15 downto 8);
    126             1                          2             rgbMac2.valid <= tpValid;
    127                                                  end if; 
    128                                              end process;
    129                                              process (clk,rst_l) begin
    130                                                  if (rst_l = lo) then
    131             1                        100             rgbMac3.red   <= (others => '0');
    132             1                        100             rgbMac3.green <= (others => '0');
    133             1                        100             rgbMac3.blue  <= (others => '0');
    134             1                        100             rgbMac3.valid <= lo;
    135                                                  elsif rising_edge(clk) then 
    136             1                          2             rgbMac3.red   <= tp0(7 downto 0);
    137             1                          2             rgbMac3.green <= tp1(7 downto 0);
    138             1                          2             rgbMac3.blue  <= tp2(7 downto 0);
    139             1                          2             rgbMac3.valid <= tpValid;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         6         6         0     100.0

================================Branch Details================================

Branch Coverage for generate block work.kernel(behavioral)::TPDATAWIDTH3_ENABLED

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
------------------------------------IF Branch------------------------------------
    104                                      102     Count coming in to IF
    104             1                        100         if (rst_l = lo) then
    109             1                          2         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    117                                      102     Count coming in to IF
    117             1                        100         if (rst_l = lo) then
    122             1                          2         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    130                                      102     Count coming in to IF
    130             1                        100         if (rst_l = lo) then
    135             1                          2         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.kernel(behavioral)::YCBCR_FRAME_DISABLED
=================================================================================
=== Design Unit: work.kernel(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.kernel(behavioral)::YCBCR_FRAME_DISABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
    725             1                          1         oRgb.ycbcr   <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.kernel(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           85        81         4      95.2

================================Statement Details================================

Statement Coverage for Design Unit work.kernel(behavioral) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
    36                                               architecture Behavioral of Kernel is
    37                                                   signal rgbSyncValid    : std_logic_vector(15 downto 0)  := x"0000";
    38                                                   signal rgbMac1         : channel := (valid => lo, red => black, green => black, blue => black);
    39                                                   signal rgbMac2         : channel := (valid => lo, red => black, green => black, blue => black);
    40                                                   signal rgbMac3         : channel := (valid => lo, red => black, green => black, blue => black);
    41                                                   constant init_channel  : channel := (valid => lo, red => black, green => black, blue => black);
    42                                                   signal kCoProd         : kCoefFiltFloat;
    43                                               begin
    44                                               -----------------------------------------------------------------------------------------------
    45                                               -----------------------------------------------------------------------------------------------
    46                                               --CoefMult
    47                                               -----------------------------------------------------------------------------------------------
    48                                               -----------------------------------------------------------------------------------------------
    49                                               CoefMultInst: CoefMult
    50                                               port map (
    51                                                   clk            => clk,
    52                                                   rst_l          => rst_l,
    53                                                   iKcoeff        => iKcoeff,
    54                                                   oCoeffProd     => kCoProd);
    55                                               -----------------------------------------------------------------------------------------------
    56                                               -----------------------------------------------------------------------------------------------
    57                                               --rgbSync
    58                                               -----------------------------------------------------------------------------------------------
    59                                               -----------------------------------------------------------------------------------------------
    60                                               process (clk) begin
    61                                                   if rising_edge(clk) then
    62              1                      10760             rgbSyncValid(0)  <= iRgb.valid;
    63              1                      10760             rgbSyncValid(1)  <= rgbSyncValid(0);
    64              1                      10760             rgbSyncValid(2)  <= rgbSyncValid(1);
    65              1                      10760             rgbSyncValid(3)  <= rgbSyncValid(2);
    66              1                      10760             rgbSyncValid(4)  <= rgbSyncValid(3);
    67              1                      10760             rgbSyncValid(5)  <= rgbSyncValid(4);
    68              1                      10760             rgbSyncValid(6)  <= rgbSyncValid(5);
    69              1                      10760             rgbSyncValid(7)  <= rgbSyncValid(6);
    70              1                      10760             rgbSyncValid(8)  <= rgbSyncValid(7);
    71              1                      10760             rgbSyncValid(9)  <= rgbSyncValid(8);
    72              1                      10760             rgbSyncValid(10) <= rgbSyncValid(9);
    73              1                      10760             rgbSyncValid(11) <= rgbSyncValid(10);
    74              1                      10760             rgbSyncValid(12) <= rgbSyncValid(11);
    75              1                      10760             rgbSyncValid(13) <= rgbSyncValid(12);
    76              1                      10760             rgbSyncValid(14) <= rgbSyncValid(13);
    77              1                      10760             rgbSyncValid(15) <= rgbSyncValid(14);
    78                                                   end if; 
    79                                               end process;
    80                                               -----------------------------------------------------------------------------------------------
    81                                               -----------------------------------------------------------------------------------------------
    82                                               --TapsController
    83                                               -----------------------------------------------------------------------------------------------
    84                                               -----------------------------------------------------------------------------------------------
    85                                               TPDATAWIDTH3_ENABLED: if ((SHARP_FRAME = TRUE) or (BLURE_FRAME = TRUE) or (EMBOS_FRAME = TRUE)) generate
    86                                                   signal tp0        : std_logic_vector(23 downto 0) := (others => '0');
    87                                                   signal tp1        : std_logic_vector(23 downto 0) := (others => '0');
    88                                                   signal tp2        : std_logic_vector(23 downto 0) := (others => '0');
    89                                                   signal tpValid    : std_logic  := lo;
    90                                               begin
    91                                               TapsControllerInst: TapsController
    92                                               generic map(
    93                                                   img_width    => img_width,
    94                                                   tpDataWidth  => 24)
    95                                               port map(
    96                                                   clk          => clk,
    97                                                   rst_l        => rst_l,
    98                                                   iRgb         => iRgb,
    99                                                   tpValid      => tpValid,
    100                                                  tp0          => tp0,
    101                                                  tp1          => tp1,
    102                                                  tp2          => tp2);
    103                                              process (clk,rst_l) begin
    104                                                  if (rst_l = lo) then
    105             1                        100             rgbMac1.red   <= (others => '0');
    106             1                        100             rgbMac1.green <= (others => '0');
    107             1                        100             rgbMac1.blue  <= (others => '0');
    108             1                        100             rgbMac1.valid <= lo;
    109                                                  elsif rising_edge(clk) then 
    110             1                          2             rgbMac1.red   <= tp0(23 downto 16);
    111             1                          2             rgbMac1.green <= tp1(23 downto 16);
    112             1                          2             rgbMac1.blue  <= tp2(23 downto 16);
    113             1                          2             rgbMac1.valid <= tpValid;
    114                                                  end if; 
    115                                              end process;
    116                                              process (clk,rst_l) begin
    117                                                  if (rst_l = lo) then
    118             1                        100             rgbMac2.red   <= (others => '0');
    119             1                        100             rgbMac2.green <= (others => '0');
    120             1                        100             rgbMac2.blue  <= (others => '0');
    121             1                        100             rgbMac2.valid <= lo;
    122                                                  elsif rising_edge(clk) then 
    123             1                          2             rgbMac2.red   <= tp0(15 downto 8);
    124             1                          2             rgbMac2.green <= tp1(15 downto 8);
    125             1                          2             rgbMac2.blue  <= tp2(15 downto 8);
    126             1                          2             rgbMac2.valid <= tpValid;
    127                                                  end if; 
    128                                              end process;
    129                                              process (clk,rst_l) begin
    130                                                  if (rst_l = lo) then
    131             1                        100             rgbMac3.red   <= (others => '0');
    132             1                        100             rgbMac3.green <= (others => '0');
    133             1                        100             rgbMac3.blue  <= (others => '0');
    134             1                        100             rgbMac3.valid <= lo;
    135                                                  elsif rising_edge(clk) then 
    136             1                          2             rgbMac3.red   <= tp0(7 downto 0);
    137             1                          2             rgbMac3.green <= tp1(7 downto 0);
    138             1                          2             rgbMac3.blue  <= tp2(7 downto 0);
    139             1                          2             rgbMac3.valid <= tpValid;
    140                                                  end if; 
    141                                              end process;
    142                                              end generate TPDATAWIDTH3_ENABLED;
    143                                              -----------------------------------------------------------------------------------------------
    144                                              -----------------------------------------------------------------------------------------------
    145                                              --FILTERS: YCBCR
    146                                              -----------------------------------------------------------------------------------------------
    147                                              -----------------------------------------------------------------------------------------------
    148                                              YCBCR_FRAME_ENABLE: if (YCBCR_FRAME = true) generate
    149                                              signal ycbcr       : channel;
    150                                              signal ycbcrSyn    : channel;
    151                                              signal kCoeffYcbcr : kernelCoeDWord;
    152                                              begin
    153                                              process (clk) begin
    154                                                  if (rising_edge (clk)) then
    155                                                      if (kCoProd.kCoeffYcbcr.kSet = kCoefYcbcrIndex) then
    156                                                          kCoeffYcbcr <= kCoProd.kCoeffYcbcr;
    157                                                      end if;
    158                                                  end if; 
    159                                              end process;
    160                                              Kernel_Ycbcr_Inst: KernelCore
    161                                              generic map(
    162                                                  SHARP_FRAME   => false,
    163                                                  BLURE_FRAME   => false,
    164                                                  EMBOS_FRAME   => false,
    165                                                  YCBCR_FRAME   => YCBCR_FRAME,
    166                                                  SOBEL_FRAME   => false,
    167                                                  CGAIN_FRAME   => false,
    168                                                  img_width     => img_width,
    169                                                  i_data_width  => i_data_width)
    170                                              port map(
    171                                                  clk            => clk,
    172                                                  rst_l          => rst_l,
    173                                                  iRgb           => iRgb,
    174                                                  kCoeff         => kCoeffYcbcr,
    175                                                  oRgb           => ycbcr);
    176                                                  ycbcrSyn.red     <=  ycbcr.red;
    177                                                  ycbcrSyn.blue    <=  ycbcr.blue;
    178                                                  ycbcrSyn.green   <=  ycbcr.green;
    179                                                  ycbcrSyn.valid   <=  rgbSyncValid(9);
    180                                              SyncFramesInst: SyncFrames
    181                                              generic map (
    182                                                  pixelDelay   => 6)
    183                                              port map(            
    184                                                  clk      => clk,
    185                                                  reset    => rst_l,
    186                                                  iRgb     => ycbcrSyn,
    187                                                  oRgb     => oRgb.ycbcr);
    188                                              end generate YCBCR_FRAME_ENABLE;
    189                                              -----------------------------------------------------------------------------------------------
    190                                              -----------------------------------------------------------------------------------------------
    191                                              --FILTERS: CGAIN
    192                                              -----------------------------------------------------------------------------------------------
    193                                              -----------------------------------------------------------------------------------------------
    194                                              CGAIN_FRAME_ENABLE: if (CGAIN_FRAME = true or CCGAIN_FRAME = true) generate
    195                                              signal c1gain          : channel;
    196                                              signal cgain1Syn       : channel;
    197                                              signal cgain2Syn       : channel;
    198                                              signal c2gain          : channel;
    199                                              signal kCofC1gain      : kernelCoeDWord;
    200                                              signal kCofC2gain      : kernelCoeDWord;
    201                                              begin
    202                                              CGAIN_FRAME_KSET_ENABLE: if (CGAIN_FRAME = true and CCGAIN_FRAME = false) generate
    203                                              kCoeffCgainP:process (clk) begin
    204                                                  if (rising_edge (clk)) then
    205                                                      if (kCoProd.kCoeffCgain.kSet = kCoefCgainIndex) then
    206             1                      10618                 kCofC1gain <= kCoProd.kCoeffCgain;
    207                                                      end if;
    208                                                  end if; 
    209                                              end process kCoeffCgainP;
    210                                              Kernel1CgainInst: KernelCore
    211                                              generic map(
    212                                                  SHARP_FRAME   => false,
    213                                                  BLURE_FRAME   => false,
    214                                                  EMBOS_FRAME   => false,
    215                                                  YCBCR_FRAME   => false,
    216                                                  SOBEL_FRAME   => false,
    217                                                  CGAIN_FRAME   => CGAIN_FRAME,
    218                                                  img_width     => img_width,
    219                                                  i_data_width  => i_data_width)
    220                                              port map(
    221                                                  clk            => clk,
    222                                                  rst_l          => rst_l,
    223                                                  iRgb           => iRgb,
    224                                                  kCoeff         => kCofC1gain,
    225                                                  oRgb           => c1gain);
    226             1                          3         cgain1Syn.red   <=  c1gain.red;
    227             1                          3         cgain1Syn.blue  <=  c1gain.blue;
    228             1                          3         cgain1Syn.green <=  c1gain.green;
    229             1                          3         cgain1Syn.valid <=  rgbSyncValid(9);
    230                                              SyncFramesInst: SyncFrames
    231                                              generic map (
    232                                                  pixelDelay   => 6)
    233                                              port map(            
    234                                                  clk      => clk,
    235                                                  reset    => rst_l,
    236                                                  iRgb     => cgain1Syn,
    237                                                  oRgb     => oRgb.cgain);
    238                                              end generate CGAIN_FRAME_KSET_ENABLE;
    239                                              CCGAIN_FRAME_KSET_ENABLE: if (CGAIN_FRAME = false and CCGAIN_FRAME = true) generate
    240                                              kCoeffCcgainP:process (clk) begin
    241                                                  if (rising_edge (clk)) then
    242                                                      if (kCoProd.kCoef1Cgain.kSet = kCoefCgai1Index) then
    243                                                          kCofC2gain <= kCoProd.kCoef1Cgain;
    244                                                      end if;
    245                                                  end if;
    246                                              end process kCoeffCcgainP;
    247                                              Kernel2CgainInst: KernelCore
    248                                              generic map(
    249                                                  SHARP_FRAME   => false,
    250                                                  BLURE_FRAME   => false,
    251                                                  EMBOS_FRAME   => false,
    252                                                  YCBCR_FRAME   => false,
    253                                                  SOBEL_FRAME   => false,
    254                                                  CGAIN_FRAME   => CGAIN_FRAME,
    255                                                  img_width     => img_width,
    256                                                  i_data_width  => i_data_width)
    257                                              port map(
    258                                                  clk            => clk,
    259                                                  rst_l          => rst_l,
    260                                                  iRgb           => iRgb,
    261                                                  kCoeff         => kCofC2gain,
    262                                                  oRgb           => c2gain);
    263                                                  cgain2Syn.red   <=  c2gain.red;
    264                                                  cgain2Syn.blue  <=  c2gain.blue;
    265                                                  cgain2Syn.green <=  c2gain.green;
    266                                                  cgain2Syn.valid <=  rgbSyncValid(9);
    267                                              SyncFramesInst: SyncFrames
    268                                              generic map (
    269                                                  pixelDelay   => 6)
    270                                              port map(            
    271                                                  clk      => clk,
    272                                                  reset    => rst_l,
    273                                                  iRgb     => cgain2Syn,
    274                                                  oRgb     => oRgb.cgain);
    275                                              end generate CCGAIN_FRAME_KSET_ENABLE;
    276                                              end generate CGAIN_FRAME_ENABLE;
    277                                              -----------------------------------------------------------------------------------------------
    278                                              -----------------------------------------------------------------------------------------------
    279                                              --FILTERS: SHARP
    280                                              -----------------------------------------------------------------------------------------------
    281                                              -----------------------------------------------------------------------------------------------
    282                                              SHARP_FRAME_ENABLE: if (SHARP_FRAME = true) generate
    283                                              signal oRed           : channel;
    284                                              signal oGreen         : channel;
    285                                              signal oBlue          : channel;
    286                                              signal kCoeffSharp    : kernelCoeDWord;
    287                                              begin
    288                                              process (clk) begin
    289                                                  if (rising_edge (clk)) then
    290                                                      if (kCoProd.kCoeffSharp.kSet = kCoefSharpIndex) then
    291             1                      10596                 kCoeffSharp <= kCoProd.kCoeffSharp;
    292                                                      end if;
    293                                                  end if; 
    294                                              end process;
    295                                              Kernel_Sharp_Red_Inst: KernelCore
    296                                              generic map(
    297                                                  SHARP_FRAME   => SHARP_FRAME,
    298                                                  BLURE_FRAME   => false,
    299                                                  EMBOS_FRAME   => false,
    300                                                  YCBCR_FRAME   => false,
    301                                                  SOBEL_FRAME   => false,
    302                                                  CGAIN_FRAME   => false,
    303                                                  img_width     => img_width,
    304                                                  i_data_width  => i_data_width)
    305                                              port map(
    306                                                  clk            => clk,
    307                                                  rst_l          => rst_l,
    308                                                  iRgb           => rgbMac1,
    309                                                  kCoeff         => kCoeffSharp,
    310                                                  oRgb           => oRed);
    311                                              Kernel_Sharp_Green_Inst: KernelCore
    312                                              generic map(
    313                                                  SHARP_FRAME   => SHARP_FRAME,
    314                                                  BLURE_FRAME   => false,
    315                                                  EMBOS_FRAME   => false,
    316                                                  YCBCR_FRAME   => false,
    317                                                  SOBEL_FRAME   => false,
    318                                                  CGAIN_FRAME   => false,
    319                                                  img_width     => img_width,
    320                                                  i_data_width  => i_data_width)
    321                                              port map(
    322                                                  clk            => clk,
    323                                                  rst_l          => rst_l,
    324                                                  iRgb           => rgbMac2,
    325                                                  kCoeff         => kCoeffSharp,
    326                                                  oRgb           => oGreen);
    327                                              Kernel_Sharp_Blue_Inst: KernelCore
    328                                              generic map(
    329                                                  SHARP_FRAME   => SHARP_FRAME,
    330                                                  BLURE_FRAME   => false,
    331                                                  EMBOS_FRAME   => false,
    332                                                  YCBCR_FRAME   => false,
    333                                                  SOBEL_FRAME   => false,
    334                                                  CGAIN_FRAME   => false,
    335                                                  img_width     => img_width,
    336                                                  i_data_width  => i_data_width)
    337                                              port map(
    338                                                  clk            => clk,
    339                                                  rst_l          => rst_l,
    340                                                  iRgb           => rgbMac3,
    341                                                  kCoeff         => kCoeffSharp,
    342                                                  oRgb           => oBlue);
    343             1                          3         oRgb.sharp.red    <=  oRed.red;
    344             1                          3         oRgb.sharp.green  <=  oGreen.red;
    345             1                          3         oRgb.sharp.blue   <=  oBlue.red;
    346             1                          3         oRgb.sharp.valid  <=  rgbSyncValid(9);
    347                                              end generate SHARP_FRAME_ENABLE;
    348                                              -----------------------------------------------------------------------------------------------
    349                                              -----------------------------------------------------------------------------------------------
    350                                              --FILTERS: BLURE
    351                                              -----------------------------------------------------------------------------------------------
    352                                              -----------------------------------------------------------------------------------------------
    353                                              BLURE_FRAME_ENABLE: if (BLURE_FRAME = true) generate
    354                                              signal oRed           : channel;
    355                                              signal oGreen         : channel;
    356                                              signal oBlue          : channel;
    357                                              signal kCoeffBlure    : kernelCoeDWord;
    358                                              begin
    359                                              process (clk) begin
    360                                                  if (rising_edge (clk)) then
    361                                                      if (kCoProd.kCoeffBlure.kSet = kCoefBlureIndex) then
    362                                                          kCoeffBlure <= kCoProd.kCoeffBlure;
    363                                                      end if;
    364                                                  end if; 
    365                                              end process;
    366                                              Kernel_Blur_Red_Inst: KernelCore
    367                                              generic map(
    368                                                  SHARP_FRAME   => false,
    369                                                  BLURE_FRAME   => BLURE_FRAME,
    370                                                  EMBOS_FRAME   => false,
    371                                                  YCBCR_FRAME   => false,
    372                                                  SOBEL_FRAME   => false,
    373                                                  CGAIN_FRAME   => false,
    374                                                  img_width     => img_width,
    375                                                  i_data_width  => i_data_width)
    376                                              port map(
    377                                                  clk            => clk,
    378                                                  rst_l          => rst_l,
    379                                                  iRgb           => rgbMac1,
    380                                                  kCoeff         => kCoeffBlure,
    381                                                  oRgb           => oRed);
    382                                              Kernel_Blur_Green_Inst: KernelCore
    383                                              generic map(
    384                                                  SHARP_FRAME   => false,
    385                                                  BLURE_FRAME   => BLURE_FRAME,
    386                                                  EMBOS_FRAME   => false,
    387                                                  YCBCR_FRAME   => false,
    388                                                  SOBEL_FRAME   => false,
    389                                                  CGAIN_FRAME   => false,
    390                                                  img_width     => img_width,
    391                                                  i_data_width  => i_data_width)
    392                                              port map(
    393                                                  clk            => clk,
    394                                                  rst_l          => rst_l,
    395                                                  iRgb           => rgbMac2,
    396                                                  kCoeff         => kCoeffBlure,
    397                                                  oRgb           => oGreen);
    398                                              Kernel_Blur_Blue_Inst: KernelCore
    399                                              generic map(
    400                                                  SHARP_FRAME   => false,
    401                                                  BLURE_FRAME   => BLURE_FRAME,
    402                                                  EMBOS_FRAME   => false,
    403                                                  YCBCR_FRAME   => false,
    404                                                  SOBEL_FRAME   => false,
    405                                                  CGAIN_FRAME   => false,
    406                                                  img_width     => img_width,
    407                                                  i_data_width  => i_data_width)
    408                                              port map(
    409                                                  clk            => clk,
    410                                                  rst_l          => rst_l,
    411                                                  iRgb           => rgbMac3,
    412                                                  kCoeff         => kCoeffBlure,
    413                                                  oRgb           => oBlue);
    414                                                  oRgb.blur.red    <=  oRed.red;
    415                                                  oRgb.blur.green  <=  oGreen.red;
    416                                                  oRgb.blur.blue   <=  oBlue.red;
    417                                                  oRgb.blur.valid  <=  rgbSyncValid(14);
    418                                              end generate BLURE_FRAME_ENABLE;
    419                                              -----------------------------------------------------------------------------------------------
    420                                              -----------------------------------------------------------------------------------------------
    421                                              --FILTERS: EMBOS
    422                                              -----------------------------------------------------------------------------------------------
    423                                              -----------------------------------------------------------------------------------------------
    424                                              EMBOS_FRAME_ENABLE: if (EMBOS_FRAME = true) generate
    425                                              signal oRed           : channel;
    426                                              signal oGreen         : channel;
    427                                              signal oBlue          : channel;
    428                                              signal kCoeffEmbos    : kernelCoeDWord;
    429                                              begin
    430                                              process (clk) begin
    431                                                  if (rising_edge (clk)) then
    432                                                      if (kCoProd.kCoeffEmbos.kSet = kCoefEmbosIndex) then
    433                                                          kCoeffEmbos <= kCoProd.kCoeffEmbos;
    434                                                      end if;
    435                                                  end if; 
    436                                              end process;
    437                                              Kernel_Blur_Red_Inst: KernelCore
    438                                              generic map(
    439                                                  SHARP_FRAME   => false,
    440                                                  BLURE_FRAME   => false,
    441                                                  EMBOS_FRAME   => EMBOS_FRAME,
    442                                                  YCBCR_FRAME   => false,
    443                                                  SOBEL_FRAME   => false,
    444                                                  CGAIN_FRAME   => false,
    445                                                  img_width     => img_width,
    446                                                  i_data_width  => i_data_width)
    447                                              port map(
    448                                                  clk            => clk,
    449                                                  rst_l          => rst_l,
    450                                                  iRgb           => rgbMac1,
    451                                                  kCoeff         => kCoeffEmbos,
    452                                                  oRgb           => oRed);
    453                                              Kernel_Blur_Green_Inst: KernelCore
    454                                              generic map(
    455                                                  SHARP_FRAME   => false,
    456                                                  BLURE_FRAME   => false,
    457                                                  EMBOS_FRAME   => EMBOS_FRAME,
    458                                                  YCBCR_FRAME   => false,
    459                                                  SOBEL_FRAME   => false,
    460                                                  CGAIN_FRAME   => false,
    461                                                  img_width     => img_width,
    462                                                  i_data_width  => i_data_width)
    463                                              port map(
    464                                                  clk            => clk,
    465                                                  rst_l          => rst_l,
    466                                                  iRgb           => rgbMac2,
    467                                                  kCoeff         => kCoeffEmbos,
    468                                                  oRgb           => oGreen);
    469                                              Kernel_Blur_Blue_Inst: KernelCore
    470                                              generic map(
    471                                                  SHARP_FRAME   => false,
    472                                                  BLURE_FRAME   => false,
    473                                                  EMBOS_FRAME   => EMBOS_FRAME,
    474                                                  YCBCR_FRAME   => false,
    475                                                  SOBEL_FRAME   => false,
    476                                                  CGAIN_FRAME   => false,
    477                                                  img_width     => img_width,
    478                                                  i_data_width  => i_data_width)
    479                                              port map(
    480                                                  clk            => clk,
    481                                                  rst_l          => rst_l,
    482                                                  iRgb           => rgbMac3,
    483                                                  kCoeff         => kCoeffEmbos,
    484                                                  oRgb           => oBlue);
    485                                                  oRgb.embos.red    <=  oRed.red;
    486                                                  oRgb.embos.green  <=  oGreen.red;
    487                                                  oRgb.embos.blue   <=  oBlue.red;
    488                                                  oRgb.embos.valid  <=  rgbSyncValid(11);
    489                                              end generate EMBOS_FRAME_ENABLE;
    490                                              -----------------------------------------------------------------------------------------------
    491                                              -----------------------------------------------------------------------------------------------
    492                                              --FILTERS: SOBEL
    493                                              -----------------------------------------------------------------------------------------------
    494                                              -----------------------------------------------------------------------------------------------
    495                                              SOBEL_FRAME_ENABLE: if (SOBEL_FRAME = true) generate
    496                                              -----------------------------------------------------------------------------------------------
    497                                              signal osobelX        : channel;
    498                                              signal osobelY        : channel;
    499                                              signal sobel          : channel;
    500                                              signal kCoefXSobel    : kernelCoeDWord;
    501                                              signal kCoefYSobel    : kernelCoeDWord;
    502                                              signal mx             : unsigned(15 downto 0)         := (others => '0');
    503                                              signal my             : unsigned(15 downto 0)         := (others => '0');
    504                                              signal sxy            : unsigned(15 downto 0)         := (others => '0');
    505                                              signal sqr            : std_logic_vector(31 downto 0) := (others => '0');
    506                                              signal sbof           : std_logic_vector(31 downto 0) := (others => '0');
    507                                              signal sobelThreshSet : std_logic_vector(15 downto 0) :=x"006E"; --006E
    508                                              signal sobelThreshold : unsigned(15 downto 0)         :=x"0000";
    509                                              signal tp0            : std_logic_vector(7 downto 0)  := (others => '0');
    510                                              signal tp1            : std_logic_vector(7 downto 0)  := (others => '0');
    511                                              signal tp2            : std_logic_vector(7 downto 0)  := (others => '0');
    512                                              signal tpValid        : std_logic := lo;
    513                                              signal ovalid         : std_logic := lo;
    514                                              begin
    515                                              -----------------------------------------------------------------------------------------------
    516                                              -- TapsController
    517                                              -----------------------------------------------------------------------------------------------
    518                                              TapsControllerInst: TapsController
    519                                              generic map(
    520                                                  img_width    => img_width,
    521                                                  tpDataWidth  => 8)
    522                                              port map(
    523                                                  clk          => clk,
    524                                                  rst_l        => rst_l,
    525                                                  iRgb         => iRgb,
    526                                                  tpValid      => tpValid,
    527                                                  tp0          => tp0,
    528                                                  tp1          => tp1,
    529                                                  tp2          => tp2);
    530                                              -----------------------------------------------------------------------------------------------
    531                                              -- Taps To Rgb
    532                                              -----------------------------------------------------------------------------------------------
    533             1                          2         sobel.red   <= tp0;
    534             1                          2         sobel.green <= tp1;
    535             1                          2         sobel.blue  <= tp2;
    536             1                          2         sobel.valid <= tpValid;
    537                                              -----------------------------------------------------------------------------------------------
    538                                              -- Coeff Init Updates
    539                                              -----------------------------------------------------------------------------------------------
    540                                              process (clk) begin
    541                                                  if (rising_edge (clk)) then
    542                                                      if (kCoProd.kCoefXSobel.kSet = kCoefSobeXIndex) then
    543             1                      10552                 kCoefXSobel <= kCoProd.kCoefXSobel;
    544                                                      end if;
    545                                                  end if; 
    546                                              end process;
    547                                              process (clk) begin
    548                                                  if (rising_edge (clk)) then
    549                                                      if (kCoProd.kCoefYSobel.kSet = kCoefSobeYIndex) then
    550             1                      10530                 kCoefYSobel <= kCoProd.kCoefYSobel;
    551                                                      end if;
    552                                                  end if; 
    553                                              end process;
    554                                              KernelSobelXInst: KernelCore
    555                                              generic map(
    556                                                  SHARP_FRAME   => false,
    557                                                  BLURE_FRAME   => false,
    558                                                  EMBOS_FRAME   => false,
    559                                                  YCBCR_FRAME   => false,
    560                                                  SOBEL_FRAME   => SOBEL_FRAME,
    561                                                  CGAIN_FRAME   => false,
    562                                                  img_width     => img_width,
    563                                                  i_data_width  => i_data_width)
    564                                              port map(
    565                                                  clk            => clk,
    566                                                  rst_l          => rst_l,
    567                                                  iRgb           => sobel,
    568                                                  kCoeff         => kCoefXSobel,
    569                                                  oRgb           => osobelX);
    570                                              KernelSobelYInst: KernelCore
    571                                              generic map(
    572                                                  SHARP_FRAME   => false,
    573                                                  BLURE_FRAME   => false,
    574                                                  EMBOS_FRAME   => false,
    575                                                  YCBCR_FRAME   => false,
    576                                                  SOBEL_FRAME   => SOBEL_FRAME,
    577                                                  CGAIN_FRAME   => false,
    578                                                  img_width     => img_width,
    579                                                  i_data_width  => i_data_width)
    580                                              port map(
    581                                                  clk            => clk,
    582                                                  rst_l          => rst_l,
    583                                                  iRgb           => sobel,
    584                                                  kCoeff         => kCoefYSobel,
    585                                                  oRgb           => osobelY);
    586                                              sobelDomainsValueP:process (clk) begin
    587                                                  if rising_edge(clk) then
    588             1                          3             mx  <= (unsigned(osobelX.red) * unsigned(osobelX.red));
    589             1                          3             my  <= (unsigned(osobelY.red) * unsigned(osobelY.red));
    590                                                  end if;
    591                                              end process sobelDomainsValueP;
    592                                              sumValueP:process (clk) begin
    593                                                  if rising_edge(clk) then
    594             1                          4             sxy <= (mx + my);
    595                                                  end if;
    596                                              end process sumValueP;
    597                                              squareRootValueP:process (clk) begin
    598                                                  if rising_edge(clk) then
    599             1                          4             sqr <= std_logic_vector(resize(unsigned(sxy), sqr'length));
    600                                                  end if;
    601                                              end process squareRootValueP;
    602                                              squareRootTopInst: squareRootTop
    603                                              port map(
    604                                                  clk        => clk,
    605                                                  ivalid     => rgbSyncValid(14),
    606                                                  idata      => sqr,
    607                                                  ovalid     => ovalid,
    608                                                  odata      => sbof);
    609             1                          1         sobelThreshold <= unsigned(std_logic_vector(sbof(15 downto 0)));
    610             1                          2         sobelThreshSet <= iThreshold;
    611                                              sobelOutP:process (clk) begin
    612                                                  if rising_edge(clk) then
    613                                                      if (sobelThreshold > unsigned(sobelThreshSet)) then
    614             1                    ***0***                 oEdgeValid       <= hi;
    615             1                    ***0***                 oRgb.sobel.red   <= black;
    616             1                    ***0***                 oRgb.sobel.green <= black;
    617             1                    ***0***                 oRgb.sobel.blue  <= black;
    618                                                      else
    619             1                          4                 oEdgeValid       <= lo;
    620             1                          4                 oRgb.sobel.red   <= white;
    621             1                          4                 oRgb.sobel.green <= white;
    622             1                          4                 oRgb.sobel.blue  <= white;
    623                                                      end if;
    624             1                          4                 oRgb.sobel.valid <= rgbSyncValid(15);
    625                                                  end if;
    626                                              end process sobelOutP;
    627                                              end generate SOBEL_FRAME_ENABLE;
    628                                              -----------------------------------------------------------------------------------------------
    629                                              -----------------------------------------------------------------------------------------------
    630                                              --FILTERS: RGB
    631                                              -----------------------------------------------------------------------------------------------
    632                                              -----------------------------------------------------------------------------------------------
    633                                              INRGB_FRAME_ENABLE: if (INRGB_FRAME = true) generate
    634                                              begin
    635             1                          3         oRgb.inrgb <= iRgb;
    636                                              end generate INRGB_FRAME_ENABLE;
    637                                              -----------------------------------------------------------------------------------------------
    638                                              -----------------------------------------------------------------------------------------------
    639                                              --FILTERS: HSV
    640                                              -----------------------------------------------------------------------------------------------
    641                                              -----------------------------------------------------------------------------------------------
    642                                              HSV_FRAME_ENABLE: if (HSV_FRAME = true) generate
    643                                                  signal hsvColor    : hsvChannel;
    644                                              begin
    645                                              hsvInst: hsv_c
    646                                              generic map(
    647                                                  i_data_width       => i_data_width)
    648                                              port map(   
    649                                                  clk                => clk,
    650                                                  reset              => rst_l,
    651                                                  iRgb               => iRgb,
    652                                                  oHsv               => hsvColor);
    653             1                          4         oRgb.hsv.red       <= hsvColor.h;
    654             1                          3         oRgb.hsv.green     <= hsvColor.s;
    655             1                          2         oRgb.hsv.blue      <= hsvColor.v;
    656             1                          4         oRgb.hsv.valid     <= hsvColor.valid;
    657                                              end generate HSV_FRAME_ENABLE;
    658                                              -----------------------------------------------------------------------------------------------
    659                                              -----------------------------------------------------------------------------------------------
    660                                              --FILTERS: HSL
    661                                              -----------------------------------------------------------------------------------------------
    662                                              -----------------------------------------------------------------------------------------------
    663                                              HSL_FRAME_ENABLE: if (HSL_FRAME = true) generate
    664                                              signal hslColor    : hslChannel;
    665                                              begin
    666                                              hslInst: hsl_c
    667                                              generic map(
    668                                                  i_data_width       => i_data_width)
    669                                              port map(   
    670                                                  clk                => clk,
    671                                                  reset              => rst_l,
    672                                                  iRgb               => iRgb,
    673                                                  oHsl               => hslColor);
    674             1                          4         oRgb.hsl.red       <= hslColor.h;
    675             1                          3         oRgb.hsl.green     <= hslColor.s;
    676             1                          2         oRgb.hsl.blue      <= hslColor.l;
    677             1                          4         oRgb.hsl.valid     <= hslColor.valid;
    678                                              end generate HSL_FRAME_ENABLE;
    679                                              -----------------------------------------------------------------------------------------------
    680                                              -----------------------------------------------------------------------------------------------
    681                                              --FILTERS: RGBTRIM
    682                                              -----------------------------------------------------------------------------------------------
    683                                              -----------------------------------------------------------------------------------------------
    684                                              RGBTRIM_FRAME_ENABLE: if (RGBTR_FRAME = true) generate
    685                                              begin
    686                                              ColorTrimInst: ColorTrim
    687                                              generic map(
    688                                                  i_data_width       => i_data_width)
    689                                              port map(   
    690                                                  clk                => clk,
    691                                                  reset              => rst_l,
    692                                                  iRgb               => iRgb,
    693                                                  oRgb               => oRgb.colorTrm);
    694                                              end generate RGBTRIM_FRAME_ENABLE;
    695                                              -----------------------------------------------------------------------------------------------
    696                                              -----------------------------------------------------------------------------------------------
    697                                              --FILTERS: RGBLUMP
    698                                              -----------------------------------------------------------------------------------------------
    699                                              -----------------------------------------------------------------------------------------------
    700                                              RGBLUMP_FRAME_ENABLE: if (RGBLP_FRAME = true) generate
    701                                              begin
    702                                              SegmentColorsInst: SegmentColors
    703                                              port map(   
    704                                                  clk                => clk,
    705                                                  reset              => rst_l,
    706                                                  lumThreshold       => lumThreshold,
    707                                                  iRgb               => iRgb,
    708                                                  oRgb               => oRgb.colorLmp);
    709                                              end generate RGBLUMP_FRAME_ENABLE;
    710                                              -----------------------------------------------------------------------------------------------
    711                                              -----------------------------------------------------------------------------------------------
    712                                              --FRAMES_DISABLED
    713                                              -----------------------------------------------------------------------------------------------
    714                                              -----------------------------------------------------------------------------------------------
    715                                              RGBLUMP_FRAME_DISABLED: if (RGBLP_FRAME = false) generate
    716             1                          1         oRgb.colorLmp   <= init_channel;
    717                                              end generate RGBLUMP_FRAME_DISABLED;
    718                                              RGBTRIM_FRAME_DISABLED: if (RGBTR_FRAME = false) generate
    719             1                          1         oRgb.colorTrm   <= init_channel;
    720                                              end generate RGBTRIM_FRAME_DISABLED;
    721                                              INRGB_FRAME_DISABLED: if (INRGB_FRAME = false) generate
    722                                                  oRgb.inrgb   <= init_channel;
    723                                              end generate INRGB_FRAME_DISABLED;
    724                                              YCBCR_FRAME_DISABLED: if (YCBCR_FRAME = false) generate
    725             1                          1         oRgb.ycbcr   <= init_channel;
    726                                              end generate YCBCR_FRAME_DISABLED;
    727                                              SHARP_FRAME_DISABLED: if (SHARP_FRAME = false) generate
    728                                                  oRgb.sharp   <= init_channel;
    729                                              end generate SHARP_FRAME_DISABLED;
    730                                              BLURE_FRAME_DISABLED: if (BLURE_FRAME = false) generate
    731             1                          1         oRgb.blur  <= init_channel;
    732                                              end generate BLURE_FRAME_DISABLED;
    733                                              EMBOS_FRAME_DISABLED: if (EMBOS_FRAME = false) generate
    734             1                          1         oRgb.embos   <= init_channel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        25        24         1      96.0

================================Branch Details================================

Branch Coverage for Design Unit work.kernel(behavioral)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/Kernel.vhd
------------------------------------IF Branch------------------------------------
    61                                     10760     Count coming in to IF
    61              1                      10760         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    104                                      102     Count coming in to IF
    104             1                        100         if (rst_l = lo) then
    109             1                          2         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    117                                      102     Count coming in to IF
    117             1                        100         if (rst_l = lo) then
    122             1                          2         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    130                                      102     Count coming in to IF
    130             1                        100         if (rst_l = lo) then
    135             1                          2         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    204                                    10760     Count coming in to IF
    204             1                      10760         if (rising_edge (clk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    205                                    10760     Count coming in to IF
    205             1                      10618             if (kCoProd.kCoeffCgain.kSet = kCoefCgainIndex) then
                                             142     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    289                                    10760     Count coming in to IF
    289             1                      10760         if (rising_edge (clk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    290                                    10760     Count coming in to IF
    290             1                      10596             if (kCoProd.kCoeffSharp.kSet = kCoefSharpIndex) then
                                             164     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    541                                    10760     Count coming in to IF
    541             1                      10760         if (rising_edge (clk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    542                                    10760     Count coming in to IF
    542             1                      10552             if (kCoProd.kCoefXSobel.kSet = kCoefSobeXIndex) then
                                             208     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    548                                    10760     Count coming in to IF
    548             1                      10760         if (rising_edge (clk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    549                                    10760     Count coming in to IF
    549             1                      10530             if (kCoProd.kCoefYSobel.kSet = kCoefSobeYIndex) then
                                             230     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    587                                        3     Count coming in to IF
    587             1                          3         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    593                                        4     Count coming in to IF
    593             1                          4         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    598                                        4     Count coming in to IF
    598             1                          4         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    612                                        4     Count coming in to IF
    612             1                          4         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    613                                        4     Count coming in to IF
    613             1                    ***0***             if (sobelThreshold > unsigned(sobelThreshSet)) then
    618             1                          4             else
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.kernelcore(behavioral)::CGAIN_FRAME_ENABLED
=================================================================================
=== Design Unit: work.kernelcore(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           22        16         6      72.7

================================Statement Details================================

Statement Coverage for generate block work.kernelcore(behavioral)::CGAIN_FRAME_ENABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/KernelCore.vhd
    385                                                  signal cGain : channel := (valid => lo, red => black, green => black, blue => black);
    386                                              begin
    387                                              -----------------------------------------------------------------------------------------------
    388                                              -- STAGE 2
    389                                              -----------------------------------------------------------------------------------------------
    390                                              process (clk) begin
    391                                                  if rising_edge(clk) then
    392             1                          1             cc.tpsd1.vTap0x <= rgbToFl_blu;
    393             1                          1             cc.tpsd2.vTap0x <= rgbToFl_gre;
    394             1                          1             cc.tpsd3.vTap0x <= rgbToFl_red;
    395             1                          1             cc.tpsd1.vTap1x <= rgbToFl_blu;
    396             1                          1             cc.tpsd2.vTap1x <= rgbToFl_gre;
    397             1                          1             cc.tpsd3.vTap1x <= rgbToFl_red;
    398             1                          1             cc.tpsd1.vTap2x <= rgbToFl_blu;
    399             1                          1             cc.tpsd2.vTap2x <= rgbToFl_gre;
    400             1                          1             cc.tpsd3.vTap2x <= rgbToFl_red;
    401                                                  end if;
    402                                              end process;
    403                                              -----------------------------------------------------------------------------------------------
    404                                              -- STAGE 9
    405                                              -----------------------------------------------------------------------------------------------
    406                                              process (clk) begin
    407                                                  if rising_edge(clk) then
    408                                                      if (cc.snToTrimSum.red(ROUND_RESULT_WIDTH-1) = hi) then	
    409             1                    ***0***                 cGain.red <= black;
    410                                                      elsif (unsigned(cc.snToTrimSum.red(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then	
    411             1                          2                 cGain.red <= white;
    412                                                      else
    413             1                    ***0***                 cGain.red <= std_logic_vector(cc.snToTrimSum.red(i_data_width-1 downto 0));
    414                                                      end if;
    415                                                      if (cc.snToTrimSum.green(ROUND_RESULT_WIDTH-1) = hi) then
    416             1                    ***0***                 cGain.green <= black;
    417                                                      elsif (unsigned(cc.snToTrimSum.green(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then
    418             1                          2                 cGain.green <= white;
    419                                                      else
    420             1                    ***0***                 cGain.green <= std_logic_vector(cc.snToTrimSum.green(i_data_width-1 downto 0));
    421                                                      end if;
    422                                                      if (cc.snToTrimSum.blue(ROUND_RESULT_WIDTH-1) = hi) then
    423             1                    ***0***                 cGain.blue <= black;
    424                                                      elsif (unsigned(cc.snToTrimSum.blue(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then
    425             1                          2                 cGain.blue <= white;
    426                                                      else
    427             1                    ***0***                 cGain.blue <= std_logic_vector(cc.snToTrimSum.blue(i_data_width-1 downto 0));
    428                                                      end if;
    429                                                  end if;
    430                                              end process;
    431                                              -----------------------------------------------------------------------------------------------
    432                                              -- STAGE 10
    433                                              -----------------------------------------------------------------------------------------------
    434                                              process (clk) begin
    435                                                  if rising_edge(clk) then
    436             1                          4             oRgb.red    <= cGain.red;
    437             1                          4             oRgb.green  <= cGain.green;
    438             1                          4             oRgb.blue   <= cGain.blue;
    439             1                          4             oRgb.valid  <=  rgbSyncValid(9);

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        12         6         6      50.0

================================Branch Details================================

Branch Coverage for generate block work.kernelcore(behavioral)::CGAIN_FRAME_ENABLED

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/KernelCore.vhd
------------------------------------IF Branch------------------------------------
    391                                        1     Count coming in to IF
    391             1                          1         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    407                                        2     Count coming in to IF
    407             1                          2         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    408                                        2     Count coming in to IF
    408             1                    ***0***             if (cc.snToTrimSum.red(ROUND_RESULT_WIDTH-1) = hi) then	
    410             1                          2             elsif (unsigned(cc.snToTrimSum.red(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then	
    412             1                    ***0***             else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    415                                        2     Count coming in to IF
    415             1                    ***0***             if (cc.snToTrimSum.green(ROUND_RESULT_WIDTH-1) = hi) then
    417             1                          2             elsif (unsigned(cc.snToTrimSum.green(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then
    419             1                    ***0***             else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    422                                        2     Count coming in to IF
    422             1                    ***0***             if (cc.snToTrimSum.blue(ROUND_RESULT_WIDTH-1) = hi) then
    424             1                          2             elsif (unsigned(cc.snToTrimSum.blue(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then
    426             1                    ***0***             else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    435                                        4     Count coming in to IF
    435             1                          4         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.kernelcore(behavioral)::COLOR_DELAYED_ENABLED
=================================================================================
=== Design Unit: work.kernelcore(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           17        15         2      88.2

================================Statement Details================================

Statement Coverage for generate block work.kernelcore(behavioral)::COLOR_DELAYED_ENABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/KernelCore.vhd
    248                                                                      or (EMBOS_FRAME = TRUE) or (SOBEL_FRAME = TRUE)) generate
    249                                              signal cc_rgbSum : std_logic_vector(i_data_width-1 downto 0) := black;
    250                                              begin
    251                                              -----------------------------------------------------------------------------------------------
    252                                              -- STAGE 2
    253                                              -----------------------------------------------------------------------------------------------
    254                                              process (clk) begin
    255                                                  if rising_edge(clk) then
    256                                                      --Red
    257             1                          5             cc.tpsd1.vTap0x <= rgbToFl_red;
    258             1                          5             cc.tpsd2.vTap0x <= cc.tpsd1.vTap0x;
    259             1                          5             cc.tpsd3.vTap0x <= cc.tpsd2.vTap0x;
    260                                                      --Green
    261             1                          5             cc.tpsd1.vTap1x <= rgbToFl_gre;
    262             1                          5             cc.tpsd2.vTap1x <= cc.tpsd1.vTap1x;
    263             1                          5             cc.tpsd3.vTap1x <= cc.tpsd2.vTap1x;
    264                                                      --Blue
    265             1                          5             cc.tpsd1.vTap2x <= rgbToFl_blu;
    266             1                          5             cc.tpsd2.vTap2x <= cc.tpsd1.vTap2x;
    267             1                          5             cc.tpsd3.vTap2x <= cc.tpsd2.vTap2x;
    268                                                  end if;
    269                                              end process;
    270                                              -----------------------------------------------------------------------------------------------
    271                                              -- STAGE 9
    272                                              -----------------------------------------------------------------------------------------------
    273                                              process (clk) begin
    274                                                  if rising_edge(clk) then 
    275             1                         15             cc.rgbSum  <= (cc.snToTrimSum.red + cc.snToTrimSum.green + cc.snToTrimSum.blue);
    276                                                      if (cc.rgbSum(ROUND_RESULT_WIDTH-1) = hi) then
    277             1                    ***0***                 cc_rgbSum <= black;
    278                                                      elsif (unsigned(cc.rgbSum(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then
    279             1                         15                 cc_rgbSum <= white;
    280                                                      else
    281             1                    ***0***                 cc_rgbSum <= std_logic_vector(cc.rgbSum(i_data_width-1 downto 0));
    282                                                      end if;
    283                                                  end if;
    284                                              end process;
    285                                              -----------------------------------------------------------------------------------------------
    286                                              -- STAGE 10
    287                                              -----------------------------------------------------------------------------------------------
    288                                              process (clk) begin
    289                                                  if rising_edge(clk) then
    290             1                         10             oRgb.red    <= cc_rgbSum;
    291             1                         10             oRgb.green  <= cc_rgbSum;
    292             1                         10             oRgb.blue   <= cc_rgbSum;
    293             1                         10             oRgb.valid  <= rgbSyncValid(9);

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         6         4         2      66.6

================================Branch Details================================

Branch Coverage for generate block work.kernelcore(behavioral)::COLOR_DELAYED_ENABLED

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/KernelCore.vhd
------------------------------------IF Branch------------------------------------
    255                                        5     Count coming in to IF
    255             1                          5         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    274                                       15     Count coming in to IF
    274             1                         15         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    276                                       15     Count coming in to IF
    276             1                    ***0***             if (cc.rgbSum(ROUND_RESULT_WIDTH-1) = hi) then
    278             1                         15             elsif (unsigned(cc.rgbSum(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then
    280             1                    ***0***             else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    289                                       10     Count coming in to IF
    289             1                         10         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.kernelcore(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           88        80         8      90.9

================================Statement Details================================

Statement Coverage for Design Unit work.kernelcore(behavioral) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/KernelCore.vhd
    1                                                library ieee;
    2                                                use ieee.std_logic_1164.all;
    3                                                use ieee.numeric_std.all;
    4                                                use work.fixed_pkg.all;
    5                                                use work.constantspackage.all;
    6                                                use work.vpfrecords.all;
    7                                                use work.portspackage.all;
    8                                                entity KernelCore is
    9                                                generic (
    10                                                   SHARP_FRAME      : boolean := false;
    11                                                   BLURE_FRAME      : boolean := false;
    12                                                   EMBOS_FRAME      : boolean := false;
    13                                                   YCBCR_FRAME      : boolean := false;
    14                                                   SOBEL_FRAME      : boolean := false;
    15                                                   CGAIN_FRAME      : boolean := false;
    16                                                   img_width        : integer := 4096;
    17                                                   i_data_width     : integer := 8);
    18                                               port (
    19                                                   clk              : in std_logic;
    20                                                   rst_l            : in std_logic;
    21                                                   iRgb             : in channel;
    22                                                   kCoeff           : in kernelCoeDWord;
    23                                                   oRgb             : out channel);
    24                                               end KernelCore;
    25                                               architecture Behavioral of KernelCore is
    26                                                   signal cc               : ccRecord;
    27                                                   signal rgbSyncValid     : std_logic_vector(15 downto 0)  := x"0000";
    28                                                   signal rgbToFl_red      : std_logic_vector(31 downto 0);
    29                                                   signal rgbToFl_gre      : std_logic_vector(31 downto 0);
    30                                                   signal rgbToFl_blu      : std_logic_vector(31 downto 0);
    31                                                   signal fractLevel       : std_logic_vector(31 downto 0);
    32                                                   signal kCoeffDWord      : kernelCoeDWord;
    33                                                   signal FractLevelProd   : kernelCoeDWord;
    34                                                   signal kCoeffProd       : kCoeffFloat;
    35                                               begin
    36                                               -----------------------------------------------------------------------------------------------
    37                                               -- STAGE 1
    38                                               -----------------------------------------------------------------------------------------------
    39                                               ByteToFloatTopRedinst: ByteToFloatTop
    40                                                   port map (
    41                                                     aclk       => clk,
    42                                                     rst_l      => rst_l,
    43                                                     iValid     => iRgb.valid,
    44                                                     iData      => iRgb.red,
    45                                                     oValid     => open,
    46                                                     oDataFloat => rgbToFl_red);
    47                                               ByteToFloatTopGreeninst: ByteToFloatTop
    48                                                   port map (
    49                                                     aclk       => clk,
    50                                                     rst_l      => rst_l,
    51                                                     iValid     => iRgb.valid,
    52                                                     iData      => iRgb.green,
    53                                                     oValid     => open,
    54                                                     oDataFloat => rgbToFl_gre);
    55                                               ByteToFloatTopBlueinst: ByteToFloatTop
    56                                                   port map (
    57                                                     aclk       => clk,
    58                                                     rst_l      => rst_l,
    59                                                     iValid     => iRgb.valid,
    60                                                     iData      => iRgb.blue,
    61                                                     oValid     => open,
    62                                                     oDataFloat => rgbToFl_blu);
    63                                               -----------------------------------------------------------------------------------------------
    64                                               -- STAGE 2
    65                                               -----------------------------------------------------------------------------------------------
    66                                               FloatMultiplyK1Inst: FloatMultiplyTop
    67                                                   port map (
    68                                                     clk        => clk,
    69                                                     iAdata     => kCoeff.k1,
    70                                                     iBdata     => cc.tpsd3.vTap2x,
    71                                                     oRdata     => FractLevelProd.k1);
    72                                               FloatMultiplyK2Inst: FloatMultiplyTop
    73                                                   port map (
    74                                                     clk        => clk,
    75                                                     iAdata     => kCoeff.k2,
    76                                                     iBdata     => cc.tpsd2.vTap2x,
    77                                                     oRdata     => FractLevelProd.k2);
    78                                               FloatMultiplyK3Inst: FloatMultiplyTop
    79                                                   port map (
    80                                                     clk        => clk,
    81                                                     iAdata     => kCoeff.k3,
    82                                                     iBdata     => cc.tpsd1.vTap2x,
    83                                                     oRdata     => FractLevelProd.k3);
    84                                               FloatMultiplyK4Inst: FloatMultiplyTop
    85                                                   port map (
    86                                                     clk        => clk,
    87                                                     iAdata     => kCoeff.k4,
    88                                                     iBdata     => cc.tpsd3.vTap1x,
    89                                                     oRdata     => FractLevelProd.k4);
    90                                               FloatMultiplyK5Inst: FloatMultiplyTop
    91                                                   port map (
    92                                                     clk        => clk,
    93                                                     iAdata     => kCoeff.k5,
    94                                                     iBdata     => cc.tpsd2.vTap1x,
    95                                                     oRdata     => FractLevelProd.k5);
    96                                               FloatMultiplyK6Inst: FloatMultiplyTop
    97                                                   port map (
    98                                                     clk        => clk,
    99                                                     iAdata     => kCoeff.k6,
    100                                                    iBdata     => cc.tpsd1.vTap1x,
    101                                                    oRdata     => FractLevelProd.k6);
    102                                              FloatMultiplyK7Inst: FloatMultiplyTop
    103                                                  port map (
    104                                                    clk        => clk,
    105                                                    iAdata     => kCoeff.k7,
    106                                                    iBdata     => cc.tpsd3.vTap0x,
    107                                                    oRdata     => FractLevelProd.k7);
    108                                              FloatMultiplyK8Inst: FloatMultiplyTop
    109                                                  port map (
    110                                                    clk        => clk,
    111                                                    iAdata     => kCoeff.k8,
    112                                                    iBdata     => cc.tpsd2.vTap0x,
    113                                                    oRdata     => FractLevelProd.k8);
    114                                              FloatMultiplyK9Inst: FloatMultiplyTop
    115                                                  port map (
    116                                                    clk        => clk,
    117                                                    iAdata     => kCoeff.k9,
    118                                                    iBdata     => cc.tpsd1.vTap0x,
    119                                                    oRdata     => FractLevelProd.k9);
    120                                              -----------------------------------------------------------------------------------------------
    121                                              -- STAGE 3
    122                                              -----------------------------------------------------------------------------------------------
    123                                              FloatToFixedv1TopK1Inst: FloatToFixedv1Top
    124                                                  port map (
    125                                                    aclk       => clk,
    126                                                    iData      => FractLevelProd.k1,
    127                                                    oData      => kCoeffProd.k1);   
    128                                              FloatToFixedv1TopK2Inst: FloatToFixedv1Top
    129                                                  port map (
    130                                                    aclk       => clk,
    131                                                    iData      => FractLevelProd.k2,
    132                                                    oData      => kCoeffProd.k2);  
    133                                              FloatToFixedv1TopK3Inst: FloatToFixedv1Top
    134                                                  port map (
    135                                                    aclk       => clk,
    136                                                    iData      => FractLevelProd.k3,
    137                                                    oData      => kCoeffProd.k3);  
    138                                              FloatToFixedv1TopK4Inst: FloatToFixedv1Top
    139                                                  port map (
    140                                                    aclk       => clk,
    141                                                    iData      => FractLevelProd.k4,
    142                                                    oData      => kCoeffProd.k4);   
    143                                              FloatToFixedv1TopK5Inst: FloatToFixedv1Top
    144                                                  port map (
    145                                                    aclk       => clk,
    146                                                    iData      => FractLevelProd.k5,
    147                                                    oData      => kCoeffProd.k5);  
    148                                              FloatToFixedv1TopK6Inst: FloatToFixedv1Top
    149                                                  port map (
    150                                                    aclk       => clk,
    151                                                    iData      => FractLevelProd.k6,
    152                                                    oData      => kCoeffProd.k6); 
    153                                              FloatToFixedv1TopK7Inst: FloatToFixedv1Top
    154                                                  port map (
    155                                                    aclk       => clk,
    156                                                    iData      => FractLevelProd.k7,
    157                                                    oData      => kCoeffProd.k7);   
    158                                              FloatToFixedv1TopK8Inst: FloatToFixedv1Top
    159                                                  port map (
    160                                                    aclk       => clk,
    161                                                    iData      => FractLevelProd.k8,
    162                                                    oData      => kCoeffProd.k8);  
    163                                              FloatToFixedv1TopK9Inst: FloatToFixedv1Top
    164                                                  port map (
    165                                                    aclk       => clk,
    166                                                    iData      => FractLevelProd.k9,
    167                                                    oData      => kCoeffProd.k9);  
    168                                              -----------------------------------------------------------------------------------------------
    169                                              -- STAGE 4
    170                                              -----------------------------------------------------------------------------------------------
    171                                              process (clk) begin
    172                                                  if rising_edge(clk) then 
    173             1                      64560             cc.fxToSnFxProd.k1 <= to_sfixed((kCoeffProd.k1), cc.fxToSnFxProd.k1);
    174             1                      64560             cc.fxToSnFxProd.k2 <= to_sfixed((kCoeffProd.k2), cc.fxToSnFxProd.k2);
    175             1                      64560             cc.fxToSnFxProd.k3 <= to_sfixed((kCoeffProd.k3), cc.fxToSnFxProd.k3);
    176             1                      64560             cc.fxToSnFxProd.k4 <= to_sfixed((kCoeffProd.k4), cc.fxToSnFxProd.k4);
    177             1                      64560             cc.fxToSnFxProd.k5 <= to_sfixed((kCoeffProd.k5), cc.fxToSnFxProd.k5);
    178             1                      64560             cc.fxToSnFxProd.k6 <= to_sfixed((kCoeffProd.k6), cc.fxToSnFxProd.k6);
    179             1                      64560             cc.fxToSnFxProd.k7 <= to_sfixed((kCoeffProd.k7), cc.fxToSnFxProd.k7);
    180             1                      64560             cc.fxToSnFxProd.k8 <= to_sfixed((kCoeffProd.k8), cc.fxToSnFxProd.k8);
    181             1                      64560             cc.fxToSnFxProd.k9 <= to_sfixed((kCoeffProd.k9), cc.fxToSnFxProd.k9);
    182                                                  end if;
    183                                              end process;
    184                                              -----------------------------------------------------------------------------------------------
    185                                              -- STAGE 5
    186                                              -----------------------------------------------------------------------------------------------
    187                                              process (clk) begin
    188                                                  if rising_edge(clk) then 
    189             1                      64560             cc.snFxToSnProd.k1 <= to_signed(cc.fxToSnFxProd.k1(19 downto 0), 20);
    190             1                      64560             cc.snFxToSnProd.k2 <= to_signed(cc.fxToSnFxProd.k2(19 downto 0), 20);
    191             1                      64560             cc.snFxToSnProd.k3 <= to_signed(cc.fxToSnFxProd.k3(19 downto 0), 20);
    192             1                      64560             cc.snFxToSnProd.k4 <= to_signed(cc.fxToSnFxProd.k4(19 downto 0), 20);
    193             1                      64560             cc.snFxToSnProd.k5 <= to_signed(cc.fxToSnFxProd.k5(19 downto 0), 20);
    194             1                      64560             cc.snFxToSnProd.k6 <= to_signed(cc.fxToSnFxProd.k6(19 downto 0), 20);
    195             1                      64560             cc.snFxToSnProd.k7 <= to_signed(cc.fxToSnFxProd.k7(19 downto 0), 20);
    196             1                      64560             cc.snFxToSnProd.k8 <= to_signed(cc.fxToSnFxProd.k8(19 downto 0), 20);
    197             1                      64560             cc.snFxToSnProd.k9 <= to_signed(cc.fxToSnFxProd.k9(19 downto 0), 20);
    198                                                  end if;
    199                                              end process;
    200                                              -----------------------------------------------------------------------------------------------
    201                                              -- STAGE 6
    202                                              -----------------------------------------------------------------------------------------------
    203                                              process (clk) begin
    204                                                  if rising_edge(clk) then 
    205             1                          6             cc.snToTrimProd.k1 <= cc.snFxToSnProd.k1(19 downto 5);
    206             1                          6             cc.snToTrimProd.k2 <= cc.snFxToSnProd.k2(19 downto 5);
    207             1                          6             cc.snToTrimProd.k3 <= cc.snFxToSnProd.k3(19 downto 5);
    208             1                          6             cc.snToTrimProd.k4 <= cc.snFxToSnProd.k4(19 downto 5);
    209             1                          6             cc.snToTrimProd.k5 <= cc.snFxToSnProd.k5(19 downto 5);
    210             1                          6             cc.snToTrimProd.k6 <= cc.snFxToSnProd.k6(19 downto 5);
    211             1                          6             cc.snToTrimProd.k7 <= cc.snFxToSnProd.k7(19 downto 5);
    212             1                          6             cc.snToTrimProd.k8 <= cc.snFxToSnProd.k8(19 downto 5);
    213             1                          6             cc.snToTrimProd.k9 <= cc.snFxToSnProd.k9(19 downto 5);
    214                                                  end if;
    215                                              end process;
    216                                              -----------------------------------------------------------------------------------------------
    217                                              -- STAGE 7
    218                                              -----------------------------------------------------------------------------------------------
    219                                              process (clk) begin
    220                                                  if rising_edge(clk) then
    221                                                      cc.snSum.red   <= resize(cc.snToTrimProd.k1, ADD_RESULT_WIDTH) +
    222                                                                        resize(cc.snToTrimProd.k2, ADD_RESULT_WIDTH) +
    223             1                          6                               resize(cc.snToTrimProd.k3, ADD_RESULT_WIDTH) + ROUND;
    224                                                      cc.snSum.green <= resize(cc.snToTrimProd.k4, ADD_RESULT_WIDTH) +
    225                                                                        resize(cc.snToTrimProd.k5, ADD_RESULT_WIDTH) +
    226             1                          6                               resize(cc.snToTrimProd.k6, ADD_RESULT_WIDTH) + ROUND;
    227                                                      cc.snSum.blue  <= resize(cc.snToTrimProd.k7, ADD_RESULT_WIDTH) +
    228                                                                        resize(cc.snToTrimProd.k8, ADD_RESULT_WIDTH) +
    229             1                          6                               resize(cc.snToTrimProd.k9, ADD_RESULT_WIDTH) + ROUND;
    230                                                  end if;
    231                                              end process;
    232                                              -----------------------------------------------------------------------------------------------
    233                                              -- STAGE 8
    234                                              -----------------------------------------------------------------------------------------------
    235                                              process (clk) begin
    236                                                  if rising_edge(clk) then 
    237             1                         12             cc.snToTrimSum.red    <= cc.snSum.red(cc.snSum.red'left downto FRAC_BITS_TO_KEEP);
    238             1                         12             cc.snToTrimSum.green  <= cc.snSum.green(cc.snSum.green'left downto FRAC_BITS_TO_KEEP);
    239             1                         12             cc.snToTrimSum.blue   <= cc.snSum.blue(cc.snSum.blue'left downto FRAC_BITS_TO_KEEP);
    240                                                  end if;
    241                                              end process;
    242                                              -----------------------------------------------------------------------------------------------
    243                                              -----------------------------------------------------------------------------------------------
    244                                              --FILTERS: SHARP BLURE EMBOS SOBEL
    245                                              -----------------------------------------------------------------------------------------------
    246                                              -----------------------------------------------------------------------------------------------
    247                                              COLOR_DELAYED_ENABLED: if ((SHARP_FRAME = TRUE) or (BLURE_FRAME = TRUE) 
    248                                                                      or (EMBOS_FRAME = TRUE) or (SOBEL_FRAME = TRUE)) generate
    249                                              signal cc_rgbSum : std_logic_vector(i_data_width-1 downto 0) := black;
    250                                              begin
    251                                              -----------------------------------------------------------------------------------------------
    252                                              -- STAGE 2
    253                                              -----------------------------------------------------------------------------------------------
    254                                              process (clk) begin
    255                                                  if rising_edge(clk) then
    256                                                      --Red
    257             1                          5             cc.tpsd1.vTap0x <= rgbToFl_red;
    258             1                          5             cc.tpsd2.vTap0x <= cc.tpsd1.vTap0x;
    259             1                          5             cc.tpsd3.vTap0x <= cc.tpsd2.vTap0x;
    260                                                      --Green
    261             1                          5             cc.tpsd1.vTap1x <= rgbToFl_gre;
    262             1                          5             cc.tpsd2.vTap1x <= cc.tpsd1.vTap1x;
    263             1                          5             cc.tpsd3.vTap1x <= cc.tpsd2.vTap1x;
    264                                                      --Blue
    265             1                          5             cc.tpsd1.vTap2x <= rgbToFl_blu;
    266             1                          5             cc.tpsd2.vTap2x <= cc.tpsd1.vTap2x;
    267             1                          5             cc.tpsd3.vTap2x <= cc.tpsd2.vTap2x;
    268                                                  end if;
    269                                              end process;
    270                                              -----------------------------------------------------------------------------------------------
    271                                              -- STAGE 9
    272                                              -----------------------------------------------------------------------------------------------
    273                                              process (clk) begin
    274                                                  if rising_edge(clk) then 
    275             1                         15             cc.rgbSum  <= (cc.snToTrimSum.red + cc.snToTrimSum.green + cc.snToTrimSum.blue);
    276                                                      if (cc.rgbSum(ROUND_RESULT_WIDTH-1) = hi) then
    277             1                    ***0***                 cc_rgbSum <= black;
    278                                                      elsif (unsigned(cc.rgbSum(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then
    279             1                         15                 cc_rgbSum <= white;
    280                                                      else
    281             1                    ***0***                 cc_rgbSum <= std_logic_vector(cc.rgbSum(i_data_width-1 downto 0));
    282                                                      end if;
    283                                                  end if;
    284                                              end process;
    285                                              -----------------------------------------------------------------------------------------------
    286                                              -- STAGE 10
    287                                              -----------------------------------------------------------------------------------------------
    288                                              process (clk) begin
    289                                                  if rising_edge(clk) then
    290             1                         10             oRgb.red    <= cc_rgbSum;
    291             1                         10             oRgb.green  <= cc_rgbSum;
    292             1                         10             oRgb.blue   <= cc_rgbSum;
    293             1                         10             oRgb.valid  <= rgbSyncValid(9);
    294                                                  end if;
    295                                              end process;
    296                                              -----------------------------------------------------------------------------------------------
    297                                              end generate COLOR_DELAYED_ENABLED;
    298                                              -----------------------------------------------------------------------------------------------
    299                                              -----------------------------------------------------------------------------------------------
    300                                              --FILTERS: YCBCR
    301                                              -----------------------------------------------------------------------------------------------
    302                                              -----------------------------------------------------------------------------------------------
    303                                              YCBCR_FRAME_ENABLED: if (YCBCR_FRAME = true) generate
    304                                                  constant fullRange    : boolean := true;
    305                                                  signal yCbCrRgb       : uChannel := (valid => lo, red => blackUn, green => blackUn, blue => blackUn);
    306                                                  signal yCbCr128       : unsigned(i_data_width-1 downto 0);
    307                                                  signal yCbCr16        : unsigned(i_data_width-1 downto 0);
    308                                              begin
    309                                                  yCbCr128        <= shift_left(to_unsigned(one,i_data_width), i_data_width - 1);
    310                                                  yCbCr16         <= shift_left(to_unsigned(one,i_data_width), i_data_width - 4);
    311                                              -----------------------------------------------------------------------------------------------
    312                                              -- STAGE 2
    313                                              -----------------------------------------------------------------------------------------------
    314                                              process (clk) begin
    315                                                  if rising_edge(clk) then
    316                                                      cc.tpsd1.vTap0x <= rgbToFl_blu;
    317                                                      cc.tpsd2.vTap0x <= rgbToFl_gre;
    318                                                      cc.tpsd3.vTap0x <= rgbToFl_red;
    319                                                      cc.tpsd1.vTap1x <= rgbToFl_blu;
    320                                                      cc.tpsd2.vTap1x <= rgbToFl_gre;
    321                                                      cc.tpsd3.vTap1x <= rgbToFl_red;
    322                                                      cc.tpsd1.vTap2x <= rgbToFl_blu;
    323                                                      cc.tpsd2.vTap2x <= rgbToFl_gre;
    324                                                      cc.tpsd3.vTap2x <= rgbToFl_red;
    325                                                  end if;
    326                                              end process;
    327                                              -----------------------------------------------------------------------------------------------
    328                                              -- STAGE 9
    329                                              -----------------------------------------------------------------------------------------------
    330                                              process (clk)
    331                                                  variable yRound      : unsigned(i_data_width-1 downto 0);
    332                                                  variable cbRound     : unsigned(i_data_width-1 downto 0);
    333                                                  variable crRound     : unsigned(i_data_width-1 downto 0);
    334                                                  begin
    335                                                  if rising_edge(clk) then
    336                                                      if (cc.snToTrimSum.red(ROUND_RESULT_WIDTH-1) = hi)  then
    337                                                          if fullRange then
    338                                                              yRound := yCbCr16 + 1;
    339                                                          else
    340                                                              yRound := to_unsigned(1, i_data_width);
    341                                                          end if;
    342                                                      else
    343                                                          if fullRange then
    344                                                              yRound := yCbCr16;
    345                                                          else
    346                                                              yRound := (others => '0');
    347                                                          end if;
    348                                                      end if;
    349                                                      if (cc.snToTrimSum.green(ROUND_RESULT_WIDTH-1) = hi) then
    350                                                          cbRound := resize(yCbCr128+1, i_data_width);
    351                                                      else
    352                                                          cbRound := yCbCr128;
    353                                                      end if;
    354                                                      if (cc.snToTrimSum.blue(ROUND_RESULT_WIDTH-1) = hi) then
    355                                                          crRound := resize(yCbCr128+1, i_data_width);
    356                                                      else
    357                                                          crRound := yCbCr128;
    358                                                      end if;
    359                                                      ---------------------------------------------------------------------------------------
    360                                                      yCbCrRgb.red   <= (unsigned(cc.snToTrimSum.red(i_data_width-1 downto 0))) + yRound;
    361                                                      yCbCrRgb.green <= (unsigned(cc.snToTrimSum.green(i_data_width-1 downto 0))) + cbRound;
    362                                                      yCbCrRgb.blue  <= (unsigned(cc.snToTrimSum.blue(i_data_width-1 downto 0))) + crRound;
    363                                                      ---------------------------------------------------------------------------------------
    364                                                  end if;
    365                                              end process;
    366                                              -----------------------------------------------------------------------------------------------
    367                                              -- STAGE 10
    368                                              -----------------------------------------------------------------------------------------------
    369                                              process (clk) begin
    370                                                  if rising_edge(clk) then
    371                                                      oRgb.red     <= std_logic_vector(yCbCrRgb.red);
    372                                                      oRgb.green   <= std_logic_vector(yCbCrRgb.green);
    373                                                      oRgb.blue    <= std_logic_vector(yCbCrRgb.blue);
    374                                                      oRgb.valid   <=  rgbSyncValid(9);
    375                                                  end if;
    376                                              end process;
    377                                              -----------------------------------------------------------------------------------------------
    378                                              end generate YCBCR_FRAME_ENABLED;
    379                                              -----------------------------------------------------------------------------------------------
    380                                              -----------------------------------------------------------------------------------------------
    381                                              --FILTERS: CGAIN
    382                                              -----------------------------------------------------------------------------------------------
    383                                              -----------------------------------------------------------------------------------------------
    384                                              CGAIN_FRAME_ENABLED: if (CGAIN_FRAME = true) generate
    385                                                  signal cGain : channel := (valid => lo, red => black, green => black, blue => black);
    386                                              begin
    387                                              -----------------------------------------------------------------------------------------------
    388                                              -- STAGE 2
    389                                              -----------------------------------------------------------------------------------------------
    390                                              process (clk) begin
    391                                                  if rising_edge(clk) then
    392             1                          1             cc.tpsd1.vTap0x <= rgbToFl_blu;
    393             1                          1             cc.tpsd2.vTap0x <= rgbToFl_gre;
    394             1                          1             cc.tpsd3.vTap0x <= rgbToFl_red;
    395             1                          1             cc.tpsd1.vTap1x <= rgbToFl_blu;
    396             1                          1             cc.tpsd2.vTap1x <= rgbToFl_gre;
    397             1                          1             cc.tpsd3.vTap1x <= rgbToFl_red;
    398             1                          1             cc.tpsd1.vTap2x <= rgbToFl_blu;
    399             1                          1             cc.tpsd2.vTap2x <= rgbToFl_gre;
    400             1                          1             cc.tpsd3.vTap2x <= rgbToFl_red;
    401                                                  end if;
    402                                              end process;
    403                                              -----------------------------------------------------------------------------------------------
    404                                              -- STAGE 9
    405                                              -----------------------------------------------------------------------------------------------
    406                                              process (clk) begin
    407                                                  if rising_edge(clk) then
    408                                                      if (cc.snToTrimSum.red(ROUND_RESULT_WIDTH-1) = hi) then	
    409             1                    ***0***                 cGain.red <= black;
    410                                                      elsif (unsigned(cc.snToTrimSum.red(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then	
    411             1                          2                 cGain.red <= white;
    412                                                      else
    413             1                    ***0***                 cGain.red <= std_logic_vector(cc.snToTrimSum.red(i_data_width-1 downto 0));
    414                                                      end if;
    415                                                      if (cc.snToTrimSum.green(ROUND_RESULT_WIDTH-1) = hi) then
    416             1                    ***0***                 cGain.green <= black;
    417                                                      elsif (unsigned(cc.snToTrimSum.green(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then
    418             1                          2                 cGain.green <= white;
    419                                                      else
    420             1                    ***0***                 cGain.green <= std_logic_vector(cc.snToTrimSum.green(i_data_width-1 downto 0));
    421                                                      end if;
    422                                                      if (cc.snToTrimSum.blue(ROUND_RESULT_WIDTH-1) = hi) then
    423             1                    ***0***                 cGain.blue <= black;
    424                                                      elsif (unsigned(cc.snToTrimSum.blue(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then
    425             1                          2                 cGain.blue <= white;
    426                                                      else
    427             1                    ***0***                 cGain.blue <= std_logic_vector(cc.snToTrimSum.blue(i_data_width-1 downto 0));
    428                                                      end if;
    429                                                  end if;
    430                                              end process;
    431                                              -----------------------------------------------------------------------------------------------
    432                                              -- STAGE 10
    433                                              -----------------------------------------------------------------------------------------------
    434                                              process (clk) begin
    435                                                  if rising_edge(clk) then
    436             1                          4             oRgb.red    <= cGain.red;
    437             1                          4             oRgb.green  <= cGain.green;
    438             1                          4             oRgb.blue   <= cGain.blue;
    439             1                          4             oRgb.valid  <=  rgbSyncValid(9);
    440                                                  end if;
    441                                              end process;
    442                                              -----------------------------------------------------------------------------------------------
    443                                              end generate CGAIN_FRAME_ENABLED;
    444                                              -----------------------------------------------------------------------------------------------
    445                                              -----------------------------------------------------------------------------------------------
    446                                              --VALID DELAYS
    447                                              -----------------------------------------------------------------------------------------------
    448                                              -----------------------------------------------------------------------------------------------
    449                                              process (clk) begin
    450                                                  if rising_edge(clk) then
    451             1                      64560             rgbSyncValid(0)  <= iRgb.valid;
    452             1                      64560             rgbSyncValid(1)  <= rgbSyncValid(0);
    453             1                      64560             rgbSyncValid(2)  <= rgbSyncValid(1);
    454             1                      64560             rgbSyncValid(3)  <= rgbSyncValid(2);
    455             1                      64560             rgbSyncValid(4)  <= rgbSyncValid(3);
    456             1                      64560             rgbSyncValid(5)  <= rgbSyncValid(4);
    457             1                      64560             rgbSyncValid(6)  <= rgbSyncValid(5);
    458             1                      64560             rgbSyncValid(7)  <= rgbSyncValid(6);
    459             1                      64560             rgbSyncValid(8)  <= rgbSyncValid(7);
    460             1                      64560             rgbSyncValid(9)  <= rgbSyncValid(8);
    461             1                      64560             rgbSyncValid(10) <= rgbSyncValid(9);
    462             1                      64560             rgbSyncValid(11) <= rgbSyncValid(10);
    463             1                      64560             rgbSyncValid(12) <= rgbSyncValid(11);
    464             1                      64560             rgbSyncValid(13) <= rgbSyncValid(12);
    465             1                      64560             rgbSyncValid(14) <= rgbSyncValid(13);
    466             1                      64560             rgbSyncValid(15) <= rgbSyncValid(14);

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        24        16         8      66.6

================================Branch Details================================

Branch Coverage for Design Unit work.kernelcore(behavioral)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/KernelCore.vhd
------------------------------------IF Branch------------------------------------
    172                                    64560     Count coming in to IF
    172             1                      64560         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    188                                    64560     Count coming in to IF
    188             1                      64560         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    204                                        6     Count coming in to IF
    204             1                          6         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    220                                        6     Count coming in to IF
    220             1                          6         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    236                                       12     Count coming in to IF
    236             1                         12         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    255                                        5     Count coming in to IF
    255             1                          5         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    274                                       15     Count coming in to IF
    274             1                         15         if rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    276                                       15     Count coming in to IF
    276             1                    ***0***             if (cc.rgbSum(ROUND_RESULT_WIDTH-1) = hi) then
    278             1                         15             elsif (unsigned(cc.rgbSum(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then
    280             1                    ***0***             else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    289                                       10     Count coming in to IF
    289             1                         10         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    391                                        1     Count coming in to IF
    391             1                          1         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    407                                        2     Count coming in to IF
    407             1                          2         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    408                                        2     Count coming in to IF
    408             1                    ***0***             if (cc.snToTrimSum.red(ROUND_RESULT_WIDTH-1) = hi) then	
    410             1                          2             elsif (unsigned(cc.snToTrimSum.red(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then	
    412             1                    ***0***             else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    415                                        2     Count coming in to IF
    415             1                    ***0***             if (cc.snToTrimSum.green(ROUND_RESULT_WIDTH-1) = hi) then
    417             1                          2             elsif (unsigned(cc.snToTrimSum.green(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then
    419             1                    ***0***             else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    422                                        2     Count coming in to IF
    422             1                    ***0***             if (cc.snToTrimSum.blue(ROUND_RESULT_WIDTH-1) = hi) then
    424             1                          2             elsif (unsigned(cc.snToTrimSum.blue(ROUND_RESULT_WIDTH-2 downto i_data_width)) /= zero) then
    426             1                    ***0***             else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    435                                        4     Count coming in to IF
    435             1                          4         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    450                                    64560     Count coming in to IF
    450             1                      64560         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.mwrrd(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           98        98         0     100.0

================================Statement Details================================

Statement Coverage for Design Unit work.mwrrd(behavioral) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/mWrRd.vhd
    36                                               architecture Behavioral of mWrRd is
    37                                               begin
    38              1                          2         oRgbOsharp              <= wrRegsIn.cfigReg0;
    39              1                          2         oEdgeType               <= wrRegsIn.cfigReg1;
    40              1                          2         aBusSelect              <= wrRegsIn.cfigReg3;
    41              1                          2         threshold               <= wrRegsIn.cfigReg4(s_data_width -1 downto 0);
    42              1                          2         videoChannel            <= wrRegsIn.cfigReg5;
    43              1                          2         dChannel                <= wrRegsIn.cfigReg6;
    44              1                          2         cChannel                <= wrRegsIn.cfigReg7;
    45              1                          2         kls.k1                  <= wrRegsIn.cfigReg8;
    46              1                          2         kls.k2                  <= wrRegsIn.cfigReg9;
    47              1                          2         kls.k3                  <= wrRegsIn.cfigReg10;
    48              1                          2         kls.k4                  <= wrRegsIn.cfigReg11;
    49              1                          2         kls.k5                  <= wrRegsIn.cfigReg12;
    50              1                          2         kls.k6                  <= wrRegsIn.cfigReg13;
    51              1                          2         kls.k7                  <= wrRegsIn.cfigReg14;
    52              1                          2         kls.k8                  <= wrRegsIn.cfigReg15;
    53              1                          2         kls.k9                  <= wrRegsIn.cfigReg16;
    54              1                          2         kls.config              <= to_integer(unsigned(wrRegsIn.cfigReg17));
    55              1                          2         als.k1                  <= wrRegsIn.cfigReg21;
    56              1                          2         als.k2                  <= wrRegsIn.cfigReg22;
    57              1                          2         als.k3                  <= wrRegsIn.cfigReg23;
    58              1                          2         als.k4                  <= wrRegsIn.cfigReg24;
    59              1                          2         als.k5                  <= wrRegsIn.cfigReg25;
    60              1                          2         als.k6                  <= wrRegsIn.cfigReg26;
    61              1                          2         als.k7                  <= wrRegsIn.cfigReg27;
    62              1                          2         als.k8                  <= wrRegsIn.cfigReg28;
    63              1                          2         als.k9                  <= wrRegsIn.cfigReg29;
    64              1                          2         als.config              <= to_integer(unsigned(wrRegsIn.cfigReg30));
    65              1                          2         pRegion.pointInterest   <= to_integer(unsigned(wrRegsIn.cfigReg31(s_data_width -1 downto 0)));--set the point
    66              1                          2         pRegion.deltaConfig     <= to_integer(unsigned(wrRegsIn.cfigReg32(s_data_width -1 downto 0)));--set the point delta
    67              1                          2         pRegion.cpuAckGoAgain   <= wrRegsIn.cfigReg33(0);
    68              1                          2         pRegion.cpuWgridLock    <= wrRegsIn.cfigReg34(0);
    69              1                          2         pRegion.cpuAckoffFrame  <= wrRegsIn.cfigReg35(0);
    70              1                          2         pRegion.fifoReadAddress <= wrRegsIn.cfigReg36(13 downto 0);--fifo read address location upto cpuGridCont[Max-Locations]
    71              1                          2         pRegion.fifoReadEnable  <= wrRegsIn.cfigReg36(16);--fifo read enable
    72              1                          2         pRegion.clearFifoData   <= wrRegsIn.cfigReg37(0);--clear the fifo
    73              1                          2         rgbCoord.rl             <= wrRegsIn.cfigReg50(7 downto 0);
    74              1                          2         rgbCoord.rh             <= wrRegsIn.cfigReg51(7 downto 0);
    75              1                          2         rgbCoord.gl             <= wrRegsIn.cfigReg52(7 downto 0);
    76              1                          2         rgbCoord.gh             <= wrRegsIn.cfigReg53(7 downto 0);
    77              1                          2         rgbCoord.bl             <= wrRegsIn.cfigReg54(7 downto 0);
    78              1                          2         rgbCoord.bh             <= wrRegsIn.cfigReg55(7 downto 0);
    79              1                          2         oLumTh                  <= to_integer(unsigned(wrRegsIn.cfigReg56));
    80              1                          2         oHsvPerCh               <= to_integer(unsigned(wrRegsIn.cfigReg57));
    81              1                          2         oYccPerCh               <= to_integer(unsigned(wrRegsIn.cfigReg58));
    82              1                          2         rdRegsOut.cfigReg0      <= wrRegsIn.cfigReg0;
    83              1                          2         rdRegsOut.cfigReg1      <= wrRegsIn.cfigReg1;
    84              1                          2         rdRegsOut.cfigReg2      <= wrRegsIn.cfigReg2;
    85              1                          2         rdRegsOut.cfigReg3      <= wrRegsIn.cfigReg3;
    86              1                          2         rdRegsOut.cfigReg4      <= wrRegsIn.cfigReg4;
    87              1                          2         rdRegsOut.cfigReg5      <= wrRegsIn.cfigReg5;
    88              1                          2         rdRegsOut.cfigReg6      <= wrRegsIn.cfigReg6;
    89              1                          2         rdRegsOut.cfigReg7      <= wrRegsIn.cfigReg7;
    90              1                          2         rdRegsOut.cfigReg8      <= wrRegsIn.cfigReg8;
    91              1                          2         rdRegsOut.cfigReg9      <= wrRegsIn.cfigReg9;
    92              1                          2         rdRegsOut.cfigReg10     <= wrRegsIn.cfigReg10;
    93              1                          2         rdRegsOut.cfigReg11     <= wrRegsIn.cfigReg11;
    94              1                          2         rdRegsOut.cfigReg12     <= wrRegsIn.cfigReg12;
    95              1                          2         rdRegsOut.cfigReg13     <= wrRegsIn.cfigReg13;
    96              1                          2         rdRegsOut.cfigReg14     <= wrRegsIn.cfigReg14;
    97              1                          2         rdRegsOut.cfigReg15     <= wrRegsIn.cfigReg15;
    98              1                          2         rdRegsOut.cfigReg16     <= wrRegsIn.cfigReg16;
    99              1                          2         rdRegsOut.cfigReg17     <= wrRegsIn.cfigReg17;
    100             1                          2         rdRegsOut.cfigReg28     <= wrRegsIn.cfigReg28;
    101             1                          2         rdRegsOut.cfigReg29     <= wrRegsIn.cfigReg29;
    102             1                          2         rdRegsOut.cfigReg30     <= wrRegsIn.cfigReg30;
    103             1                          2         rdRegsOut.cfigReg31     <= wrRegsIn.cfigReg31;
    104             1                          2         rdRegsOut.cfigReg32     <= wrRegsIn.cfigReg32;
    105             1                          2         rdRegsOut.cfigReg33     <= wrRegsIn.cfigReg33;
    106             1                          2         rdRegsOut.cfigReg34     <= wrRegsIn.cfigReg34;
    107             1                          2         rdRegsOut.cfigReg35     <= wrRegsIn.cfigReg35;
    108             1                          2         rdRegsOut.cfigReg36     <= x"0000" & "00" & wrRegsIn.cfigReg36(13 downto 0);
    109             1                          2         rdRegsOut.cfigReg37     <= wrRegsIn.cfigReg37;
    110             1                          2         rdRegsOut.cfigReg38     <= gridLockDatao;
    111             1                          2         rdRegsOut.cfigReg39     <= x"000000" & "0000000" & fifoStatus(0);--fifoFullh
    112             1                          3         rdRegsOut.cfigReg40     <= x"000000" & "0000000" & fifoStatus(1);--fifoEmptyh
    113             1                          2         rdRegsOut.cfigReg41     <= x"000000" & "0000000" & fifoStatus(2);--fifoFullh
    114             1                          1         rdRegsOut.cfigReg42     <= x"000000" & fifoStatus(23 downto 16);--cpuGridCont
    115             1                          2         rdRegsOut.cfigReg43     <= wrRegsIn.cfigReg43;
    116             1                          2         rdRegsOut.cfigReg44     <= wrRegsIn.cfigReg44;
    117             1                          2         rdRegsOut.cfigReg45     <= wrRegsIn.cfigReg45;
    118             1                          2         rdRegsOut.cfigReg46     <= wrRegsIn.cfigReg46;
    119             1                          2         rdRegsOut.cfigReg47     <= wrRegsIn.cfigReg47;
    120             1                          2         rdRegsOut.cfigReg48     <= wrRegsIn.cfigReg48;
    121             1                          2         rdRegsOut.cfigReg49     <= wrRegsIn.cfigReg49;
    122             1                          2         rdRegsOut.cfigReg50     <= wrRegsIn.cfigReg50;
    123             1                          2         rdRegsOut.cfigReg51     <= wrRegsIn.cfigReg51;
    124             1                          2         rdRegsOut.cfigReg52     <= wrRegsIn.cfigReg52;
    125             1                          2         rdRegsOut.cfigReg53     <= wrRegsIn.cfigReg53;
    126             1                          2         rdRegsOut.cfigReg54     <= wrRegsIn.cfigReg54;
    127             1                          2         rdRegsOut.cfigReg55     <= wrRegsIn.cfigReg55;
    128             1                          2         rdRegsOut.cfigReg56     <= wrRegsIn.cfigReg56;
    129             1                          2         rdRegsOut.cfigReg57     <= wrRegsIn.cfigReg57;
    130             1                          2         rdRegsOut.cfigReg58     <= wrRegsIn.cfigReg58;
    131             1                          2         rdRegsOut.cfigReg59     <= wrRegsIn.cfigReg59;
    132             1                          2         rdRegsOut.cfigReg60     <= x"000000" & "00" & seconds;
    133             1                          2         rdRegsOut.cfigReg61     <= x"000000" & "00" & minutes;
    134             1                          2         rdRegsOut.cfigReg62     <= x"000000" & "000" & hours;
    135             1                          1         rdRegsOut.cfigReg63     <= revision_number;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.pixel_cord(rtl)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           97        22        75      22.6

================================Statement Details================================

Statement Coverage for Design Unit work.pixel_cord(rtl) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/pixel_Cord.vhd
    24                                               architecture rtl of pixel_Cord is
    25                                                   signal iCord           : cord;
    26                                                   signal oRgb            : channel;
    27                                                   signal iRgb            : channel;
    28                                                   signal frameSize       : intersectPoint;
    29                                                   signal initCord        : intersectPoint;
    30                                                   signal newCord         : intersectPoint;
    31                                                   signal grid1Cord       : intersectPoint;
    32                                                   signal grid2Cord       : intersectPoint;
    33                                                   signal grid3Cord       : intersectPoint;
    34                                                   signal grid4Cord       : intersectPoint;
    35                                                   signal rgb             : channel;
    36                                               begin
    37              1                          1         iCord.x         <= iX;
    38              1                          1         iCord.y         <= iY;
    39                                                   
    40              1                          1         iRgb.red         <= iRed;
    41              1                          1         iRgb.green       <= iGreen;
    42              1                          1         iRgb.blue        <= iBlue;
    43              1                          1         iRgb.valid       <= iValid;
    44                                                   
    45              1                          1         oRed             <= oRgb.red;
    46              1                          1         oGreen           <= oRgb.green;
    47              1                          1         oBlue            <= oRgb.blue;
    48              1                          2         oValid           <= oRgb.valid;
    49                                                   
    50                                                   
    51              1                          1         initCord.rht   <= initCordValueRht;
    52              1                          1         initCord.lft   <= initCordValueLft;
    53              1                          1         initCord.top   <= initCordValueTop;
    54              1                          1         initCord.bot   <= initCordValueBot;
    55              1                          1         frameSize.lft  <= frameSizeLft;
    56              1                          1         frameSize.rht  <= frameSizeRht;
    57              1                          1         frameSize.top  <= frameSizeTop;
    58              1                          1         frameSize.bot  <= frameSizeBot;
    59                                               dataOutP: process (clk)begin
    60                                                   if rising_edge(clk) then
    61              1                          1             oRgb.valid  <= iRgb.valid;
    62              1                          1             oRgb.red    <= rgb.red;
    63              1                          1             oRgb.green  <= rgb.green;
    64              1                          1             oRgb.blue   <= rgb.blue;
    65                                                   end if;
    66                                               end process dataOutP;
    67                                               pixelCordP: process (clk)begin
    68                                                   if rising_edge(clk) then
    69                                                       if (iRgb.valid = hi) then
    70                                                           ------------------------------------
    71                                                           if (iPixelEn = hi) then 
    72                                                               ------------------------------------
    73                                                               --Left Coordinates
    74                                                               ------------------------------------
    75                                                               if (iCord.x <= newCord.lft) then
    76                                                                   if ( iCord.x >= frameSize.lft) then 
    77              1                    ***0***                             newCord.lft <= iCord.x - 1;
    78                                                                   end if;   
    79                                                               end if;
    80                                                               ------------------------------------
    81                                                               --Right Coordinates
    82                                                               ------------------------------------
    83                                                               if (iCord.x >= newCord.rht) then
    84                                                                   if ( iCord.x <= frameSize.rht) then 
    85              1                    ***0***                             newCord.rht <= iCord.x + 1;
    86                                                                   end if;   
    87                                                               end if;
    88                                                               ------------------------------------
    89                                                               --Top Coordinates
    90                                                               ------------------------------------
    91                                                               if (iCord.y <= newCord.top) then
    92                                                                   if ( iCord.y >= frameSize.top) then 
    93              1                    ***0***                             newCord.top <= iCord.y - 1;
    94                                                                   end if;   
    95                                                               end if;
    96                                                               ------------------------------------
    97                                                               --Bottom Coordinates
    98                                                               ------------------------------------
    99                                                               if (iCord.y >= newCord.bot) then
    100                                                                  if ( iCord.y <= frameSize.bot) then 
    101             1                    ***0***                             newCord.bot <= iCord.y + 1;
    102                                                                  end if;   
    103                                                              end if;
    104                                                          end if;--iPixelEn
    105                                                          ------------------------------------
    106                                                          -- 4TH FRAME
    107                                                          ------------------------------------
    108                                                          if ((iCord.y = grid4Cord.bot) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    109             1                    ***0***                     rgb.red        <= white;
    110             1                    ***0***                     rgb.green      <= black;
    111             1                    ***0***                     rgb.blue       <= black;
    112                                                          elsif ((iCord.y = grid4Cord.top) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    113             1                    ***0***                     rgb.red        <= white;
    114             1                    ***0***                     rgb.green      <= black;
    115             1                    ***0***                     rgb.blue       <= black;
    116                                                          elsif ((iCord.x = grid4Cord.lft) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    117             1                    ***0***                     rgb.red        <= white;
    118             1                    ***0***                     rgb.green      <= black;
    119             1                    ***0***                     rgb.blue       <= black;
    120                                                          elsif ((iCord.x = grid4Cord.rht) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    121             1                    ***0***                     rgb.red        <= white;
    122             1                    ***0***                     rgb.green      <= black;
    123             1                    ***0***                     rgb.blue       <= black;
    124                                                          ------------------------------------
    125                                                         -- 3RD FRAME
    126                                                          ------------------------------------
    127                                                          elsif ((iCord.y = grid3Cord.bot) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    128             1                    ***0***                     rgb.red        <= black;
    129             1                    ***0***                     rgb.green      <= white;
    130             1                    ***0***                     rgb.blue       <= black;
    131                                                          elsif ((iCord.y = grid3Cord.top) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    132             1                    ***0***                     rgb.red        <= black;
    133             1                    ***0***                     rgb.green      <= white;
    134             1                    ***0***                     rgb.blue       <= black;
    135                                                          elsif ((iCord.x = grid3Cord.lft) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    136             1                    ***0***                     rgb.red        <= black;
    137             1                    ***0***                     rgb.green      <= white;
    138             1                    ***0***                     rgb.blue       <= black;
    139                                                          elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    140             1                    ***0***                     rgb.red        <= black;
    141             1                    ***0***                     rgb.green      <= white;
    142             1                    ***0***                     rgb.blue       <= black;
    143                                                          ------------------------------------
    144                                                          -- 2ND FRAME
    145                                                          ------------------------------------
    146                                                          elsif ((iCord.y = grid2Cord.bot) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    147             1                    ***0***                     rgb.red        <= black;
    148             1                    ***0***                     rgb.green      <= black;
    149             1                    ***0***                     rgb.blue       <= white;
    150                                                          elsif ((iCord.y = grid2Cord.top) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    151             1                    ***0***                     rgb.red        <= black;
    152             1                    ***0***                     rgb.green      <= black;
    153             1                    ***0***                     rgb.blue       <= white;
    154                                                          elsif ((iCord.x = grid2Cord.lft) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    155             1                    ***0***                     rgb.red        <= black;
    156             1                    ***0***                     rgb.green      <= black;
    157             1                    ***0***                     rgb.blue       <= white;
    158                                                          elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    159             1                    ***0***                     rgb.red        <= black;
    160             1                    ***0***                     rgb.green      <= black;
    161             1                    ***0***                     rgb.blue       <= white;
    162                                                          ------------------------------------
    163                                                          -- 1ST FRAME
    164                                                          ------------------------------------
    165                                                          elsif ((iCord.y = grid1Cord.bot) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    166             1                    ***0***                     rgb.red        <= x"80";
    167             1                    ***0***                     rgb.green      <= black;
    168             1                    ***0***                     rgb.blue       <= x"80";
    169                                                          elsif ((iCord.y = grid1Cord.top) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    170             1                    ***0***                     rgb.red        <= x"80";
    171             1                    ***0***                     rgb.green      <= black;
    172             1                    ***0***                     rgb.blue       <= x"80";
    173                                                          elsif ((iCord.x = grid1Cord.lft) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    174             1                    ***0***                     rgb.red        <= x"80";
    175             1                    ***0***                     rgb.green      <= black;
    176             1                    ***0***                     rgb.blue       <= x"80";
    177                                                          elsif ((iCord.x = grid1Cord.rht) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    178             1                    ***0***                     rgb.red        <= x"80";
    179             1                    ***0***                     rgb.green      <= black;
    180             1                    ***0***                     rgb.blue       <= x"80";
    181                                                          else
    182             1                    ***0***                     rgb.red        <= iRgb.red;
    183             1                    ***0***                     rgb.green      <= iRgb.green;
    184             1                    ***0***                     rgb.blue       <= iRgb.blue;
    185                                                          end if;
    186                                                      end if;--iRgb.valid
    187                                                      if (iEof = hi)then
    188                                                          --RESET COORDINATES TO DEFAULT
    189             1                    ***0***                 newCord.lft       <= initCord.lft;
    190             1                    ***0***                 newCord.rht       <= initCord.rht;
    191             1                    ***0***                 newCord.top       <= initCord.top;
    192             1                    ***0***                 newCord.bot       <= initCord.bot;
    193                                                          -- 1ST FRAME
    194             1                    ***0***                 grid1Cord.lft     <= newCord.lft;
    195             1                    ***0***                 grid1Cord.rht     <= newCord.rht;
    196             1                    ***0***                 grid1Cord.top     <= newCord.top;
    197             1                    ***0***                 grid1Cord.bot     <= newCord.bot;
    198                                                          -- 2ND FRAME
    199             1                    ***0***                 grid2Cord.lft     <= grid1Cord.lft;
    200             1                    ***0***                 grid2Cord.rht     <= grid1Cord.rht;
    201             1                    ***0***                 grid2Cord.top     <= grid1Cord.top;
    202             1                    ***0***                 grid2Cord.bot     <= grid1Cord.bot;
    203                                                          -- 3RD FRAME
    204             1                    ***0***                 grid3Cord.lft     <= grid2Cord.lft;
    205             1                    ***0***                 grid3Cord.rht     <= grid2Cord.rht;
    206             1                    ***0***                 grid3Cord.top     <= grid2Cord.top;
    207             1                    ***0***                 grid3Cord.bot     <= grid2Cord.bot;
    208                                                          -- 4TH FRAME
    209             1                    ***0***                 grid4Cord.lft     <= grid3Cord.lft;
    210             1                    ***0***                 grid4Cord.rht     <= grid3Cord.rht;
    211             1                    ***0***                 grid4Cord.top     <= grid3Cord.top;
    212             1                    ***0***                 grid4Cord.bot     <= grid3Cord.bot;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        41         4        37       9.7

================================Branch Details================================

Branch Coverage for Design Unit work.pixel_cord(rtl)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/pixel_Cord.vhd
------------------------------------IF Branch------------------------------------
    60                                         1     Count coming in to IF
    60              1                          1         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    68                                         1     Count coming in to IF
    68              1                          1         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    69                                         1     Count coming in to IF
    69              1                    ***0***             if (iRgb.valid = hi) then
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    71                                   ***0***     Count coming in to IF
    71              1                    ***0***                 if (iPixelEn = hi) then 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    75                                   ***0***     Count coming in to IF
    75              1                    ***0***                     if (iCord.x <= newCord.lft) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    76                                   ***0***     Count coming in to IF
    76              1                    ***0***                         if ( iCord.x >= frameSize.lft) then 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    83                                   ***0***     Count coming in to IF
    83              1                    ***0***                     if (iCord.x >= newCord.rht) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    84                                   ***0***     Count coming in to IF
    84              1                    ***0***                         if ( iCord.x <= frameSize.rht) then 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    91                                   ***0***     Count coming in to IF
    91              1                    ***0***                     if (iCord.y <= newCord.top) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    92                                   ***0***     Count coming in to IF
    92              1                    ***0***                         if ( iCord.y >= frameSize.top) then 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    99                                   ***0***     Count coming in to IF
    99              1                    ***0***                     if (iCord.y >= newCord.bot) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    100                                  ***0***     Count coming in to IF
    100             1                    ***0***                         if ( iCord.y <= frameSize.bot) then 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    108                                  ***0***     Count coming in to IF
    108             1                    ***0***                 if ((iCord.y = grid4Cord.bot) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    112             1                    ***0***                 elsif ((iCord.y = grid4Cord.top) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    116             1                    ***0***                 elsif ((iCord.x = grid4Cord.lft) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    120             1                    ***0***                 elsif ((iCord.x = grid4Cord.rht) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    127             1                    ***0***                 elsif ((iCord.y = grid3Cord.bot) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    131             1                    ***0***                 elsif ((iCord.y = grid3Cord.top) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    135             1                    ***0***                 elsif ((iCord.x = grid3Cord.lft) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    139             1                    ***0***                 elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    146             1                    ***0***                 elsif ((iCord.y = grid2Cord.bot) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    150             1                    ***0***                 elsif ((iCord.y = grid2Cord.top) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    154             1                    ***0***                 elsif ((iCord.x = grid2Cord.lft) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    158             1                    ***0***                 elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    165             1                    ***0***                 elsif ((iCord.y = grid1Cord.bot) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    169             1                    ***0***                 elsif ((iCord.y = grid1Cord.top) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    173             1                    ***0***                 elsif ((iCord.x = grid1Cord.lft) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    177             1                    ***0***                 elsif ((iCord.x = grid1Cord.rht) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    181             1                    ***0***                 else
Branch totals: 0 hits of 17 branches = 0.0%

------------------------------------IF Branch------------------------------------
    187                                        1     Count coming in to IF
    187             1                    ***0***             if (iEof = hi)then
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms             48         0        48       0.0

================================Condition Details================================

Condition Coverage for Design Unit work.pixel_cord(rtl) --

  File ../../uvmtb/dut/pixel_Cord.vhd
----------------Focused Condition View-------------------
Line       108 Item    1  ((iCord.y = grid4Cord.bot) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid4Cord.bot)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid4Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid4Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid4Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid4Cord.bot)_1   ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid4Cord.lft)_0  (iCord.y = grid4Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid4Cord.lft)_1  (iCord.y = grid4Cord.bot) && (iCord.x <= grid4Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid4Cord.rht)_0  (iCord.y = grid4Cord.bot) && (iCord.x >= grid4Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid4Cord.rht)_1  (iCord.y = grid4Cord.bot) && (iCord.x >= grid4Cord.lft)

----------------Focused Condition View-------------------
Line       112 Item    1  ((iCord.y = grid4Cord.top) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid4Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid4Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid4Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid4Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid4Cord.top)_1   ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid4Cord.lft)_0  (iCord.y = grid4Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid4Cord.lft)_1  (iCord.y = grid4Cord.top) && (iCord.x <= grid4Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid4Cord.rht)_0  (iCord.y = grid4Cord.top) && (iCord.x >= grid4Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid4Cord.rht)_1  (iCord.y = grid4Cord.top) && (iCord.x >= grid4Cord.lft)

----------------Focused Condition View-------------------
Line       116 Item    1  ((iCord.x = grid4Cord.lft) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid4Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid4Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid4Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid4Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid4Cord.lft)_1   ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid4Cord.top)_0  (iCord.x = grid4Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid4Cord.top)_1  (iCord.x = grid4Cord.lft) && (iCord.y <= grid4Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid4Cord.bot)_0  (iCord.x = grid4Cord.lft) && (iCord.y >= grid4Cord.top)
  Row   6:    ***0***  (iCord.y <= grid4Cord.bot)_1  (iCord.x = grid4Cord.lft) && (iCord.y >= grid4Cord.top)

----------------Focused Condition View-------------------
Line       120 Item    1  ((iCord.x = grid4Cord.rht) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid4Cord.rht)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid4Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid4Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid4Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid4Cord.rht)_1   ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid4Cord.top)_0  (iCord.x = grid4Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid4Cord.top)_1  (iCord.x = grid4Cord.rht) && (iCord.y <= grid4Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid4Cord.bot)_0  (iCord.x = grid4Cord.rht) && (iCord.y >= grid4Cord.top)
  Row   6:    ***0***  (iCord.y <= grid4Cord.bot)_1  (iCord.x = grid4Cord.rht) && (iCord.y >= grid4Cord.top)

----------------Focused Condition View-------------------
Line       127 Item    1  ((iCord.y = grid3Cord.bot) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid3Cord.bot)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid3Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid3Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid3Cord.bot)_1   ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid3Cord.lft)_0  (iCord.y = grid3Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid3Cord.lft)_1  (iCord.y = grid3Cord.bot) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid3Cord.bot) && (iCord.x >= grid3Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid3Cord.bot) && (iCord.x >= grid3Cord.lft)

----------------Focused Condition View-------------------
Line       131 Item    1  ((iCord.y = grid3Cord.top) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid3Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid3Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid3Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid3Cord.top)_1   ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid3Cord.lft)_0  (iCord.y = grid3Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid3Cord.lft)_1  (iCord.y = grid3Cord.top) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid3Cord.top) && (iCord.x >= grid3Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid3Cord.top) && (iCord.x >= grid3Cord.lft)

----------------Focused Condition View-------------------
Line       135 Item    1  ((iCord.x = grid3Cord.lft) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid3Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid3Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid3Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid3Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid3Cord.lft)_1   ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid3Cord.top)_0  (iCord.x = grid3Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid3Cord.top)_1  (iCord.x = grid3Cord.lft) && (iCord.y <= grid3Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid3Cord.bot)_0  (iCord.x = grid3Cord.lft) && (iCord.y >= grid3Cord.top)
  Row   6:    ***0***  (iCord.y <= grid3Cord.bot)_1  (iCord.x = grid3Cord.lft) && (iCord.y >= grid3Cord.top)

----------------Focused Condition View-------------------
Line       139 Item    1  ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid3Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid3Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid3Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid3Cord.rht)_1   ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid3Cord.top)_0  (iCord.x = grid3Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid3Cord.top)_1  (iCord.x = grid3Cord.rht) && (iCord.y <= grid3Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid3Cord.bot)_0  (iCord.x = grid3Cord.rht) && (iCord.y >= grid3Cord.top)
  Row   6:    ***0***  (iCord.y <= grid3Cord.bot)_1  (iCord.x = grid3Cord.rht) && (iCord.y >= grid3Cord.top)

----------------Focused Condition View-------------------
Line       146 Item    1  ((iCord.y = grid2Cord.bot) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid2Cord.bot)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid2Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid2Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid2Cord.bot)_1   ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid2Cord.lft)_0  (iCord.y = grid2Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid2Cord.lft)_1  (iCord.y = grid2Cord.bot) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid2Cord.bot) && (iCord.x >= grid2Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid2Cord.bot) && (iCord.x >= grid2Cord.lft)

----------------Focused Condition View-------------------
Line       150 Item    1  ((iCord.y = grid2Cord.top) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid2Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid2Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid2Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid2Cord.top)_1   ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid2Cord.lft)_0  (iCord.y = grid2Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid2Cord.lft)_1  (iCord.y = grid2Cord.top) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid2Cord.top) && (iCord.x >= grid2Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid2Cord.top) && (iCord.x >= grid2Cord.lft)

----------------Focused Condition View-------------------
Line       154 Item    1  ((iCord.x = grid2Cord.lft) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid2Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid2Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid2Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid2Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid2Cord.lft)_1   ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid2Cord.top)_0  (iCord.x = grid2Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid2Cord.top)_1  (iCord.x = grid2Cord.lft) && (iCord.y <= grid2Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid2Cord.bot)_0  (iCord.x = grid2Cord.lft) && (iCord.y >= grid2Cord.top)
  Row   6:    ***0***  (iCord.y <= grid2Cord.bot)_1  (iCord.x = grid2Cord.lft) && (iCord.y >= grid2Cord.top)

----------------Focused Condition View-------------------
Line       158 Item    1  ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid2Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid2Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid3Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid3Cord.rht)_1   ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid2Cord.top)_0  (iCord.x = grid3Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid2Cord.top)_1  (iCord.x = grid3Cord.rht) && (iCord.y <= grid2Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid2Cord.bot)_0  (iCord.x = grid3Cord.rht) && (iCord.y >= grid2Cord.top)
  Row   6:    ***0***  (iCord.y <= grid2Cord.bot)_1  (iCord.x = grid3Cord.rht) && (iCord.y >= grid2Cord.top)

----------------Focused Condition View-------------------
Line       165 Item    1  ((iCord.y = grid1Cord.bot) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid1Cord.bot)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid1Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid1Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid1Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid1Cord.bot)_1   ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid1Cord.lft)_0  (iCord.y = grid1Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid1Cord.lft)_1  (iCord.y = grid1Cord.bot) && (iCord.x <= grid1Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid1Cord.rht)_0  (iCord.y = grid1Cord.bot) && (iCord.x >= grid1Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid1Cord.rht)_1  (iCord.y = grid1Cord.bot) && (iCord.x >= grid1Cord.lft)

----------------Focused Condition View-------------------
Line       169 Item    1  ((iCord.y = grid1Cord.top) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid1Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid1Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid1Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid1Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid1Cord.top)_1   ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid1Cord.lft)_0  (iCord.y = grid1Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid1Cord.lft)_1  (iCord.y = grid1Cord.top) && (iCord.x <= grid1Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid1Cord.rht)_0  (iCord.y = grid1Cord.top) && (iCord.x >= grid1Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid1Cord.rht)_1  (iCord.y = grid1Cord.top) && (iCord.x >= grid1Cord.lft)

----------------Focused Condition View-------------------
Line       173 Item    1  ((iCord.x = grid1Cord.lft) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid1Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid1Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid1Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid1Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid1Cord.lft)_1   ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid1Cord.top)_0  (iCord.x = grid1Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid1Cord.top)_1  (iCord.x = grid1Cord.lft) && (iCord.y <= grid1Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid1Cord.bot)_0  (iCord.x = grid1Cord.lft) && (iCord.y >= grid1Cord.top)
  Row   6:    ***0***  (iCord.y <= grid1Cord.bot)_1  (iCord.x = grid1Cord.lft) && (iCord.y >= grid1Cord.top)

----------------Focused Condition View-------------------
Line       177 Item    1  ((iCord.x = grid1Cord.rht) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid1Cord.rht)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid1Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid1Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid1Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid1Cord.rht)_1   ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid1Cord.top)_0  (iCord.x = grid1Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid1Cord.top)_1  (iCord.x = grid1Cord.rht) && (iCord.y <= grid1Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid1Cord.bot)_0  (iCord.x = grid1Cord.rht) && (iCord.y >= grid1Cord.top)
  Row   6:    ***0***  (iCord.y <= grid1Cord.bot)_1  (iCord.x = grid1Cord.rht) && (iCord.y >= grid1Cord.top)


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.pixelcord(rtl)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           87        12        75      13.7

================================Statement Details================================

Statement Coverage for Design Unit work.pixelcord(rtl) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/pixelCord.vhd
    17                                               architecture rtl of pixelCord is
    18                                                   signal frameSize       : intersectPoint;
    19                                                   signal initCord        : intersectPoint;
    20                                                   signal newCord         : intersectPoint;
    21                                                   signal grid1Cord       : intersectPoint;
    22                                                   signal grid2Cord       : intersectPoint;
    23                                                   signal grid3Cord       : intersectPoint;
    24                                                   signal grid4Cord       : intersectPoint;
    25                                                   signal rgb             : channel;
    26                                               begin
    27              1                          2         initCord.rht   <= initCordValueRht;
    28              1                          2         initCord.lft   <= initCordValueLft;
    29              1                          2         initCord.top   <= initCordValueTop;
    30              1                          2         initCord.bot   <= initCordValueBot;
    31              1                          2         frameSize.lft  <= frameSizeLft;
    32              1                          2         frameSize.rht  <= frameSizeRht;
    33              1                          2         frameSize.top  <= frameSizeTop;
    34              1                          2         frameSize.bot  <= frameSizeBot;
    35                                               dataOutP: process (clk)begin
    36                                                   if rising_edge(clk) then
    37              1                          4             oRgb.valid  <= iRgb.valid;
    38              1                          4             oRgb.red    <= rgb.red;
    39              1                          4             oRgb.green  <= rgb.green;
    40              1                          4             oRgb.blue   <= rgb.blue;
    41                                                   end if;
    42                                               end process dataOutP;
    43                                               pixelCordP: process (clk)begin
    44                                                   if rising_edge(clk) then
    45                                                       if (iRgb.valid = hi) then
    46                                                           ------------------------------------
    47                                                           if (iPixelEn = hi) then 
    48                                                               ------------------------------------
    49                                                               --Left Coordinates
    50                                                               ------------------------------------
    51                                                               if (iCord.x <= newCord.lft) then
    52                                                                   if ( iCord.x >= frameSize.lft) then 
    53              1                    ***0***                             newCord.lft <= iCord.x - 1;
    54                                                                   end if;   
    55                                                               end if;
    56                                                               ------------------------------------
    57                                                               --Right Coordinates
    58                                                               ------------------------------------
    59                                                               if (iCord.x >= newCord.rht) then
    60                                                                   if ( iCord.x <= frameSize.rht) then 
    61              1                    ***0***                             newCord.rht <= iCord.x + 1;
    62                                                                   end if;   
    63                                                               end if;
    64                                                               ------------------------------------
    65                                                               --Top Coordinates
    66                                                               ------------------------------------
    67                                                               if (iCord.y <= newCord.top) then
    68                                                                   if ( iCord.y >= frameSize.top) then 
    69              1                    ***0***                             newCord.top <= iCord.y - 1;
    70                                                                   end if;   
    71                                                               end if;
    72                                                               ------------------------------------
    73                                                               --Bottom Coordinates
    74                                                               ------------------------------------
    75                                                               if (iCord.y >= newCord.bot) then
    76                                                                   if ( iCord.y <= frameSize.bot) then 
    77              1                    ***0***                             newCord.bot <= iCord.y + 1;
    78                                                                   end if;   
    79                                                               end if;
    80                                                           end if;--iPixelEn
    81                                                           ------------------------------------
    82                                                           -- 4TH FRAME
    83                                                           ------------------------------------
    84                                                           if ((iCord.y = grid4Cord.bot) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    85              1                    ***0***                     rgb.red        <= white;
    86              1                    ***0***                     rgb.green      <= black;
    87              1                    ***0***                     rgb.blue       <= black;
    88                                                           elsif ((iCord.y = grid4Cord.top) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    89              1                    ***0***                     rgb.red        <= white;
    90              1                    ***0***                     rgb.green      <= black;
    91              1                    ***0***                     rgb.blue       <= black;
    92                                                           elsif ((iCord.x = grid4Cord.lft) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    93              1                    ***0***                     rgb.red        <= white;
    94              1                    ***0***                     rgb.green      <= black;
    95              1                    ***0***                     rgb.blue       <= black;
    96                                                           elsif ((iCord.x = grid4Cord.rht) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    97              1                    ***0***                     rgb.red        <= white;
    98              1                    ***0***                     rgb.green      <= black;
    99              1                    ***0***                     rgb.blue       <= black;
    100                                                          ------------------------------------
    101                                                         -- 3RD FRAME
    102                                                          ------------------------------------
    103                                                          elsif ((iCord.y = grid3Cord.bot) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    104             1                    ***0***                     rgb.red        <= black;
    105             1                    ***0***                     rgb.green      <= white;
    106             1                    ***0***                     rgb.blue       <= black;
    107                                                          elsif ((iCord.y = grid3Cord.top) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    108             1                    ***0***                     rgb.red        <= black;
    109             1                    ***0***                     rgb.green      <= white;
    110             1                    ***0***                     rgb.blue       <= black;
    111                                                          elsif ((iCord.x = grid3Cord.lft) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    112             1                    ***0***                     rgb.red        <= black;
    113             1                    ***0***                     rgb.green      <= white;
    114             1                    ***0***                     rgb.blue       <= black;
    115                                                          elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    116             1                    ***0***                     rgb.red        <= black;
    117             1                    ***0***                     rgb.green      <= white;
    118             1                    ***0***                     rgb.blue       <= black;
    119                                                          ------------------------------------
    120                                                          -- 2ND FRAME
    121                                                          ------------------------------------
    122                                                          elsif ((iCord.y = grid2Cord.bot) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    123             1                    ***0***                     rgb.red        <= black;
    124             1                    ***0***                     rgb.green      <= black;
    125             1                    ***0***                     rgb.blue       <= white;
    126                                                          elsif ((iCord.y = grid2Cord.top) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    127             1                    ***0***                     rgb.red        <= black;
    128             1                    ***0***                     rgb.green      <= black;
    129             1                    ***0***                     rgb.blue       <= white;
    130                                                          elsif ((iCord.x = grid2Cord.lft) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    131             1                    ***0***                     rgb.red        <= black;
    132             1                    ***0***                     rgb.green      <= black;
    133             1                    ***0***                     rgb.blue       <= white;
    134                                                          elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    135             1                    ***0***                     rgb.red        <= black;
    136             1                    ***0***                     rgb.green      <= black;
    137             1                    ***0***                     rgb.blue       <= white;
    138                                                          ------------------------------------
    139                                                          -- 1ST FRAME
    140                                                          ------------------------------------
    141                                                          elsif ((iCord.y = grid1Cord.bot) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    142             1                    ***0***                     rgb.red        <= x"80";
    143             1                    ***0***                     rgb.green      <= black;
    144             1                    ***0***                     rgb.blue       <= x"80";
    145                                                          elsif ((iCord.y = grid1Cord.top) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    146             1                    ***0***                     rgb.red        <= x"80";
    147             1                    ***0***                     rgb.green      <= black;
    148             1                    ***0***                     rgb.blue       <= x"80";
    149                                                          elsif ((iCord.x = grid1Cord.lft) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    150             1                    ***0***                     rgb.red        <= x"80";
    151             1                    ***0***                     rgb.green      <= black;
    152             1                    ***0***                     rgb.blue       <= x"80";
    153                                                          elsif ((iCord.x = grid1Cord.rht) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    154             1                    ***0***                     rgb.red        <= x"80";
    155             1                    ***0***                     rgb.green      <= black;
    156             1                    ***0***                     rgb.blue       <= x"80";
    157                                                          else
    158             1                    ***0***                     rgb.red        <= iRgb.red;
    159             1                    ***0***                     rgb.green      <= iRgb.green;
    160             1                    ***0***                     rgb.blue       <= iRgb.blue;
    161                                                          end if;
    162                                                      end if;--iRgb.valid
    163                                                      if (iEof = hi)then
    164                                                          --RESET COORDINATES TO DEFAULT
    165             1                    ***0***                 newCord.lft       <= initCord.lft;
    166             1                    ***0***                 newCord.rht       <= initCord.rht;
    167             1                    ***0***                 newCord.top       <= initCord.top;
    168             1                    ***0***                 newCord.bot       <= initCord.bot;
    169                                                          -- 1ST FRAME
    170             1                    ***0***                 grid1Cord.lft     <= newCord.lft;
    171             1                    ***0***                 grid1Cord.rht     <= newCord.rht;
    172             1                    ***0***                 grid1Cord.top     <= newCord.top;
    173             1                    ***0***                 grid1Cord.bot     <= newCord.bot;
    174                                                          -- 2ND FRAME
    175             1                    ***0***                 grid2Cord.lft     <= grid1Cord.lft;
    176             1                    ***0***                 grid2Cord.rht     <= grid1Cord.rht;
    177             1                    ***0***                 grid2Cord.top     <= grid1Cord.top;
    178             1                    ***0***                 grid2Cord.bot     <= grid1Cord.bot;
    179                                                          -- 3RD FRAME
    180             1                    ***0***                 grid3Cord.lft     <= grid2Cord.lft;
    181             1                    ***0***                 grid3Cord.rht     <= grid2Cord.rht;
    182             1                    ***0***                 grid3Cord.top     <= grid2Cord.top;
    183             1                    ***0***                 grid3Cord.bot     <= grid2Cord.bot;
    184                                                          -- 4TH FRAME
    185             1                    ***0***                 grid4Cord.lft     <= grid3Cord.lft;
    186             1                    ***0***                 grid4Cord.rht     <= grid3Cord.rht;
    187             1                    ***0***                 grid4Cord.top     <= grid3Cord.top;
    188             1                    ***0***                 grid4Cord.bot     <= grid3Cord.bot;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        41         4        37       9.7

================================Branch Details================================

Branch Coverage for Design Unit work.pixelcord(rtl)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/pixelCord.vhd
------------------------------------IF Branch------------------------------------
    36                                         4     Count coming in to IF
    36              1                          4         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    44                                         6     Count coming in to IF
    44              1                          6         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    45                                         6     Count coming in to IF
    45              1                    ***0***             if (iRgb.valid = hi) then
                                               6     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    47                                   ***0***     Count coming in to IF
    47              1                    ***0***                 if (iPixelEn = hi) then 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    51                                   ***0***     Count coming in to IF
    51              1                    ***0***                     if (iCord.x <= newCord.lft) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    52                                   ***0***     Count coming in to IF
    52              1                    ***0***                         if ( iCord.x >= frameSize.lft) then 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    59                                   ***0***     Count coming in to IF
    59              1                    ***0***                     if (iCord.x >= newCord.rht) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    60                                   ***0***     Count coming in to IF
    60              1                    ***0***                         if ( iCord.x <= frameSize.rht) then 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    67                                   ***0***     Count coming in to IF
    67              1                    ***0***                     if (iCord.y <= newCord.top) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    68                                   ***0***     Count coming in to IF
    68              1                    ***0***                         if ( iCord.y >= frameSize.top) then 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    75                                   ***0***     Count coming in to IF
    75              1                    ***0***                     if (iCord.y >= newCord.bot) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    76                                   ***0***     Count coming in to IF
    76              1                    ***0***                         if ( iCord.y <= frameSize.bot) then 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    84                                   ***0***     Count coming in to IF
    84              1                    ***0***                 if ((iCord.y = grid4Cord.bot) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    88              1                    ***0***                 elsif ((iCord.y = grid4Cord.top) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    92              1                    ***0***                 elsif ((iCord.x = grid4Cord.lft) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    96              1                    ***0***                 elsif ((iCord.x = grid4Cord.rht) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    103             1                    ***0***                 elsif ((iCord.y = grid3Cord.bot) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    107             1                    ***0***                 elsif ((iCord.y = grid3Cord.top) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    111             1                    ***0***                 elsif ((iCord.x = grid3Cord.lft) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    115             1                    ***0***                 elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    122             1                    ***0***                 elsif ((iCord.y = grid2Cord.bot) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    126             1                    ***0***                 elsif ((iCord.y = grid2Cord.top) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    130             1                    ***0***                 elsif ((iCord.x = grid2Cord.lft) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    134             1                    ***0***                 elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    141             1                    ***0***                 elsif ((iCord.y = grid1Cord.bot) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    145             1                    ***0***                 elsif ((iCord.y = grid1Cord.top) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    149             1                    ***0***                 elsif ((iCord.x = grid1Cord.lft) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    153             1                    ***0***                 elsif ((iCord.x = grid1Cord.rht) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    157             1                    ***0***                 else
Branch totals: 0 hits of 17 branches = 0.0%

------------------------------------IF Branch------------------------------------
    163                                        6     Count coming in to IF
    163             1                    ***0***             if (iEof = hi)then
                                               6     All False Count
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms             48         0        48       0.0

================================Condition Details================================

Condition Coverage for Design Unit work.pixelcord(rtl) --

  File ../../uvmtb/dut/src/Process/pixelCord.vhd
----------------Focused Condition View-------------------
Line       84 Item    1  ((iCord.y = grid4Cord.bot) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid4Cord.bot)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid4Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid4Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid4Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid4Cord.bot)_1   ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid4Cord.lft)_0  (iCord.y = grid4Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid4Cord.lft)_1  (iCord.y = grid4Cord.bot) && (iCord.x <= grid4Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid4Cord.rht)_0  (iCord.y = grid4Cord.bot) && (iCord.x >= grid4Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid4Cord.rht)_1  (iCord.y = grid4Cord.bot) && (iCord.x >= grid4Cord.lft)

----------------Focused Condition View-------------------
Line       88 Item    1  ((iCord.y = grid4Cord.top) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid4Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid4Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid4Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid4Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid4Cord.top)_1   ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid4Cord.lft)_0  (iCord.y = grid4Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid4Cord.lft)_1  (iCord.y = grid4Cord.top) && (iCord.x <= grid4Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid4Cord.rht)_0  (iCord.y = grid4Cord.top) && (iCord.x >= grid4Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid4Cord.rht)_1  (iCord.y = grid4Cord.top) && (iCord.x >= grid4Cord.lft)

----------------Focused Condition View-------------------
Line       92 Item    1  ((iCord.x = grid4Cord.lft) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid4Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid4Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid4Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid4Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid4Cord.lft)_1   ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid4Cord.top)_0  (iCord.x = grid4Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid4Cord.top)_1  (iCord.x = grid4Cord.lft) && (iCord.y <= grid4Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid4Cord.bot)_0  (iCord.x = grid4Cord.lft) && (iCord.y >= grid4Cord.top)
  Row   6:    ***0***  (iCord.y <= grid4Cord.bot)_1  (iCord.x = grid4Cord.lft) && (iCord.y >= grid4Cord.top)

----------------Focused Condition View-------------------
Line       96 Item    1  ((iCord.x = grid4Cord.rht) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid4Cord.rht)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid4Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid4Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid4Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid4Cord.rht)_1   ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid4Cord.top)_0  (iCord.x = grid4Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid4Cord.top)_1  (iCord.x = grid4Cord.rht) && (iCord.y <= grid4Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid4Cord.bot)_0  (iCord.x = grid4Cord.rht) && (iCord.y >= grid4Cord.top)
  Row   6:    ***0***  (iCord.y <= grid4Cord.bot)_1  (iCord.x = grid4Cord.rht) && (iCord.y >= grid4Cord.top)

----------------Focused Condition View-------------------
Line       103 Item    1  ((iCord.y = grid3Cord.bot) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid3Cord.bot)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid3Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid3Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid3Cord.bot)_1   ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid3Cord.lft)_0  (iCord.y = grid3Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid3Cord.lft)_1  (iCord.y = grid3Cord.bot) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid3Cord.bot) && (iCord.x >= grid3Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid3Cord.bot) && (iCord.x >= grid3Cord.lft)

----------------Focused Condition View-------------------
Line       107 Item    1  ((iCord.y = grid3Cord.top) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid3Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid3Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid3Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid3Cord.top)_1   ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid3Cord.lft)_0  (iCord.y = grid3Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid3Cord.lft)_1  (iCord.y = grid3Cord.top) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid3Cord.top) && (iCord.x >= grid3Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid3Cord.top) && (iCord.x >= grid3Cord.lft)

----------------Focused Condition View-------------------
Line       111 Item    1  ((iCord.x = grid3Cord.lft) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid3Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid3Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid3Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid3Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid3Cord.lft)_1   ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid3Cord.top)_0  (iCord.x = grid3Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid3Cord.top)_1  (iCord.x = grid3Cord.lft) && (iCord.y <= grid3Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid3Cord.bot)_0  (iCord.x = grid3Cord.lft) && (iCord.y >= grid3Cord.top)
  Row   6:    ***0***  (iCord.y <= grid3Cord.bot)_1  (iCord.x = grid3Cord.lft) && (iCord.y >= grid3Cord.top)

----------------Focused Condition View-------------------
Line       115 Item    1  ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid3Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid3Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid3Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid3Cord.rht)_1   ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid3Cord.top)_0  (iCord.x = grid3Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid3Cord.top)_1  (iCord.x = grid3Cord.rht) && (iCord.y <= grid3Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid3Cord.bot)_0  (iCord.x = grid3Cord.rht) && (iCord.y >= grid3Cord.top)
  Row   6:    ***0***  (iCord.y <= grid3Cord.bot)_1  (iCord.x = grid3Cord.rht) && (iCord.y >= grid3Cord.top)

----------------Focused Condition View-------------------
Line       122 Item    1  ((iCord.y = grid2Cord.bot) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid2Cord.bot)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid2Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid2Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid2Cord.bot)_1   ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid2Cord.lft)_0  (iCord.y = grid2Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid2Cord.lft)_1  (iCord.y = grid2Cord.bot) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid2Cord.bot) && (iCord.x >= grid2Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid2Cord.bot) && (iCord.x >= grid2Cord.lft)

----------------Focused Condition View-------------------
Line       126 Item    1  ((iCord.y = grid2Cord.top) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid2Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid2Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid2Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid2Cord.top)_1   ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid2Cord.lft)_0  (iCord.y = grid2Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid2Cord.lft)_1  (iCord.y = grid2Cord.top) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid2Cord.top) && (iCord.x >= grid2Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid2Cord.top) && (iCord.x >= grid2Cord.lft)

----------------Focused Condition View-------------------
Line       130 Item    1  ((iCord.x = grid2Cord.lft) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid2Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid2Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid2Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid2Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid2Cord.lft)_1   ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid2Cord.top)_0  (iCord.x = grid2Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid2Cord.top)_1  (iCord.x = grid2Cord.lft) && (iCord.y <= grid2Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid2Cord.bot)_0  (iCord.x = grid2Cord.lft) && (iCord.y >= grid2Cord.top)
  Row   6:    ***0***  (iCord.y <= grid2Cord.bot)_1  (iCord.x = grid2Cord.lft) && (iCord.y >= grid2Cord.top)

----------------Focused Condition View-------------------
Line       134 Item    1  ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid2Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid2Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid3Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid3Cord.rht)_1   ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid2Cord.top)_0  (iCord.x = grid3Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid2Cord.top)_1  (iCord.x = grid3Cord.rht) && (iCord.y <= grid2Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid2Cord.bot)_0  (iCord.x = grid3Cord.rht) && (iCord.y >= grid2Cord.top)
  Row   6:    ***0***  (iCord.y <= grid2Cord.bot)_1  (iCord.x = grid3Cord.rht) && (iCord.y >= grid2Cord.top)

----------------Focused Condition View-------------------
Line       141 Item    1  ((iCord.y = grid1Cord.bot) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid1Cord.bot)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid1Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid1Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid1Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid1Cord.bot)_1   ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid1Cord.lft)_0  (iCord.y = grid1Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid1Cord.lft)_1  (iCord.y = grid1Cord.bot) && (iCord.x <= grid1Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid1Cord.rht)_0  (iCord.y = grid1Cord.bot) && (iCord.x >= grid1Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid1Cord.rht)_1  (iCord.y = grid1Cord.bot) && (iCord.x >= grid1Cord.lft)

----------------Focused Condition View-------------------
Line       145 Item    1  ((iCord.y = grid1Cord.top) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid1Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.x >= grid1Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid1Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.y = grid1Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid1Cord.top)_1   ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid1Cord.lft)_0  (iCord.y = grid1Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid1Cord.lft)_1  (iCord.y = grid1Cord.top) && (iCord.x <= grid1Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid1Cord.rht)_0  (iCord.y = grid1Cord.top) && (iCord.x >= grid1Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid1Cord.rht)_1  (iCord.y = grid1Cord.top) && (iCord.x >= grid1Cord.lft)

----------------Focused Condition View-------------------
Line       149 Item    1  ((iCord.x = grid1Cord.lft) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid1Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid1Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid1Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid1Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid1Cord.lft)_1   ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid1Cord.top)_0  (iCord.x = grid1Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid1Cord.top)_1  (iCord.x = grid1Cord.lft) && (iCord.y <= grid1Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid1Cord.bot)_0  (iCord.x = grid1Cord.lft) && (iCord.y >= grid1Cord.top)
  Row   6:    ***0***  (iCord.y <= grid1Cord.bot)_1  (iCord.x = grid1Cord.lft) && (iCord.y >= grid1Cord.top)

----------------Focused Condition View-------------------
Line       153 Item    1  ((iCord.x = grid1Cord.rht) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid1Cord.rht)         N  No hits                  Hit '_0' and '_1'
  (iCord.y >= grid1Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid1Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  (iCord.x = grid1Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid1Cord.rht)_1   ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid1Cord.top)_0  (iCord.x = grid1Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid1Cord.top)_1  (iCord.x = grid1Cord.rht) && (iCord.y <= grid1Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid1Cord.bot)_0  (iCord.x = grid1Cord.rht) && (iCord.y >= grid1Cord.top)
  Row   6:    ***0***  (iCord.y <= grid1Cord.bot)_1  (iCord.x = grid1Cord.rht) && (iCord.y >= grid1Cord.top)


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.pointofinterest(arch)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           42        20        22      47.6

================================Statement Details================================

Statement Coverage for Design Unit work.pointofinterest(arch) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/pointOfInterest.vhd
    25                                               architecture arch of pointOfInterest is
    26                                                   constant FIFO_ADDR_WIDTH :integer := 14;
    27                                                   constant FIFO_DATA_WIDTH :integer := 24;
    28                                                   constant FIFO_DEPTH :integer := 2**(FIFO_ADDR_WIDTH);--8192
    29                                                   type fState is (idle,lockReady,fifoFullStatus,fifoEmptyStatus,waitForNewFrame,gridEnCheck);
    30                                                   signal fifoControlState : fState;
    31                                                   signal wrAddrsGlCtr     : integer := 0;
    32                                                   signal GlEnable         : std_logic;
    33                                                   signal rdData           : std_logic_vector(23 downto 0);
    34                                                   signal wrDataIn         : std_logic_vector(23 downto 0);
    35                                                   signal clearData        : std_logic;
    36                                                   signal wrEn             : std_logic;
    37                                                   signal wrLstEn          : std_logic;
    38                                                   signal emptyO           : std_logic; 
    39                                                   signal wrDone           : std_logic; 
    40                                                   signal rdDone           : std_logic; 
    41                                                   signal fullO            : std_logic;
    42                                                   signal clrStatus        : std_logic;
    43                                                   signal wrAddress        : std_logic_vector (FIFO_ADDR_WIDTH-1 downto 0); 
    44                                                   signal wrAddr           : std_logic_vector (FIFO_ADDR_WIDTH-1 downto 0); 
    45                                                   signal gridEn           : std_logic;    
    46                                                   signal fifoIsFull       : std_logic;
    47                                                   signal fifoIsEmpty      : std_logic;
    48                                                   signal gridContMax      : std_logic_vector (15 downto 0);
    49                                                   signal pCont            : cord;    
    50                                               begin
    51              1                          2         oGridLocation  <= GlEnable;
    52              1                          3         fifoStatus     <= "00000000" & gridContMax & "00000" & fifoIsFull & fifoIsEmpty & fifoIsFull;
    53              1                          1         gridLockDatao  <= x"00" & rdData;
    54              1                          1         wrAddress      <= std_logic_vector(to_unsigned(wrAddrsGlCtr,FIFO_ADDR_WIDTH));
    55                                               fifoControlP: process (clk) begin
    56                                               if (rising_edge (clk)) then
    57                                                   if (rst_l = lo) then
    58              1                          4             fifoControlState <= idle;
    59              1                          4             gridEn           <= lo;
    60              1                          4             fifoIsFull       <= lo;
    61              1                          4             fifoIsEmpty      <= lo;
    62              1                          4             clrStatus        <= hi;
    63                                                   else
    64                                                   case (fifoControlState) is
    65                                                   when idle =>
    66                                                   --READY
    67              1                          1             fifoIsFull   <= lo;
    68              1                          1             fifoIsEmpty  <= hi;
    69              1                          1             clrStatus    <= lo;
    70                                                       --Enable
    71                                                       if (pRegion.cpuWgridLock = hi) then
    72              1                    ***0***                 fifoControlState <= waitForNewFrame;
    73                                                       end if;
    74                                                   when waitForNewFrame =>
    75                                                   --WAIT
    76                                                       if (endOfFrame = hi) then
    77              1                    ***0***                 fifoControlState <= gridEnCheck;
    78                                                       end if;
    79                                                   when gridEnCheck =>
    80                                                       if (GlEnable = lo) then
    81              1                    ***0***                 fifoControlState <= lockReady;
    82              1                    ***0***                 gridEn           <= hi;
    83                                                       end if;
    84                                                   when lockReady =>
    85                                                   --CHECK
    86              1                    ***0***             fifoIsFull  <= lo;
    87              1                    ***0***             fifoIsEmpty <= lo;
    88                                                       --WriteDone Pulse
    89                                                       if (wrDone = hi) then
    90              1                    ***0***                 fifoControlState <= fifoFullStatus;
    91              1                    ***0***                 gridEn           <= lo;
    92                                                       end if;
    93                                                   when fifoFullStatus => 
    94                                                   --CHECK
    95              1                    ***0***             fifoIsFull   <= hi;--Full
    96              1                    ***0***             fifoIsEmpty  <= lo;
    97              1                    ***0***             gridContMax <= std_logic_vector(resize(unsigned(wrAddr), gridContMax'length));
    98                                                       --ReadDone Pulse
    99                                                       if (rdDone = hi) then
    100             1                    ***0***                 fifoControlState <= fifoEmptyStatus;               
    101                                                      end if;
    102                                                  when fifoEmptyStatus =>
    103                                                  --RESET
    104             1                    ***0***             fifoIsFull   <= lo;
    105             1                    ***0***             fifoIsEmpty  <= hi;
    106                                                      if (pRegion.cpuAckGoAgain = hi) then
    107             1                    ***0***                 fifoControlState <= idle;
    108             1                    ***0***                 clrStatus        <= hi;
    109                                                      end if;
    110                                                  when others =>
    111             1                    ***0***             fifoControlState <= idle;
    112                                                  end case;
    113                                                  end if;
    114                                              end if;
    115                                              end process fifoControlP;  
    116                                              enablePointerP: process (clk)begin
    117                                                  if rising_edge(clk) then
    118             1                          3             wrDataIn  <= (iRgb.red & iRgb.green & iRgb.blue);
    119             1                          3             wrAddr    <= wrAddress;
    120                                                      if (((pCont.x >= pRegion.pointInterest) and (pCont.x <= pRegion.pointInterest + pInterestWidth)) and ((pCont.y >= pRegion.pointInterest) and (pCont.y <= pRegion.pointInterest + pInterestHight))) 
    121                                                      and (iRgb.valid = hi) then
    122             1                    ***0***                 GlEnable     <= hi;
    123                                                      else
    124             1                          3                 GlEnable     <= lo;
    125                                                      end if;
    126             1                          3             wrLstEn       <= not(gridEn);
    127                                                      if (gridEn = hi and GlEnable = hi) then
    128             1                    ***0***                 wrEn         <= hi;
    129             1                    ***0***                 wrAddrsGlCtr <= wrAddrsGlCtr + 1;
    130                                                      elsif (gridEn = hi and GlEnable = lo)then
    131             1                    ***0***                 wrEn          <= wrLstEn;
    132             1                    ***0***                 wrAddrsGlCtr  <= wrAddrsGlCtr;
    133                                                      else
    134             1                          3                 wrEn          <= lo;
    135             1                          3                 wrAddrsGlCtr  <=  0;
    136                                                      end if;
    137                                                  end if;
    138                                              end process enablePointerP;
    139                                              gridLockFifoInt : gridLockFifo
    140                                              generic map(
    141                                                  FIFO_DEPTH      => FIFO_DEPTH,
    142                                                  FIFO_DATA_WIDTH => FIFO_DATA_WIDTH,
    143                                                  FIFO_ADDR_WIDTH => FIFO_ADDR_WIDTH)
    144                                              port map(
    145                                                  clk             => clk,
    146                                                  clrStatus       => clrStatus,
    147                                                  rdEn            => pRegion.fifoReadEnable,
    148                                                  rdAddress       => pRegion.fifoReadAddress(FIFO_ADDR_WIDTH-1 downto 0),
    149                                                  dataO           => rdData,
    150                                                  wrEn            => wrEn,
    151                                                  wrAddress       => wrAddr,
    152                                                  dataIn          => wrDataIn,
    153                                                  wrDone          => wrDone,
    154                                                  rdDone          => rdDone,
    155                                                  emptyO          => emptyO,
    156                                                  fullO           => fullO);
    157                                              pipCordP: process (clk)begin
    158                                                  if rising_edge(clk) then
    159             1                          2             pCont.x      <= to_integer((unsigned(iCord.x)));
    160             1                          2             pCont.y      <= to_integer((unsigned(iCord.y)));

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        29         9        20      31.0

================================Branch Details================================

Branch Coverage for Design Unit work.pointofinterest(arch)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/pointOfInterest.vhd
------------------------------------IF Branch------------------------------------
    56                                         5     Count coming in to IF
    56              1                          5     if (rising_edge (clk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    57                                         5     Count coming in to IF
    57              1                          4         if (rst_l = lo) then
    63              1                          1         else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    64                                         1     Count coming in to CASE
    65              1                          1         when idle =>
    74              1                    ***0***         when waitForNewFrame =>
    79              1                    ***0***         when gridEnCheck =>
    84              1                    ***0***         when lockReady =>
    93              1                    ***0***         when fifoFullStatus => 
    102             1                    ***0***         when fifoEmptyStatus =>
    110             1                    ***0***         when others =>
Branch totals: 1 hit of 7 branches = 14.2%

------------------------------------IF Branch------------------------------------
    71                                         1     Count coming in to IF
    71              1                    ***0***             if (pRegion.cpuWgridLock = hi) then
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    76                                   ***0***     Count coming in to IF
    76              1                    ***0***             if (endOfFrame = hi) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    80                                   ***0***     Count coming in to IF
    80              1                    ***0***             if (GlEnable = lo) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    89                                   ***0***     Count coming in to IF
    89              1                    ***0***             if (wrDone = hi) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    99                                   ***0***     Count coming in to IF
    99              1                    ***0***             if (rdDone = hi) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    106                                  ***0***     Count coming in to IF
    106             1                    ***0***             if (pRegion.cpuAckGoAgain = hi) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    117                                        3     Count coming in to IF
    117             1                          3         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    121                                        3     Count coming in to IF
    121             1                    ***0***             and (iRgb.valid = hi) then
    123             1                          3             else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    127                                        3     Count coming in to IF
    127             1                    ***0***             if (gridEn = hi and GlEnable = hi) then
    130             1                    ***0***             elsif (gridEn = hi and GlEnable = lo)then
    133             1                          3             else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    158                                        2     Count coming in to IF
    158             1                          2         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              9         0         9       0.0

================================Condition Details================================

Condition Coverage for Design Unit work.pointofinterest(arch) --

  File ../../uvmtb/dut/src/Process/pointOfInterest.vhd
----------------Focused Condition View-------------------
Line       121 Item    1  ((((pCont.x >= pRegion.pointInterest) and (pCont.x <= (pRegion.pointInterest + pInterestWidth))) and ((pCont.y >= pRegion.pointInterest) and (pCont.y <= (pRegion.pointInterest + pInterestHight)))) and (iRgb.valid = hi))
Condition totals: 0 of 5 input terms covered = 0.0%

                                             Input Term   Covered  Reason for no coverage   Hint
                                            -----------  --------  -----------------------  --------------
                     (pCont.x >= pRegion.pointInterest)         N  '_1' not hit             Hit '_1'
  (pCont.x <= (pRegion.pointInterest + pInterestWidth))         N  No hits                  Hit '_0' and '_1'
                     (pCont.y >= pRegion.pointInterest)         N  No hits                  Hit '_0' and '_1'
  (pCont.y <= (pRegion.pointInterest + pInterestHight))         N  No hits                  Hit '_0' and '_1'
                                      (iRgb.valid = hi)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                                               Non-masking condition(s)      
 ---------  ---------  --------------------                                     -------------------------     
  Row   1:          1  (pCont.x >= pRegion.pointInterest)_0                     -                             
  Row   2:    ***0***  (pCont.x >= pRegion.pointInterest)_1                     (iRgb.valid = hi) && ((pCont.y >= pRegion.pointInterest) and (pCont.y <= (pRegion.pointInterest + pInterestHight))) && (pCont.x <= (pRegion.pointInterest + pInterestWidth))
  Row   3:    ***0***  (pCont.x <= (pRegion.pointInterest + pInterestWidth))_0  (pCont.x >= pRegion.pointInterest)
  Row   4:    ***0***  (pCont.x <= (pRegion.pointInterest + pInterestWidth))_1  (iRgb.valid = hi) && ((pCont.y >= pRegion.pointInterest) and (pCont.y <= (pRegion.pointInterest + pInterestHight))) && (pCont.x >= pRegion.pointInterest)
  Row   5:    ***0***  (pCont.y >= pRegion.pointInterest)_0                     ((pCont.x >= pRegion.pointInterest) and (pCont.x <= (pRegion.pointInterest + pInterestWidth)))
  Row   6:    ***0***  (pCont.y >= pRegion.pointInterest)_1                     (iRgb.valid = hi) && ((pCont.x >= pRegion.pointInterest) and (pCont.x <= (pRegion.pointInterest + pInterestWidth))) && (pCont.y <= (pRegion.pointInterest + pInterestHight))
  Row   7:    ***0***  (pCont.y <= (pRegion.pointInterest + pInterestHight))_0  ((pCont.x >= pRegion.pointInterest) and (pCont.x <= (pRegion.pointInterest + pInterestWidth))) && (pCont.y >= pRegion.pointInterest)
  Row   8:    ***0***  (pCont.y <= (pRegion.pointInterest + pInterestHight))_1  (iRgb.valid = hi) && ((pCont.x >= pRegion.pointInterest) and (pCont.x <= (pRegion.pointInterest + pInterestWidth))) && (pCont.y >= pRegion.pointInterest)
  Row   9:          1  (iRgb.valid = hi)_0                                      (((pCont.x >= pRegion.pointInterest) and (pCont.x <= (pRegion.pointInterest + pInterestWidth))) and ((pCont.y >= pRegion.pointInterest) and (pCont.y <= (pRegion.pointInterest + pInterestHight))))
 Row   10:    ***0***  (iRgb.valid = hi)_1                                      (((pCont.x >= pRegion.pointInterest) and (pCont.x <= (pRegion.pointInterest + pInterestWidth))) and ((pCont.y >= pRegion.pointInterest) and (pCont.y <= (pRegion.pointInterest + pInterestHight))))

----------------Focused Condition View-------------------
Line       127 Item    1  ((gridEn = hi) and (GlEnable = hi))
Condition totals: 0 of 2 input terms covered = 0.0%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
    (gridEn = hi)         N  '_1' not hit             Hit '_1'
  (GlEnable = hi)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (gridEn = hi)_0       -                             
  Row   2:    ***0***  (gridEn = hi)_1       (GlEnable = hi)               
  Row   3:    ***0***  (GlEnable = hi)_0     (gridEn = hi)                 
  Row   4:    ***0***  (GlEnable = hi)_1     (gridEn = hi)                 

----------------Focused Condition View-------------------
Line       130 Item    1  ((gridEn = hi) and (GlEnable = lo))
Condition totals: 0 of 2 input terms covered = 0.0%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
    (gridEn = hi)         N  '_1' not hit             Hit '_1'
  (GlEnable = lo)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (gridEn = hi)_0       -                             
  Row   2:    ***0***  (gridEn = hi)_1       (GlEnable = lo)               
  Row   3:    ***0***  (GlEnable = lo)_0     (gridEn = hi)                 
  Row   4:    ***0***  (GlEnable = lo)_1     (gridEn = hi)                 


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                         8.3
        States                       6         1         5      16.6
        Transitions                 10         0        10       0.0

================================FSM Details================================

FSM Coverage for Design Unit work.pointofinterest(arch) --

FSM_ID: fifoControlState
    Current State Object : fifoControlState
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
  65                idle                   0
  74     waitForNewFrame                   4
  79         gridEnCheck                   5
  84           lockReady                   1
  93      fifoFullStatus                   2
 102     fifoEmptyStatus                   3
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    idle                   4
    Uncovered States :
    ------------------
                   State
                   -----
         waitForNewFrame
             gridEnCheck
               lockReady
          fifoFullStatus
         fifoEmptyStatus
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
  72                   0          idle -> waitForNewFrame
  77                   1          waitForNewFrame -> gridEnCheck
  58                   2          waitForNewFrame -> idle
  81                   3          gridEnCheck -> lockReady
  58                   4          gridEnCheck -> idle 
  90                   5          lockReady -> fifoFullStatus
  58                   6          lockReady -> idle   
 100                   7          fifoFullStatus -> fifoEmptyStatus
  58                   8          fifoFullStatus -> idle
 107                   9          fifoEmptyStatus -> idle


    Summary                     Active      Hits    Misses % Covered
    -------                     ------      ----    ------ ---------
        States                       6         1         5      16.6
        Transitions                 10         0        10       0.0

=================================================================================
=== Design Unit: work.rawtorgb(arch)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           57        30        27      52.6

================================Statement Details================================

Statement Coverage for Design Unit work.rawtorgb(arch) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/raw2rgb.vhd
    14                                               architecture arch of RawToRgb is
    15                                                   signal rgb           : rawRgb;
    16                                                   signal tpd1          : uTp;
    17                                                   signal tpd2          : uTp;
    18                                                   signal r1Valid       : std_logic :='0';
    19                                                   signal r2Valid       : std_logic :='0';
    20                                                   signal d1TpData      : rTp;
    21                                                   signal d2TpData      : rTp;
    22                                               begin
    23                                               validSyncP: process(clk) begin
    24                                                   if rising_edge(clk) then
    25              1                          6             r1Valid       <= iTpData.valid;
    26              1                          6             r2Valid       <= r1Valid;
    27              1                          6             oRgbSet.valid <= r2Valid;
    28              1                          6             d1TpData      <= iTpData;
    29              1                          6             d2TpData      <= d1TpData;
    30              1                          6             oRgbSet.pEof  <= d2TpData.pEof;
    31              1                          6             oRgbSet.pSof  <= d2TpData.pSof;
    32              1                          6             oRgbSet.cord  <= d2TpData.cord;
    33                                                   end if;
    34                                               end process validSyncP;
    35                                               syncDataP: process (clk) begin
    36                                                   if rising_edge(clk) then
    37                                                       if rst_l = '0' then
    38              1                          2                 tpd1.tp3  <=(others => '0');
    39              1                          2                 tpd2.tp3  <=(others => '0');
    40              1                          2                 tpd1.tp2  <=(others => '0');
    41              1                          2                 tpd2.tp2  <=(others => '0');
    42              1                          2                 tpd1.tp1  <=(others => '0');
    43              1                          2                 tpd2.tp1  <=(others => '0');
    44                                                           else
    45              1                          1                 tpd1.tp1  <=unsigned(iTpData.taps.tp1);
    46              1                          1                 tpd1.tp2  <=unsigned(iTpData.taps.tp2);
    47              1                          1                 tpd1.tp3  <=unsigned(iTpData.taps.tp3);
    48              1                          1                 tpd2.tp1  <=tpd1.tp1;
    49              1                          1                 tpd2.tp2  <=tpd1.tp2;
    50              1                          1                 tpd2.tp3  <=tpd1.tp3;
    51                                                           end if;
    52                                                       end if;
    53                                               end process syncDataP;
    54                                               rawToRgbP: process (clk)
    55                                                   variable loc_addr : std_logic_vector(1 downto 0);
    56                                                   begin
    57                                                       if rising_edge(clk) then
    58                                                       if rst_l = '0' then
    59              1                          3                 rgb.red   <=(others => '0');
    60              1                          3                 rgb.green <=(others => '0');
    61              1                          3                 rgb.blue  <=(others => '0'); 
    62                                                       else
    63              1                          1             loc_addr := iTpData.cord.y(0) & iTpData.cord.x(0);
    64                                                       case loc_addr IS
    65                                                           when b"11" => 
    66                                                               if (iTpData.cord.y(11 downto 0) = x"001") then
    67              1                    ***0***                         rgb.red   <= tpd1.tp2;
    68              1                    ***0***                         rgb.green <= '0' & (tpd1.tp3 + unsigned(iTpData.taps.tp2));
    69              1                    ***0***                         rgb.blue  <= unsigned(iTpData.taps.tp3);
    70                                                               else          
    71              1                    ***0***                         rgb.red   <= tpd1.tp2;
    72              1                    ***0***                         rgb.green <= '0' & (unsigned(iTpData.taps.tp2) + tpd1.tp1);
    73              1                    ***0***                         rgb.blue  <= unsigned(iTpData.taps.tp1);
    74                                                               end if;
    75                                                           when b"10" => 
    76                                                               if (iTpData.cord.y(11 downto 0) = x"001") then
    77                                                                   if (iTpData.cord.x(11 downto 0) = x"000") then
    78              1                    ***0***                             rgb.red    <= tpd2.tp3;
    79              1                    ***0***                             rgb.green  <= tpd2.tp2 & '0';
    80              1                    ***0***                             rgb.blue   <= tpd1.tp2;
    81                                                                   else
    82              1                    ***0***                             rgb.red    <= unsigned(iTpData.taps.tp2);
    83              1                    ***0***                             rgb.green  <= '0' & (tpd1.tp2 + unsigned(iTpData.taps.tp3));
    84              1                    ***0***                             rgb.blue   <= tpd1.tp3;    
    85                                                                   end if;
    86                                                               else
    87                                                                   if (iTpData.cord.x(11 downto 0) = x"000") then
    88              1                    ***0***                             rgb.red    <= tpd2.tp1;
    89              1                    ***0***                             rgb.green  <= tpd1.tp1 & '0';
    90              1                    ***0***                             rgb.blue   <= tpd1.tp2;
    91                                                                   else
    92              1                    ***0***                             rgb.red    <= unsigned(iTpData.taps.tp2);
    93              1                    ***0***                             rgb.green  <= '0' & (tpd1.tp2 + unsigned(iTpData.taps.tp1));
    94              1                    ***0***                             rgb.blue   <= tpd1.tp1;    
    95                                                                   end if;
    96                                                               end if;
    97                                                           when b"01" => 
    98              1                    ***0***                     rgb.red      <= tpd1.tp1;
    99              1                    ***0***                     rgb.green    <= '0' & (unsigned(iTpData.taps.tp1) + tpd1.tp2);
    100             1                    ***0***                     rgb.blue     <= unsigned(iTpData.taps.tp2);    
    101                                                          when b"00" => 
    102                                                              if (iTpData.cord.x(11 downto 0) = x"000") then
    103             1                          1                         rgb.red     <= tpd2.tp2;
    104             1                          1                         rgb.green   <= tpd2.tp1 & '0';
    105             1                          1                         rgb.blue    <= tpd1.tp1;
    106                                                              else
    107             1                    ***0***                         rgb.red     <= unsigned(iTpData.taps.tp1);
    108             1                    ***0***                         rgb.green   <= '0' & (tpd1.tp1 + unsigned(iTpData.taps.tp2));
    109             1                    ***0***                         rgb.blue    <= tpd1.tp2;    
    110                                                              end if;
    111                                                          when others => 
    112             1                    ***0***                     rgb.red     <= rgb.red;
    113             1                    ***0***                     rgb.green   <= rgb.green;
    114             1                    ***0***                     rgb.blue    <= rgb.blue;
    115                                                      end case;
    116                                                      end if;
    117                                                      end if; 
    118                                              end process rawToRgbP;
    119             1                          2         oRgbSet.red    <= std_logic_vector(rgb.red(11 downto 4));
    120             1                          2         oRgbSet.green  <= std_logic_vector(rgb.green(12 downto 5));
    121             1                          2         oRgbSet.blue   <= std_logic_vector(rgb.blue(11 downto 4));

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        22         9        13      40.9

================================Branch Details================================

Branch Coverage for Design Unit work.rawtorgb(arch)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/raw2rgb.vhd
------------------------------------IF Branch------------------------------------
    24                                         6     Count coming in to IF
    24              1                          6         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    36                                         3     Count coming in to IF
    36              1                          3         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    37                                         3     Count coming in to IF
    37              1                          2             if rst_l = '0' then
    44              1                          1                 else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    57                                         4     Count coming in to IF
    57              1                          4             if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    58                                         4     Count coming in to IF
    58              1                          3             if rst_l = '0' then
    62              1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    64                                         1     Count coming in to CASE
    65              1                    ***0***                 when b"11" => 
    75              1                    ***0***                 when b"10" => 
    97              1                    ***0***                 when b"01" => 
    101             1                          1                 when b"00" => 
    111             1                    ***0***                 when others => 
Branch totals: 1 hit of 5 branches = 20.0%

------------------------------------IF Branch------------------------------------
    66                                   ***0***     Count coming in to IF
    66              1                    ***0***                     if (iTpData.cord.y(11 downto 0) = x"001") then
    70              1                    ***0***                     else          
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    76                                   ***0***     Count coming in to IF
    76              1                    ***0***                     if (iTpData.cord.y(11 downto 0) = x"001") then
    86              1                    ***0***                     else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    77                                   ***0***     Count coming in to IF
    77              1                    ***0***                         if (iTpData.cord.x(11 downto 0) = x"000") then
    81              1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    87                                   ***0***     Count coming in to IF
    87              1                    ***0***                         if (iTpData.cord.x(11 downto 0) = x"000") then
    91              1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    102                                        1     Count coming in to IF
    102             1                          1                     if (iTpData.cord.x(11 downto 0) = x"000") then
    106             1                    ***0***                     else
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.rgb_if
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            4         4         0     100.0

================================Statement Details================================

Statement Coverage for Design Unit work.rgb_if --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/tb/top/system_top/../../interfaces/rgb_if.sv
    2                                                interface rgb_if(input bit clk);
    3                                                    logic [7:0]  iRed;
    4                                                    logic [7:0]  iGreen;
    5                                                    logic [7:0]  iBlue;
    6                                                    logic        iValid;
    7                                                    logic        iPixelEn;
    8                                                    logic        iEof;
    9                                                    int unsigned iX;
    10                                                   int unsigned iY;
    11                                                   logic [7:0]  oRed;
    12                                                   logic [7:0]  oGreen;
    13                                                   logic [7:0]  oBlue;
    14                                                   logic        oValid;
    15              1                          1         clocking master_cb @ (posedge clk);
    16                                                       default input #1step output #1ns;
    17                                                       output iPixelEn,iX,iY,iRed,iGreen,iBlue,iValid,iEof;
    18              1                          1             input  oRed;
    19                                                   endclocking: master_cb
    20              1                          1         clocking slave_cb @ (posedge clk);
    21                                                       default input #1step output #1ns;
    22              1                          1             input  iX,iY,iRed,iGreen,iBlue,iPixelEn,iValid,iEof;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.rgb_ycbcr(imp)::GEN_FULL_RANGE_CONSTANTS_F
=================================================================================
=== Design Unit: work.rgb_ycbcr(imp)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           10        10         0     100.0

================================Statement Details================================

Statement Coverage for generate block work.rgb_ycbcr(imp)::GEN_FULL_RANGE_CONSTANTS_F --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/rgb_ycbcr.vhd
    157             1                          1         C_I32_Y_R  <= x"4c8b4396";
    158             1                          1         C_I32_Y_G  <= x"9645a1cb";
    159             1                          1         C_I32_Y_B  <= x"1d2f1aa0";
    160             1                          1         C_I32_CB_R <= x"2c2e989a";
    161             1                          1         C_I32_CB_G <= x"56bd6e8b"; 
    162             1                          1         C_I32_CB_B <= x"82ec0725";
    163             1                          1         C_I32_CR_R <= x"82ec0725";
    164             1                          1         C_I32_CR_G <= x"6da187a5";
    165             1                          1         C_I32_CR_B <= x"154a7f80";
    166             1                          1         C_I_16 <= (others => '0');

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.rgb_ycbcr(imp)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           86        84         2      97.6

================================Statement Details================================

Statement Coverage for Design Unit work.rgb_ycbcr(imp) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/rgb_ycbcr.vhd
    101                                              architecture imp of rgb_ycbcr is
    102                                                constant C_1_PRE : unsigned(i_precision-1 downto 0) := to_unsigned(1, i_precision);
    103                                                -- Coefficients as 0.32 format 32-bit fixeds point numbers
    104                                                -- Each is computed as C*(2^32)+0.5, then rounded down.
    105                                                signal C_I32_Y_R : unsigned(31 downto 0);
    106                                                signal C_I32_Y_G : unsigned(31 downto 0);
    107                                                signal C_I32_Y_B : unsigned(31 downto 0);
    108                                                signal C_I32_CB_R : unsigned(31 downto 0);
    109                                                signal C_I32_CB_G : unsigned(31 downto 0);
    110                                                signal C_I32_CB_B : unsigned(31 downto 0);
    111                                                signal C_I32_CR_R : unsigned(31 downto 0);
    112                                                signal C_I32_CR_G : unsigned(31 downto 0);
    113                                                signal C_I32_CR_B : unsigned(31 downto 0);
    114                                                -- Coefficients in desired precision
    115                                                signal C_I_Y_R : unsigned(i_precision-1 downto 0);
    116                                                signal C_I_Y_G : unsigned(i_precision-1 downto 0);
    117                                                signal C_I_Y_B : unsigned(i_precision-1 downto 0);
    118                                                signal C_I_CB_R : unsigned(i_precision-1 downto 0);
    119                                                signal C_I_CB_G : unsigned(i_precision-1 downto 0);
    120                                                signal C_I_CB_B : unsigned(i_precision-1 downto 0);
    121                                                signal C_I_CR_R : unsigned(i_precision-1 downto 0);
    122                                                signal C_I_CR_G : unsigned(i_precision-1 downto 0);
    123                                                signal C_I_CR_B : unsigned(i_precision-1 downto 0);
    124                                                signal C_I_128 : unsigned(i_data_width-1 downto 0);
    125                                                signal C_I_16  : unsigned(i_data_width-1 downto 0);
    126                                                -- Stage 0 signals
    127                                                signal r_0 : unsigned(i_data_width-1 downto 0);
    128                                                signal g_0 : unsigned(i_data_width-1 downto 0);
    129                                                signal b_0 : unsigned(i_data_width-1 downto 0);
    130                                                signal en_0 : std_logic;
    131                                                -- Stage 1 signals
    132                                                signal y_r, y_g, y_b    : unsigned(i_precision-1 downto 0);
    133                                                signal cb_r, cb_g, cb_b : unsigned(i_precision-1 downto 0);
    134                                                signal cr_r, cr_g, cr_b : unsigned(i_precision-1 downto 0);
    135                                                signal en_1 : std_logic;
    136                                                -- Stage 2 signals
    137                                                signal y_2, cb_2, cr_2 : unsigned(i_data_width downto 0);
    138                                                signal en_2 : std_logic;
    139                                                -- Stage 3 signals
    140                                                signal y_3, cb_3, cr_3 : unsigned(i_data_width-1 downto 0);
    141                                                signal en_3 : std_logic;
    142                                              begin
    143                                                -- Assign constants based on current mode (full range or not)
    144                                                GEN_FULL_RANGE_CONSTANTS_T: if i_full_range generate
    145                                                  C_I32_Y_R  <= x"41bcec85";
    146                                                  C_I32_Y_G  <= x"810e9920";
    147                                                  C_I32_Y_B  <= x"19105e1c";
    148                                                  C_I32_CB_R <= x"25f1f14a";
    149                                                  C_I32_CB_G <= x"4a7e73a3";
    150                                                  C_I32_CB_B <= x"707064ed";
    151                                                  C_I32_CR_R <= x"707064ed";
    152                                                  C_I32_CR_G <= x"5e276b7f";
    153                                                  C_I32_CR_B <= x"1248f96e";
    154                                                  C_I_16 <= shift_left(to_unsigned(1,i_data_width), i_data_width-4);
    155                                                end generate;
    156                                                GEN_FULL_RANGE_CONSTANTS_F: if not i_full_range generate
    157             1                          1         C_I32_Y_R  <= x"4c8b4396";
    158             1                          1         C_I32_Y_G  <= x"9645a1cb";
    159             1                          1         C_I32_Y_B  <= x"1d2f1aa0";
    160             1                          1         C_I32_CB_R <= x"2c2e989a";
    161             1                          1         C_I32_CB_G <= x"56bd6e8b"; 
    162             1                          1         C_I32_CB_B <= x"82ec0725";
    163             1                          1         C_I32_CR_R <= x"82ec0725";
    164             1                          1         C_I32_CR_G <= x"6da187a5";
    165             1                          1         C_I32_CR_B <= x"154a7f80";
    166             1                          1         C_I_16 <= (others => '0');
    167                                                end generate;
    168                                                -- Compute coefficients constants in desired precsion, with a bit of rounding
    169                                                C_I_Y_R <= C_I32_Y_R(31 downto 31-i_precision+1)
    170                                                           when C_I32_Y_R(31-i_precision) = '0'
    171             1                          2                  else C_I32_Y_R(31 downto 31-i_precision+1) + C_1_PRE;
    172                                                C_I_Y_G <= C_I32_Y_G(31 downto 31-i_precision+1)
    173                                                           when C_I32_Y_G(31-i_precision) = '0'
    174             1                          2                  else C_I32_Y_G(31 downto 31-i_precision+1) + C_1_PRE;
    175                                                C_I_Y_B <= C_I32_Y_B(31 downto 31-i_precision+1)
    176                                                           when C_I32_Y_B(31-i_precision) = '0'
    177             1                          2                  else C_I32_Y_B(31 downto 31-i_precision+1) + C_1_PRE;
    178                                                C_I_CB_R <= C_I32_CB_R(31 downto 31-i_precision+1)
    179                                                           when C_I32_CB_R(31-i_precision) = '0'
    180             1                          2                  else C_I32_CB_R(31 downto 31-i_precision+1) + C_1_PRE;
    181                                                C_I_CB_G <= C_I32_CB_G(31 downto 31-i_precision+1)
    182                                                           when C_I32_CB_G(31-i_precision) = '0'
    183             1                          2                  else C_I32_CB_G(31 downto 31-i_precision+1) + C_1_PRE;
    184                                                C_I_CB_B <= C_I32_CB_B(31 downto 31-i_precision+1)
    185                                                           when C_I32_CB_B(31-i_precision) = '0'
    186             1                          2                  else C_I32_CB_B(31 downto 31-i_precision+1) + C_1_PRE;
    187                                                C_I_CR_R <= C_I32_CR_R(31 downto 31-i_precision+1)
    188                                                           when C_I32_CR_R(31-i_precision) = '0'
    189             1                          2                  else C_I32_CR_R(31 downto 31-i_precision+1) + C_1_PRE;
    190                                                C_I_CR_G <= C_I32_CR_G(31 downto 31-i_precision+1)
    191                                                           when C_I32_CR_G(31-i_precision) = '0'
    192             1                          2                  else C_I32_CR_G(31 downto 31-i_precision+1) + C_1_PRE;
    193                                                C_I_CR_B <= C_I32_CR_B(31 downto 31-i_precision+1)
    194                                                           when C_I32_CR_B(31-i_precision) = '0'
    195             1                          2                  else C_I32_CR_B(31 downto 31-i_precision+1) + C_1_PRE;
    196             1                          1       C_I_128 <= shift_left(to_unsigned(1,i_data_width), i_data_width-1);
    197                                                -----------------------------------------------------------------------------
    198                                                -- STAGE 0: Input registers
    199                                                -----------------------------------------------------------------------------
    200                                                STAGE_0_PROC: process (clk, rst_l, iRgb.red, iRgb.green, iRgb.blue, iRgb.valid)
    201                                                begin
    202                                                  if rst_l = '0' then
    203             1                        105           en_0 <= '0';
    204             1                        105           r_0  <= (others => '0');
    205             1                        105           g_0  <= (others => '0');
    206             1                        105           b_0  <= (others => '0');
    207                                                  elsif clk'event and clk = '1' then
    208             1                          2           r_0  <= unsigned(iRgb.red);
    209             1                          2           g_0  <= unsigned(iRgb.green);
    210             1                          2           b_0  <= unsigned(iRgb.blue);
    211             1                          2           en_0 <= iRgb.valid;
    212                                                  end if;
    213                                                end process;
    214                                                -----------------------------------------------------------------------------
    215                                                -- STAGE 1: Multiplication
    216                                                -----------------------------------------------------------------------------
    217                                                STAGE_1_PROC: process (clk, rst_l, en_0, r_0, g_0, b_0)
    218                                                  variable temp : unsigned(i_data_width+i_precision-1 downto 0);
    219                                                begin
    220                                                  if rst_l = '0' then
    221             1                        101           en_1 <= '0';
    222             1                        101           y_r <= (others => '0');
    223             1                        101           y_g <= (others => '0');
    224             1                        101           y_b <= (others => '0');
    225             1                        101           cb_r <= (others => '0');
    226             1                        101           cb_g <= (others => '0');
    227             1                        101           cb_b <= (others => '0');
    228             1                        101           cr_r <= (others => '0');
    229             1                        101           cr_g <= (others => '0');
    230             1                        101           cr_b <= (others => '0');
    231                                                  elsif clk'event and clk = '1' then
    232             1                          2           en_1 <= en_0;
    233                                                    -- Perform multiplication at full precision. i_precision-bit *
    234                                                    -- i_data_width-bit to produce (i_precision+i_data_width)-bit result.
    235             1                          2           temp := C_I_Y_R * r_0;
    236             1                          2           y_r <= temp(temp'left downto temp'left-i_precision+1);
    237             1                          2           temp := C_I_Y_G * g_0;
    238             1                          2           y_g <= temp(temp'left downto temp'left-i_precision+1);
    239             1                          2           temp := C_I_Y_B * b_0;
    240             1                          2           y_b <= temp(temp'left downto temp'left-i_precision+1);
    241             1                          2           temp := C_I_CB_R * r_0;
    242             1                          2           cb_r <= temp(temp'left downto temp'left-i_precision+1);
    243             1                          2           temp := C_I_CB_G * g_0;
    244             1                          2           cb_g <= temp(temp'left downto temp'left-i_precision+1);
    245             1                          2           temp := C_I_CB_B * b_0;
    246             1                          2           cb_b <= temp(temp'left downto temp'left-i_precision+1);
    247             1                          2           temp := C_I_CR_R * r_0;
    248             1                          2           cr_r <= temp(temp'left downto temp'left-i_precision+1);
    249             1                          2           temp := C_I_CR_G * g_0;
    250             1                          2           cr_g <= temp(temp'left downto temp'left-i_precision+1);
    251             1                          2           temp := C_I_CR_B * b_0;
    252             1                          2           cr_b <= temp(temp'left downto temp'left-i_precision+1);
    253                                                  end if;
    254                                                end process;
    255                                                -----------------------------------------------------------------------------
    256                                                -- STAGE 2: Addition
    257                                                -----------------------------------------------------------------------------
    258                                                STAGE_2_PROC: process (clk, rst_l, en_1,y_r, y_g, y_b,cb_r, cb_g, cb_b,cr_r, cr_g, cr_b)
    259                                                  variable temp_y   : unsigned(i_precision-1 downto 0);
    260                                                  variable temp_cb  : unsigned(i_precision-1 downto 0);
    261                                                  variable temp_cr  : unsigned(i_precision-1 downto 0);
    262                                                begin
    263                                                  if rst_l = '0' then
    264             1                        101           en_2 <= '0';
    265             1                        101           y_2 <= (others => '0');
    266             1                        101           cb_2 <= (others => '0');
    267             1                        101           cr_2 <= (others => '0');
    268                                                  elsif clk'event and clk = '1' then
    269             1                          3           en_2 <= en_1;
    270                                                    -- Do addition
    271             1                          3           temp_y  := y_r + y_g + y_b;
    272             1                          3           temp_cb := cb_b - cb_g - cb_r;
    273             1                          3           temp_cr := cr_r - cr_g - cr_b;
    274                                                    -- Truncate result to i_data_width+1 bits (1 bit for rounding later)
    275             1                          3           y_2  <= temp_y(temp_y'left downto temp_y'left-i_data_width);
    276             1                          3           cb_2 <= temp_cb(temp_cb'left downto temp_cb'left-i_data_width);
    277             1                          3           cr_2 <= temp_cr(temp_cr'left downto temp_cr'left-i_data_width);
    278                                                  end if;
    279                                                end process;
    280                                                -----------------------------------------------------------------------------
    281                                                -- STAGE 3: Final Addition and Rounding
    282                                                -----------------------------------------------------------------------------
    283                                                STAGE_3_PROC: process (clk, rst_l, en_2,y_r, y_g, y_b,cb_r, cb_g, cb_b,cr_r, cr_g, cr_b)
    284                                                  variable y_round  : unsigned(i_data_width-1 downto 0);
    285                                                  variable cb_round : unsigned(i_data_width-1 downto 0);
    286                                                  variable cr_round : unsigned(i_data_width-1 downto 0);
    287                                                begin
    288                                                  if rst_l = '0' then
    289             1                        101           en_3 <= '0';
    290             1                        101           y_3 <= (others => '0');
    291             1                        101           cb_3 <= (others => '0');
    292             1                        101           cr_3 <= (others => '0');
    293                                                  elsif clk'event and clk = '1' then
    294             1                          4           en_3 <= en_2;
    295                                                    -- Determine rounding, combine with the 128 constant
    296                                                    if y_2(0) = '1' then
    297                                                      if i_full_range then
    298                                                        y_round := C_I_16+1;
    299                                                      else
    300             1                          1               y_round := to_unsigned(1, i_data_width);
    301                                                      end if;
    302                                                    else
    303                                                      if i_full_range then
    304                                                        y_round := C_I_16;
    305                                                      else
    306             1                          3               y_round := (others => '0');
    307                                                      end if;
    308                                                    end if;
    309                                                    if cb_2(0) = '1' then
    310             1                    ***0***             cb_round := resize(C_I_128+1, i_data_width);
    311                                                    else
    312             1                          4             cb_round := C_I_128;
    313                                                    end if;
    314                                                    if cr_2(0) = '1' then
    315             1                    ***0***             cr_round := resize(C_I_128+1, i_data_width);
    316                                                    else
    317             1                          4             cr_round := C_I_128;
    318                                                    end if;
    319             1                          4           y_3  <= y_2(y_2'left downto 1) + y_round;
    320             1                          4           cb_3 <= cb_2(cb_2'left downto 1) + cb_round;
    321             1                          4           cr_3 <= cr_2(cr_2'left downto 1) + cr_round;
    322                                                  end if;
    323                                                end process;
    324             1                          3       y     <= std_logic_vector(y_3);
    325             1                          3       cb    <= std_logic_vector(cb_3);
    326             1                          3       cr    <= std_logic_vector(cr_3);
    327             1                          2       oValid <= en_3;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        34        25         9      73.5

================================Branch Details================================

Branch Coverage for Design Unit work.rgb_ycbcr(imp)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Filters/rgb_ycbcr.vhd
------------------------------------IF Branch------------------------------------
    170                                        2     Count coming in to IF
    170             1                    ***0***                  when C_I32_Y_R(31-i_precision) = '0'
    171             1                          2                  else C_I32_Y_R(31 downto 31-i_precision+1) + C_1_PRE;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    173                                        2     Count coming in to IF
    173             1                          1                  when C_I32_Y_G(31-i_precision) = '0'
    174             1                          1                  else C_I32_Y_G(31 downto 31-i_precision+1) + C_1_PRE;
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    176                                        2     Count coming in to IF
    176             1                    ***0***                  when C_I32_Y_B(31-i_precision) = '0'
    177             1                          2                  else C_I32_Y_B(31 downto 31-i_precision+1) + C_1_PRE;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    179                                        2     Count coming in to IF
    179             1                    ***0***                  when C_I32_CB_R(31-i_precision) = '0'
    180             1                          2                  else C_I32_CB_R(31 downto 31-i_precision+1) + C_1_PRE;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    182                                        2     Count coming in to IF
    182             1                    ***0***                  when C_I32_CB_G(31-i_precision) = '0'
    183             1                          2                  else C_I32_CB_G(31 downto 31-i_precision+1) + C_1_PRE;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    185                                        2     Count coming in to IF
    185             1                    ***0***                  when C_I32_CB_B(31-i_precision) = '0'
    186             1                          2                  else C_I32_CB_B(31 downto 31-i_precision+1) + C_1_PRE;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    188                                        2     Count coming in to IF
    188             1                    ***0***                  when C_I32_CR_R(31-i_precision) = '0'
    189             1                          2                  else C_I32_CR_R(31 downto 31-i_precision+1) + C_1_PRE;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    191                                        2     Count coming in to IF
    191             1                          1                  when C_I32_CR_G(31-i_precision) = '0'
    192             1                          1                  else C_I32_CR_G(31 downto 31-i_precision+1) + C_1_PRE;
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    194                                        2     Count coming in to IF
    194             1                    ***0***                  when C_I32_CR_B(31-i_precision) = '0'
    195             1                          2                  else C_I32_CR_B(31 downto 31-i_precision+1) + C_1_PRE;
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    202                                      107     Count coming in to IF
    202             1                        105         if rst_l = '0' then
    207             1                          2         elsif clk'event and clk = '1' then
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    220                                      103     Count coming in to IF
    220             1                        101         if rst_l = '0' then
    231             1                          2         elsif clk'event and clk = '1' then
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    263                                      104     Count coming in to IF
    263             1                        101         if rst_l = '0' then
    268             1                          3         elsif clk'event and clk = '1' then
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    288                                      105     Count coming in to IF
    288             1                        101         if rst_l = '0' then
    293             1                          4         elsif clk'event and clk = '1' then
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    296                                        4     Count coming in to IF
    296             1                          1           if y_2(0) = '1' then
    302             1                          3           else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    297                                        1     Count coming in to IF
    297             1                       EBCS             if i_full_range then
    299             1                          1             else
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    303                                        3     Count coming in to IF
    303             1                       EBCS             if i_full_range then
    305             1                          3             else
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    309                                        4     Count coming in to IF
    309             1                    ***0***           if cb_2(0) = '1' then
    311             1                          4           else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    314                                        4     Count coming in to IF
    314             1                    ***0***           if cr_2(0) = '1' then
    316             1                          4           else
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.syncframes(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           33        33         0     100.0

================================Statement Details================================

Statement Coverage for Design Unit work.syncframes(behavioral) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/SyncFrames.vhd
    1                                                library ieee;
    2                                                use ieee.std_logic_1164.all;
    3                                                use ieee.numeric_std.all;
    4                                                use work.constantspackage.all;
    5                                                use work.vpfRecords.all;
    6                                                use work.portspackage.all;
    7                                                entity SyncFrames is
    8                                                generic (
    9                                                    pixelDelay     : integer := 8);
    10                                               port (
    11                                                   clk            : in  std_logic;
    12                                                   reset          : in  std_logic;
    13                                                   iRgb           : in channel;
    14                                                   oRgb           : out channel);
    15                                               end SyncFrames;
    16                                               architecture behavioral of SyncFrames is
    17                                                   signal rgbDelays      : rgbArray(0 to 31);
    18                                               begin
    19              1                         38     oRgb <= rgbDelays(pixelDelay).rgb;
    20                                               process (clk) begin
    21                                                   if rising_edge(clk) then
    22              1                        459             rgbDelays(0).rgb      <= iRgb;
    23              1                        459             rgbDelays(1)          <= rgbDelays(0);
    24              1                        459             rgbDelays(2)          <= rgbDelays(1); 
    25              1                        459             rgbDelays(3)          <= rgbDelays(2); 
    26              1                        459             rgbDelays(4)          <= rgbDelays(3); 
    27              1                        459             rgbDelays(5)          <= rgbDelays(4); 
    28              1                        459             rgbDelays(6)          <= rgbDelays(5); 
    29              1                        459             rgbDelays(7)          <= rgbDelays(6); 
    30              1                        459             rgbDelays(8)          <= rgbDelays(7); 
    31              1                        459             rgbDelays(9)          <= rgbDelays(8); 
    32              1                        459             rgbDelays(10)         <= rgbDelays(9); 
    33              1                        459             rgbDelays(11)         <= rgbDelays(10);
    34              1                        459             rgbDelays(12)         <= rgbDelays(11);
    35              1                        459             rgbDelays(13)         <= rgbDelays(12);
    36              1                        459             rgbDelays(14)         <= rgbDelays(13);
    37              1                        459             rgbDelays(15)         <= rgbDelays(14);
    38              1                        459             rgbDelays(16)         <= rgbDelays(15);
    39              1                        459             rgbDelays(17)         <= rgbDelays(16);
    40              1                        459             rgbDelays(18)         <= rgbDelays(17);
    41              1                        459             rgbDelays(19)         <= rgbDelays(18);
    42              1                        459             rgbDelays(20)         <= rgbDelays(19);
    43              1                        459             rgbDelays(21)         <= rgbDelays(20);
    44              1                        459             rgbDelays(22)         <= rgbDelays(21);
    45              1                        459             rgbDelays(23)         <= rgbDelays(22);
    46              1                        459             rgbDelays(24)         <= rgbDelays(23);
    47              1                        459             rgbDelays(25)         <= rgbDelays(24);
    48              1                        459             rgbDelays(26)         <= rgbDelays(25);
    49              1                        459             rgbDelays(27)         <= rgbDelays(26);
    50              1                        459             rgbDelays(28)         <= rgbDelays(27);
    51              1                        459             rgbDelays(29)         <= rgbDelays(28);
    52              1                        459             rgbDelays(30)         <= rgbDelays(29);
    53              1                        459             rgbDelays(31)         <= rgbDelays(30);

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         1         1         0     100.0

================================Branch Details================================

Branch Coverage for Design Unit work.syncframes(behavioral)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/SyncFrames.vhd
------------------------------------IF Branch------------------------------------
    21                                       459     Count coming in to IF
    21              1                        459         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.tap_buffer(arch)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            7         6         1      85.7

================================Statement Details================================

Statement Coverage for Design Unit work.tap_buffer(arch) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/tap_buffer.vhd
    21                                               architecture arch of tap_buffer is
    22                                                   type ram_type is array (0 to img_width) of std_logic_vector (dataWidth - 1 downto 0);
    23                                                   signal rowbuffer    : ram_type := (others => (others => '0'));
    24                                                   signal oregister    : std_logic_vector(dataWidth - 1 downto 0);
    25                                                   signal write1s_enb  : std_logic;
    26                                                   signal write2s_enb  : std_logic;
    27                                                   signal write3s_enb  : std_logic;  
    28                                                   signal write_or_enb : std_logic;
    29                                               begin
    30                                               process (write_clk) begin
    31                                                   if rising_edge(write_clk) then
    32              1                      43040             write1s_enb <= write_enb;
    33              1                      43040             write2s_enb <= write1s_enb;
    34              1                      43040             write3s_enb <= write2s_enb;
    35                                                   end if;
    36                                               end process;
    37              1                          8     write_or_enb <= write_enb or write3s_enb;
    38                                               process (write_clk) begin
    39                                               if rising_edge(write_clk) then
    40                                                   if (write_or_enb ='1') then
    41              1                    ***0***             rowbuffer(to_integer(unsigned(w_address))) <= idata;
    42                                                   end if;
    43                                               end if;
    44                                               end process;
    45                                               process (read_clk) begin
    46                                               if rising_edge(read_clk) then
    47              1                      43040         oregister <= rowbuffer(to_integer(unsigned(r_address)));
    48                                               end if;
    49                                               end process;
    50                                               process (read_clk) begin
    51                                               if rising_edge(read_clk) then
    52              1                          8         odata <= oregister;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         6         5         1      83.3

================================Branch Details================================

Branch Coverage for Design Unit work.tap_buffer(arch)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/tap_buffer.vhd
------------------------------------IF Branch------------------------------------
    31                                     43040     Count coming in to IF
    31              1                      43040         if rising_edge(write_clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    39                                        12     Count coming in to IF
    39              1                         12     if rising_edge(write_clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    40                                        12     Count coming in to IF
    40              1                    ***0***         if (write_or_enb ='1') then
                                              12     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    46                                     43040     Count coming in to IF
    46              1                      43040     if rising_edge(read_clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    51                                         8     Count coming in to IF
    51              1                          8     if rising_edge(read_clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             2         0         2       0.0

================================Expression Details================================

Expression Coverage for Design Unit work.tap_buffer(arch) --

  File ../../uvmtb/dut/src/Control/tap_buffer.vhd
----------------Focused Expression View-----------------
Line       37 Item    1  (write_enb or write3s_enb)
Expression totals: 0 of 2 input terms covered = 0.0%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
    write_enb         N  '_1' not hit             Hit '_1'
  write3s_enb         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          4  write_enb_0           not write3s_enb               
  Row   2:    ***0***  write_enb_1           not write3s_enb               
  Row   3:          4  write3s_enb_0         not write_enb                 
  Row   4:    ***0***  write3s_enb_1         not write_enb                 


FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.tapline(arch)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           16        14         2      87.5

================================Statement Details================================

Statement Coverage for Design Unit work.tapline(arch) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/TapsController.vhd
    1                                                library ieee;
    2                                                use ieee.std_logic_1164.all;
    3                                                use ieee.numeric_std.all;
    4                                                use work.constantspackage.all;
    5                                                use work.vpfRecords.all;
    6                                                use work.portspackage.all;
    7                                                entity TapsController is
    8                                                generic (
    9                                                    img_width     : integer := 4096;
    10                                                   tpDataWidth   : integer := 8);
    11                                               port (
    12                                                   clk         : in std_logic;
    13                                                   rst_l       : in std_logic;
    14                                                   iRgb        : in channel;
    15                                               	tpValid     : out std_logic;
    16                                                   tp0         : out std_logic_vector(tpDataWidth - 1 downto 0);
    17                                                   tp1         : out std_logic_vector(tpDataWidth - 1 downto 0);
    18                                                   tp2         : out std_logic_vector(tpDataWidth - 1 downto 0));
    19                                               end entity;
    20                                               architecture arch of TapsController is
    21                                                   signal tap0_data   : std_logic_vector(tpDataWidth - 1 downto 0) := (others => '0');
    22                                                   signal tap1_data   : std_logic_vector(tpDataWidth - 1 downto 0) := (others => '0');
    23                                                   signal d2RGB       : std_logic_vector(tpDataWidth - 1 downto 0) := (others => '0');
    24                                                   signal rgbPixel    : std_logic_vector(tpDataWidth - 1 downto 0) := (others => '0');
    25                                               begin
    26                                               process (clk,rst_l) begin
    27                                                   if (rst_l = lo) then
    28                                                       tp0      <= (others => '0');
    29                                                       tp1      <= (others => '0');
    30                                                       tp2      <= (others => '0');
    31                                                       tpValid  <= lo;
    32                                                   elsif rising_edge(clk) then 
    33                                                       tp0      <= d2RGB; 
    34                                                       tp1      <= tap0_data; 
    35                                                       tp2      <= tap1_data;
    36                                                       tpValid  <= iRgb.valid;
    37                                                   end if; 
    38                                               end process;
    39                                               TPDATAWIDTH1_ENABLED: if (tpDataWidth = 8) generate
    40                                               begin
    41                                               process (clk,rst_l) begin
    42                                                   if (rst_l = lo) then
    43                                                       rgbPixel <= (others => '0');
    44                                                       d2RGB    <= (others => '0');
    45                                                   elsif rising_edge(clk) then 
    46                                                       if (iRgb.valid = hi) then
    47                                                           rgbPixel      <= iRgb.green;
    48                                                       end if;
    49                                                       d2RGB <= rgbPixel;
    50                                                   end if; 
    51                                               end process;
    52                                               end generate TPDATAWIDTH1_ENABLED;
    53                                               TPDATAWIDTH3_ENABLED: if (tpDataWidth = 24) generate
    54                                               begin
    55                                               process (clk,rst_l) begin
    56                                                   if (rst_l = lo) then
    57                                                       rgbPixel <= (others => '0');
    58                                                       d2RGB    <= (others => '0');
    59                                                   elsif rising_edge(clk) then 
    60                                                       if (iRgb.valid = hi) then
    61                                                           rgbPixel     <= iRgb.red & iRgb.green & iRgb.blue;
    62                                                       end if;
    63                                                       d2RGB <= rgbPixel;
    64                                                   end if; 
    65                                               end process;
    66                                               end generate TPDATAWIDTH3_ENABLED;
    67                                               tapLineD0: tapLine
    68                                               generic map(
    69                                                   img_width   => img_width,
    70                                                   tpDataWidth => tpDataWidth)
    71                                               port map(
    72                                                   clk         => clk, 
    73                                                   rst_l       => rst_l, 
    74                                                   valid       => iRgb.valid,
    75                                                   idata       => d2RGB,
    76                                                   odata       => tap0_data);
    77                                               tapLineD1: tapLine
    78                                               generic map(
    79                                                   img_width   => img_width,
    80                                                   tpDataWidth => tpDataWidth)
    81                                               port map(
    82                                                   clk         => clk, 
    83                                                   rst_l       => rst_l, 
    84                                                   valid       => iRgb.valid,
    85                                                   idata       => tap0_data,
    86                                                   odata       => tap1_data);    
    87                                               end architecture;
    88                                               library ieee;
    89                                               use ieee.std_logic_1164.all;
    90                                               use ieee.numeric_std.all;
    91                                               use work.constantspackage.all;
    92                                               use work.vpfRecords.all;
    93                                               entity tapLine is
    94                                               generic (
    95                                                   img_width    : integer := 4095;
    96                                                   tpDataWidth  : integer := 12);
    97                                               port (
    98                                                   clk          : in std_logic;
    99                                                   rst_l        : in std_logic;
    100                                                  valid        : in std_logic;
    101                                                  idata        : in std_logic_vector(tpDataWidth - 1 downto 0);
    102                                                  odata        : out std_logic_vector(tpDataWidth - 1 downto 0));
    103                                              end entity;
    104                                              architecture arch of tapLine is
    105                                                  type ram_type is array (0 to img_width-1) of std_logic_vector (tpDataWidth - 1 downto 0);
    106                                                  signal rowbuffer     : ram_type := (others => (others => '0'));
    107                                                  signal oregister     : std_logic_vector(tpDataWidth - 1 downto 0) := (others => '0');
    108                                                  signal write1s_enb   : std_logic;
    109                                                  signal write2s_enb   : std_logic;
    110                                                  signal write3s_enb   : std_logic;  
    111                                                  signal rAddressCnt   : integer := zero;
    112                                                  signal ramWaddr      : integer := zero;
    113                                              begin
    114                                              process (clk,rst_l) begin
    115                                                  if (rst_l = lo) then
    116             1                        800             rAddressCnt  <= zero;
    117             1                        800             ramWaddr     <= zero;
    118                                                  elsif rising_edge(clk) then 
    119                                                      if (valid = hi) then
    120             1                    ***0***                 rAddressCnt  <= rAddressCnt + 1;
    121                                                      else
    122             1                         16                 rAddressCnt  <= zero;
    123                                                      end if;
    124             1                         16             ramWaddr <= rAddressCnt;
    125                                                  end if; 
    126                                              end process;
    127                                              process (clk,rst_l) begin
    128                                                  if (rst_l = lo) then
    129             1                        800             write1s_enb  <= lo;
    130             1                        800             write2s_enb  <= lo;
    131             1                        800             write3s_enb  <= lo;
    132                                                  elsif rising_edge(clk) then 
    133             1                         16             write1s_enb <= valid;
    134             1                         16             write2s_enb <= write1s_enb;
    135             1                         16             write3s_enb <= write2s_enb;
    136                                                  end if; 
    137                                              end process;
    138                                              process (clk) begin
    139                                                  if rising_edge(clk) then
    140             1                          8             rowbuffer(ramWaddr) <= idata;
    141                                                  end if;
    142                                              end process;
    143                                              process (clk,rst_l) begin
    144                                                  if (rst_l = lo) then
    145             1                        800             oregister  <= (others => '0');
    146                                                  elsif rising_edge(clk) then 
    147             1                      85288             oregister <= rowbuffer(rAddressCnt);
    148                                                  end if; 
    149                                              end process;
    150                                              process (clk,rst_l) begin
    151                                                  if (rst_l = lo) then
    152             1                        800             odata  <= (others => '0');
    153                                                  elsif rising_edge(clk) then 
    154                                                      if (write3s_enb ='1') then
    155             1                    ***0***                 odata <= oregister;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        13        11         2      84.6

================================Branch Details================================

Branch Coverage for Design Unit work.tapline(arch)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/TapsController.vhd
------------------------------------IF Branch------------------------------------
    115                                      816     Count coming in to IF
    115             1                        800         if (rst_l = lo) then
    118             1                         16         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    119                                       16     Count coming in to IF
    119             1                    ***0***             if (valid = hi) then
    121             1                         16             else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    128                                      816     Count coming in to IF
    128             1                        800         if (rst_l = lo) then
    132             1                         16         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    139                                        8     Count coming in to IF
    139             1                          8         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    144                                    86088     Count coming in to IF
    144             1                        800         if (rst_l = lo) then
    146             1                      85288         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    151                                      816     Count coming in to IF
    151             1                        800         if (rst_l = lo) then
    153             1                         16         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    154                                       16     Count coming in to IF
    154             1                    ***0***             if (write3s_enb ='1') then
                                              16     All False Count
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.tapscontroller(arch)::TPDATAWIDTH1_ENABLED
=================================================================================
=== Design Unit: work.tapscontroller(arch)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            4         3         1      75.0

================================Statement Details================================

Statement Coverage for generate block work.tapscontroller(arch)::TPDATAWIDTH1_ENABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/TapsController.vhd
    40                                               begin
    41                                               process (clk,rst_l) begin
    42                                                   if (rst_l = lo) then
    43              1                        100             rgbPixel <= (others => '0');
    44              1                        100             d2RGB    <= (others => '0');
    45                                                   elsif rising_edge(clk) then 
    46                                                       if (iRgb.valid = hi) then
    47              1                    ***0***                 rgbPixel      <= iRgb.green;
    48                                                       end if;
    49              1                          2             d2RGB <= rgbPixel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         4         3         1      75.0

================================Branch Details================================

Branch Coverage for generate block work.tapscontroller(arch)::TPDATAWIDTH1_ENABLED

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/TapsController.vhd
------------------------------------IF Branch------------------------------------
    42                                       102     Count coming in to IF
    42              1                        100         if (rst_l = lo) then
    45              1                          2         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    46                                         2     Count coming in to IF
    46              1                    ***0***             if (iRgb.valid = hi) then
                                               2     All False Count
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Generate Block: work.tapscontroller(arch)::TPDATAWIDTH3_ENABLED
=================================================================================
=== Design Unit: work.tapscontroller(arch)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            4         3         1      75.0

================================Statement Details================================

Statement Coverage for generate block work.tapscontroller(arch)::TPDATAWIDTH3_ENABLED --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/TapsController.vhd
    54                                               begin
    55                                               process (clk,rst_l) begin
    56                                                   if (rst_l = lo) then
    57              1                        300             rgbPixel <= (others => '0');
    58              1                        300             d2RGB    <= (others => '0');
    59                                                   elsif rising_edge(clk) then 
    60                                                       if (iRgb.valid = hi) then
    61              1                    ***0***                 rgbPixel     <= iRgb.red & iRgb.green & iRgb.blue;
    62                                                       end if;
    63              1                          6             d2RGB <= rgbPixel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         4         3         1      75.0

================================Branch Details================================

Branch Coverage for generate block work.tapscontroller(arch)::TPDATAWIDTH3_ENABLED

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/TapsController.vhd
------------------------------------IF Branch------------------------------------
    56                                       306     Count coming in to IF
    56              1                        300         if (rst_l = lo) then
    59              1                          6         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    60                                         6     Count coming in to IF
    60              1                    ***0***             if (iRgb.valid = hi) then
                                               6     All False Count
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.tapscontroller(arch)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           16        14         2      87.5

================================Statement Details================================

Statement Coverage for Design Unit work.tapscontroller(arch) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/TapsController.vhd
    1                                                library ieee;
    2                                                use ieee.std_logic_1164.all;
    3                                                use ieee.numeric_std.all;
    4                                                use work.constantspackage.all;
    5                                                use work.vpfRecords.all;
    6                                                use work.portspackage.all;
    7                                                entity TapsController is
    8                                                generic (
    9                                                    img_width     : integer := 4096;
    10                                                   tpDataWidth   : integer := 8);
    11                                               port (
    12                                                   clk         : in std_logic;
    13                                                   rst_l       : in std_logic;
    14                                                   iRgb        : in channel;
    15                                               	tpValid     : out std_logic;
    16                                                   tp0         : out std_logic_vector(tpDataWidth - 1 downto 0);
    17                                                   tp1         : out std_logic_vector(tpDataWidth - 1 downto 0);
    18                                                   tp2         : out std_logic_vector(tpDataWidth - 1 downto 0));
    19                                               end entity;
    20                                               architecture arch of TapsController is
    21                                                   signal tap0_data   : std_logic_vector(tpDataWidth - 1 downto 0) := (others => '0');
    22                                                   signal tap1_data   : std_logic_vector(tpDataWidth - 1 downto 0) := (others => '0');
    23                                                   signal d2RGB       : std_logic_vector(tpDataWidth - 1 downto 0) := (others => '0');
    24                                                   signal rgbPixel    : std_logic_vector(tpDataWidth - 1 downto 0) := (others => '0');
    25                                               begin
    26                                               process (clk,rst_l) begin
    27                                                   if (rst_l = lo) then
    28              1                        400             tp0      <= (others => '0');
    29              1                        400             tp1      <= (others => '0');
    30              1                        400             tp2      <= (others => '0');
    31              1                        400             tpValid  <= lo;
    32                                                   elsif rising_edge(clk) then 
    33              1                          8             tp0      <= d2RGB; 
    34              1                          8             tp1      <= tap0_data; 
    35              1                          8             tp2      <= tap1_data;
    36              1                          8             tpValid  <= iRgb.valid;
    37                                                   end if; 
    38                                               end process;
    39                                               TPDATAWIDTH1_ENABLED: if (tpDataWidth = 8) generate
    40                                               begin
    41                                               process (clk,rst_l) begin
    42                                                   if (rst_l = lo) then
    43              1                        100             rgbPixel <= (others => '0');
    44              1                        100             d2RGB    <= (others => '0');
    45                                                   elsif rising_edge(clk) then 
    46                                                       if (iRgb.valid = hi) then
    47              1                    ***0***                 rgbPixel      <= iRgb.green;
    48                                                       end if;
    49              1                          2             d2RGB <= rgbPixel;
    50                                                   end if; 
    51                                               end process;
    52                                               end generate TPDATAWIDTH1_ENABLED;
    53                                               TPDATAWIDTH3_ENABLED: if (tpDataWidth = 24) generate
    54                                               begin
    55                                               process (clk,rst_l) begin
    56                                                   if (rst_l = lo) then
    57              1                        300             rgbPixel <= (others => '0');
    58              1                        300             d2RGB    <= (others => '0');
    59                                                   elsif rising_edge(clk) then 
    60                                                       if (iRgb.valid = hi) then
    61              1                    ***0***                 rgbPixel     <= iRgb.red & iRgb.green & iRgb.blue;
    62                                                       end if;
    63              1                          6             d2RGB <= rgbPixel;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        10         8         2      80.0

================================Branch Details================================

Branch Coverage for Design Unit work.tapscontroller(arch)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/TapsController.vhd
------------------------------------IF Branch------------------------------------
    27                                       408     Count coming in to IF
    27              1                        400         if (rst_l = lo) then
    32              1                          8         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    42                                       102     Count coming in to IF
    42              1                        100         if (rst_l = lo) then
    45              1                          2         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    46                                         2     Count coming in to IF
    46              1                    ***0***             if (iRgb.valid = hi) then
                                               2     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    56                                       306     Count coming in to IF
    56              1                        300         if (rst_l = lo) then
    59              1                          6         elsif rising_edge(clk) then 
                                            ECOP     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    60                                         6     Count coming in to IF
    60              1                    ***0***             if (iRgb.valid = hi) then
                                               6     All False Count
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.template
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           24         8        16      33.3

================================Statement Details================================

Statement Coverage for Design Unit work.template --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/template.v
    1                                                module template(input wire clk,
    2                                                		   input wire en_i,
    3                                                		   input wire ina,
    4                                                		   input wire inb,
    5                                                		   output reg en_o,
    6                                                		   output reg out_c);
    7                                                	integer counter, state;
    8                                                	reg[1:0] temp_a, temp_b;
    9                                                	reg[2:0] temp_out;
    10                                               	//Init
    11                                               	initial begin
    12              1                          1     		counter = 0;
    13              1                          1     		temp_a = 2'b00;
    14              1                          1     		temp_b = 2'b00;
    15              1                          1     		temp_out = 3'b000;
    16              1                          1     		out_c = 1;
    17              1                          1     		en_o <= 0;
    18              1                          1     		state = 0;
    19                                               	end
    20              1                      10760     	always@(posedge clk)
    21                                               	begin
    22                                               		//State 0: Wait for en_i
    23                                               		if(en_i==1'b1)
    24                                               		begin
    25              1                    ***0***     			state = 1;
    26                                               		end
    27                                               		case(state)
    28                                               			//State 1: Start reading inputs
    29                                               			1: begin
    30              1                    ***0***     				temp_a = temp_a << 1;
    31              1                    ***0***     				temp_a = temp_a | ina;
    32              1                    ***0***     				temp_b = temp_b << 1;
    33              1                    ***0***     				temp_b = temp_b | inb;
    34              1                    ***0***     				counter = counter + 1;
    35                                               				//After 2 bits, do the operation an move to the next state
    36                                               				if(counter==2) begin
    37              1                    ***0***     					temp_out = temp_a + temp_b;
    38              1                    ***0***     					state = 2;
    39                                               				end
    40                                               			end
    41                                               			//State 2: Enable en_o and sends result to the output
    42                                               			2: begin
    43              1                    ***0***     				out_c <= temp_out[2];
    44              1                    ***0***     				temp_out = temp_out << 1;
    45              1                    ***0***     				counter = counter + 1;
    46              1                    ***0***     				if(counter==3) en_o <= 1'b1;
    47              1                    ***0***     				if(counter==4) en_o <= 1'b0;
    48                                               				if(counter==6) begin
    49              1                    ***0***     					counter = 0;
    50              1                    ***0***     					out_c <= 1'b1;
    51              1                    ***0***     					state = 0;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        13         2        11      15.3

================================Branch Details================================

Branch Coverage for Design Unit work.template

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/template.v
------------------------------------IF Branch------------------------------------
    23                                     10760     Count coming in to IF
    23              1                    ***0***     		if(en_i==1'b1)
                                           10760     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------CASE Branch------------------------------------
    27                                     10760     Count coming in to CASE
    29              1                    ***0***     			1: begin
    42              1                    ***0***     			2: begin
                                           10760     All False Count
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    36                                   ***0***     Count coming in to IF
    36              1                    ***0***     				if(counter==2) begin
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    46                                   ***0***     Count coming in to IF
    46              1                    ***0***     				if(counter==3) en_o <= 1'b1;
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    47                                   ***0***     Count coming in to IF
    47              1                    ***0***     				if(counter==4) en_o <= 1'b0;
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    48                                   ***0***     Count coming in to IF
    48              1                    ***0***     				if(counter==6) begin
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                         0.0
        States                       3         0         3       0.0
        Transitions                  4         0         4       0.0

================================FSM Details================================

FSM Coverage for Design Unit work.template --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
  29                 st0                   1
  42                 st1                   2
  25                 st2                   0
    Uncovered States :
    ------------------
                   State
                   -----
                     st0
                     st1
                     st2
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
  38                   0          st0 -> st1          
  51                   1          st1 -> st2          
  25                   2          st1 -> st0          
  25                   3          st2 -> st0          


    Summary                     Active      Hits    Misses % Covered
    -------                     ------      ----    ------ ---------
        States                       3         0         3       0.0
        Transitions                  4         0         4       0.0

=================================================================================
=== Design Unit: work.testpattern(arch_imp)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           20         4        16      20.0

================================Statement Details================================

Statement Coverage for Design Unit work.testpattern(arch_imp) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/TestPattern.vhd
    15                                               architecture arch_imp of TestPattern is
    16                                               begin
    17                                               process (clk) begin
    18                                                   if rising_edge(clk) then
    19                                                       if(ChannelS = 0)then
    20              1                          3                 oRgb.valid     <= rgbSum.valid;
    21              1                          3                 oRgb.red       <= rgbSum.red(7 downto 0);
    22              1                          3                 oRgb.green     <= rgbSum.green(7 downto 0);
    23              1                          3                 oRgb.blue      <= rgbSum.blue(7 downto 0);
    24                                                       elsif(ChannelS = 1)then
    25              1                    ***0***                 oRgb.valid     <= rgbSum.valid;
    26              1                    ***0***                 oRgb.red       <= x"0" & rgbSum.red(3 downto 0);
    27              1                    ***0***                 oRgb.green     <= x"0" & rgbSum.green(7 downto 4);
    28              1                    ***0***                 oRgb.blue      <= x"0" & rgbSum.blue(11 downto 8);
    29                                                       elsif(ChannelS = 2)then
    30              1                    ***0***                 oRgb.valid     <= rgbSum.valid;
    31              1                    ***0***                 oRgb.red       <= rgbSum.red(7 downto 0);
    32              1                    ***0***                 oRgb.green     <= x"0" & rgbSum.green(7 downto 4);
    33              1                    ***0***                 oRgb.blue      <= x"0" & rgbSum.blue(11 downto 8);
    34                                                       elsif(ChannelS = 3)then
    35              1                    ***0***                 oRgb.valid     <= rgbSum.valid;
    36              1                    ***0***                 oRgb.red       <= x"0" & rgbSum.red(3 downto 0);
    37              1                    ***0***                 oRgb.green     <= rgbSum.green(7 downto 0);
    38              1                    ***0***                 oRgb.blue      <= x"0" & rgbSum.blue(11 downto 8);
    39                                                       else
    40              1                    ***0***                 oRgb.valid     <= rgbSum.valid;
    41              1                    ***0***                 oRgb.red       <= x"0" & rgbSum.red(3 downto 0);
    42              1                    ***0***                 oRgb.green     <= x"0" & rgbSum.green(7 downto 4);
    43              1                    ***0***                 oRgb.blue      <= rgbSum.blue(7 downto 0);

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         6         2         4      33.3

================================Branch Details================================

Branch Coverage for Design Unit work.testpattern(arch_imp)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Process/TestPattern.vhd
------------------------------------IF Branch------------------------------------
    18                                         3     Count coming in to IF
    18              1                          3         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    19                                         3     Count coming in to IF
    19              1                          3             if(ChannelS = 0)then
    24              1                    ***0***             elsif(ChannelS = 1)then
    29              1                    ***0***             elsif(ChannelS = 2)then
    34              1                    ***0***             elsif(ChannelS = 3)then
    39              1                    ***0***             else
Branch totals: 1 hit of 5 branches = 20.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.top
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           25        25         0     100.0

================================Statement Details================================

Statement Coverage for Design Unit work.top --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/tb/top/system_top/top.sv
    10                                               module top;
    11                                                   import uvm_pkg::*;
    12                                                   import system_pkg::*;
    13                                                   reg ACLK;
    14                                                   reg ARESETN;
    15                                                   reg ARESET_N;
    16                                                   reg clk;
    17                                                   //INTERFACE
    18                                                   axi4l_if        axi4l_vif(ACLK,ARESETN);                // AXI_LITE_INTERFACE  
    19                                                   axi4s_if        axi4s_vif(ACLK,ARESET_N);               // AXI4_STREAM_INTERFACE  
    20                                                   rgb_if          rgb_vif(clk);                           // RGB_INTERFACE 
    21                                                   tp_if           tp_vif();                               // TEMPLATE_NTERFACE 
    22                                                   //MODULE
    23                                                   adder               template_dut(tp_vif);                // [TEMPLATE]
    24                                                   vfpConfigDut        vfp_dut(axi4l_vif,axi4s_vif,tp_vif); // [AXI4_LITE]
    25                                                   rgb_color           rgb_dut(rgb_vif);                    // [RGB]
    26                                                   initial begin
    27              1                          1             ARESETN  = 1'b0;
    28              1                          1             ARESET_N = 1'b0;
    29              1                          1         #1000;
    30              1                          1             ARESETN  = 1'b1;
    31              1                          1             ARESET_N = 1'b1;
    32                                                   end
    33                                                   initial begin
    34              1                          1             ACLK = 0;
    35              1                          1         #5ns ;
    36              1                          1         forever #5ns ACLK = ! ACLK;
    36              2                      21520     
    36              3                      21519     
    37                                                   end
    38                                                   initial begin
    39              1                          1             tp_vif.sig_clock = 0;
    40              1                          1         #5ns ;
    41              1                          1         forever #5ns tp_vif.sig_clock = ! tp_vif.sig_clock;
    41              2                      21520     
    41              3                      21519     
    42                                                   end
    43                                                   initial begin
    44              1                          1             clk = 0;
    45              1                          1             #5ns ;
    46              1                          1             forever #5ns clk = ! clk;
    46              2                      21520     
    46              3                      21519     
    47                                                   end
    48                                                   initial begin
    49              1                          1             uvm_config_db   #(virtual axi4l_if) ::set(null, "*", "axi4l_vif", axi4l_vif);
    50              1                          1             uvm_resource_db #(virtual tp_if)    ::set(.scope("ifs"), .name("tp_if"), .val(tp_vif));
    51              1                          1             uvm_resource_db #(virtual rgb_if)   ::set(.scope("ifs"),.name("rgb_if"),.val(rgb_vif));
    52              1                          1             uvm_config_db   #(virtual axi4s_if) ::set(.cntxt(null),.inst_name("uvm_test_top"),.field_name("axi4s_vif"),.value(axi4s_vif));
    53              1                          1             run_test();

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.videoprocess_v1_0_config(arch_imp)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          491        94       397      19.1

================================Statement Details================================

Statement Coverage for Design Unit work.videoprocess_v1_0_config(arch_imp) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/hdl/vfpConfig.vhd
    38                                               architecture arch_imp of videoProcess_v1_0_Config is
    39                                               	constant ADDR_LSB            : integer := (C_S_AXI_DATA_WIDTH/32)+ 1;
    40                                               	constant OPT_MEM_ADDR_BITS   : integer := 5;
    41                                               	signal axi_awaddr	         : std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
    42                                               	signal axi_awready	         : std_logic;
    43                                               	signal axi_wready	         : std_logic;
    44                                               	signal axi_bresp	         : std_logic_vector(1 downto 0);
    45                                               	signal axi_bvalid	         : std_logic;
    46                                               	signal axi_araddr	         : std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
    47                                               	signal axi_arready	         : std_logic;
    48                                               	signal axi_rdata	         : std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
    49                                               	signal axi_rresp	         : std_logic_vector(1 downto 0);
    50                                               	signal axi_rvalid	         : std_logic;
    51                                                   signal slv_reg_rden          : std_logic;
    52                                                   signal slv_reg_wren          : std_logic;
    53                                                   signal reg_data_out          : std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
    54                                                   signal byte_index            : integer;
    55                                                   signal aw_en                 : std_logic;
    56                                                   signal localRegs             : mRegs;
    57                                               
    58                                                   
    59                                               begin
    60              1                          2         S_AXI_AWREADY    <= axi_awready;
    61              1                          2         S_AXI_WREADY     <= axi_wready;
    62              1                          2         S_AXI_BRESP      <= axi_bresp;
    63              1                          2         S_AXI_BVALID     <= axi_bvalid;
    64              1                          2         S_AXI_ARREADY    <= axi_arready;
    65              1                          2         S_AXI_RDATA      <= axi_rdata;
    66              1                          2         S_AXI_RRESP      <= axi_rresp;
    67              1                          2         S_AXI_RVALID     <= axi_rvalid;
    68                                                   process (S_AXI_ACLK)
    69                                                   begin
    70                                                     if rising_edge(S_AXI_ACLK) then 
    71                                                       if S_AXI_ARESETN = '0' then
    72              1                          2               axi_awready <= '0';
    73              1                          2               aw_en <= '1';
    74                                                       else
    75                                                         if (axi_awready = '0' and S_AXI_AWVALID = '1' and S_AXI_WVALID = '1' and aw_en = '1') then
    76              1                    ***0***                 axi_awready <= '1';
    77                                                           elsif (S_AXI_BREADY = '1' and axi_bvalid = '1') then
    78              1                    ***0***                     aw_en <= '1';
    79              1                    ***0***                     axi_awready <= '0';
    80                                                         else
    81              1                          1                 axi_awready <= '0';
    82                                                         end if;
    83                                                       end if;
    84                                                     end if;
    85                                                   end process;
    86                                                   process (S_AXI_ACLK)
    87                                                   begin
    88                                                     if rising_edge(S_AXI_ACLK) then 
    89                                                       if S_AXI_ARESETN = '0' then
    90              1                          2               axi_awaddr <= (others => '0');
    91                                                       else
    92                                                         if (axi_awready = '0' and S_AXI_AWVALID = '1' and S_AXI_WVALID = '1' and aw_en = '1') then
    93              1                    ***0***                 axi_awaddr <= S_AXI_AWADDR;
    94                                                         end if;
    95                                                       end if;
    96                                                     end if;                   
    97                                                   end process; 
    98                                                   process (S_AXI_ACLK)
    99                                                   begin
    100                                                    if rising_edge(S_AXI_ACLK) then 
    101                                                      if S_AXI_ARESETN = '0' then
    102             1                          2               axi_wready <= '0';
    103                                                      else
    104                                                        if (axi_wready = '0' and S_AXI_WVALID = '1' and S_AXI_AWVALID = '1' and aw_en = '1') then
    105             1                    ***0***                   axi_wready <= '1';
    106                                                        else
    107             1                          1                 axi_wready <= '0';
    108                                                        end if;
    109                                                      end if;
    110                                                    end if;
    111                                                  end process; 
    112             1                          2         slv_reg_wren <= axi_wready and S_AXI_WVALID and axi_awready and S_AXI_AWVALID ;
    113                                              	process (S_AXI_ACLK)
    114                                              	variable loc_addr :std_logic_vector(OPT_MEM_ADDR_BITS downto 0); 
    115                                              	begin
    116                                              	  if rising_edge(S_AXI_ACLK) then 
    117                                              	    if S_AXI_ARESETN = '0' then
    118             1                         99     	      localRegs.cfigReg0 <= (others => '0');
    119             1                         99     	      localRegs.cfigReg1 <= (others => '0');
    120             1                         99     	      localRegs.cfigReg2 <= (others => '0');
    121             1                         99     	      localRegs.cfigReg3 <= (others => '0');
    122             1                         99     	      localRegs.cfigReg4 <= (others => '0');
    123             1                         99     	      localRegs.cfigReg5 <= (others => '0');
    124             1                         99     	      localRegs.cfigReg6 <= (others => '0');
    125             1                         99     	      localRegs.cfigReg7 <= (others => '0');
    126             1                         99     	      localRegs.cfigReg8 <= (others => '0');
    127             1                         99     	      localRegs.cfigReg9 <= (others => '0');
    128             1                         99     	      localRegs.cfigReg10 <= (others => '0');
    129             1                         99     	      localRegs.cfigReg11 <= (others => '0');
    130             1                         99     	      localRegs.cfigReg12 <= (others => '0');
    131             1                         99     	      localRegs.cfigReg13 <= (others => '0');
    132             1                         99     	      localRegs.cfigReg14 <= (others => '0');
    133             1                         99     	      localRegs.cfigReg15 <= (others => '0');
    134             1                         99     	      localRegs.cfigReg16 <= (others => '0');
    135             1                         99     	      localRegs.cfigReg17 <= (others => '0');
    136             1                         99     	      localRegs.cfigReg18 <= (others => '0');
    137             1                         99     	      localRegs.cfigReg19 <= (others => '0');
    138             1                         99     	      localRegs.cfigReg20 <= (others => '0');
    139             1                         99     	      localRegs.cfigReg21 <= (others => '0');
    140             1                         99     	      localRegs.cfigReg22 <= (others => '0');
    141             1                         99     	      localRegs.cfigReg23 <= (others => '0');
    142             1                         99     	      localRegs.cfigReg24 <= (others => '0');
    143             1                         99     	      localRegs.cfigReg25 <= (others => '0');
    144             1                         99     	      localRegs.cfigReg26 <= (others => '0');
    145             1                         99     	      localRegs.cfigReg27 <= (others => '0');
    146             1                         99     	      localRegs.cfigReg28 <= (others => '0');
    147             1                         99     	      localRegs.cfigReg29 <= (others => '0');
    148             1                         99     	      localRegs.cfigReg30 <= (others => '0');
    149             1                         99     	      localRegs.cfigReg31 <= (others => '0');
    150             1                         99     	      localRegs.cfigReg32 <= (others => '0');
    151             1                         99     	      localRegs.cfigReg33 <= (others => '0');
    152             1                         99     	      localRegs.cfigReg34 <= (others => '0');
    153             1                         99     	      localRegs.cfigReg35 <= (others => '0');
    154             1                         99     	      localRegs.cfigReg36 <= (others => '0');
    155             1                         99     	      localRegs.cfigReg37 <= (others => '0');
    156             1                         99     	      localRegs.cfigReg38 <= (others => '0');
    157             1                         99     	      localRegs.cfigReg39 <= (others => '0');
    158             1                         99     	      localRegs.cfigReg40 <= (others => '0');
    159             1                         99     	      localRegs.cfigReg41 <= (others => '0');
    160             1                         99     	      localRegs.cfigReg42 <= (others => '0');
    161             1                         99     	      localRegs.cfigReg43 <= (others => '0');
    162             1                         99     	      localRegs.cfigReg44 <= (others => '0');
    163             1                         99     	      localRegs.cfigReg45 <= (others => '0');
    164             1                         99     	      localRegs.cfigReg46 <= (others => '0');
    165             1                         99     	      localRegs.cfigReg47 <= (others => '0');
    166             1                         99     	      localRegs.cfigReg48 <= (others => '0');
    167             1                         99     	      localRegs.cfigReg49 <= (others => '0');
    168             1                         99     	      localRegs.cfigReg50 <= (others => '0');
    169             1                         99     	      localRegs.cfigReg51 <= (others => '0');
    170             1                         99     	      localRegs.cfigReg52 <= (others => '0');
    171             1                         99     	      localRegs.cfigReg53 <= (others => '0');
    172             1                         99     	      localRegs.cfigReg54 <= (others => '0');
    173             1                         99     	      localRegs.cfigReg55 <= (others => '0');
    174             1                         99     	      localRegs.cfigReg56 <= (others => '0');
    175             1                         99     	      localRegs.cfigReg57 <= (others => '0');
    176             1                         99     	      localRegs.cfigReg58 <= (others => '0');
    177             1                         99     	      localRegs.cfigReg59 <= (others => '0');
    178             1                         99     	      localRegs.cfigReg60 <= (others => '0');
    179             1                         99     	      localRegs.cfigReg61 <= (others => '0');
    180             1                         99     	      localRegs.cfigReg62 <= (others => '0');
    181             1                         99     	      localRegs.cfigReg63 <= (others => '0');
    182                                              	    else
    183             1                      10661     	      loc_addr := axi_awaddr(ADDR_LSB + OPT_MEM_ADDR_BITS downto ADDR_LSB);
    184                                              	      if (slv_reg_wren = '1') then
    185                                              	        case loc_addr is
    186                                              	          when b"000000" =>
    187             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    187             2                    ***0***     
    188                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    189             1                    ***0***     	                localRegs.cfigReg0(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    190                                              	              end if;
    191             1                    ***0***     	            end loop;
    192                                              	          when b"000001" =>
    193             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    193             2                    ***0***     
    194                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    195             1                    ***0***     	                localRegs.cfigReg1(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    196                                              	              end if;
    197             1                    ***0***     	            end loop;
    198                                              	          when b"000010" =>
    199             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    199             2                    ***0***     
    200                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    201             1                    ***0***     	                localRegs.cfigReg2(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    202                                              	              end if;
    203             1                    ***0***     	            end loop;
    204                                              	          when b"000011" =>
    205             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    205             2                    ***0***     
    206                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    207             1                    ***0***     	                localRegs.cfigReg3(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    208                                              	              end if;
    209             1                    ***0***     	            end loop;
    210                                              	          when b"000100" =>
    211             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    211             2                    ***0***     
    212                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    213             1                    ***0***     	                localRegs.cfigReg4(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    214                                              	              end if;
    215             1                    ***0***     	            end loop;
    216                                              	          when b"000101" =>
    217             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    217             2                    ***0***     
    218                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    219             1                    ***0***     	                localRegs.cfigReg5(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    220                                              	              end if;
    221             1                    ***0***     	            end loop;
    222                                              	          when b"000110" =>
    223             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    223             2                    ***0***     
    224                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    225             1                    ***0***     	                localRegs.cfigReg6(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    226                                              	              end if;
    227             1                    ***0***     	            end loop;
    228                                              	          when b"000111" =>
    229             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    229             2                    ***0***     
    230                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    231             1                    ***0***     	                localRegs.cfigReg7(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    232                                              	              end if;
    233             1                    ***0***     	            end loop;
    234                                              	          when b"001000" =>
    235             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    235             2                    ***0***     
    236                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    237             1                    ***0***     	                localRegs.cfigReg8(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    238                                              	              end if;
    239             1                    ***0***     	            end loop;
    240                                              	          when b"001001" =>
    241             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    241             2                    ***0***     
    242                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    243             1                    ***0***     	                localRegs.cfigReg9(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    244                                              	              end if;
    245             1                    ***0***     	            end loop;
    246                                              	          when b"001010" =>
    247             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    247             2                    ***0***     
    248                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    249             1                    ***0***     	                localRegs.cfigReg10(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    250                                              	              end if;
    251             1                    ***0***     	            end loop;
    252                                              	          when b"001011" =>
    253             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    253             2                    ***0***     
    254                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    255             1                    ***0***     	                localRegs.cfigReg11(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    256                                              	              end if;
    257             1                    ***0***     	            end loop;
    258                                              	          when b"001100" =>
    259             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    259             2                    ***0***     
    260                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    261             1                    ***0***     	                localRegs.cfigReg12(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    262                                              	              end if;
    263             1                    ***0***     	            end loop;
    264                                              	          when b"001101" =>
    265             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    265             2                    ***0***     
    266                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    267             1                    ***0***     	                localRegs.cfigReg13(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    268                                              	              end if;
    269             1                    ***0***     	            end loop;
    270                                              	          when b"001110" =>
    271             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    271             2                    ***0***     
    272                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    273             1                    ***0***     	                localRegs.cfigReg14(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    274                                              	              end if;
    275             1                    ***0***     	            end loop;
    276                                              	          when b"001111" =>
    277             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    277             2                    ***0***     
    278                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    279             1                    ***0***     	                localRegs.cfigReg15(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    280                                              	              end if;
    281             1                    ***0***     	            end loop;
    282                                              	          when b"010000" =>
    283             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    283             2                    ***0***     
    284                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    285             1                    ***0***     	                localRegs.cfigReg16(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    286                                              	              end if;
    287             1                    ***0***     	            end loop;
    288                                              	          when b"010001" =>
    289             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    289             2                    ***0***     
    290                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    291             1                    ***0***     	                localRegs.cfigReg17(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    292                                              	              end if;
    293             1                    ***0***     	            end loop;
    294                                              	          when b"010010" =>
    295             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    295             2                    ***0***     
    296                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    297             1                    ***0***     	                localRegs.cfigReg18(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    298                                              	              end if;
    299             1                    ***0***     	            end loop;
    300                                              	          when b"010011" =>
    301             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    301             2                    ***0***     
    302                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    303             1                    ***0***     	                localRegs.cfigReg19(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    304                                              	              end if;
    305             1                    ***0***     	            end loop;
    306                                              	          when b"010100" =>
    307             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    307             2                    ***0***     
    308                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    309             1                    ***0***     	                localRegs.cfigReg20(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    310                                              	              end if;
    311             1                    ***0***     	            end loop;
    312                                              	          when b"010101" =>
    313             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    313             2                    ***0***     
    314                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    315             1                    ***0***     	                localRegs.cfigReg21(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    316                                              	              end if;
    317             1                    ***0***     	            end loop;
    318                                              	          when b"010110" =>
    319             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    319             2                    ***0***     
    320                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    321             1                    ***0***     	                localRegs.cfigReg22(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    322                                              	              end if;
    323             1                    ***0***     	            end loop;
    324                                              	          when b"010111" =>
    325             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    325             2                    ***0***     
    326                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    327             1                    ***0***     	                localRegs.cfigReg23(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    328                                              	              end if;
    329             1                    ***0***     	            end loop;
    330                                              	          when b"011000" =>
    331             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    331             2                    ***0***     
    332                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    333             1                    ***0***     	                localRegs.cfigReg24(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    334                                              	              end if;
    335             1                    ***0***     	            end loop;
    336                                              	          when b"011001" =>
    337             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    337             2                    ***0***     
    338                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    339             1                    ***0***     	                localRegs.cfigReg25(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    340                                              	              end if;
    341             1                    ***0***     	            end loop;
    342                                              	          when b"011010" =>
    343             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    343             2                    ***0***     
    344                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    345             1                    ***0***     	                localRegs.cfigReg26(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    346                                              	              end if;
    347             1                    ***0***     	            end loop;
    348                                              	          when b"011011" =>
    349             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    349             2                    ***0***     
    350                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    351             1                    ***0***     	                localRegs.cfigReg27(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    352                                              	              end if;
    353             1                    ***0***     	            end loop;
    354                                              	          when b"011100" =>
    355             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    355             2                    ***0***     
    356                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    357             1                    ***0***     	                localRegs.cfigReg28(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    358                                              	              end if;
    359             1                    ***0***     	            end loop;
    360                                              	          when b"011101" =>
    361             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    361             2                    ***0***     
    362                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    363             1                    ***0***     	                localRegs.cfigReg29(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    364                                              	              end if;
    365             1                    ***0***     	            end loop;
    366                                              	          when b"011110" =>
    367             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    367             2                    ***0***     
    368                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    369             1                    ***0***     	                localRegs.cfigReg30(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    370                                              	              end if;
    371             1                    ***0***     	            end loop;
    372                                              	          when b"011111" =>
    373             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    373             2                    ***0***     
    374                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    375             1                    ***0***     	                localRegs.cfigReg31(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    376                                              	              end if;
    377             1                    ***0***     	            end loop;
    378                                              	          when b"100000" =>
    379             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    379             2                    ***0***     
    380                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    381             1                    ***0***     	                localRegs.cfigReg32(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    382                                              	              end if;
    383             1                    ***0***     	            end loop;
    384                                              	          when b"100001" =>
    385             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    385             2                    ***0***     
    386                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    387             1                    ***0***     	                localRegs.cfigReg33(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    388                                              	              end if;
    389             1                    ***0***     	            end loop;
    390                                              	          when b"100010" =>
    391             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    391             2                    ***0***     
    392                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    393             1                    ***0***     	                localRegs.cfigReg34(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    394                                              	              end if;
    395             1                    ***0***     	            end loop;
    396                                              	          when b"100011" =>
    397             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    397             2                    ***0***     
    398                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    399             1                    ***0***     	                localRegs.cfigReg35(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    400                                              	              end if;
    401             1                    ***0***     	            end loop;
    402                                              	          when b"100100" =>
    403             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    403             2                    ***0***     
    404                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    405             1                    ***0***     	                localRegs.cfigReg36(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    406                                              	              end if;
    407             1                    ***0***     	            end loop;
    408                                              	          when b"100101" =>
    409             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    409             2                    ***0***     
    410                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    411             1                    ***0***     	                localRegs.cfigReg37(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    412                                              	              end if;
    413             1                    ***0***     	            end loop;
    414                                              	          when b"100110" =>
    415             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    415             2                    ***0***     
    416                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    417             1                    ***0***     	                localRegs.cfigReg38(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    418                                              	              end if;
    419             1                    ***0***     	            end loop;
    420                                              	          when b"100111" =>
    421             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    421             2                    ***0***     
    422                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    423             1                    ***0***     	                localRegs.cfigReg39(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    424                                              	              end if;
    425             1                    ***0***     	            end loop;
    426                                              	          when b"101000" =>
    427             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    427             2                    ***0***     
    428                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    429             1                    ***0***     	                localRegs.cfigReg40(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    430                                              	              end if;
    431             1                    ***0***     	            end loop;
    432                                              	          when b"101001" =>
    433             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    433             2                    ***0***     
    434                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    435             1                    ***0***     	                localRegs.cfigReg41(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    436                                              	              end if;
    437             1                    ***0***     	            end loop;
    438                                              	          when b"101010" =>
    439             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    439             2                    ***0***     
    440                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    441             1                    ***0***     	                localRegs.cfigReg42(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    442                                              	              end if;
    443             1                    ***0***     	            end loop;
    444                                              	          when b"101011" =>
    445             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    445             2                    ***0***     
    446                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    447             1                    ***0***     	                localRegs.cfigReg43(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    448                                              	              end if;
    449             1                    ***0***     	            end loop;
    450                                              	          when b"101100" =>
    451             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    451             2                    ***0***     
    452                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    453             1                    ***0***     	                localRegs.cfigReg44(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    454                                              	              end if;
    455             1                    ***0***     	            end loop;
    456                                              	          when b"101101" =>
    457             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    457             2                    ***0***     
    458                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    459             1                    ***0***     	                localRegs.cfigReg45(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    460                                              	              end if;
    461             1                    ***0***     	            end loop;
    462                                              	          when b"101110" =>
    463             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    463             2                    ***0***     
    464                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    465             1                    ***0***     	                localRegs.cfigReg46(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    466                                              	              end if;
    467             1                    ***0***     	            end loop;
    468                                              	          when b"101111" =>
    469             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    469             2                    ***0***     
    470                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    471             1                    ***0***     	                localRegs.cfigReg47(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    472                                              	              end if;
    473             1                    ***0***     	            end loop;
    474                                              	          when b"110000" =>
    475             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    475             2                    ***0***     
    476                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    477             1                    ***0***     	                localRegs.cfigReg48(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    478                                              	              end if;
    479             1                    ***0***     	            end loop;
    480                                              	          when b"110001" =>
    481             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    481             2                    ***0***     
    482                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    483             1                    ***0***     	                localRegs.cfigReg49(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    484                                              	              end if;
    485             1                    ***0***     	            end loop;
    486                                              	          when b"110010" =>
    487             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    487             2                    ***0***     
    488                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    489             1                    ***0***     	                localRegs.cfigReg50(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    490                                              	              end if;
    491             1                    ***0***     	            end loop;
    492                                              	          when b"110011" =>
    493             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    493             2                    ***0***     
    494                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    495             1                    ***0***     	                localRegs.cfigReg51(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    496                                              	              end if;
    497             1                    ***0***     	            end loop;
    498                                              	          when b"110100" =>
    499             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    499             2                    ***0***     
    500                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    501             1                    ***0***     	                localRegs.cfigReg52(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    502                                              	              end if;
    503             1                    ***0***     	            end loop;
    504                                              	          when b"110101" =>
    505             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    505             2                    ***0***     
    506                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    507             1                    ***0***     	                localRegs.cfigReg53(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    508                                              	              end if;
    509             1                    ***0***     	            end loop;
    510                                              	          when b"110110" =>
    511             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    511             2                    ***0***     
    512                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    513             1                    ***0***     	                localRegs.cfigReg54(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    514                                              	              end if;
    515             1                    ***0***     	            end loop;
    516                                              	          when b"110111" =>
    517             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    517             2                    ***0***     
    518                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    519             1                    ***0***     	                localRegs.cfigReg55(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    520                                              	              end if;
    521             1                    ***0***     	            end loop;
    522                                              	          when b"111000" =>
    523             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    523             2                    ***0***     
    524                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    525             1                    ***0***     	                localRegs.cfigReg56(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    526                                              	              end if;
    527             1                    ***0***     	            end loop;
    528                                              	          when b"111001" =>
    529             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    529             2                    ***0***     
    530                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    531             1                    ***0***     	                localRegs.cfigReg57(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    532                                              	              end if;
    533             1                    ***0***     	            end loop;
    534                                              	          when b"111010" =>
    535             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    535             2                    ***0***     
    536                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    537             1                    ***0***     	                localRegs.cfigReg58(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    538                                              	              end if;
    539             1                    ***0***     	            end loop;
    540                                              	          when b"111011" =>
    541             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    541             2                    ***0***     
    542                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    543             1                    ***0***     	                localRegs.cfigReg59(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    544                                              	              end if;
    545             1                    ***0***     	            end loop;
    546                                              	          when b"111100" =>
    547             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    547             2                    ***0***     
    548                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    549             1                    ***0***     	                localRegs.cfigReg60(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    550                                              	              end if;
    551             1                    ***0***     	            end loop;
    552                                              	          when b"111101" =>
    553             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    553             2                    ***0***     
    554                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    555             1                    ***0***     	                localRegs.cfigReg61(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    556                                              	              end if;
    557             1                    ***0***     	            end loop;
    558                                              	          when b"111110" =>
    559             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    559             2                    ***0***     
    560                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    561             1                    ***0***     	                localRegs.cfigReg62(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    562                                              	              end if;
    563             1                    ***0***     	            end loop;
    564                                              	          when b"111111" =>
    565             1                    ***0***     	            for byte_index in 0 to (C_S_AXI_DATA_WIDTH/8-1) loop
    565             2                    ***0***     
    566                                              	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
    567             1                    ***0***     	                localRegs.cfigReg63(byte_index*8+7 downto byte_index*8) <= S_AXI_WDATA(byte_index*8+7 downto byte_index*8);
    568                                              	              end if;
    569             1                    ***0***     	            end loop;
    570                                              	          when others =>
    571                                                              --stored cpu values
    572             1                    ***0***     	            localRegs.cfigReg0 <= localRegs.cfigReg0;
    573             1                    ***0***     	            localRegs.cfigReg1 <= localRegs.cfigReg1;
    574             1                    ***0***     	            localRegs.cfigReg2 <= localRegs.cfigReg2;
    575             1                    ***0***     	            localRegs.cfigReg3 <= localRegs.cfigReg3;
    576             1                    ***0***     	            localRegs.cfigReg4 <= localRegs.cfigReg4;
    577             1                    ***0***     	            localRegs.cfigReg5 <= localRegs.cfigReg5;
    578             1                    ***0***     	            localRegs.cfigReg6 <= localRegs.cfigReg6;
    579             1                    ***0***     	            localRegs.cfigReg7 <= localRegs.cfigReg7;
    580             1                    ***0***     	            localRegs.cfigReg8 <= localRegs.cfigReg8;
    581             1                    ***0***     	            localRegs.cfigReg9 <= localRegs.cfigReg9;
    582             1                    ***0***     	            localRegs.cfigReg10 <= localRegs.cfigReg10;
    583             1                    ***0***     	            localRegs.cfigReg11 <= localRegs.cfigReg11;
    584             1                    ***0***     	            localRegs.cfigReg12 <= localRegs.cfigReg12;
    585             1                    ***0***     	            localRegs.cfigReg13 <= localRegs.cfigReg13;
    586             1                    ***0***     	            localRegs.cfigReg14 <= localRegs.cfigReg14;
    587             1                    ***0***     	            localRegs.cfigReg15 <= localRegs.cfigReg15;
    588             1                    ***0***     	            localRegs.cfigReg16 <= localRegs.cfigReg16;
    589             1                    ***0***     	            localRegs.cfigReg17 <= localRegs.cfigReg17;
    590             1                    ***0***     	            localRegs.cfigReg18 <= localRegs.cfigReg18;
    591             1                    ***0***     	            localRegs.cfigReg19 <= localRegs.cfigReg19;
    592             1                    ***0***     	            localRegs.cfigReg20 <= localRegs.cfigReg20;
    593             1                    ***0***     	            localRegs.cfigReg21 <= localRegs.cfigReg21;
    594             1                    ***0***     	            localRegs.cfigReg22 <= localRegs.cfigReg22;
    595             1                    ***0***     	            localRegs.cfigReg23 <= localRegs.cfigReg23;
    596             1                    ***0***     	            localRegs.cfigReg24 <= localRegs.cfigReg24;
    597             1                    ***0***     	            localRegs.cfigReg25 <= localRegs.cfigReg25;
    598             1                    ***0***     	            localRegs.cfigReg26 <= localRegs.cfigReg26;
    599             1                    ***0***     	            localRegs.cfigReg27 <= localRegs.cfigReg27;
    600             1                    ***0***     	            localRegs.cfigReg28 <= localRegs.cfigReg28;
    601             1                    ***0***     	            localRegs.cfigReg29 <= localRegs.cfigReg29;
    602             1                    ***0***     	            localRegs.cfigReg30 <= localRegs.cfigReg30;
    603             1                    ***0***     	            localRegs.cfigReg31 <= localRegs.cfigReg31;
    604             1                    ***0***     	            localRegs.cfigReg32 <= localRegs.cfigReg32;
    605             1                    ***0***     	            localRegs.cfigReg33 <= localRegs.cfigReg33;
    606             1                    ***0***     	            localRegs.cfigReg34 <= localRegs.cfigReg34;
    607             1                    ***0***     	            localRegs.cfigReg35 <= localRegs.cfigReg35;
    608             1                    ***0***     	            localRegs.cfigReg36 <= localRegs.cfigReg36;
    609             1                    ***0***     	            localRegs.cfigReg37 <= localRegs.cfigReg37;
    610             1                    ***0***     	            localRegs.cfigReg38 <= localRegs.cfigReg38;
    611             1                    ***0***     	            localRegs.cfigReg39 <= localRegs.cfigReg39;
    612             1                    ***0***     	            localRegs.cfigReg40 <= localRegs.cfigReg40;
    613             1                    ***0***     	            localRegs.cfigReg41 <= localRegs.cfigReg41;
    614             1                    ***0***     	            localRegs.cfigReg42 <= localRegs.cfigReg42;
    615             1                    ***0***     	            localRegs.cfigReg43 <= localRegs.cfigReg43;
    616             1                    ***0***     	            localRegs.cfigReg44 <= localRegs.cfigReg44;
    617             1                    ***0***     	            localRegs.cfigReg45 <= localRegs.cfigReg45;
    618             1                    ***0***     	            localRegs.cfigReg46 <= localRegs.cfigReg46;
    619             1                    ***0***     	            localRegs.cfigReg47 <= localRegs.cfigReg47;
    620             1                    ***0***     	            localRegs.cfigReg48 <= localRegs.cfigReg48;
    621             1                    ***0***     	            localRegs.cfigReg49 <= localRegs.cfigReg49;
    622             1                    ***0***     	            localRegs.cfigReg50 <= localRegs.cfigReg50;
    623             1                    ***0***     	            localRegs.cfigReg51 <= localRegs.cfigReg51;
    624             1                    ***0***     	            localRegs.cfigReg52 <= localRegs.cfigReg52;
    625             1                    ***0***     	            localRegs.cfigReg53 <= localRegs.cfigReg53;
    626             1                    ***0***     	            localRegs.cfigReg54 <= localRegs.cfigReg54;
    627             1                    ***0***     	            localRegs.cfigReg55 <= localRegs.cfigReg55;
    628             1                    ***0***     	            localRegs.cfigReg56 <= localRegs.cfigReg56;
    629             1                    ***0***     	            localRegs.cfigReg57 <= localRegs.cfigReg57;
    630             1                    ***0***     	            localRegs.cfigReg58 <= localRegs.cfigReg58;
    631             1                    ***0***     	            localRegs.cfigReg59 <= localRegs.cfigReg59;
    632             1                    ***0***     	            localRegs.cfigReg60 <= localRegs.cfigReg60;
    633             1                    ***0***     	            localRegs.cfigReg61 <= localRegs.cfigReg61;
    634             1                    ***0***     	            localRegs.cfigReg62 <= localRegs.cfigReg62;
    635             1                    ***0***     	            localRegs.cfigReg63 <= localRegs.cfigReg63;
    636                                              	        end case;
    637                                              	      end if;
    638                                              	    end if;
    639                                              	  end if;                   
    640                                              	end process; 
    641                                                  process (S_AXI_ACLK)
    642                                                  begin
    643                                                    if rising_edge(S_AXI_ACLK) then 
    644                                                      if S_AXI_ARESETN = '0' then
    645             1                          2               axi_bvalid  <= '0';
    646             1                          2               axi_bresp   <= "00"; 
    647                                                      else
    648                                                        if (axi_awready = '1' and S_AXI_AWVALID = '1' and axi_wready = '1' and S_AXI_WVALID = '1' and axi_bvalid = '0'  ) then
    649             1                    ***0***                 axi_bvalid <= '1';
    650             1                    ***0***                 axi_bresp  <= "00"; 
    651                                                        elsif (S_AXI_BREADY = '1' and axi_bvalid = '1') then   
    652             1                    ***0***                 axi_bvalid <= '0';                                 
    653                                                        end if;
    654                                                      end if;
    655                                                    end if;                   
    656                                                  end process; 
    657                                                  process (S_AXI_ACLK)
    658                                                  begin
    659                                                    if rising_edge(S_AXI_ACLK) then 
    660                                                      if S_AXI_ARESETN = '0' then
    661             1                          2               axi_arready <= '0';
    662             1                          2               axi_araddr  <= (others => '1');
    663                                                      else
    664                                                        if (axi_arready = '0' and S_AXI_ARVALID = '1') then
    665             1                    ***0***                 axi_arready <= '1';
    666             1                    ***0***                 axi_araddr  <= S_AXI_ARADDR;           
    667                                                        else
    668             1                          1                 axi_arready <= '0';
    669                                                        end if;
    670                                                      end if;
    671                                                    end if;                   
    672                                                  end process; 
    673                                                  process (S_AXI_ACLK)
    674                                                  begin
    675                                                    if rising_edge(S_AXI_ACLK) then
    676                                                      if S_AXI_ARESETN = '0' then
    677             1                          2               axi_rvalid <= '0';
    678             1                          2               axi_rresp  <= "00";
    679                                                      else
    680                                                        if (axi_arready = '1' and S_AXI_ARVALID = '1' and axi_rvalid = '0') then
    681             1                    ***0***                 axi_rvalid <= '1';
    682             1                    ***0***                 axi_rresp  <= "00"; 
    683                                                        elsif (axi_rvalid = '1' and S_AXI_RREADY = '1') then
    684             1                    ***0***                 axi_rvalid <= '0';
    685                                                        end if;            
    686                                                      end if;
    687                                                    end if;
    688                                                  end process;
    689             1                          2         slv_reg_rden <= axi_arready and S_AXI_ARVALID and (not axi_rvalid);
    690             1                          9     process (axi_araddr, S_AXI_ARESETN, slv_reg_rden, rdRegsIn.cfigReg0, rdRegsIn.cfigReg1, rdRegsIn.cfigReg2, rdRegsIn.cfigReg3, rdRegsIn.cfigReg4, rdRegsIn.cfigReg5, rdRegsIn.cfigReg6, rdRegsIn.cfigReg7, rdRegsIn.cfigReg8, rdRegsIn.cfigReg9, rdRegsIn.cfigReg10, rdRegsIn.cfigReg11, rdRegsIn.cfigReg12, rdRegsIn.cfigReg13, rdRegsIn.cfigReg14, rdRegsIn.cfigReg15, rdRegsIn.cfigReg16, rdRegsIn.cfigReg17, rdRegsIn.cfigReg18, rdRegsIn.cfigReg19, rdRegsIn.cfigReg20, rdRegsIn.cfigReg21, rdRegsIn.cfigReg22, rdRegsIn.cfigReg23, rdRegsIn.cfigReg24, rdRegsIn.cfigReg25, rdRegsIn.cfigReg26, rdRegsIn.cfigReg27, rdRegsIn.cfigReg28, rdRegsIn.cfigReg29, rdRegsIn.cfigReg30, rdRegsIn.cfigReg31, rdRegsIn.cfigReg32, rdRegsIn.cfigReg33, rdRegsIn.cfigReg34, rdRegsIn.cfigReg35, rdRegsIn.cfigReg36, rdRegsIn.cfigReg37, rdRegsIn.cfigReg38, rdRegsIn.cfigReg39, rdRegsIn.cfigReg40, rdRegsIn.cfigReg41, rdRegsIn.cfigReg42, rdRegsIn.cfigReg43, rdRegsIn.cfigReg44, rdRegsIn.cfigReg45, rdRegsIn.cfigReg46, rdRegsIn.cfigReg47, rdRegsIn.cfigReg48, rdRegsIn.cfigReg49, rdRegsIn.cfigReg50, rdRegsIn.cfigReg51, rdRegsIn.cfigReg52, rdRegsIn.cfigReg53, rdRegsIn.cfigReg54, rdRegsIn.cfigReg55, rdRegsIn.cfigReg56, rdRegsIn.cfigReg57, rdRegsIn.cfigReg58, rdRegsIn.cfigReg59, rdRegsIn.cfigReg60, rdRegsIn.cfigReg61, rdRegsIn.cfigReg62, rdRegsIn.cfigReg63)
    691                                                  variable loc_addr :std_logic_vector(OPT_MEM_ADDR_BITS downto 0);
    692                                                  begin
    693             1                          9             loc_addr := axi_araddr(ADDR_LSB + OPT_MEM_ADDR_BITS downto ADDR_LSB);
    694                                                      case loc_addr is
    695                                                        when b"000000" =>
    696             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg0;
    697                                                        when b"000001" =>
    698             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg1;
    699                                                        when b"000010" =>
    700             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg2;
    701                                                        when b"000011" =>
    702             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg3;
    703                                                        when b"000100" =>
    704             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg4;
    705                                                        when b"000101" =>
    706             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg5;
    707                                                        when b"000110" =>
    708             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg6;
    709                                                        when b"000111" =>
    710             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg7;
    711                                                        when b"001000" =>
    712             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg8;
    713                                                        when b"001001" =>
    714             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg9;
    715                                                        when b"001010" =>
    716             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg10;
    717                                                        when b"001011" =>
    718             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg11;
    719                                                        when b"001100" =>
    720             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg12;
    721                                                        when b"001101" =>
    722             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg13;
    723                                                        when b"001110" =>
    724             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg14;
    725                                                        when b"001111" =>
    726             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg15;
    727                                                        when b"010000" =>
    728             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg16;
    729                                                        when b"010001" =>
    730             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg17;
    731                                                        when b"010010" =>
    732             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg18;
    733                                                        when b"010011" =>
    734             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg19;
    735                                                        when b"010100" =>
    736             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg20;
    737                                                        when b"010101" =>
    738             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg21;
    739                                                        when b"010110" =>
    740             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg22;
    741                                                        when b"010111" =>
    742             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg23;
    743                                                        when b"011000" =>
    744             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg24;
    745                                                        when b"011001" =>
    746             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg25;
    747                                                        when b"011010" =>
    748             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg26;
    749                                                        when b"011011" =>
    750             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg27;
    751                                                        when b"011100" =>
    752             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg28;
    753                                                        when b"011101" =>
    754             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg29;
    755                                                        when b"011110" =>
    756             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg30;
    757                                                        when b"011111" =>
    758             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg31;
    759                                              	      when b"100000" =>
    760             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg32;
    761                                              	      when b"100001" =>
    762             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg33;
    763                                              	      when b"100010" =>
    764             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg34;
    765                                              	      when b"100011" =>
    766             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg35;
    767                                              	      when b"100100" =>
    768             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg36;
    769                                              	      when b"100101" =>
    770             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg37;
    771                                              	      when b"100110" =>
    772             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg38;
    773                                              	      when b"100111" =>
    774             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg39;
    775                                              	      when b"101000" =>
    776             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg40;
    777                                              	      when b"101001" =>
    778             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg41;
    779                                              	      when b"101010" =>
    780             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg42;
    781                                              	      when b"101011" =>
    782             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg43;
    783                                              	      when b"101100" =>
    784             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg44;
    785                                              	      when b"101101" =>
    786             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg45;
    787                                              	      when b"101110" =>
    788             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg46;
    789                                              	      when b"101111" =>
    790             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg47;
    791                                              	      when b"110000" =>
    792             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg48;
    793                                              	      when b"110001" =>
    794             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg49;
    795                                              	      when b"110010" =>
    796             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg50;
    797                                              	      when b"110011" =>
    798             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg51;
    799                                              	      when b"110100" =>
    800             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg52;
    801                                              	      when b"110101" =>
    802             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg53;
    803                                              	      when b"110110" =>
    804             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg54;
    805                                              	      when b"110111" =>
    806             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg55;
    807                                              	      when b"111000" =>
    808             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg56;
    809                                              	      when b"111001" =>
    810             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg57;
    811                                              	      when b"111010" =>
    812             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg58;
    813                                              	      when b"111011" =>
    814             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg59;
    815                                              	      when b"111100" =>
    816             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg60;
    817                                              	      when b"111101" =>
    818             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg61;
    819                                              	      when b"111110" =>
    820             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg62;
    821                                              	      when b"111111" =>
    822             1                          6     	        reg_data_out <= rdRegsIn.cfigReg63;
    823                                                        when others =>
    824             1                          3                 reg_data_out  <= (others => '0');
    825                                                      end case;
    826                                                  end process;
    827                                                  
    828                                                  process( S_AXI_ACLK ) begin
    829                                                    if (rising_edge (S_AXI_ACLK)) then
    830                                                      if ( S_AXI_ARESETN = '0' ) then
    831             1                          2               axi_rdata  <= (others => '0');
    832                                                      else
    833                                                        if (slv_reg_rden = '1') then
    834             1                    ***0***                   axi_rdata <= reg_data_out;     
    835                                                        end if;   
    836                                                      end if;
    837                                                    end if;
    838                                                  end process;
    839                                              
    840                                                  cpuOut: process (S_AXI_ACLK) begin
    841                                                      if (rising_edge (S_AXI_ACLK)) then
    842             1                      10760                 wrRegsOut <= localRegs;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                       302        35       267      11.5

================================Branch Details================================

Branch Coverage for Design Unit work.videoprocess_v1_0_config(arch_imp)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/hdl/vfpConfig.vhd
------------------------------------IF Branch------------------------------------
    70                                         3     Count coming in to IF
    70              1                          3           if rising_edge(S_AXI_ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    71                                         3     Count coming in to IF
    71              1                          2             if S_AXI_ARESETN = '0' then
    74              1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    75                                         1     Count coming in to IF
    75              1                    ***0***               if (axi_awready = '0' and S_AXI_AWVALID = '1' and S_AXI_WVALID = '1' and aw_en = '1') then
    77              1                    ***0***                 elsif (S_AXI_BREADY = '1' and axi_bvalid = '1') then
    80              1                          1               else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    88                                         3     Count coming in to IF
    88              1                          3           if rising_edge(S_AXI_ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    89                                         3     Count coming in to IF
    89              1                          2             if S_AXI_ARESETN = '0' then
    91              1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    92                                         1     Count coming in to IF
    92              1                    ***0***               if (axi_awready = '0' and S_AXI_AWVALID = '1' and S_AXI_WVALID = '1' and aw_en = '1') then
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    100                                        3     Count coming in to IF
    100             1                          3           if rising_edge(S_AXI_ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    101                                        3     Count coming in to IF
    101             1                          2             if S_AXI_ARESETN = '0' then
    103             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    104                                        1     Count coming in to IF
    104             1                    ***0***               if (axi_wready = '0' and S_AXI_WVALID = '1' and S_AXI_AWVALID = '1' and aw_en = '1') then
    106             1                          1               else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    116                                    10760     Count coming in to IF
    116             1                      10760     	  if rising_edge(S_AXI_ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    117                                    10760     Count coming in to IF
    117             1                         99     	    if S_AXI_ARESETN = '0' then
    182             1                      10661     	    else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    184                                    10661     Count coming in to IF
    184             1                    ***0***     	      if (slv_reg_wren = '1') then
                                           10661     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------CASE Branch------------------------------------
    185                                  ***0***     Count coming in to CASE
    186             1                    ***0***     	          when b"000000" =>
    192             1                    ***0***     	          when b"000001" =>
    198             1                    ***0***     	          when b"000010" =>
    204             1                    ***0***     	          when b"000011" =>
    210             1                    ***0***     	          when b"000100" =>
    216             1                    ***0***     	          when b"000101" =>
    222             1                    ***0***     	          when b"000110" =>
    228             1                    ***0***     	          when b"000111" =>
    234             1                    ***0***     	          when b"001000" =>
    240             1                    ***0***     	          when b"001001" =>
    246             1                    ***0***     	          when b"001010" =>
    252             1                    ***0***     	          when b"001011" =>
    258             1                    ***0***     	          when b"001100" =>
    264             1                    ***0***     	          when b"001101" =>
    270             1                    ***0***     	          when b"001110" =>
    276             1                    ***0***     	          when b"001111" =>
    282             1                    ***0***     	          when b"010000" =>
    288             1                    ***0***     	          when b"010001" =>
    294             1                    ***0***     	          when b"010010" =>
    300             1                    ***0***     	          when b"010011" =>
    306             1                    ***0***     	          when b"010100" =>
    312             1                    ***0***     	          when b"010101" =>
    318             1                    ***0***     	          when b"010110" =>
    324             1                    ***0***     	          when b"010111" =>
    330             1                    ***0***     	          when b"011000" =>
    336             1                    ***0***     	          when b"011001" =>
    342             1                    ***0***     	          when b"011010" =>
    348             1                    ***0***     	          when b"011011" =>
    354             1                    ***0***     	          when b"011100" =>
    360             1                    ***0***     	          when b"011101" =>
    366             1                    ***0***     	          when b"011110" =>
    372             1                    ***0***     	          when b"011111" =>
    378             1                    ***0***     	          when b"100000" =>
    384             1                    ***0***     	          when b"100001" =>
    390             1                    ***0***     	          when b"100010" =>
    396             1                    ***0***     	          when b"100011" =>
    402             1                    ***0***     	          when b"100100" =>
    408             1                    ***0***     	          when b"100101" =>
    414             1                    ***0***     	          when b"100110" =>
    420             1                    ***0***     	          when b"100111" =>
    426             1                    ***0***     	          when b"101000" =>
    432             1                    ***0***     	          when b"101001" =>
    438             1                    ***0***     	          when b"101010" =>
    444             1                    ***0***     	          when b"101011" =>
    450             1                    ***0***     	          when b"101100" =>
    456             1                    ***0***     	          when b"101101" =>
    462             1                    ***0***     	          when b"101110" =>
    468             1                    ***0***     	          when b"101111" =>
    474             1                    ***0***     	          when b"110000" =>
    480             1                    ***0***     	          when b"110001" =>
    486             1                    ***0***     	          when b"110010" =>
    492             1                    ***0***     	          when b"110011" =>
    498             1                    ***0***     	          when b"110100" =>
    504             1                    ***0***     	          when b"110101" =>
    510             1                    ***0***     	          when b"110110" =>
    516             1                    ***0***     	          when b"110111" =>
    522             1                    ***0***     	          when b"111000" =>
    528             1                    ***0***     	          when b"111001" =>
    534             1                    ***0***     	          when b"111010" =>
    540             1                    ***0***     	          when b"111011" =>
    546             1                    ***0***     	          when b"111100" =>
    552             1                    ***0***     	          when b"111101" =>
    558             1                    ***0***     	          when b"111110" =>
    564             1                    ***0***     	          when b"111111" =>
    570             1                    ***0***     	          when others =>
Branch totals: 0 hits of 65 branches = 0.0%

------------------------------------IF Branch------------------------------------
    188                                  ***0***     Count coming in to IF
    188             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    194                                  ***0***     Count coming in to IF
    194             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    200                                  ***0***     Count coming in to IF
    200             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    206                                  ***0***     Count coming in to IF
    206             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    212                                  ***0***     Count coming in to IF
    212             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    218                                  ***0***     Count coming in to IF
    218             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    224                                  ***0***     Count coming in to IF
    224             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    230                                  ***0***     Count coming in to IF
    230             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    236                                  ***0***     Count coming in to IF
    236             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    242                                  ***0***     Count coming in to IF
    242             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    248                                  ***0***     Count coming in to IF
    248             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    254                                  ***0***     Count coming in to IF
    254             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    260                                  ***0***     Count coming in to IF
    260             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    266                                  ***0***     Count coming in to IF
    266             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    272                                  ***0***     Count coming in to IF
    272             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    278                                  ***0***     Count coming in to IF
    278             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    284                                  ***0***     Count coming in to IF
    284             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    290                                  ***0***     Count coming in to IF
    290             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    296                                  ***0***     Count coming in to IF
    296             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    302                                  ***0***     Count coming in to IF
    302             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    308                                  ***0***     Count coming in to IF
    308             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    314                                  ***0***     Count coming in to IF
    314             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    320                                  ***0***     Count coming in to IF
    320             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    326                                  ***0***     Count coming in to IF
    326             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    332                                  ***0***     Count coming in to IF
    332             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    338                                  ***0***     Count coming in to IF
    338             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    344                                  ***0***     Count coming in to IF
    344             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    350                                  ***0***     Count coming in to IF
    350             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    356                                  ***0***     Count coming in to IF
    356             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    362                                  ***0***     Count coming in to IF
    362             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    368                                  ***0***     Count coming in to IF
    368             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    374                                  ***0***     Count coming in to IF
    374             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    380                                  ***0***     Count coming in to IF
    380             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    386                                  ***0***     Count coming in to IF
    386             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    392                                  ***0***     Count coming in to IF
    392             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    398                                  ***0***     Count coming in to IF
    398             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    404                                  ***0***     Count coming in to IF
    404             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    410                                  ***0***     Count coming in to IF
    410             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    416                                  ***0***     Count coming in to IF
    416             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    422                                  ***0***     Count coming in to IF
    422             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    428                                  ***0***     Count coming in to IF
    428             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    434                                  ***0***     Count coming in to IF
    434             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    440                                  ***0***     Count coming in to IF
    440             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    446                                  ***0***     Count coming in to IF
    446             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    452                                  ***0***     Count coming in to IF
    452             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    458                                  ***0***     Count coming in to IF
    458             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    464                                  ***0***     Count coming in to IF
    464             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    470                                  ***0***     Count coming in to IF
    470             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    476                                  ***0***     Count coming in to IF
    476             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    482                                  ***0***     Count coming in to IF
    482             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    488                                  ***0***     Count coming in to IF
    488             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    494                                  ***0***     Count coming in to IF
    494             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    500                                  ***0***     Count coming in to IF
    500             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    506                                  ***0***     Count coming in to IF
    506             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    512                                  ***0***     Count coming in to IF
    512             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    518                                  ***0***     Count coming in to IF
    518             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    524                                  ***0***     Count coming in to IF
    524             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    530                                  ***0***     Count coming in to IF
    530             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    536                                  ***0***     Count coming in to IF
    536             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    542                                  ***0***     Count coming in to IF
    542             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    548                                  ***0***     Count coming in to IF
    548             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    554                                  ***0***     Count coming in to IF
    554             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    560                                  ***0***     Count coming in to IF
    560             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    566                                  ***0***     Count coming in to IF
    566             1                    ***0***     	              if ( S_AXI_WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    643                                        3     Count coming in to IF
    643             1                          3           if rising_edge(S_AXI_ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    644                                        3     Count coming in to IF
    644             1                          2             if S_AXI_ARESETN = '0' then
    647             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    648                                        1     Count coming in to IF
    648             1                    ***0***               if (axi_awready = '1' and S_AXI_AWVALID = '1' and axi_wready = '1' and S_AXI_WVALID = '1' and axi_bvalid = '0'  ) then
    651             1                    ***0***               elsif (S_AXI_BREADY = '1' and axi_bvalid = '1') then   
                                               1     All False Count
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    659                                        3     Count coming in to IF
    659             1                          3           if rising_edge(S_AXI_ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    660                                        3     Count coming in to IF
    660             1                          2             if S_AXI_ARESETN = '0' then
    663             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    664                                        1     Count coming in to IF
    664             1                    ***0***               if (axi_arready = '0' and S_AXI_ARVALID = '1') then
    667             1                          1               else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    675                                        3     Count coming in to IF
    675             1                          3           if rising_edge(S_AXI_ACLK) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    676                                        3     Count coming in to IF
    676             1                          2             if S_AXI_ARESETN = '0' then
    679             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    680                                        1     Count coming in to IF
    680             1                    ***0***               if (axi_arready = '1' and S_AXI_ARVALID = '1' and axi_rvalid = '0') then
    683             1                    ***0***               elsif (axi_rvalid = '1' and S_AXI_RREADY = '1') then
                                               1     All False Count
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------CASE Branch------------------------------------
    694                                        9     Count coming in to CASE
    695             1                    ***0***               when b"000000" =>
    697             1                    ***0***               when b"000001" =>
    699             1                    ***0***               when b"000010" =>
    701             1                    ***0***               when b"000011" =>
    703             1                    ***0***               when b"000100" =>
    705             1                    ***0***               when b"000101" =>
    707             1                    ***0***               when b"000110" =>
    709             1                    ***0***               when b"000111" =>
    711             1                    ***0***               when b"001000" =>
    713             1                    ***0***               when b"001001" =>
    715             1                    ***0***               when b"001010" =>
    717             1                    ***0***               when b"001011" =>
    719             1                    ***0***               when b"001100" =>
    721             1                    ***0***               when b"001101" =>
    723             1                    ***0***               when b"001110" =>
    725             1                    ***0***               when b"001111" =>
    727             1                    ***0***               when b"010000" =>
    729             1                    ***0***               when b"010001" =>
    731             1                    ***0***               when b"010010" =>
    733             1                    ***0***               when b"010011" =>
    735             1                    ***0***               when b"010100" =>
    737             1                    ***0***               when b"010101" =>
    739             1                    ***0***               when b"010110" =>
    741             1                    ***0***               when b"010111" =>
    743             1                    ***0***               when b"011000" =>
    745             1                    ***0***               when b"011001" =>
    747             1                    ***0***               when b"011010" =>
    749             1                    ***0***               when b"011011" =>
    751             1                    ***0***               when b"011100" =>
    753             1                    ***0***               when b"011101" =>
    755             1                    ***0***               when b"011110" =>
    757             1                    ***0***               when b"011111" =>
    759             1                    ***0***     	      when b"100000" =>
    761             1                    ***0***     	      when b"100001" =>
    763             1                    ***0***     	      when b"100010" =>
    765             1                    ***0***     	      when b"100011" =>
    767             1                    ***0***     	      when b"100100" =>
    769             1                    ***0***     	      when b"100101" =>
    771             1                    ***0***     	      when b"100110" =>
    773             1                    ***0***     	      when b"100111" =>
    775             1                    ***0***     	      when b"101000" =>
    777             1                    ***0***     	      when b"101001" =>
    779             1                    ***0***     	      when b"101010" =>
    781             1                    ***0***     	      when b"101011" =>
    783             1                    ***0***     	      when b"101100" =>
    785             1                    ***0***     	      when b"101101" =>
    787             1                    ***0***     	      when b"101110" =>
    789             1                    ***0***     	      when b"101111" =>
    791             1                    ***0***     	      when b"110000" =>
    793             1                    ***0***     	      when b"110001" =>
    795             1                    ***0***     	      when b"110010" =>
    797             1                    ***0***     	      when b"110011" =>
    799             1                    ***0***     	      when b"110100" =>
    801             1                    ***0***     	      when b"110101" =>
    803             1                    ***0***     	      when b"110110" =>
    805             1                    ***0***     	      when b"110111" =>
    807             1                    ***0***     	      when b"111000" =>
    809             1                    ***0***     	      when b"111001" =>
    811             1                    ***0***     	      when b"111010" =>
    813             1                    ***0***     	      when b"111011" =>
    815             1                    ***0***     	      when b"111100" =>
    817             1                    ***0***     	      when b"111101" =>
    819             1                    ***0***     	      when b"111110" =>
    821             1                          6     	      when b"111111" =>
    823             1                          3               when others =>
Branch totals: 2 hits of 65 branches = 3.0%

------------------------------------IF Branch------------------------------------
    829                                        3     Count coming in to IF
    829             1                          3           if (rising_edge (S_AXI_ACLK)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    830                                        3     Count coming in to IF
    830             1                          2             if ( S_AXI_ARESETN = '0' ) then
    832             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    833                                        1     Count coming in to IF
    833             1                    ***0***               if (slv_reg_rden = '1') then
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    841                                    10760     Count coming in to IF
    841             1                      10760             if (rising_edge (S_AXI_ACLK)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms             28         0        28       0.0

================================Condition Details================================

Condition Coverage for Design Unit work.videoprocess_v1_0_config(arch_imp) --

  File ../../uvmtb/dut/hdl/vfpConfig.vhd
----------------Focused Condition View-------------------
Line       75 Item    1  ((((axi_awready = '0') and (S_AXI_AWVALID = '1')) and (S_AXI_WVALID = '1')) and (aw_en = '1'))
Condition totals: 0 of 4 input terms covered = 0.0%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
    (axi_awready = '0')         N  No hits                  Hit '_0' and '_1'
  (S_AXI_AWVALID = '1')         N  '_1' not hit             Hit '_1'
   (S_AXI_WVALID = '1')         N  No hits                  Hit '_0' and '_1'
          (aw_en = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:    ***0***  (axi_awready = '0')_0    -                             
  Row   2:    ***0***  (axi_awready = '0')_1    (aw_en = '1') && (S_AXI_WVALID = '1') && (S_AXI_AWVALID = '1')
  Row   3:          1  (S_AXI_AWVALID = '1')_0  (axi_awready = '0')           
  Row   4:    ***0***  (S_AXI_AWVALID = '1')_1  (aw_en = '1') && (S_AXI_WVALID = '1') && (axi_awready = '0')
  Row   5:    ***0***  (S_AXI_WVALID = '1')_0   ((axi_awready = '0') and (S_AXI_AWVALID = '1'))
  Row   6:    ***0***  (S_AXI_WVALID = '1')_1   (aw_en = '1') && ((axi_awready = '0') and (S_AXI_AWVALID = '1'))
  Row   7:    ***0***  (aw_en = '1')_0          (((axi_awready = '0') and (S_AXI_AWVALID = '1')) and (S_AXI_WVALID = '1'))
  Row   8:    ***0***  (aw_en = '1')_1          (((axi_awready = '0') and (S_AXI_AWVALID = '1')) and (S_AXI_WVALID = '1'))

----------------Focused Condition View-------------------
Line       77 Item    1  ((S_AXI_BREADY = '1') and (axi_bvalid = '1'))
Condition totals: 0 of 2 input terms covered = 0.0%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (S_AXI_BREADY = '1')         N  '_1' not hit             Hit '_1'
    (axi_bvalid = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (S_AXI_BREADY = '1')_0  -                             
  Row   2:    ***0***  (S_AXI_BREADY = '1')_1  (axi_bvalid = '1')            
  Row   3:    ***0***  (axi_bvalid = '1')_0    (S_AXI_BREADY = '1')          
  Row   4:    ***0***  (axi_bvalid = '1')_1    (S_AXI_BREADY = '1')          

----------------Focused Condition View-------------------
Line       92 Item    1  ((((axi_awready = '0') and (S_AXI_AWVALID = '1')) and (S_AXI_WVALID = '1')) and (aw_en = '1'))
Condition totals: 0 of 4 input terms covered = 0.0%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
    (axi_awready = '0')         N  No hits                  Hit '_0' and '_1'
  (S_AXI_AWVALID = '1')         N  '_1' not hit             Hit '_1'
   (S_AXI_WVALID = '1')         N  No hits                  Hit '_0' and '_1'
          (aw_en = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:    ***0***  (axi_awready = '0')_0    -                             
  Row   2:    ***0***  (axi_awready = '0')_1    (aw_en = '1') && (S_AXI_WVALID = '1') && (S_AXI_AWVALID = '1')
  Row   3:          1  (S_AXI_AWVALID = '1')_0  (axi_awready = '0')           
  Row   4:    ***0***  (S_AXI_AWVALID = '1')_1  (aw_en = '1') && (S_AXI_WVALID = '1') && (axi_awready = '0')
  Row   5:    ***0***  (S_AXI_WVALID = '1')_0   ((axi_awready = '0') and (S_AXI_AWVALID = '1'))
  Row   6:    ***0***  (S_AXI_WVALID = '1')_1   (aw_en = '1') && ((axi_awready = '0') and (S_AXI_AWVALID = '1'))
  Row   7:    ***0***  (aw_en = '1')_0          (((axi_awready = '0') and (S_AXI_AWVALID = '1')) and (S_AXI_WVALID = '1'))
  Row   8:    ***0***  (aw_en = '1')_1          (((axi_awready = '0') and (S_AXI_AWVALID = '1')) and (S_AXI_WVALID = '1'))

----------------Focused Condition View-------------------
Line       104 Item    1  ((((axi_wready = '0') and (S_AXI_WVALID = '1')) and (S_AXI_AWVALID = '1')) and (aw_en = '1'))
Condition totals: 0 of 4 input terms covered = 0.0%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
     (axi_wready = '0')         N  No hits                  Hit '_0' and '_1'
   (S_AXI_WVALID = '1')         N  '_1' not hit             Hit '_1'
  (S_AXI_AWVALID = '1')         N  No hits                  Hit '_0' and '_1'
          (aw_en = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:    ***0***  (axi_wready = '0')_0     -                             
  Row   2:    ***0***  (axi_wready = '0')_1     (aw_en = '1') && (S_AXI_AWVALID = '1') && (S_AXI_WVALID = '1')
  Row   3:          1  (S_AXI_WVALID = '1')_0   (axi_wready = '0')            
  Row   4:    ***0***  (S_AXI_WVALID = '1')_1   (aw_en = '1') && (S_AXI_AWVALID = '1') && (axi_wready = '0')
  Row   5:    ***0***  (S_AXI_AWVALID = '1')_0  ((axi_wready = '0') and (S_AXI_WVALID = '1'))
  Row   6:    ***0***  (S_AXI_AWVALID = '1')_1  (aw_en = '1') && ((axi_wready = '0') and (S_AXI_WVALID = '1'))
  Row   7:    ***0***  (aw_en = '1')_0          (((axi_wready = '0') and (S_AXI_WVALID = '1')) and (S_AXI_AWVALID = '1'))
  Row   8:    ***0***  (aw_en = '1')_1          (((axi_wready = '0') and (S_AXI_WVALID = '1')) and (S_AXI_AWVALID = '1'))

----------------Focused Condition View-------------------
Line       648 Item    1  (((((axi_awready = '1') and (S_AXI_AWVALID = '1')) and (axi_wready = '1')) and (S_AXI_WVALID = '1')) and (axi_bvalid = '0'))
Condition totals: 0 of 5 input terms covered = 0.0%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
    (axi_awready = '1')         N  '_1' not hit             Hit '_1'
  (S_AXI_AWVALID = '1')         N  No hits                  Hit '_0' and '_1'
     (axi_wready = '1')         N  No hits                  Hit '_0' and '_1'
   (S_AXI_WVALID = '1')         N  No hits                  Hit '_0' and '_1'
     (axi_bvalid = '0')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  (axi_awready = '1')_0    -                             
  Row   2:    ***0***  (axi_awready = '1')_1    (axi_bvalid = '0') && (S_AXI_WVALID = '1') && (axi_wready = '1') && (S_AXI_AWVALID = '1')
  Row   3:    ***0***  (S_AXI_AWVALID = '1')_0  (axi_awready = '1')           
  Row   4:    ***0***  (S_AXI_AWVALID = '1')_1  (axi_bvalid = '0') && (S_AXI_WVALID = '1') && (axi_wready = '1') && (axi_awready = '1')
  Row   5:    ***0***  (axi_wready = '1')_0     ((axi_awready = '1') and (S_AXI_AWVALID = '1'))
  Row   6:    ***0***  (axi_wready = '1')_1     (axi_bvalid = '0') && (S_AXI_WVALID = '1') && ((axi_awready = '1') and (S_AXI_AWVALID = '1'))
  Row   7:    ***0***  (S_AXI_WVALID = '1')_0   (((axi_awready = '1') and (S_AXI_AWVALID = '1')) and (axi_wready = '1'))
  Row   8:    ***0***  (S_AXI_WVALID = '1')_1   (axi_bvalid = '0') && (((axi_awready = '1') and (S_AXI_AWVALID = '1')) and (axi_wready = '1'))
  Row   9:    ***0***  (axi_bvalid = '0')_0     ((((axi_awready = '1') and (S_AXI_AWVALID = '1')) and (axi_wready = '1')) and (S_AXI_WVALID = '1'))
 Row   10:    ***0***  (axi_bvalid = '0')_1     ((((axi_awready = '1') and (S_AXI_AWVALID = '1')) and (axi_wready = '1')) and (S_AXI_WVALID = '1'))

----------------Focused Condition View-------------------
Line       651 Item    1  ((S_AXI_BREADY = '1') and (axi_bvalid = '1'))
Condition totals: 0 of 2 input terms covered = 0.0%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (S_AXI_BREADY = '1')         N  '_1' not hit             Hit '_1'
    (axi_bvalid = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (S_AXI_BREADY = '1')_0  -                             
  Row   2:    ***0***  (S_AXI_BREADY = '1')_1  (axi_bvalid = '1')            
  Row   3:    ***0***  (axi_bvalid = '1')_0    (S_AXI_BREADY = '1')          
  Row   4:    ***0***  (axi_bvalid = '1')_1    (S_AXI_BREADY = '1')          

----------------Focused Condition View-------------------
Line       664 Item    1  ((axi_arready = '0') and (S_AXI_ARVALID = '1'))
Condition totals: 0 of 2 input terms covered = 0.0%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
    (axi_arready = '0')         N  No hits                  Hit '_0' and '_1'
  (S_AXI_ARVALID = '1')         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:    ***0***  (axi_arready = '0')_0    -                             
  Row   2:    ***0***  (axi_arready = '0')_1    (S_AXI_ARVALID = '1')         
  Row   3:          1  (S_AXI_ARVALID = '1')_0  (axi_arready = '0')           
  Row   4:    ***0***  (S_AXI_ARVALID = '1')_1  (axi_arready = '0')           

----------------Focused Condition View-------------------
Line       680 Item    1  (((axi_arready = '1') and (S_AXI_ARVALID = '1')) and (axi_rvalid = '0'))
Condition totals: 0 of 3 input terms covered = 0.0%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
    (axi_arready = '1')         N  '_1' not hit             Hit '_1'
  (S_AXI_ARVALID = '1')         N  No hits                  Hit '_0' and '_1'
     (axi_rvalid = '0')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  (axi_arready = '1')_0    -                             
  Row   2:    ***0***  (axi_arready = '1')_1    (axi_rvalid = '0') && (S_AXI_ARVALID = '1')
  Row   3:    ***0***  (S_AXI_ARVALID = '1')_0  (axi_arready = '1')           
  Row   4:    ***0***  (S_AXI_ARVALID = '1')_1  (axi_rvalid = '0') && (axi_arready = '1')
  Row   5:    ***0***  (axi_rvalid = '0')_0     ((axi_arready = '1') and (S_AXI_ARVALID = '1'))
  Row   6:    ***0***  (axi_rvalid = '0')_1     ((axi_arready = '1') and (S_AXI_ARVALID = '1'))

----------------Focused Condition View-------------------
Line       683 Item    1  ((axi_rvalid = '1') and (S_AXI_RREADY = '1'))
Condition totals: 0 of 2 input terms covered = 0.0%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
    (axi_rvalid = '1')         N  '_1' not hit             Hit '_1'
  (S_AXI_RREADY = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (axi_rvalid = '1')_0    -                             
  Row   2:    ***0***  (axi_rvalid = '1')_1    (S_AXI_RREADY = '1')          
  Row   3:    ***0***  (S_AXI_RREADY = '1')_0  (axi_rvalid = '1')            
  Row   4:    ***0***  (S_AXI_RREADY = '1')_1  (axi_rvalid = '1')            


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             7         0         7       0.0

================================Expression Details================================

Expression Coverage for Design Unit work.videoprocess_v1_0_config(arch_imp) --

  File ../../uvmtb/dut/hdl/vfpConfig.vhd
----------------Focused Expression View-----------------
Line       112 Item    1  (((axi_wready and S_AXI_WVALID) and axi_awready) and S_AXI_AWVALID)
Expression totals: 0 of 4 input terms covered = 0.0%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
     axi_wready         N  No hits                  Hit '_0' and '_1'
   S_AXI_WVALID         N  No hits                  Hit '_0' and '_1'
    axi_awready         N  No hits                  Hit '_0' and '_1'
  S_AXI_AWVALID         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  axi_wready_0          S_AXI_AWVALID && axi_awready && S_AXI_WVALID
  Row   2:    ***0***  axi_wready_1          S_AXI_AWVALID && axi_awready && S_AXI_WVALID
  Row   3:    ***0***  S_AXI_WVALID_0        S_AXI_AWVALID && axi_awready && axi_wready
  Row   4:    ***0***  S_AXI_WVALID_1        S_AXI_AWVALID && axi_awready && axi_wready
  Row   5:    ***0***  axi_awready_0         S_AXI_AWVALID && (axi_wready and S_AXI_WVALID)
  Row   6:    ***0***  axi_awready_1         S_AXI_AWVALID && (axi_wready and S_AXI_WVALID)
  Row   7:    ***0***  S_AXI_AWVALID_0       ((axi_wready and S_AXI_WVALID) and axi_awready)
  Row   8:    ***0***  S_AXI_AWVALID_1       ((axi_wready and S_AXI_WVALID) and axi_awready)

----------------Focused Expression View-----------------
Line       689 Item    1  ((axi_arready and S_AXI_ARVALID) and not(axi_rvalid))
Expression totals: 0 of 3 input terms covered = 0.0%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
    axi_arready         N  No hits                  Hit '_0' and '_1'
  S_AXI_ARVALID         N  No hits                  Hit '_0' and '_1'
     axi_rvalid         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  axi_arready_0         not axi_rvalid && S_AXI_ARVALID
  Row   2:    ***0***  axi_arready_1         not axi_rvalid && S_AXI_ARVALID
  Row   3:    ***0***  S_AXI_ARVALID_0       not axi_rvalid && axi_arready 
  Row   4:    ***0***  S_AXI_ARVALID_1       not axi_rvalid && axi_arready 
  Row   5:    ***0***  axi_rvalid_0          (axi_arready and S_AXI_ARVALID)
  Row   6:    ***0***  axi_rvalid_1          (axi_arready and S_AXI_ARVALID)


FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== Design Unit: work.videoprocess_v1_0_m_axis_mm2s(arch_imp)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           29        25         4      86.2

================================Statement Details================================

Statement Coverage for Design Unit work.videoprocess_v1_0_m_axis_mm2s(arch_imp) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/hdl/vfpMaxisMM2s.vhd
    29                                               architecture arch_imp of videoProcess_v1_0_m_axis_mm2s is
    30                                                   type pixel_locations is (video_trans_in_progress,wait_to_go);
    31                                                   signal pixel_locations_address  : pixel_locations; 
    32                                                   signal axis_tvalid              : std_logic:= lo;
    33                                                   signal axis_tuser               : std_logic:= lo;
    34                                                   signal axis_tlast               : std_logic:= lo;
    35                                                   signal axis_tdata               : std_logic_vector(s_data_width-1 downto 0):= (others => lo); 
    36                                                   signal maxis_mm2s_tdata         : std_logic_vector(s_data_width-1 downto 0):= (others => lo);
    37                                                   signal maxis_mm2s_tuser         : std_logic:= lo;
    38                                                   signal maxis_mm2s_tvalid        : std_logic:= lo;
    39                                                   signal maxis_mmss_tvalid        : std_logic:= lo;
    40                                                   signal mm2s_tready              : std_logic:= lo;
    41                                               begin
    42                                               process(aclk) begin
    43                                                   if rising_edge(aclk) then
    44              1                      10760             axis_tvalid <= rgb_s_axis_tvalid;
    45              1                      10760             mm2s_tready <= m_axis_mm2s_tready;
    46              1                      10760             axis_tuser  <= rgb_s_axis_tuser;
    47              1                      10760             axis_tdata  <= rgb_s_axis_tdata(15 downto 8) & rgb_s_axis_tdata(7 downto 0);
    48                                                   end if;
    49                                               end process;
    50                                               process (aclk) begin
    51                                                   if (rising_edge (aclk)) then
    52                                                       if (aresetn = lo) then
    53              1                          3                 pixel_locations_address <= wait_to_go;
    54              1                          3                 rgb_s_axis_tready       <=lo;
    55                                                       else
    56                                                       case (pixel_locations_address) is
    57                                                       when wait_to_go =>
    58              1                          4                 axis_tlast         <=lo;
    59              1                          4                 rgb_s_axis_tready  <=hi;--initiate
    60              1                          4                 maxis_mm2s_tvalid  <=lo;
    61                                                           if (rgb_s_axis_tvalid  = hi)then-- initiate response
    62              1                          1                     pixel_locations_address <= video_trans_in_progress;            
    63                                                           else
    64              1                          3                     pixel_locations_address <= wait_to_go;    
    65                                                           end if;        
    66                                                       when video_trans_in_progress =>
    67              1                       2849                 maxis_mm2s_tuser   <= axis_tuser;
    68              1                       2849                 maxis_mm2s_tdata   <= axis_tdata;
    69                                                           if (rgb_s_axis_tlast = hi)then
    70              1                    ***0***                     axis_tlast <=hi;
    71              1                    ***0***                     maxis_mm2s_tvalid  <=lo;
    72              1                    ***0***                     pixel_locations_address <= wait_to_go;
    73                                                           else
    74              1                       2849                     axis_tlast <=lo;
    75              1                       2849                     maxis_mm2s_tvalid  <=hi;
    76              1                       2849                     pixel_locations_address <= video_trans_in_progress;
    77                                                           end if;
    78                                                       when others =>
    79              1                    ***0***                 pixel_locations_address <= wait_to_go;
    80                                                       end case;
    81                                                       end if;
    82                                                   end if;
    83                                               end process;
    84                                               process(aclk) begin
    85                                                   if rising_edge(aclk) then
    86              1                       1947             m_axis_mm2s_tkeep      <= (others => hi);
    87              1                       1947             m_axis_mm2s_tid        <= "0";
    88              1                       1947             m_axis_mm2s_tdest      <= "0";
    89              1                       1947             m_axis_mm2s_tstrb      <= (others => hi);
    90              1                       1947             m_axis_mm2s_tdata      <= maxis_mm2s_tdata;
    91              1                       1947             m_axis_mm2s_tlast      <= axis_tlast;
    92              1                       1947             m_axis_mm2s_tuser      <= maxis_mm2s_tuser;
    93              1                       1947             m_axis_mm2s_tvalid     <= maxis_mm2s_tvalid or maxis_mmss_tvalid;
    94                                                   end if;
    95                                               end process;
    96                                               process(aclk) begin
    97                                                   if rising_edge(aclk) then
    98              1                      10760             maxis_mmss_tvalid  <= maxis_mm2s_tvalid;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        13        11         2      84.6

================================Branch Details================================

Branch Coverage for Design Unit work.videoprocess_v1_0_m_axis_mm2s(arch_imp)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/hdl/vfpMaxisMM2s.vhd
------------------------------------IF Branch------------------------------------
    43                                     10760     Count coming in to IF
    43              1                      10760         if rising_edge(aclk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    51                                      2856     Count coming in to IF
    51              1                       2856         if (rising_edge (aclk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    52                                      2856     Count coming in to IF
    52              1                          3             if (aresetn = lo) then
    55              1                       2853             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    56                                      2853     Count coming in to CASE
    57              1                          4             when wait_to_go =>
    66              1                       2849             when video_trans_in_progress =>
    78              1                    ***0***             when others =>
Branch totals: 2 hits of 3 branches = 66.6%

------------------------------------IF Branch------------------------------------
    61                                         4     Count coming in to IF
    61              1                          1                 if (rgb_s_axis_tvalid  = hi)then-- initiate response
    63              1                          3                 else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    69                                      2849     Count coming in to IF
    69              1                    ***0***                 if (rgb_s_axis_tlast = hi)then
    73              1                       2849                 else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    85                                      1947     Count coming in to IF
    85              1                       1947         if rising_edge(aclk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    97                                     10760     Count coming in to IF
    97              1                      10760         if rising_edge(aclk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             2         1         1      50.0

================================Expression Details================================

Expression Coverage for Design Unit work.videoprocess_v1_0_m_axis_mm2s(arch_imp) --

  File ../../uvmtb/dut/hdl/vfpMaxisMM2s.vhd
----------------Focused Expression View-----------------
Line       93 Item    1  (maxis_mm2s_tvalid or maxis_mmss_tvalid)
Expression totals: 1 of 2 input terms covered = 50.0%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  maxis_mm2s_tvalid         Y
  maxis_mmss_tvalid         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  maxis_mm2s_tvalid_0   not maxis_mmss_tvalid         
  Row   2:          1  maxis_mm2s_tvalid_1   not maxis_mmss_tvalid         
  Row   3:          1  maxis_mmss_tvalid_0   not maxis_mm2s_tvalid         
  Row   4:    ***0***  maxis_mmss_tvalid_1   not maxis_mm2s_tvalid         


FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       2         2         0     100.0
        Transitions                  2         2         0     100.0

================================FSM Details================================

FSM Coverage for Design Unit work.videoprocess_v1_0_m_axis_mm2s(arch_imp) --

FSM_ID: pixel_locations_address
    Current State Object : pixel_locations_address
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
  57          wait_to_go                   1
  66video_trans_in_progress                   0
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
              wait_to_go                   6
    video_trans_in_progress                2850
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
  62                   0                   1          wait_to_go -> video_trans_in_progress
  72                   1                   1          video_trans_in_progress -> wait_to_go


    Summary                     Active      Hits    Misses % Covered
    -------                     ------      ----    ------ ---------
        States                       2         2         0     100.0
        Transitions                  2         2         0     100.0

=================================================================================
=== Design Unit: work.videoprocess_v1_0_rgb_m_axis(arch_imp)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           58        30        28      51.7

================================Statement Details================================

Statement Coverage for Design Unit work.videoprocess_v1_0_rgb_m_axis(arch_imp) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/hdl/vfpMSaxisRGB.vhd
    40                                               architecture arch_imp of videoProcess_v1_0_rgb_m_axis is
    41                                                   signal configReg4R       : std_logic_vector(b_data_width-1 downto 0):= (others => lo);
    42                                                   signal axis_sof          : std_logic;
    43                                                   signal mpeg42XCR         : std_logic_vector(i_data_width-1 downto 0);
    44                                                   signal mpeg42XBR         : std_logic :=lo;
    45                                                   signal mpeg42XXX         : std_logic :=lo;
    46                                                   signal tx_axis_tvalid    : std_logic;
    47                                                   signal tx_axis_tlast     : std_logic;
    48                                                   signal tx_axis_tuser     : std_logic;
    49                                                   signal tx_axis_tready    : std_logic;
    50                                               	signal pEofs1            : std_logic :=lo;
    51                                                   signal tx_axis_tdata     : std_logic_vector(s_data_width-1 downto 0);
    52                                                   type video_io_state is (VIDEO_SET_RESET,VIDEO_SOF_OFF,VIDEO_SOF_ON,VIDEO_END_OF_LINE);
    53                                                   signal VIDEO_STATES      : video_io_state; 
    54                                               begin
    55                                               process (m_axis_mm2s_aclk) begin
    56                                                   if rising_edge(m_axis_mm2s_aclk) then
    57              1                          3                 mpeg42XBR  <= not(mpeg42XBR) and iStreamData.ycbcr.valid;
    58              1                          3                 mpeg42XXX  <= not(mpeg42XBR);
    59                                                   end if;
    60                                               end process;
    61                                               process (m_axis_mm2s_aclk) begin
    62                                                   if rising_edge(m_axis_mm2s_aclk) then
    63              1                          4                 mpeg42XCR   <= iStreamData.ycbcr.blue;
    64              1                          4                 configReg4R <= aBusSelect;
    65                                                   end if;
    66                                               end process;
    67                                               process (m_axis_mm2s_aclk) begin
    68                                                   if (rising_edge (m_axis_mm2s_aclk)) then
    69                                                       if (m_axis_mm2s_aresetn = lo) then
    70              1                          6                 VIDEO_STATES <= VIDEO_SET_RESET;
    71                                                       else
    72              1                          5             tx_axis_tuser <=axis_sof;
    73                                                       case (VIDEO_STATES) is
    74                                                       when VIDEO_SET_RESET =>
    75              1                          5                 tx_axis_tlast  <= lo;
    76              1                          5                 tx_axis_tvalid <= lo;
    77              1                          5                 tx_axis_tdata  <= (others => lo);    
    78              1                          5                 axis_sof       <= lo;
    79                                                       if (iStreamData.sof = '1') then
    80              1                    ***0***                 VIDEO_STATES <= VIDEO_SOF_OFF;
    81                                                       else
    82              1                          5                 VIDEO_STATES <= VIDEO_SET_RESET;
    83                                                       end if;
    84                                                       when VIDEO_SOF_OFF =>
    85                                                       if (iStreamData.ycbcr.valid = hi) then
    86              1                    ***0***                 VIDEO_STATES <= VIDEO_SOF_ON;
    87              1                    ***0***                 axis_sof     <= hi;
    88                                                       else
    89              1                    ***0***                 VIDEO_STATES <= VIDEO_SOF_OFF;
    90                                                       end if;
    91                                                       when VIDEO_SOF_ON =>
    92              1                    ***0***                 axis_sof       <= lo;
    93              1                    ***0***     			tx_axis_tvalid <= hi;
    94                                                           if(iStreamData.eof = hi) then
    95              1                    ***0***                     pEofs1 <= hi;
    96                                                           end if;
    97                                                           if (configReg4R = EXTERNAL_AXIS_STREAM)then
    98                                                               if(mpeg42XXX =hi)then
    99              1                    ***0***                         tx_axis_tdata  <= (iStreamData.ycbcr.green & iStreamData.ycbcr.red);
    100                                                              else
    101             1                    ***0***                         tx_axis_tdata  <= (mpeg42XCR & iStreamData.ycbcr.red);
    102                                                              end if;
    103                                                          elsif (configReg4R = STREAM_TESTPATTERN1)then
    104             1                    ***0***                     tx_axis_tdata  <= iStreamData.cord.x;
    105                                                          elsif (configReg4R = STREAM_TESTPATTERN2)then
    106             1                    ***0***                     tx_axis_tdata  <= iStreamData.cord.y;
    107                                                          else
    108                                                              if(mpeg42XXX =hi)then
    109             1                    ***0***                         tx_axis_tdata  <= (iStreamData.ycbcr.green & iStreamData.ycbcr.red);
    110                                                              else
    111             1                    ***0***                         tx_axis_tdata  <= (mpeg42XCR & iStreamData.ycbcr.red);
    112                                                              end if;
    113                                                          end if;
    114                                                      if (iStreamData.ycbcr.valid = hi) then
    115             1                    ***0***                 tx_axis_tlast  <= lo;
    116             1                    ***0***                 VIDEO_STATES <= VIDEO_SOF_ON;
    117                                                      else
    118             1                    ***0***                 tx_axis_tlast  <= hi;
    119             1                    ***0***                 VIDEO_STATES <= VIDEO_END_OF_LINE;
    120                                                      end if;
    121                                                      when VIDEO_END_OF_LINE =>
    122             1                    ***0***                 tx_axis_tlast  <= lo;
    123             1                    ***0***                 tx_axis_tvalid <= lo;
    124                                                          if (pEofs1 = hi) then
    125             1                    ***0***                     VIDEO_STATES <= VIDEO_SOF_OFF;
    126             1                    ***0***     				pEofs1 <= lo;
    127                                                          elsif (iStreamData.ycbcr.valid = hi) then
    128             1                    ***0***                     VIDEO_STATES <= VIDEO_SOF_ON;
    129                                                          else
    130             1                    ***0***                     VIDEO_STATES <= VIDEO_END_OF_LINE;
    131                                                          end if;
    132                                                      when others =>
    133             1                    ***0***                 VIDEO_STATES <= VIDEO_SET_RESET;
    134                                                      end case;
    135                                                      end if;
    136                                                  end if;
    137                                              end process;
    138                                              process (m_axis_mm2s_aclk) begin
    139                                                  if rising_edge(m_axis_mm2s_aclk) then 
    140                                                      if m_axis_mm2s_aresetn = lo then
    141             1                          3                     rx_axis_tvalid     <= lo;
    142             1                          3                     rx_axis_tuser      <= lo;
    143             1                          3                     rx_axis_tlast      <= lo;
    144             1                          3                     rx_axis_tdata      <= (others => lo);
    145             1                          3                     rgb_m_axis_tvalid  <= lo;
    146             1                          3                     rgb_m_axis_tuser   <= lo;
    147             1                          3                     rgb_m_axis_tlast   <= lo;
    148             1                          3                     rgb_m_axis_tdata   <= (others => lo);
    149             1                          3                     tx_axis_tready     <= lo;
    150                                                      else
    151                                                          if (configReg4R = EXTERNAL_AXIS_STREAM)then
    152                                                              --external processed(unused) parallel copy of cpuTX delayed
    153             1                       1950                     rgb_s_axis_tready  <= rx_axis_tready_o;
    154             1                       1950                     rx_axis_tvalid     <= rgb_s_axis_tvalid;
    155             1                       1950                     rx_axis_tuser      <= rgb_s_axis_tuser;
    156             1                       1950                     rx_axis_tlast      <= rgb_s_axis_tlast;
    157             1                       1950                     rx_axis_tdata      <= rgb_s_axis_tdata;
    158                                                          else
    159                                                              -- to cpuTX
    160             1                    ***0***                     rx_axis_tvalid     <= tx_axis_tvalid;
    161             1                    ***0***                     rx_axis_tuser      <= tx_axis_tuser;
    162             1                    ***0***                     rx_axis_tlast      <= tx_axis_tlast;
    163             1                    ***0***                     rx_axis_tdata      <= tx_axis_tdata;
    164                                                          end if;
    165                                                              --parallel internal copy of cpuTX
    166             1                       1950                     tx_axis_tready     <= rgb_m_axis_tready;
    167             1                       1950                     rgb_m_axis_tvalid  <= tx_axis_tvalid;
    168             1                       1950                     rgb_m_axis_tuser   <= tx_axis_tuser;
    169             1                       1950                     rgb_m_axis_tlast   <= tx_axis_tlast;
    170             1                       1950                     rgb_m_axis_tdata   <= tx_axis_tdata;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        34        11        23      32.3

================================Branch Details================================

Branch Coverage for Design Unit work.videoprocess_v1_0_rgb_m_axis(arch_imp)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/hdl/vfpMSaxisRGB.vhd
------------------------------------IF Branch------------------------------------
    56                                         3     Count coming in to IF
    56              1                          3         if rising_edge(m_axis_mm2s_aclk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    62                                         4     Count coming in to IF
    62              1                          4         if rising_edge(m_axis_mm2s_aclk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    68                                        11     Count coming in to IF
    68              1                         11         if (rising_edge (m_axis_mm2s_aclk)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    69                                        11     Count coming in to IF
    69              1                          6             if (m_axis_mm2s_aresetn = lo) then
    71              1                          5             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    73                                         5     Count coming in to CASE
    74              1                          5             when VIDEO_SET_RESET =>
    84              1                    ***0***             when VIDEO_SOF_OFF =>
    91              1                    ***0***             when VIDEO_SOF_ON =>
    121             1                    ***0***             when VIDEO_END_OF_LINE =>
    132             1                    ***0***             when others =>
Branch totals: 1 hit of 5 branches = 20.0%

------------------------------------IF Branch------------------------------------
    79                                         5     Count coming in to IF
    79              1                    ***0***             if (iStreamData.sof = '1') then
    81              1                          5             else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    85                                   ***0***     Count coming in to IF
    85              1                    ***0***             if (iStreamData.ycbcr.valid = hi) then
    88              1                    ***0***             else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    94                                   ***0***     Count coming in to IF
    94              1                    ***0***                 if(iStreamData.eof = hi) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    97                                   ***0***     Count coming in to IF
    97              1                    ***0***                 if (configReg4R = EXTERNAL_AXIS_STREAM)then
    103             1                    ***0***                 elsif (configReg4R = STREAM_TESTPATTERN1)then
    105             1                    ***0***                 elsif (configReg4R = STREAM_TESTPATTERN2)then
    107             1                    ***0***                 else
Branch totals: 0 hits of 4 branches = 0.0%

------------------------------------IF Branch------------------------------------
    98                                   ***0***     Count coming in to IF
    98              1                    ***0***                     if(mpeg42XXX =hi)then
    100             1                    ***0***                     else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    108                                  ***0***     Count coming in to IF
    108             1                    ***0***                     if(mpeg42XXX =hi)then
    110             1                    ***0***                     else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    114                                  ***0***     Count coming in to IF
    114             1                    ***0***             if (iStreamData.ycbcr.valid = hi) then
    117             1                    ***0***             else
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    124                                  ***0***     Count coming in to IF
    124             1                    ***0***                 if (pEofs1 = hi) then
    127             1                    ***0***                 elsif (iStreamData.ycbcr.valid = hi) then
    129             1                    ***0***                 else
Branch totals: 0 hits of 3 branches = 0.0%

------------------------------------IF Branch------------------------------------
    139                                     1953     Count coming in to IF
    139             1                       1953         if rising_edge(m_axis_mm2s_aclk) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    140                                     1953     Count coming in to IF
    140             1                          3             if m_axis_mm2s_aresetn = lo then
    150             1                       1950             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    151                                     1950     Count coming in to IF
    151             1                       1950                 if (configReg4R = EXTERNAL_AXIS_STREAM)then
    158             1                    ***0***                 else
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             2         0         2       0.0

================================Expression Details================================

Expression Coverage for Design Unit work.videoprocess_v1_0_rgb_m_axis(arch_imp) --

  File ../../uvmtb/dut/hdl/vfpMSaxisRGB.vhd
----------------Focused Expression View-----------------
Line       57 Item    1  (not(mpeg42XBR) and iStreamData.ycbcr.valid)
Expression totals: 0 of 2 input terms covered = 0.0%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
                mpeg42XBR         N  No hits                  Hit '_0' and '_1'
  iStreamData.ycbcr.valid         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  mpeg42XBR_0                iStreamData.ycbcr.valid       
  Row   2:    ***0***  mpeg42XBR_1                iStreamData.ycbcr.valid       
  Row   3:          1  iStreamData.ycbcr.valid_0  not mpeg42XBR                 
  Row   4:    ***0***  iStreamData.ycbcr.valid_1  not mpeg42XBR                 


FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                        12.5
        States                       4         1         3      25.0
        Transitions                  8         0         8       0.0

================================FSM Details================================

FSM Coverage for Design Unit work.videoprocess_v1_0_rgb_m_axis(arch_imp) --

FSM_ID: VIDEO_STATES
    Current State Object : VIDEO_STATES
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
  74     VIDEO_SET_RESET                   0
  84       VIDEO_SOF_OFF                   1
  91        VIDEO_SOF_ON                   2
 121   VIDEO_END_OF_LINE                   3
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
         VIDEO_SET_RESET                  11
    Uncovered States :
    ------------------
                   State
                   -----
           VIDEO_SOF_OFF
            VIDEO_SOF_ON
       VIDEO_END_OF_LINE
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
  80                   0          VIDEO_SET_RESET -> VIDEO_SOF_OFF
  86                   1          VIDEO_SOF_OFF -> VIDEO_SOF_ON
  70                   2          VIDEO_SOF_OFF -> VIDEO_SET_RESET
 119                   3          VIDEO_SOF_ON -> VIDEO_END_OF_LINE
  70                   4          VIDEO_SOF_ON -> VIDEO_SET_RESET
 125                   5          VIDEO_END_OF_LINE -> VIDEO_SOF_OFF
 128                   6          VIDEO_END_OF_LINE -> VIDEO_SOF_ON
  70                   7          VIDEO_END_OF_LINE -> VIDEO_SET_RESET


    Summary                     Active      Hits    Misses % Covered
    -------                     ------      ----    ------ ---------
        States                       4         1         3      25.0
        Transitions                  8         0         8       0.0

=================================================================================
=== Design Unit: work.videoselect(behavioral)
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           68        17        51      25.0

================================Statement Details================================

Statement Coverage for Design Unit work.videoselect(behavioral) --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/videoSelect.vhd
    27                                               architecture Behavioral of videoSelect is
    28                                                   signal vChannelSelect     : integer;
    29                                                   signal eChannelSelect     : integer;
    30                                                   signal ycbcr              : channel;
    31                                                   signal channels           : channel;
    32                                                   signal kCoeffYcbcr        : kernelCoeff;
    33                                               begin
    34              1                          1         kCoeffYcbcr.k1    <= x"0101";-- [ 0.257]
    35              1                          1         kCoeffYcbcr.k2    <= x"01F8";-- [ 0.504]
    36              1                          1         kCoeffYcbcr.k3    <= x"0062";-- [ 0.098]
    37              1                          1         kCoeffYcbcr.k4    <= x"FF6C";-- [-0.148]
    38              1                          1         kCoeffYcbcr.k5    <= x"FEDD";-- [-0.291]
    39              1                          1         kCoeffYcbcr.k6    <= x"01B7";-- [ 0.439]
    40              1                          1         kCoeffYcbcr.k7    <= x"01B7";-- [ 0.439]
    41              1                          1         kCoeffYcbcr.k8    <= x"FE90";-- [-0.368]
    42              1                          1         kCoeffYcbcr.k9    <= x"FFB9";-- [-0.071]
    43              1                          1         kCoeffYcbcr.kSet  <= 6;
    44              1                          2         vChannelSelect    <= to_integer(unsigned(videoChannel));
    45              1                          2         eChannelSelect    <= to_integer(unsigned(dChannel));
    46              1                          2         oEof              <= iFrameData.pEof;
    47              1                          2         oSof              <= iFrameData.pSof;
    48                                               ---------------------------------------------------------------------------------
    49                                               -- oRgb.valid must be 2nd condition else valid value
    50                                               ---------------------------------------------------------------------------------
    51                                               videoOutP: process (clk) begin
    52                                                   if rising_edge(clk) then
    53                                                       if (vChannelSelect = 0) then
    54              1                      10760                 channels           <= iFrameData.cgain;
    55                                                       elsif(vChannelSelect = 1)then
    56              1                    ***0***                 channels           <= iFrameData.sharp;
    57                                                       elsif(vChannelSelect = 2)then
    58              1                    ***0***                 channels           <= iFrameData.blur;
    59                                                       elsif(vChannelSelect = 3)then
    60              1                    ***0***                 channels           <= iFrameData.hsl;
    61                                                       elsif(vChannelSelect = 4)then
    62              1                    ***0***                 channels           <= iFrameData.hsv;
    63                                                       elsif(vChannelSelect = 5)then
    64              1                    ***0***                 channels           <= iFrameData.inrgb;
    65                                                       elsif(vChannelSelect = 6)then
    66              1                    ***0***                 channels           <= iFrameData.sobel;
    67                                                       elsif(vChannelSelect = 7)then
    68              1                    ***0***                 channels           <= iFrameData.embos;
    69                                                       elsif(vChannelSelect = 8)then
    70              1                    ***0***                 channels           <= iFrameData.maskSobelLum;
    71                                                       elsif(vChannelSelect = 9)then
    72              1                    ***0***                 channels           <= iFrameData.maskSobelTrm;
    73                                                       elsif(vChannelSelect = 10)then
    74              1                    ***0***                 channels           <= iFrameData.maskSobelRgb;
    75                                                       elsif(vChannelSelect = 11)then
    76              1                    ***0***                 channels           <= iFrameData.maskSobelShp;
    77                                                       elsif(vChannelSelect = 12)then
    78              1                    ***0***                 channels           <= iFrameData.maskSobelShp;
    79                                                       elsif(vChannelSelect = 13)then
    80              1                    ***0***                 channels           <= iFrameData.maskSobelBlu;
    81                                                       elsif(vChannelSelect = 14)then
    82              1                    ***0***                 channels           <= iFrameData.maskSobelYcc;
    83                                                       elsif(vChannelSelect = 15)then
    84              1                    ***0***                 channels           <= iFrameData.maskSobelHsv;
    85                                                       elsif(vChannelSelect = 16)then
    86              1                    ***0***                 channels           <= iFrameData.maskSobelHsl;
    87                                                       elsif(vChannelSelect = 17)then
    88              1                    ***0***                 channels           <= iFrameData.maskSobelCga;
    89                                                       elsif(vChannelSelect = 18)then
    90              1                    ***0***                 channels           <= iFrameData.colorTrm;
    91                                                       elsif(vChannelSelect = 19)then
    92              1                    ***0***                 channels           <= iFrameData.colorLmp;
    93                                                       elsif(vChannelSelect = 20)then
    94              1                    ***0***                 channels           <= iFrameData.tPattern;
    95                                                       elsif(vChannelSelect = 21)then
    96              1                    ***0***                 channels           <= iFrameData.cgainToCgain;
    97                                                       elsif(vChannelSelect = 22)then
    98              1                    ***0***                 channels           <= iFrameData.cgainToHsl;
    99                                                       elsif(vChannelSelect = 23)then
    100             1                    ***0***                 channels           <= iFrameData.cgainToHsv;
    101                                                      elsif(vChannelSelect = 24)then
    102             1                    ***0***                 channels           <= iFrameData.cgainToYcbcr;
    103                                                      elsif(vChannelSelect = 25)then
    104             1                    ***0***                 channels           <= iFrameData.cgainToShp;
    105                                                      elsif(vChannelSelect = 26)then
    106             1                    ***0***                 channels           <= iFrameData.cgainToBlu;
    107                                                      elsif(vChannelSelect = 27)then
    108             1                    ***0***                 channels           <= iFrameData.shpToCgain;
    109                                                      elsif(vChannelSelect = 28)then
    110             1                    ***0***                 channels           <= iFrameData.shpToHsl;
    111                                                      elsif(vChannelSelect = 29)then
    112             1                    ***0***                 channels           <= iFrameData.shpToHsv;
    113                                                      elsif(vChannelSelect = 30)then
    114             1                    ***0***                 channels           <= iFrameData.shpToYcbcr;
    115                                                      elsif(vChannelSelect = 31)then
    116             1                    ***0***                 channels           <= iFrameData.shpToShp;
    117                                                      elsif(vChannelSelect = 32)then
    118             1                    ***0***                 channels           <= iFrameData.shpToBlu;
    119                                                      elsif(vChannelSelect = 33)then
    120             1                    ***0***                 channels           <= iFrameData.bluToBlu;
    121                                                      elsif(vChannelSelect = 34)then
    122             1                    ***0***                 channels           <= iFrameData.bluToCga;
    123                                                      elsif(vChannelSelect = 35)then
    124             1                    ***0***                 channels           <= iFrameData.bluToShp;
    125                                                      elsif(vChannelSelect = 36)then
    126             1                    ***0***                 channels           <= iFrameData.bluToYcc;
    127                                                      elsif(vChannelSelect = 37)then
    128             1                    ***0***                 channels           <= iFrameData.bluToHsv;
    129                                                      elsif(vChannelSelect = 38)then
    130             1                    ***0***                 channels           <= iFrameData.bluToHsl;
    131                                                      elsif(vChannelSelect = 39)then
    132             1                    ***0***                 channels           <= iFrameData.bluToCgaShp;
    133                                                      elsif(vChannelSelect = 40)then
    134             1                    ***0***                 channels           <= iFrameData.bluToCgaShpYcc;
    135                                                      elsif(vChannelSelect = 41)then
    136             1                    ***0***                 channels           <= iFrameData.bluToCgaShpHsv;
    137                                                      elsif(vChannelSelect = 42)then
    138             1                    ***0***                 channels           <= iFrameData.bluToShpCga;
    139                                                      elsif(vChannelSelect = 43)then
    140             1                    ***0***                 channels           <= iFrameData.bluToShpCgaYcc;
    141                                                      elsif(vChannelSelect = 44)then
    142             1                    ***0***                 channels           <= iFrameData.bluToShpCgaHsv;
    143                                                      elsif(vChannelSelect = 45)then
    144             1                    ***0***                 channels           <= iFrameData.rgbCorrect;
    145                                                      elsif(vChannelSelect = 46)then
    146             1                    ***0***                 channels           <= iFrameData.rgbRemix;
    147                                                      elsif(vChannelSelect = 47)then
    148             1                    ***0***                 channels           <= iFrameData.rgbDetect;
    149                                                      elsif(vChannelSelect = 48)then
    150             1                    ***0***                 channels           <= iFrameData.rgbPoi;
    151                                                      elsif(vChannelSelect = 49)then
    152             1                    ***0***                 channels           <= iFrameData.ycbcr;
    153                                                      else
    154             1                    ***0***                 channels           <= iFrameData.rgbCorrect;
    155                                                      end if;
    156                                                  end if;
    157                                              end process videoOutP;
    158                                              ycbcrInst: rgb_ycbcr
    159                                              generic map(
    160                                                  i_data_width         => i_data_width,
    161                                                  i_precision          => 12,
    162                                                  i_full_range         => FALSE)
    163                                              port map(
    164                                                  clk                  => clk,
    165                                                  rst_l                => rst_l,
    166                                                  iRgb                 => channels,
    167                                                  y                    => ycbcr.red,
    168                                                  cb                   => ycbcr.green,
    169                                                  cr                   => ycbcr.blue,
    170                                                  oValid               => ycbcr.valid);
    171                                              -- Kernel_Ycbcr_Inst: KernelCore
    172                                              -- generic map(
    173                                                  -- SHARP_FRAME   => false,
    174                                                  -- BLURE_FRAME   => false,
    175                                                  -- EMBOS_FRAME   => false,
    176                                                  -- YCBCR_FRAME   => true,
    177                                                  -- SOBEL_FRAME   => false,
    178                                                  -- CGAIN_FRAME   => false,
    179                                                  -- img_width     => img_width,
    180                                                  -- i_data_width  => i_data_width)
    181                                              -- port map(
    182                                                  -- clk            => clk,
    183                                                  -- rst_l          => rst_l,
    184                                                  -- iRgb           => channels,
    185                                                  -- kCoeff         => kCoeffYcbcr,
    186                                                  -- oRgb           => ycbcr);
    187                                              channelOutP: process (clk) begin
    188                                                  if rising_edge(clk) then
    189             1                          8             oCord <= iFrameData.cod;
    190                                                      if (eChannelSelect = 0) then
    191             1                          8                 oRgb     <= ycbcr;
    192                                                      else
    193             1                    ***0***                 oRgb     <= channels;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        55         4        51       7.2

================================Branch Details================================

Branch Coverage for Design Unit work.videoselect(behavioral)

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ../../uvmtb/dut/src/Control/videoSelect.vhd
------------------------------------IF Branch------------------------------------
    52                                     10760     Count coming in to IF
    52              1                      10760         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    53                                     10760     Count coming in to IF
    53              1                      10760             if (vChannelSelect = 0) then
    55              1                    ***0***             elsif(vChannelSelect = 1)then
    57              1                    ***0***             elsif(vChannelSelect = 2)then
    59              1                    ***0***             elsif(vChannelSelect = 3)then
    61              1                    ***0***             elsif(vChannelSelect = 4)then
    63              1                    ***0***             elsif(vChannelSelect = 5)then
    65              1                    ***0***             elsif(vChannelSelect = 6)then
    67              1                    ***0***             elsif(vChannelSelect = 7)then
    69              1                    ***0***             elsif(vChannelSelect = 8)then
    71              1                    ***0***             elsif(vChannelSelect = 9)then
    73              1                    ***0***             elsif(vChannelSelect = 10)then
    75              1                    ***0***             elsif(vChannelSelect = 11)then
    77              1                    ***0***             elsif(vChannelSelect = 12)then
    79              1                    ***0***             elsif(vChannelSelect = 13)then
    81              1                    ***0***             elsif(vChannelSelect = 14)then
    83              1                    ***0***             elsif(vChannelSelect = 15)then
    85              1                    ***0***             elsif(vChannelSelect = 16)then
    87              1                    ***0***             elsif(vChannelSelect = 17)then
    89              1                    ***0***             elsif(vChannelSelect = 18)then
    91              1                    ***0***             elsif(vChannelSelect = 19)then
    93              1                    ***0***             elsif(vChannelSelect = 20)then
    95              1                    ***0***             elsif(vChannelSelect = 21)then
    97              1                    ***0***             elsif(vChannelSelect = 22)then
    99              1                    ***0***             elsif(vChannelSelect = 23)then
    101             1                    ***0***             elsif(vChannelSelect = 24)then
    103             1                    ***0***             elsif(vChannelSelect = 25)then
    105             1                    ***0***             elsif(vChannelSelect = 26)then
    107             1                    ***0***             elsif(vChannelSelect = 27)then
    109             1                    ***0***             elsif(vChannelSelect = 28)then
    111             1                    ***0***             elsif(vChannelSelect = 29)then
    113             1                    ***0***             elsif(vChannelSelect = 30)then
    115             1                    ***0***             elsif(vChannelSelect = 31)then
    117             1                    ***0***             elsif(vChannelSelect = 32)then
    119             1                    ***0***             elsif(vChannelSelect = 33)then
    121             1                    ***0***             elsif(vChannelSelect = 34)then
    123             1                    ***0***             elsif(vChannelSelect = 35)then
    125             1                    ***0***             elsif(vChannelSelect = 36)then
    127             1                    ***0***             elsif(vChannelSelect = 37)then
    129             1                    ***0***             elsif(vChannelSelect = 38)then
    131             1                    ***0***             elsif(vChannelSelect = 39)then
    133             1                    ***0***             elsif(vChannelSelect = 40)then
    135             1                    ***0***             elsif(vChannelSelect = 41)then
    137             1                    ***0***             elsif(vChannelSelect = 42)then
    139             1                    ***0***             elsif(vChannelSelect = 43)then
    141             1                    ***0***             elsif(vChannelSelect = 44)then
    143             1                    ***0***             elsif(vChannelSelect = 45)then
    145             1                    ***0***             elsif(vChannelSelect = 46)then
    147             1                    ***0***             elsif(vChannelSelect = 47)then
    149             1                    ***0***             elsif(vChannelSelect = 48)then
    151             1                    ***0***             elsif(vChannelSelect = 49)then
    153             1                    ***0***             else
Branch totals: 1 hit of 51 branches = 1.9%

------------------------------------IF Branch------------------------------------
    188                                        8     Count coming in to IF
    188             1                          8         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    190                                        8     Count coming in to IF
    190             1                          8             if (eChannelSelect = 0) then
    192             1                    ***0***             else
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

COVERGROUP COVERAGE:
-----------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal    Status               
                                                                                              
-----------------------------------------------------------------------------------------------
 TYPE work.axi4s_if::axi4_cg                            46.1%        100    Uncovered            
    covered/total bins:                                    32        544                      
    missing/total bins:                                   512        544                      
    % Hit:                                               5.8%        100                      
    type_option.weight=1
    type_option.goal=100
    type_option.comment=
    type_option.strobe=0
    type_option.merge_instances=0
    Coverpoint axi4_cg::T_VALID                        100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
    Coverpoint axi4_cg::T_READY                        100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
    Coverpoint axi4_cg::CONSECUTIVE_TRANSACTIONS         0.6%        100    Uncovered            
        covered/total bins:                                 3        443                      
        missing/total bins:                               440        443                      
        % Hit:                                           0.6%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
    Coverpoint axi4_cg::TRANSACTION_WAITING              5.8%        100    Uncovered            
        covered/total bins:                                 1         17                      
        missing/total bins:                                16         17                      
        % Hit:                                           5.8%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
    Coverpoint axi4_cg::TRANSACTION_PAUSE                0.0%        100    ZERO                 
        covered/total bins:                                 0         31                      
        missing/total bins:                                31         31                      
        % Hit:                                           0.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
    Coverpoint axi4_cg::READY_WITHOUT_VALID             51.6%        100    Uncovered            
        covered/total bins:                                16         31                      
        missing/total bins:                                15         31                      
        % Hit:                                          51.6%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
    Coverpoint axi4_cg::TRANSITIONS                     35.7%        100    Uncovered            
        covered/total bins:                                 5         14                      
        missing/total bins:                                 9         14                      
        % Hit:                                          35.7%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
    Cross axi4_cg::CASES_VALID_READY                    75.0%        100    Uncovered            
        covered/total bins:                                 3          4                      
        missing/total bins:                                 1          4                      
        % Hit:                                          75.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
 Covergroup instance \/top/axi4s_vif/axi4               46.1%        100    Uncovered            
    covered/total bins:                                    32        544                      
    missing/total bins:                                   512        544                      
    % Hit:                                               5.8%        100                      
    option.name=\/top/axi4s_vif/axi4 
    option.weight=1
    option.goal=100
    option.comment=
    option.at_least=1
    option.auto_bin_max=64
    option.cross_num_print_missing=0
    option.detect_overlap=0
    option.per_instance=1
    option.get_inst_coverage=0
    Coverpoint T_VALID                                 100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.auto_bin_max=64
        option.detect_overlap=0
        bin auto[0]                                      9760          1    Covered              
        bin auto[1]                                      1000          1    Covered              
    Coverpoint T_READY                                 100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.auto_bin_max=64
        option.detect_overlap=0
        bin auto[0]                                         1          1    Covered              
        bin auto[1]                                     10659          1    Covered              
    Coverpoint CONSECUTIVE_TRANSACTIONS                  0.6%        100    Uncovered            
        covered/total bins:                                 3        443                      
        missing/total bins:                               440        443                      
        % Hit:                                           0.6%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.auto_bin_max=64
        option.detect_overlap=0
        bin transactions_single                           896          1    Covered              
        bin transactions_1_5[2=>3[*2]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*2]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*2]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*3]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*3]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*3]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*4]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*4]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*4]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*5]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*5]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*5]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*6]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*6]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*6]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*7]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*7]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*7]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*8]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*8]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*8]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*9]=>2]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*9]=>1]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*9]=>0]                   0          1    ZERO                 
        bin transactions_1_5[2=>3[*10]=>2]                  0          1    ZERO                 
        bin transactions_1_5[2=>3[*10]=>1]                  0          1    ZERO                 
        bin transactions_1_5[2=>3[*10]=>0]                  0          1    ZERO                 
        bin transactions_1_5[1=>3[*2]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*2]=>1]                  50          1    Covered              
        bin transactions_1_5[1=>3[*2]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*3]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*3]=>1]                   1          1    Covered              
        bin transactions_1_5[1=>3[*3]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*4]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*4]=>1]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*4]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*5]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*5]=>1]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*5]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*6]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*6]=>1]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*6]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*7]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*7]=>1]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*7]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*8]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*8]=>1]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*8]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*9]=>2]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*9]=>1]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*9]=>0]                   0          1    ZERO                 
        bin transactions_1_5[1=>3[*10]=>2]                  0          1    ZERO                 
        bin transactions_1_5[1=>3[*10]=>1]                  0          1    ZERO                 
        bin transactions_1_5[1=>3[*10]=>0]                  0          1    ZERO                 
        bin transactions_1_5[0=>3[*2]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*2]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*2]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*3]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*3]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*3]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*4]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*4]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*4]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*5]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*5]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*5]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*6]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*6]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*6]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*7]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*7]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*7]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*8]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*8]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*8]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*9]=>2]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*9]=>1]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*9]=>0]                   0          1    ZERO                 
        bin transactions_1_5[0=>3[*10]=>2]                  0          1    ZERO                 
        bin transactions_1_5[0=>3[*10]=>1]                  0          1    ZERO                 
        bin transactions_1_5[0=>3[*10]=>0]                  0          1    ZERO                 
        bin transactions_11_50[2=>3[*11]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*11]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*11]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*12]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*12]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*12]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*13]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*13]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*13]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*14]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*14]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*14]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*15]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*15]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*15]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*16]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*16]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*16]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*17]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*17]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*17]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*18]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*18]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*18]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*19]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*19]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*19]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*20]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*20]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*20]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*21]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*21]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*21]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*22]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*22]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*22]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*23]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*23]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*23]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*24]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*24]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*24]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*25]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*25]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*25]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*26]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*26]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*26]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*27]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*27]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*27]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*28]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*28]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*28]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*29]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*29]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*29]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*30]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*30]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*30]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*31]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*31]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*31]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*32]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*32]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*32]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*33]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*33]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*33]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*34]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*34]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*34]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*35]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*35]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*35]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*36]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*36]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*36]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*37]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*37]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*37]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*38]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*38]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*38]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*39]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*39]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*39]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*40]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*40]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*40]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*41]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*41]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*41]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*42]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*42]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*42]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*43]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*43]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*43]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*44]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*44]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*44]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*45]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*45]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*45]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*46]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*46]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*46]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*47]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*47]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*47]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*48]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*48]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*48]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*49]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*49]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*49]=>0]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*50]=>2]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*50]=>1]                0          1    ZERO                 
        bin transactions_11_50[2=>3[*50]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*11]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*11]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*11]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*12]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*12]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*12]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*13]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*13]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*13]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*14]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*14]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*14]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*15]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*15]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*15]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*16]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*16]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*16]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*17]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*17]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*17]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*18]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*18]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*18]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*19]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*19]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*19]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*20]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*20]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*20]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*21]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*21]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*21]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*22]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*22]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*22]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*23]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*23]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*23]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*24]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*24]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*24]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*25]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*25]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*25]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*26]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*26]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*26]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*27]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*27]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*27]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*28]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*28]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*28]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*29]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*29]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*29]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*30]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*30]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*30]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*31]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*31]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*31]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*32]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*32]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*32]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*33]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*33]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*33]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*34]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*34]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*34]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*35]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*35]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*35]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*36]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*36]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*36]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*37]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*37]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*37]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*38]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*38]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*38]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*39]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*39]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*39]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*40]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*40]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*40]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*41]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*41]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*41]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*42]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*42]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*42]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*43]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*43]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*43]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*44]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*44]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*44]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*45]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*45]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*45]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*46]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*46]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*46]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*47]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*47]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*47]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*48]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*48]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*48]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*49]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*49]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*49]=>0]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*50]=>2]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*50]=>1]                0          1    ZERO                 
        bin transactions_11_50[1=>3[*50]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*11]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*11]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*11]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*12]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*12]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*12]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*13]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*13]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*13]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*14]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*14]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*14]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*15]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*15]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*15]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*16]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*16]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*16]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*17]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*17]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*17]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*18]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*18]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*18]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*19]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*19]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*19]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*20]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*20]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*20]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*21]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*21]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*21]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*22]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*22]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*22]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*23]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*23]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*23]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*24]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*24]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*24]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*25]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*25]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*25]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*26]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*26]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*26]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*27]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*27]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*27]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*28]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*28]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*28]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*29]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*29]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*29]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*30]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*30]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*30]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*31]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*31]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*31]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*32]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*32]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*32]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*33]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*33]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*33]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*34]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*34]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*34]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*35]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*35]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*35]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*36]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*36]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*36]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*37]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*37]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*37]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*38]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*38]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*38]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*39]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*39]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*39]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*40]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*40]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*40]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*41]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*41]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*41]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*42]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*42]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*42]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*43]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*43]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*43]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*44]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*44]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*44]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*45]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*45]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*45]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*46]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*46]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*46]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*47]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*47]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*47]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*48]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*48]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*48]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*49]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*49]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*49]=>0]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*50]=>2]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*50]=>1]                0          1    ZERO                 
        bin transactions_11_50[0=>3[*50]=>0]                0          1    ZERO                 
        bin transactions_huge                               0          1    ZERO                 
    Coverpoint TRANSACTION_WAITING                       5.8%        100    Uncovered            
        covered/total bins:                                 1         17                      
        missing/total bins:                                16         17                      
        % Hit:                                           5.8%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.auto_bin_max=64
        option.detect_overlap=0
        illegal_bin illegal                                 0               ZERO                 
        bin zero_waiting_time                             948          1    Covered              
        bin low_waiting_time[2[*1]=>3]                      0          1    ZERO                 
        bin low_waiting_time[2[*2]=>3]                      0          1    ZERO                 
        bin low_waiting_time[2[*3]=>3]                      0          1    ZERO                 
        bin low_waiting_time[2[*4]=>3]                      0          1    ZERO                 
        bin low_waiting_time[2[*5]=>3]                      0          1    ZERO                 
        bin medium_waiting_time[2[*6]=>3]                   0          1    ZERO                 
        bin medium_waiting_time[2[*7]=>3]                   0          1    ZERO                 
        bin medium_waiting_time[2[*8]=>3]                   0          1    ZERO                 
        bin medium_waiting_time[2[*9]=>3]                   0          1    ZERO                 
        bin medium_waiting_time[2[*10]=>3]                  0          1    ZERO                 
        bin medium_waiting_time[2[*11]=>3]                  0          1    ZERO                 
        bin medium_waiting_time[2[*12]=>3]                  0          1    ZERO                 
        bin medium_waiting_time[2[*13]=>3]                  0          1    ZERO                 
        bin medium_waiting_time[2[*14]=>3]                  0          1    ZERO                 
        bin medium_waiting_time[2[*15]=>3]                  0          1    ZERO                 
        bin high_waiting_time                               0          1    ZERO                 
    Coverpoint TRANSACTION_PAUSE                         0.0%        100    ZERO                 
        covered/total bins:                                 0         31                      
        missing/total bins:                                31         31                      
        % Hit:                                           0.0%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.auto_bin_max=64
        option.detect_overlap=0
        bin low_waiting_time[3=>0[*1]=>3]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*1]=>2]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*2]=>3]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*2]=>2]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*3]=>3]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*3]=>2]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*4]=>3]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*4]=>2]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*5]=>3]                   0          1    ZERO                 
        bin low_waiting_time[3=>0[*5]=>2]                   0          1    ZERO                 
        bin medium_waiting_time[3=>0[*6]=>3]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*6]=>2]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*7]=>3]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*7]=>2]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*8]=>3]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*8]=>2]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*9]=>3]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*9]=>2]                0          1    ZERO                 
        bin medium_waiting_time[3=>0[*10]=>3]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*10]=>2]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*11]=>3]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*11]=>2]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*12]=>3]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*12]=>2]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*13]=>3]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*13]=>2]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*14]=>3]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*14]=>2]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*15]=>3]               0          1    ZERO                 
        bin medium_waiting_time[3=>0[*15]=>2]               0          1    ZERO                 
        bin high_waiting_time                               0          1    ZERO                 
    Coverpoint READY_WITHOUT_VALID                      51.6%        100    Uncovered            
        covered/total bins:                                16         31                      
        missing/total bins:                                15         31                      
        % Hit:                                          51.6%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.auto_bin_max=64
        option.detect_overlap=0
        bin short_ready_time[1[*1]=>3]                    948          1    Covered              
        bin short_ready_time[1[*1]=>0]                      0          1    ZERO                 
        bin short_ready_time[1[*2]=>3]                    905          1    Covered              
        bin short_ready_time[1[*2]=>0]                      0          1    ZERO                 
        bin short_ready_time[1[*3]=>3]                    857          1    Covered              
        bin short_ready_time[1[*3]=>0]                      0          1    ZERO                 
        bin short_ready_time[1[*4]=>3]                    807          1    Covered              
        bin short_ready_time[1[*4]=>0]                      0          1    ZERO                 
        bin short_ready_time[1[*5]=>3]                    760          1    Covered              
        bin short_ready_time[1[*5]=>0]                      0          1    ZERO                 
        bin medium_ready_time[1[*6]=>3]                   710          1    Covered              
        bin medium_ready_time[1[*6]=>0]                     0          1    ZERO                 
        bin medium_ready_time[1[*7]=>3]                   663          1    Covered              
        bin medium_ready_time[1[*7]=>0]                     0          1    ZERO                 
        bin medium_ready_time[1[*8]=>3]                   609          1    Covered              
        bin medium_ready_time[1[*8]=>0]                     0          1    ZERO                 
        bin medium_ready_time[1[*9]=>3]                   563          1    Covered              
        bin medium_ready_time[1[*9]=>0]                     0          1    ZERO                 
        bin medium_ready_time[1[*10]=>3]                  523          1    Covered              
        bin medium_ready_time[1[*10]=>0]                    0          1    ZERO                 
        bin medium_ready_time[1[*11]=>3]                  474          1    Covered              
        bin medium_ready_time[1[*11]=>0]                    0          1    ZERO                 
        bin medium_ready_time[1[*12]=>3]                  417          1    Covered              
        bin medium_ready_time[1[*12]=>0]                    0          1    ZERO                 
        bin medium_ready_time[1[*13]=>3]                  362          1    Covered              
        bin medium_ready_time[1[*13]=>0]                    0          1    ZERO                 
        bin medium_ready_time[1[*14]=>3]                  301          1    Covered              
        bin medium_ready_time[1[*14]=>0]                    0          1    ZERO                 
        bin medium_ready_time[1[*15]=>3]                  250          1    Covered              
        bin medium_ready_time[1[*15]=>0]                    0          1    ZERO                 
        bin high_ready_time                               205          1    Covered              
    Coverpoint TRANSITIONS                              35.7%        100    Uncovered            
        covered/total bins:                                 5         14                      
        missing/total bins:                                 9         14                      
        % Hit:                                          35.7%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.auto_bin_max=64
        option.detect_overlap=0
        bin transition[3=>3]                               52          1    Covered              
        bin transition[3=>2]                                0          1    ZERO                 
        bin transition[3=>1]                              947          1    Covered              
        bin transition[3=>0]                                0          1    ZERO                 
        bin transition[1=>3]                              948          1    Covered              
        bin transition[1=>2]                                0          1    ZERO                 
        bin transition[1=>1]                             8711          1    Covered              
        bin transition[1=>0]                                0          1    ZERO                 
        bin transition[0=>3]                                0          1    ZERO                 
        bin transition[0=>2]                                0          1    ZERO                 
        bin transition[0=>1]                                1          1    Covered              
        bin transition[0=>0]                                0          1    ZERO                 
        bin transition[2=>3]                                0          1    ZERO                 
        bin transition[2=>2]                                0          1    ZERO                 
    Cross CASES_VALID_READY                             75.0%        100    Uncovered            
        covered/total bins:                                 3          4                      
        missing/total bins:                                 1          4                      
        % Hit:                                          75.0%        100                      
        option.weight=1
        option.goal=100
        option.comment=
        option.at_least=1
        option.cross_num_print_missing=0
        bin <auto[0],auto[0]>                               1          1    Covered              
        bin <auto[0],auto[1]>                            9659          1    Covered              
        bin <auto[1],auto[1]>                            1000          1    Covered              
        bin <auto[1],auto[0]>                               0          1    ZERO                 

TOTAL COVERGROUP COVERAGE: 46.1%  COVERGROUP TYPES: 1

ASSERTION RESULTS:
-------------------------------------------------------
Name                 File(Line)           Failure Pass 
                                          Count   Count 
-------------------------------------------------------
work.axi4_stream_master_agent_pkg::axi4_stream_master_sequence/body/#ublk#13123591#27/immed__30
                     ../../uvmtb/tb/env/system_env/../axi4_stream_env/../../agent/sequence/axi4_stream_master_sequence.svh(30)       0     1
work.axi4_stream_pkg::axi4_stream_test/run_phase/immed__39
                     ../../uvmtb/tb/env/system_env/../axi4_stream_env/../../test/axi4_stream/axi4_stream_test.sv(39)       0     1
work.fixed_pkg::\=#immed__3971\
                     ../../uvmtb/dut/src/float_and_fixed_pkg/fixed_pkg_c.vhd(3971)       6     0
work.fixed_pkg::cleanvec#immed__2070
                     ../../uvmtb/dut/src/float_and_fixed_pkg/fixed_pkg_c.vhd(2070)       0     1
work.fixed_pkg::cleanvec#immed__2055
                     ../../uvmtb/dut/src/float_and_fixed_pkg/fixed_pkg_c.vhd(2055)       0     1
work.axi4s_if::chk_valid_hold
                     ../../uvmtb/tb/top/system_top/../../interfaces/axi4s_if.sv(90)       0     0
work.axi4s_if::chk_data_hold
                     ../../uvmtb/tb/top/system_top/../../interfaces/axi4s_if.sv(137)       0     0
work.axi4s_if::chk_user_hold
                     ../../uvmtb/tb/top/system_top/../../interfaces/axi4s_if.sv(138)       0     0

Total Coverage By Design Unit (filtered view): 33.2%

